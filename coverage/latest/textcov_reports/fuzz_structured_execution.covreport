_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   816k|        {
  169|   816k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   816k|            switch (index.unsafe())
  172|   816k|            {
  173|   336k|                case 0:
  ------------------
  |  Branch (173:17): [True: 336k, False: 480k]
  ------------------
  174|   336k|                    return m_Arg1Type;
  175|       |
  176|   245k|                case 1:
  ------------------
  |  Branch (176:17): [True: 245k, False: 570k]
  ------------------
  177|   245k|                    return m_Arg2Type;
  178|       |
  179|   234k|                case 2:
  ------------------
  |  Branch (179:17): [True: 234k, False: 581k]
  ------------------
  180|   234k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 816k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   816k|#endif
  187|   816k|            }
  188|   816k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   211k|        {
  195|   211k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   211k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 209k, False: 1.92k]
  ------------------
  199|   209k|            {
  200|   209k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   209k|            }
  202|   211k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 176k, False: 35.1k]
  ------------------
  203|   176k|            {
  204|   176k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   176k|            }
  206|   211k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 129k, False: 82.8k]
  ------------------
  207|   129k|            {
  208|   129k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   129k|            }
  210|       |
  211|   211k|            return number_of_argument_required;
  212|   211k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  13.1M|        {
  216|  13.1M|            return m_RegisterAccessType;
  217|  13.1M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   211k|        {
  221|   211k|            return m_Executor;
  222|   211k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  39.4M|    {
   38|  39.4M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  39.4M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  39.4M|                                         static_cast<underlying_t>(rhs));
   42|  39.4M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  39.4M|    {
   55|  39.4M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  39.4M|        return static_cast<underlying_t>(type & test) != 0;
   58|  39.4M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   683k|    {
  204|   683k|        switch (value)
  205|   683k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   291k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   291k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 291k, False: 392k]
  |  |  |  |  ------------------
  |  |  |  |  208|   291k|        return #name;
  |  |  ------------------
  |  |   16|   291k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  26.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 26.0k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  26.0k|        return #name;
  |  |  ------------------
  |  |   17|  26.0k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.62k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.62k|        return #name;
  |  |  ------------------
  |  |   18|  14.5k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  14.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.5k, False: 669k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.5k|        return #name;
  |  |  ------------------
  |  |   19|  14.5k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.16k, False: 678k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.16k|        return #name;
  |  |  ------------------
  |  |   20|  5.16k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.25k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.25k|        return #name;
  |  |  ------------------
  |  |   21|  4.25k|                                                                                                   \
  |  |   22|  4.25k|    /* Sub */                                                                                      \
  |  |   23|  7.58k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.58k, False: 676k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.58k|        return #name;
  |  |  ------------------
  |  |   24|  7.58k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.97k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.97k|        return #name;
  |  |  ------------------
  |  |   25|  9.21k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  9.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.21k, False: 674k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.21k|        return #name;
  |  |  ------------------
  |  |   26|  9.21k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    432|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 432, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    432|        return #name;
  |  |  ------------------
  |  |   27|  4.85k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.85k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.85k|        return #name;
  |  |  ------------------
  |  |   28|  4.85k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.40k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.40k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.40k|        return #name;
  |  |  ------------------
  |  |   29|  2.40k|                                                                                                   \
  |  |   30|  2.40k|    /* Multiplication */                                                                           \
  |  |   31|  2.40k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.86k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.86k|        return #name;
  |  |  ------------------
  |  |   32|  3.27k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.27k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.27k|        return #name;
  |  |  ------------------
  |  |   33|  3.27k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.52k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.52k|        return #name;
  |  |  ------------------
  |  |   34|  2.52k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.68k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.68k|        return #name;
  |  |  ------------------
  |  |   35|  3.95k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.95k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.95k|        return #name;
  |  |  ------------------
  |  |   36|  3.95k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.89k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.89k|        return #name;
  |  |  ------------------
  |  |   37|  2.89k|                                                                                                   \
  |  |   38|  2.89k|    /* Division */                                                                                 \
  |  |   39|  2.89k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    223|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 223, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    223|        return #name;
  |  |  ------------------
  |  |   40|    223|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    153|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 153, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    153|        return #name;
  |  |  ------------------
  |  |   41|    401|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    401|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 401, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    401|        return #name;
  |  |  ------------------
  |  |   42|  3.88k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.88k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.88k|        return #name;
  |  |  ------------------
  |  |   43|  3.88k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.31k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.31k|        return #name;
  |  |  ------------------
  |  |   44|  2.31k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    877|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 877, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    877|        return #name;
  |  |  ------------------
  |  |   45|    877|                                                                                                   \
  |  |   46|    877|    /* Shift left (logical) */                                                                     \
  |  |   47|  3.18k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.18k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.18k|        return #name;
  |  |  ------------------
  |  |   48|  3.18k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    396|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 396, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    396|        return #name;
  |  |  ------------------
  |  |   49|    396|                                                                                                   \
  |  |   50|    396|    /* Shift right (logical) */                                                                    \
  |  |   51|  15.9k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  15.9k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15.9k, False: 668k]
  |  |  |  |  ------------------
  |  |  |  |  208|  15.9k|        return #name;
  |  |  ------------------
  |  |   52|  15.9k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  15.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15.4k, False: 668k]
  |  |  |  |  ------------------
  |  |  |  |  208|  15.4k|        return #name;
  |  |  ------------------
  |  |   53|  15.4k|                                                                                                   \
  |  |   54|  15.4k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  15.4k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.25k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.25k|        return #name;
  |  |  ------------------
  |  |   56|  1.25k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    498|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 498, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    498|        return #name;
  |  |  ------------------
  |  |   57|    498|                                                                                                   \
  |  |   58|    498|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    498|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    161|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 161, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    161|        return #name;
  |  |  ------------------
  |  |   60|  3.85k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.85k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.85k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.85k|        return #name;
  |  |  ------------------
  |  |   61|  3.85k|                                                                                                   \
  |  |   62|  3.85k|    /* Logic */                                                                                    \
  |  |   63|  3.85k|                                                                                                   \
  |  |   64|  3.85k|    /* And */                                                                                      \
  |  |   65|  3.85k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.60k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.60k|        return #name;
  |  |  ------------------
  |  |   66|  21.6k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  21.6k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 21.6k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  21.6k|        return #name;
  |  |  ------------------
  |  |   67|  21.6k|                                                                                                   \
  |  |   68|  21.6k|    /* Or */                                                                                       \
  |  |   69|  21.6k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 224, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    224|        return #name;
  |  |  ------------------
  |  |   70|    224|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    188|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 188, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    188|        return #name;
  |  |  ------------------
  |  |   71|    188|                                                                                                   \
  |  |   72|    188|    /* XOR */                                                                                      \
  |  |   73|  2.83k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.83k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.83k|        return #name;
  |  |  ------------------
  |  |   74|  4.43k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.43k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.43k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.43k|        return #name;
  |  |  ------------------
  |  |   75|  4.43k|                                                                                                   \
  |  |   76|  4.43k|    /* Set conditionals */                                                                         \
  |  |   77|  4.43k|                                                                                                   \
  |  |   78|  4.43k|    /* Less than */                                                                                \
  |  |   79|  4.43k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    737|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 737, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    737|        return #name;
  |  |  ------------------
  |  |   80|  2.83k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.83k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.83k|        return #name;
  |  |  ------------------
  |  |   81|  2.83k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    374|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 374, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    374|        return #name;
  |  |  ------------------
  |  |   82|  1.81k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.81k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.81k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.81k|        return #name;
  |  |  ------------------
  |  |   83|  1.81k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    632|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 632, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    632|        return #name;
  |  |  ------------------
  |  |   84|  1.26k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.26k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.26k|        return #name;
  |  |  ------------------
  |  |   85|  1.26k|                                                                                                   \
  |  |   86|  1.26k|    /* Greater than */                                                                             \
  |  |   87|  4.02k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.02k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.02k|        return #name;
  |  |  ------------------
  |  |   88|  4.02k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    680|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 680, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    680|        return #name;
  |  |  ------------------
  |  |   89|  3.53k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.53k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.53k|        return #name;
  |  |  ------------------
  |  |   90|  3.53k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    995|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 995, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|    995|        return #name;
  |  |  ------------------
  |  |   91|  7.35k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.35k, False: 676k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.35k|        return #name;
  |  |  ------------------
  |  |   92|  7.35k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.09k, False: 678k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.09k|        return #name;
  |  |  ------------------
  |  |   93|  5.09k|                                                                                                   \
  |  |   94|  5.09k|    /* Less than or equal */                                                                       \
  |  |   95|  5.09k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.20k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.20k|        return #name;
  |  |  ------------------
  |  |   96|  2.20k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |   97|  1.23k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    906|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 906, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    906|        return #name;
  |  |  ------------------
  |  |   98|  1.72k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.72k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.72k|        return #name;
  |  |  ------------------
  |  |   99|  1.72k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.34k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.34k|        return #name;
  |  |  ------------------
  |  |  100|  3.25k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.25k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.25k|        return #name;
  |  |  ------------------
  |  |  101|  3.25k|                                                                                                   \
  |  |  102|  3.25k|    /* Greater than or equal */                                                                    \
  |  |  103|  5.15k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.15k, False: 678k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.15k|        return #name;
  |  |  ------------------
  |  |  104|  10.7k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  10.7k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.7k, False: 673k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.7k|        return #name;
  |  |  ------------------
  |  |  105|  10.7k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    510|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 510, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    510|        return #name;
  |  |  ------------------
  |  |  106|  2.80k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.80k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.80k|        return #name;
  |  |  ------------------
  |  |  107|  2.80k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 88, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|     88|        return #name;
  |  |  ------------------
  |  |  108|  1.32k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.32k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.32k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.32k|        return #name;
  |  |  ------------------
  |  |  109|  1.32k|                                                                                                   \
  |  |  110|  1.32k|    /* Equal */                                                                                    \
  |  |  111|  1.39k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.39k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.39k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.39k|        return #name;
  |  |  ------------------
  |  |  112|  3.44k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.44k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.44k|        return #name;
  |  |  ------------------
  |  |  113|  5.30k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.30k, False: 678k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.30k|        return #name;
  |  |  ------------------
  |  |  114|  5.30k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.37k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.37k|        return #name;
  |  |  ------------------
  |  |  115|  4.37k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.20k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.20k|        return #name;
  |  |  ------------------
  |  |  116|  4.20k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    328|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 328, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    328|        return #name;
  |  |  ------------------
  |  |  117|    328|                                                                                                   \
  |  |  118|    328|    /* Not equal */                                                                                \
  |  |  119|  18.5k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  18.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 18.5k, False: 665k]
  |  |  |  |  ------------------
  |  |  |  |  208|  18.5k|        return #name;
  |  |  ------------------
  |  |  120|  18.5k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 519, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    519|        return #name;
  |  |  ------------------
  |  |  121|    519|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    334|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 334, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    334|        return #name;
  |  |  ------------------
  |  |  122|    617|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    617|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 617, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    617|        return #name;
  |  |  ------------------
  |  |  123|    617|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    476|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 476, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    476|        return #name;
  |  |  ------------------
  |  |  124|    476|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    231|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 231, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    231|        return #name;
  |  |  ------------------
  |  |  125|    231|                                                                                                   \
  |  |  126|    231|    /* Conditional branching */                                                                    \
  |  |  127|    553|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    553|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 553, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    553|        return #name;
  |  |  ------------------
  |  |  128|    553|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    445|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 445, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    445|        return #name;
  |  |  ------------------
  |  |  129|  1.27k|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.27k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.27k|        return #name;
  |  |  ------------------
  |  |  130|  11.4k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.4k, False: 672k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.4k|        return #name;
  |  |  ------------------
  |  |  131|  11.4k|                                                                                                   \
  |  |  132|  11.4k|    /* Unconditional branching */                                                                  \
  |  |  133|  11.4k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|  2.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.86k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.86k|        return #name;
  |  |  ------------------
  |  |  134|  2.86k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 102, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    102|        return #name;
  |  |  ------------------
  |  |  135|  8.51k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  8.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.51k, False: 675k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.51k|        return #name;
  |  |  ------------------
  |  |  136|  15.3k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  15.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15.3k, False: 668k]
  |  |  |  |  ------------------
  |  |  |  |  208|  15.3k|        return #name;
  |  |  ------------------
  |  |  137|  15.3k|                                                                                                   \
  |  |  138|  15.3k|    /* Loading data */                                                                             \
  |  |  139|  15.3k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.44k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.44k|        return #name;
  |  |  ------------------
  |  |  140|  2.44k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    681|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 681, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    681|        return #name;
  |  |  ------------------
  |  |  141|    681|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    192|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 192, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    192|        return #name;
  |  |  ------------------
  |  |  142|    458|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    458|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 458, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    458|        return #name;
  |  |  ------------------
  |  |  143|  13.3k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  13.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 13.3k, False: 670k]
  |  |  |  |  ------------------
  |  |  |  |  208|  13.3k|        return #name;
  |  |  ------------------
  |  |  144|  13.3k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  4.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.65k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.65k|        return #name;
  |  |  ------------------
  |  |  145|  4.65k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    496|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 496, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    496|        return #name;
  |  |  ------------------
  |  |  146|  1.03k|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.03k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.03k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.03k|        return #name;
  |  |  ------------------
  |  |  147|  3.44k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.44k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.44k|        return #name;
  |  |  ------------------
  |  |  148|  3.44k|                                                                                                   \
  |  |  149|  3.44k|    /* Storing data */                                                                             \
  |  |  150|  3.44k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.44k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.44k|        return #name;
  |  |  ------------------
  |  |  151|  1.44k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    346|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 346, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    346|        return #name;
  |  |  ------------------
  |  |  152|    519|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 519, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    519|        return #name;
  |  |  ------------------
  |  |  153|  4.69k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.69k, False: 679k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.69k|        return #name;
  |  |  ------------------
  |  |  154|  4.69k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    195|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 195, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    195|        return #name;
  |  |  ------------------
  |  |  155|  3.48k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.48k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.48k|        return #name;
  |  |  ------------------
  |  |  156|  10.8k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  10.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.8k, False: 673k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.8k|        return #name;
  |  |  ------------------
  |  |  157|  10.8k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.25k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.25k|        return #name;
  |  |  ------------------
  |  |  158|  1.25k|                                                                                                   \
  |  |  159|  1.25k|    /* Moving data */                                                                              \
  |  |  160|  1.25k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    677|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 677, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    677|        return #name;
  |  |  ------------------
  |  |  161|    677|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    139|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 139, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    139|        return #name;
  |  |  ------------------
  |  |  162|  2.78k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  2.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.78k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.78k|        return #name;
  |  |  ------------------
  |  |  163|  8.93k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  8.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.93k, False: 675k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.93k|        return #name;
  |  |  ------------------
  |  |  164|  8.93k|                                                                                                   \
  |  |  165|  8.93k|    /* Converting data */                                                                          \
  |  |  166|  8.93k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    342|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 342, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    342|        return #name;
  |  |  ------------------
  |  |  167|    342|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    334|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 334, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    334|        return #name;
  |  |  ------------------
  |  |  168|    334|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    177|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 177, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    177|        return #name;
  |  |  ------------------
  |  |  169|  3.27k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  3.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.27k, False: 680k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.27k|        return #name;
  |  |  ------------------
  |  |  170|  3.27k|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    156|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 156, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    156|        return #name;
  |  |  ------------------
  |  |  171|    429|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    429|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 429, False: 683k]
  |  |  |  |  ------------------
  |  |  |  |  208|    429|        return #name;
  |  |  ------------------
  |  |  172|    429|                                                                                                   \
  |  |  173|    429|    /* Other */                                                                                    \
  |  |  174|  2.78k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.78k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.78k|        return #name;
  |  |  ------------------
  |  |  175|  2.78k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.67k, False: 681k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.67k|        return #name;
  |  |  ------------------
  |  |  176|  2.67k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.07k, False: 682k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.07k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 683k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   683k|        }
  217|   683k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  47.0k|    {
   32|  47.0k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 2.26k, False: 44.7k]
  ------------------
   33|  2.26k|        {
   34|  2.26k|            return true;
   35|  2.26k|        }
   36|       |
   37|  44.7k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 649, False: 44.1k]
  ------------------
   38|    649|        {
   39|    649|            return true;
   40|    649|        }
   41|       |
   42|  44.1k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 1.30k, False: 42.8k]
  ------------------
   43|  1.30k|        {
   44|  1.30k|            return true;
   45|  1.30k|        }
   46|       |
   47|  42.8k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 42.8k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  42.8k|        return false;
   53|  42.8k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  42.8k|    {
   57|  42.8k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 42.8k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  42.8k|        const char first_char = token.at(0);
   63|       |
   64|  42.8k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 1.30k, False: 41.4k]
  ------------------
   65|  1.30k|        {
   66|  1.30k|            return phi::is_alpha(first_char);
   67|  1.30k|        }
   68|       |
   69|  41.4k|        phi::boolean just_under_scores = (first_char == '_');
   70|  41.4k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 6.02k, False: 35.4k]
  |  Branch (70:15): [True: 35.0k, False: 6.40k]
  |  Branch (70:44): [True: 378, False: 6.02k]
  ------------------
   71|  6.02k|        {
   72|  6.02k|            return false;
   73|  6.02k|        }
   74|       |
   75|   266k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 239k, False: 26.5k]
  ------------------
   76|   239k|        {
   77|   239k|            const char c{token.at(index)};
   78|       |
   79|   239k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 92.0k, False: 147k]
  ------------------
   80|  92.0k|            {
   81|  92.0k|                just_under_scores = false;
   82|  92.0k|            }
   83|   147k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 138k, False: 8.88k]
  ------------------
   84|   138k|            {
   85|   138k|                continue;
   86|   138k|            }
   87|  8.88k|            else
   88|  8.88k|            {
   89|  8.88k|                return false;
   90|  8.88k|            }
   91|   239k|        }
   92|       |
   93|  26.5k|        return !just_under_scores;
   94|  35.4k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.17M|    {
  101|  1.17M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.17M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.17M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 68.6k, False: 1.10M]
  ------------------
  107|  68.6k|        {
  108|  68.6k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 39.7k, False: 28.8k]
  ------------------
  109|  39.7k|            {
  110|  39.7k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  39.7k|            }
  112|       |
  113|  28.8k|            return {};
  114|  68.6k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.10M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 183, False: 1.10M]
  ------------------
  118|    183|        {
  119|    183|            return {};
  120|    183|        }
  121|       |
  122|  1.10M|        std::int32_t number{0};
  123|  1.10M|        phi::boolean is_negative{false};
  124|  1.10M|        phi::boolean starts_with_zero{false};
  125|  1.10M|        phi::boolean parsing_binary{false};
  126|  1.10M|        phi::boolean parsing_octal{false};
  127|  1.10M|        phi::boolean parsing_hexadecimal{false};
  128|  1.10M|        phi::boolean parsed_something{false};
  129|  1.10M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.22M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.21M, False: 14.8k]
  ------------------
  134|  1.21M|        {
  135|  1.21M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.21M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.10M, False: 106k]
  ------------------
  139|  1.10M|            {
  140|  1.10M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 1.23k, False: 1.10M]
  ------------------
  141|  1.23k|                {
  142|  1.23k|                    continue;
  143|  1.23k|                }
  144|       |
  145|  1.10M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 1.01k, False: 1.10M]
  ------------------
  146|  1.01k|                {
  147|  1.01k|                    is_negative = true;
  148|  1.01k|                    continue;
  149|  1.01k|                }
  150|       |
  151|  1.10M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 45.6k, False: 1.05M]
  ------------------
  152|  45.6k|                {
  153|  45.6k|                    starts_with_zero = true;
  154|  45.6k|                    continue;
  155|  45.6k|                }
  156|       |
  157|  1.05M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 127, False: 1.05M]
  ------------------
  158|    127|                {
  159|    127|                    return {};
  160|    127|                }
  161|  1.05M|            }
  162|       |
  163|       |            // Second character
  164|  1.16M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 48.7k, False: 1.11M]
  ------------------
  165|  48.7k|            {
  166|  48.7k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 45.6k, False: 3.13k]
  ------------------
  167|  45.6k|                {
  168|       |                    // Binary
  169|  45.6k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 3.83k, False: 41.8k]
  |  Branch (169:37): [True: 3.96k, False: 37.8k]
  ------------------
  170|  7.79k|                    {
  171|  7.79k|                        parsing_binary = true;
  172|  7.79k|                        continue;
  173|  7.79k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  37.8k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 4.76k, False: 33.1k]
  |  Branch (176:37): [True: 1.81k, False: 31.2k]
  ------------------
  177|  6.57k|                    {
  178|  6.57k|                        parsing_hexadecimal = true;
  179|  6.57k|                        continue;
  180|  6.57k|                    }
  181|       |
  182|       |                    // Octal
  183|  31.2k|                    parsing_octal = true;
  184|  31.2k|                }
  185|  48.7k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.15M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 158, False: 1.15M]
  ------------------
  189|    158|            {
  190|    158|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 92]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     92|                parsed_separator = true;
  196|     92|                continue;
  197|    158|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.15M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 1.03k, False: 1.15M]
  |  Branch (200:32): [True: 0, False: 1.03k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  1.15M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.15M, False: 1.03k]
  |  Branch (205:17): [True: 0, False: 1.15M]
  |  Branch (205:33): [True: 0, False: 1.15M]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  1.15M|            parsed_separator = false;
  212|  1.15M|            parsed_something = true;
  213|       |
  214|  1.15M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 10.3k, False: 1.14M]
  ------------------
  215|  10.3k|            {
  216|  10.3k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 4.32k, False: 6.03k]
  ------------------
  217|  4.32k|                {
  218|  4.32k|                    return {};
  219|  4.32k|                }
  220|       |
  221|  6.03k|                number <<= 1;
  222|  6.03k|                number |= (c - '0');
  223|  6.03k|            }
  224|  1.14M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 69.3k, False: 1.07M]
  ------------------
  225|  69.3k|            {
  226|  69.3k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 22.6k, False: 46.6k]
  ------------------
  227|  22.6k|                {
  228|  22.6k|                    return {};
  229|  22.6k|                }
  230|       |
  231|  46.6k|                number <<= 3;
  232|  46.6k|                number |= (c - '0');
  233|  46.6k|            }
  234|  1.07M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 9.15k, False: 1.06M]
  ------------------
  235|  9.15k|            {
  236|  9.15k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 4.33k, False: 4.81k]
  ------------------
  237|  4.33k|                {
  238|  4.33k|                    return {};
  239|  4.33k|                }
  240|       |
  241|  4.81k|                number <<= 4;
  242|  4.81k|                number |= phi::hex_digit_value(c).unsafe();
  243|  4.81k|            }
  244|  1.06M|            else
  245|  1.06M|            {
  246|  1.06M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.06M, False: 2.69k]
  ------------------
  247|  1.06M|                {
  248|  1.06M|                    return {};
  249|  1.06M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  2.69k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.08k, False: 611]
  |  Branch (252:36): [True: 947, False: 1.13k]
  ------------------
  253|    947|                {
  254|    947|                    return {};
  255|    947|                }
  256|       |
  257|  1.75k|                number *= 10;
  258|  1.75k|                number += (c - '0');
  259|  1.75k|            }
  260|  1.15M|        }
  261|       |
  262|  14.8k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 13.2k, False: 1.51k]
  ------------------
  263|  13.2k|        {
  264|       |            // Check for over/underflow
  265|  13.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 251, False: 13.0k]
  |  Branch (265:32): [True: 0, False: 251]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  13.2k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 13.0k, False: 251]
  |  Branch (270:17): [True: 0, False: 13.2k]
  |  Branch (270:33): [True: 0, False: 13.0k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  13.2k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 251, False: 13.0k]
  ------------------
  277|    251|            {
  278|    251|                return static_cast<std::int16_t>(-number);
  279|    251|            }
  280|       |
  281|  13.0k|            return static_cast<std::int16_t>(number);
  282|  13.2k|        }
  283|       |
  284|  1.51k|        return {};
  285|  14.8k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   130k|    {
   96|   130k|        switch (value)
   97|   130k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  23.5k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  23.5k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 23.5k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  100|  23.5k|        return #name;
  |  |  ------------------
  |  |   14|  55.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  55.1k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 55.1k, False: 75.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  55.1k|        return #name;
  |  |  ------------------
  |  |   15|  55.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    499|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 499, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    499|        return #name;
  |  |  ------------------
  |  |   16|  13.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  13.1k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13.1k, False: 117k]
  |  |  |  |  ------------------
  |  |  |  |  100|  13.1k|        return #name;
  |  |  ------------------
  |  |   17|  13.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    830|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 830, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    830|        return #name;
  |  |  ------------------
  |  |   18|  2.99k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.99k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.99k, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.99k|        return #name;
  |  |  ------------------
  |  |   19|  2.99k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    141|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 141, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|    141|        return #name;
  |  |  ------------------
  |  |   20|    141|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     27|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 27, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     27|        return #name;
  |  |  ------------------
  |  |   21|  1.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.24k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.24k, False: 128k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.24k|        return #name;
  |  |  ------------------
  |  |   22|  1.24k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    412|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 412, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    412|        return #name;
  |  |  ------------------
  |  |   23|    412|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    153|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 153, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|    153|        return #name;
  |  |  ------------------
  |  |   24|    296|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    296|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 296, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    296|        return #name;
  |  |  ------------------
  |  |   25|    296|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   26|    654|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    654|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 654, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    654|        return #name;
  |  |  ------------------
  |  |   27|    654|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|  1.39k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.39k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.39k, False: 128k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.39k|        return #name;
  |  |  ------------------
  |  |   29|  12.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  12.1k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12.1k, False: 118k]
  |  |  |  |  ------------------
  |  |  |  |  100|  12.1k|        return #name;
  |  |  ------------------
  |  |   30|  12.1k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    347|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 347, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    347|        return #name;
  |  |  ------------------
  |  |   31|    347|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    154|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 154, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|    154|        return #name;
  |  |  ------------------
  |  |   32|    154|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   33|  1.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.22k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.22k, False: 128k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.22k|        return #name;
  |  |  ------------------
  |  |   34|  1.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    965|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 965, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|    965|        return #name;
  |  |  ------------------
  |  |   35|    965|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|      3|        return #name;
  |  |  ------------------
  |  |   36|  2.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.71k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.71k, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.71k|        return #name;
  |  |  ------------------
  |  |   37|  2.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     41|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 41, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     41|        return #name;
  |  |  ------------------
  |  |   38|     41|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 28, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     28|        return #name;
  |  |  ------------------
  |  |   39|  1.49k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.49k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.49k, False: 128k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.49k|        return #name;
  |  |  ------------------
  |  |   40|  3.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.85k, False: 126k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.85k|        return #name;
  |  |  ------------------
  |  |   41|  3.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     28|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 28, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     28|        return #name;
  |  |  ------------------
  |  |   42|     38|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     38|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 38, False: 130k]
  |  |  |  |  ------------------
  |  |  |  |  100|     38|        return #name;
  |  |  ------------------
  |  |   43|  5.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.41k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.41k, False: 124k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.41k|        return #name;
  |  |  ------------------
  |  |   44|  5.41k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  1.19k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.19k, False: 129k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.19k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 130k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   130k|        }
  109|   130k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  41.8k|    {
  131|  41.8k|        switch (value)
  132|  41.8k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  4.61k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.61k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.61k, False: 37.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.61k|        return #name;
  |  |  ------------------
  |  |   48|  4.61k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.57k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.57k, False: 40.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.57k|        return #name;
  |  |  ------------------
  |  |   49|  1.57k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 24, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     24|        return #name;
  |  |  ------------------
  |  |   50|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   51|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 24, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     24|        return #name;
  |  |  ------------------
  |  |   52|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   53|     64|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     64|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 64, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     64|        return #name;
  |  |  ------------------
  |  |   54|     64|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   55|  1.05k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.05k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.05k, False: 40.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.05k|        return #name;
  |  |  ------------------
  |  |   56|  1.44k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.44k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.44k, False: 40.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.44k|        return #name;
  |  |  ------------------
  |  |   57|  1.44k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     75|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 75, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     75|        return #name;
  |  |  ------------------
  |  |   58|     75|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   59|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   60|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     27|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 27, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     27|        return #name;
  |  |  ------------------
  |  |   61|     27|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   62|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   63|  1.07k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.07k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.07k, False: 40.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.07k|        return #name;
  |  |  ------------------
  |  |   64|  1.07k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    570|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 570, False: 41.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    570|        return #name;
  |  |  ------------------
  |  |   65|  1.34k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.34k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.34k, False: 40.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.34k|        return #name;
  |  |  ------------------
  |  |   66|  1.34k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   67|  21.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  21.0k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21.0k, False: 20.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  21.0k|        return #name;
  |  |  ------------------
  |  |   68|  21.0k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     37|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 37, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     37|        return #name;
  |  |  ------------------
  |  |   69|     37|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   70|     15|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   71|    284|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    284|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 284, False: 41.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    284|        return #name;
  |  |  ------------------
  |  |   72|    284|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   73|  8.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  8.01k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8.01k, False: 33.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  8.01k|        return #name;
  |  |  ------------------
  |  |   74|  8.01k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     91|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 91, False: 41.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     91|        return #name;
  |  |  ------------------
  |  |   75|     91|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   76|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 41.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   77|    174|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    174|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 174, False: 41.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    174|        return #name;
  |  |  ------------------
  |  |   78|    249|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    249|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 249, False: 41.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    249|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 41.8k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  41.8k|        }
  144|  41.8k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  17.8k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  17.8k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 560k, False: 0]
  ------------------
   64|   560k|            {
   65|   560k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 17.8k, False: 542k]
  ------------------
   66|  17.8k|                {
   67|  17.8k|                    return &token;
   68|  17.8k|                }
   69|   560k|            }
   70|       |
   71|      0|            return nullptr;
   72|  17.8k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.13M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.13M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.13M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.44M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.44M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.44M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   139k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   139k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   139k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  1.57M|    {
   11|  1.57M|        m_Value = val;
   12|  1.57M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  8.95M|    {
   16|  8.95M|        return m_Value;
   17|  8.95M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   211k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  87.5k|    {
   24|  87.5k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  87.5k|        switch (argument_number.unsafe())
   27|  87.5k|        {
   28|  38.2k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 38.2k, False: 49.2k]
  ------------------
   29|  38.2k|                m_Arg1 = argument;
   30|  38.2k|                break;
   31|  31.4k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 31.4k, False: 56.0k]
  ------------------
   32|  31.4k|                m_Arg2 = argument;
   33|  31.4k|                break;
   34|  17.7k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 17.7k, False: 69.7k]
  ------------------
   35|  17.7k|                m_Arg3 = argument;
   36|  17.7k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 87.5k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  87.5k|#endif
   41|  87.5k|        }
   42|  87.5k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  13.1M|    {
   83|  13.1M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  13.1M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  13.1M|    {
   88|  13.1M|        return m_Info;
   89|  13.1M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   723k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  78.7M|    {
   27|  78.7M|        return m_Type;
   28|  78.7M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  17.3M|    {
   78|  17.3M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  17.3M|        return register_int;
   81|  17.3M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  6.31M|    {
   86|  6.31M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  6.31M|        return register_float;
   89|  6.31M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  6.39M|    {
   94|  6.39M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  6.39M|        return immediate_value;
   97|  6.39M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  1.67M|    {
  110|  1.67M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  1.67M|        return label;
  113|  1.67M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  49.2k|    {
  174|  49.2k|        InstructionArgument arg;
  175|  49.2k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  49.2k|        arg.register_int.register_id = id;
  177|  49.2k|        return arg;
  178|  49.2k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  20.7k|    {
  183|  20.7k|        InstructionArgument arg;
  184|  20.7k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  20.7k|        arg.register_float.register_id = id;
  186|  20.7k|        return arg;
  187|  20.7k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  13.6k|    {
  192|  13.6k|        InstructionArgument arg;
  193|  13.6k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  13.6k|        arg.immediate_value.signed_value = value;
  195|  13.6k|        return arg;
  196|  13.6k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  3.83k|    {
  211|  3.83k|        InstructionArgument arg;
  212|  3.83k|        arg.m_Type           = ArgumentType::Label;
  213|  3.83k|        arg.label.label_name = label_name;
  214|  3.83k|        return arg;
  215|  3.83k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|   211k|        {
  357|   211k|            const auto& dest_reg = arg1.AsRegisterInt();
  358|   211k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|   211k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|   211k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|   211k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|   211k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|   211k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|  87.4k|        {
  370|  87.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|  87.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  372|  87.4k|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|  87.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|  87.4k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|  87.4k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|  59.4k|        {
  382|  59.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  383|  59.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|  59.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|  59.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|  59.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|  59.4k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|  59.4k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|  39.2k|        {
  395|  39.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|  39.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  397|  39.2k|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|  39.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|  39.2k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|  39.2k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|  25.3k|        {
  407|  25.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|  25.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|  25.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|  25.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|  25.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|  25.3k|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|  25.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|  25.3k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|  11.5k|        {
  422|  11.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|  11.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|  11.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|  11.5k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|  11.5k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|  11.5k|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|  11.5k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|  11.5k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|  46.1k|        {
  437|  46.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  438|  46.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|  46.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|  46.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|  46.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|  46.1k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|  46.1k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|  45.2k|        {
  450|  45.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|  45.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  452|  45.2k|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|  45.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|  45.2k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|  45.2k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|  46.0k|        {
  462|  46.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  463|  46.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|  46.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|  46.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|  46.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|  46.0k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|  46.0k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|  48.0k|        {
  475|  48.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|  48.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  477|  48.0k|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|  48.0k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|  48.0k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|  48.0k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|  22.5k|        {
  487|  22.5k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|  22.5k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|  22.5k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|  22.5k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|  22.5k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|  22.5k|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|  22.5k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|  22.5k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|   104k|        {
  502|   104k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|   104k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|   104k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|   104k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|   104k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|   104k|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|   104k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|   104k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|  39.6k|        {
  517|  39.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  518|  39.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|  39.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|  39.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|  39.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|  39.6k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|  39.6k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|  78.6k|        {
  530|  78.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|  78.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  532|  78.6k|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|  78.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|  78.6k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|  78.6k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|  24.4k|        {
  542|  24.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  543|  24.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|  24.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|  24.4k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|  24.4k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|  24.4k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|  24.4k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|   162k|        {
  555|   162k|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|   162k|            const auto& src_reg   = arg2.AsRegisterInt();
  557|   162k|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|   162k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|   162k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|   162k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|   142k|        {
  567|   142k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|   142k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|   142k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|   142k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|   142k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|   142k|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|   142k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|   142k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|   174k|        {
  582|   174k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|   174k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|   174k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|   174k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|   174k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|   174k|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|   174k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|   174k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|  10.2k|        {
  597|  10.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  598|  10.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|  10.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|  10.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|  10.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|  10.2k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|  10.2k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      1|        {
  610|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      1|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|  23.0k|        {
  622|  23.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  623|  23.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|  23.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|  23.0k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|  23.0k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|  23.0k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|  23.0k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      1|        {
  635|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      1|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      1|        {
  668|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 1, False: 0]
  ------------------
  676|      1|            {
  677|      1|                processor.Raise(Exception::DivideByZero);
  678|      1|                return;
  679|      1|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|   163k|        {
  689|   163k|            const auto& dest_reg = arg1.AsRegisterInt();
  690|   163k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|   163k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|   163k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|   163k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|   163k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|   163k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|  40.9k|        {
  702|  40.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|  40.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  704|  40.9k|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|  40.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|  40.9k|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|  40.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|  40.9k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|  74.6k|        {
  715|  74.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  716|  74.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|  74.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|  74.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|  74.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|  74.6k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|  74.6k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|   165k|        {
  728|   165k|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|   165k|            const auto& src_reg   = arg2.AsRegisterInt();
  730|   165k|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|   165k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|   165k|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|   165k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|   165k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|  47.4k|        {
  741|  47.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  742|  47.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|  47.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|  47.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|  47.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|  47.4k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|  47.4k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|  78.5k|        {
  754|  78.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|  78.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  756|  78.5k|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|  78.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|  78.5k|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|  78.5k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|  78.5k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|  27.6k|        {
  767|  27.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  768|  27.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|  27.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|  27.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|  27.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|  27.6k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|  27.6k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|  44.7k|        {
  780|  44.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|  44.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  782|  44.7k|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|  44.7k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|  44.7k|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|  44.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|  44.7k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|  23.9k|        {
  793|  23.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  794|  23.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|  23.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|  23.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|  23.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|  23.9k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|  23.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|  23.9k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|   562k|        {
  807|   562k|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|   562k|            const auto& src_reg   = arg2.AsRegisterInt();
  809|   562k|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|   562k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|   562k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|   562k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|   562k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|  41.2k|        {
  820|  41.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  821|  41.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|  41.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|  41.2k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|  41.2k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|  41.2k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|  41.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|  41.2k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|  51.3k|        {
  834|  51.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|  51.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  836|  51.3k|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|  51.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|  51.3k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|  51.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|  51.3k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|  36.4k|        {
  847|  36.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  848|  36.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|  36.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|  36.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|  36.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|  36.4k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|  36.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|  36.4k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|  1.87M|        {
  861|  1.87M|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|  1.87M|            const auto& src_reg   = arg2.AsRegisterInt();
  863|  1.87M|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|  1.87M|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|  1.87M|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|  1.87M|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|  1.87M|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|  46.6k|        {
  874|  46.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  875|  46.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|  46.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|  46.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|  46.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|  46.6k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 1, False: 46.6k]
  ------------------
  882|       |
  883|  46.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|  46.6k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|  45.4k|        {
  889|  45.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|  45.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  891|  45.4k|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|  45.4k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|  45.4k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 45.4k]
  ------------------
  896|       |
  897|  45.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|  45.4k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|  56.1k|        {
  903|  56.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  904|  56.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|  56.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|  56.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|  56.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|  56.1k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 1, False: 56.1k]
  ------------------
  911|       |
  912|  56.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|  56.1k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|   158k|        {
  918|   158k|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|   158k|            const auto& src_reg   = arg2.AsRegisterInt();
  920|   158k|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|   158k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|   158k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 158k]
  ------------------
  925|       |
  926|   158k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|   158k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|  36.3k|        {
  932|  36.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|  36.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|  36.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|  36.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|  36.3k|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|  36.3k|            processor.SetFPSRValue(new_value);
  941|  36.3k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|   128k|        {
  946|   128k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|   128k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|   128k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|   128k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|   128k|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|   128k|            processor.SetFPSRValue(new_value);
  955|   128k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|  39.3k|        {
  960|  39.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  961|  39.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|  39.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|  39.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|  39.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|  39.3k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 39.3k]
  ------------------
  968|       |
  969|  39.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|  39.3k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|  65.8k|        {
  975|  65.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|  65.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  977|  65.8k|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|  65.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|  65.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 0, False: 65.8k]
  ------------------
  982|       |
  983|  65.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|  65.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|  23.2k|        {
  989|  23.2k|            const auto& dest_reg = arg1.AsRegisterInt();
  990|  23.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|  23.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|  23.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|  23.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|  23.2k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 23.2k]
  ------------------
  997|       |
  998|  23.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|  23.2k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|   150k|        {
 1004|   150k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|   150k|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|   150k|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|   150k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|   150k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 150k]
  ------------------
 1011|       |
 1012|   150k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|   150k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|   494k|        {
 1018|   494k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|   494k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|   494k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|   494k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|   494k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|   494k|            processor.SetFPSRValue(new_value);
 1027|   494k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|  1.03M|        {
 1032|  1.03M|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|  1.03M|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|  1.03M|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|  1.03M|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|  1.03M|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|  1.03M|            processor.SetFPSRValue(new_value);
 1041|  1.03M|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|  29.9k|        {
 1046|  29.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|  29.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|  29.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|  29.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|  29.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|  29.9k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 29.9k, False: 1]
  ------------------
 1054|       |
 1055|  29.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|  29.9k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|  23.9k|        {
 1061|  23.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|  23.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|  23.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|  23.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|  23.9k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 23.9k, False: 0]
  ------------------
 1068|       |
 1069|  23.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|  23.9k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|  27.5k|        {
 1075|  27.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|  27.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|  27.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|  27.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|  27.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|  27.5k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 25.9k, False: 1.66k]
  ------------------
 1083|       |
 1084|  27.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|  27.5k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|   755k|        {
 1090|   755k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|   755k|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|   755k|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|   755k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|   755k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 676k, False: 79.1k]
  ------------------
 1097|       |
 1098|   755k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|   755k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|  60.1k|        {
 1104|  60.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|  60.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|  60.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|  60.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|  60.1k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|  60.1k|            processor.SetFPSRValue(new_value);
 1113|  60.1k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|  85.0k|        {
 1118|  85.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|  85.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|  85.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|  85.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|  85.0k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|  85.0k|            processor.SetFPSRValue(new_value);
 1127|  85.0k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|  27.9k|        {
 1132|  27.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|  27.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|  27.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|  27.9k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|  27.9k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|  27.9k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 27.9k, False: 0]
  ------------------
 1140|       |
 1141|  27.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|  27.9k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|  1.29M|        {
 1147|  1.29M|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|  1.29M|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|  1.29M|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|  1.29M|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|  1.29M|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 1.27M, False: 16.7k]
  ------------------
 1154|       |
 1155|  1.29M|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|  1.29M|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|  26.9k|        {
 1161|  26.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|  26.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|  26.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|  26.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|  26.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|  26.9k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 26.9k, False: 0]
  ------------------
 1169|       |
 1170|  26.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|  26.9k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|  38.0k|        {
 1176|  38.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|  38.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|  38.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|  38.0k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|  38.0k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 38.0k, False: 0]
  ------------------
 1183|       |
 1184|  38.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|  38.0k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|  19.9k|        {
 1190|  19.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|  19.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|  19.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|  19.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|  19.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|  19.9k|            processor.SetFPSRValue(new_value);
 1199|  19.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|  37.7k|        {
 1204|  37.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|  37.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|  37.7k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|  37.7k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|  37.7k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|  37.7k|            processor.SetFPSRValue(new_value);
 1213|  37.7k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|  49.7k|        {
 1218|  49.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|  49.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|  49.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|  49.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|  49.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|  49.7k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 48.0k, False: 1.66k]
  ------------------
 1226|       |
 1227|  49.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|  49.7k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|  65.6k|        {
 1233|  65.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|  65.6k|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|  65.6k|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|  65.6k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|  65.6k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 65.6k, False: 0]
  ------------------
 1240|       |
 1241|  65.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|  65.6k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|  33.2k|        {
 1247|  33.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|  33.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|  33.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|  33.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|  33.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|  33.2k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 33.2k, False: 0]
  ------------------
 1255|       |
 1256|  33.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|  33.2k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|   221k|        {
 1262|   221k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|   221k|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|   221k|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|   221k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|   221k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 221k, False: 0]
  ------------------
 1269|       |
 1270|   221k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|   221k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|  78.6k|        {
 1276|  78.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|  78.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|  78.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|  78.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|  78.6k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|  78.6k|            processor.SetFPSRValue(new_value);
 1285|  78.6k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|  53.4k|        {
 1290|  53.4k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|  53.4k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|  53.4k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|  53.4k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|  53.4k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|  53.4k|            processor.SetFPSRValue(new_value);
 1299|  53.4k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|  25.0k|        {
 1304|  25.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|  25.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|  25.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|  25.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|  25.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|  25.0k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 1, False: 25.0k]
  ------------------
 1312|       |
 1313|  25.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|  25.0k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|   130k|        {
 1319|   130k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|   130k|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|   130k|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|   130k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|   130k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 130k]
  ------------------
 1326|       |
 1327|   130k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|   130k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|  23.6k|        {
 1333|  23.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|  23.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|  23.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|  23.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|  23.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|  23.6k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 1, False: 23.6k]
  ------------------
 1341|       |
 1342|  23.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|  23.6k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|   160k|        {
 1348|   160k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|   160k|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|   160k|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|   160k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|   160k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 20.5k, False: 140k]
  ------------------
 1355|       |
 1356|   160k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|   160k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|  27.1k|        {
 1362|  27.1k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|  27.1k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|  27.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|  27.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|  27.1k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|  27.1k|            processor.SetFPSRValue(new_value);
 1371|  27.1k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|  46.9k|        {
 1376|  46.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|  46.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|  46.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|  46.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|  46.9k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|  46.9k|            processor.SetFPSRValue(new_value);
 1385|  46.9k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|  5.83k|        {
 1390|  5.83k|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|  5.83k|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|  5.83k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|  5.83k|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 5.83k, False: 1]
  ------------------
 1396|  5.83k|            {
 1397|  5.83k|                JumpToLabel(processor, jump_label.label_name);
 1398|  5.83k|            }
 1399|  5.83k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      1|        {
 1404|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      1|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      1|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 1]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|     13|        {
 1418|     13|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|     13|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|     13|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 1, False: 12]
  ------------------
 1423|      1|            {
 1424|      1|                JumpToLabel(processor, jump_label.label_name);
 1425|      1|            }
 1426|     13|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|  1.50M|        {
 1431|  1.50M|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|  1.50M|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|  1.50M|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 1.45M, False: 48.6k]
  ------------------
 1436|  1.45M|            {
 1437|  1.45M|                JumpToLabel(processor, jump_label.label_name);
 1438|  1.45M|            }
 1439|  1.50M|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  83.3k|        {
 1444|  83.3k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  83.3k|            JumpToLabel(processor, jump_label.label_name);
 1447|  83.3k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  51.0k|        {
 1452|  51.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  51.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  51.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|  81.6k|        {
 1460|  81.6k|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|  81.6k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|  81.6k|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|  81.6k|            JumpToLabel(processor, jump_label.label_name);
 1466|  81.6k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|   558k|        {
 1471|   558k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|   558k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|   558k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|   558k|            JumpToRegister(processor, jump_register.register_id);
 1477|   558k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1481|      1|        {
 1482|      1|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1483|      1|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1484|       |
 1485|      1|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1486|       |
 1487|      1|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1488|      1|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1492|      1|        {
 1493|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1494|       |
 1495|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1496|       |
 1497|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1497:17): [True: 0, False: 1]
  ------------------
 1498|      0|            {
 1499|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1500|      0|                return;
 1501|      0|            }
 1502|       |
 1503|      1|            phi::i32 address = optional_address.value();
 1504|       |
 1505|      1|            auto optional_value =
 1506|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1507|       |
 1508|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1508:17): [True: 1, False: 0]
  ------------------
 1509|      1|            {
 1510|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1511|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1512|      1|                return;
 1513|      1|            }
 1514|       |
 1515|      0|            phi::i32 value = optional_value.value();
 1516|       |
 1517|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1518|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      1|        {
 1523|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 1]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      1|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      1|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 1, False: 0]
  ------------------
 1539|      1|            {
 1540|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      1|                return;
 1543|      1|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      1|        {
 1553|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 1]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      1|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      1|            auto optional_value =
 1566|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 1, False: 0]
  ------------------
 1569|      1|            {
 1570|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      1|                return;
 1573|      1|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1582|      1|        {
 1583|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1584|       |
 1585|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1586|       |
 1587|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1587:17): [True: 0, False: 1]
  ------------------
 1588|      0|            {
 1589|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1590|      0|                return;
 1591|      0|            }
 1592|       |
 1593|      1|            phi::i32 address = optional_address.value();
 1594|       |
 1595|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1596|      1|                    static_cast<std::size_t>(address.unsafe()));
 1597|       |
 1598|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1598:17): [True: 1, False: 0]
  ------------------
 1599|      1|            {
 1600|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1602|      1|                return;
 1603|      1|            }
 1604|       |
 1605|      0|            phi::u32 value = optional_value.value();
 1606|       |
 1607|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1608|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1612|      1|        {
 1613|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1614|       |
 1615|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1616|       |
 1617|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1617:17): [True: 0, False: 1]
  ------------------
 1618|      0|            {
 1619|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1620|      0|                return;
 1621|      0|            }
 1622|       |
 1623|      1|            phi::i32 address = optional_address.value();
 1624|       |
 1625|      1|            auto optional_value =
 1626|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1627|       |
 1628|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1628:17): [True: 1, False: 0]
  ------------------
 1629|      1|            {
 1630|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1631|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1632|      1|                return;
 1633|      1|            }
 1634|       |
 1635|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1636|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1640|      1|        {
 1641|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1642|       |
 1643|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1644|       |
 1645|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1645:17): [True: 0, False: 1]
  ------------------
 1646|      0|            {
 1647|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1648|      0|                return;
 1649|      0|            }
 1650|       |
 1651|      1|            phi::i32 address = optional_address.value();
 1652|       |
 1653|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1654|      1|                    static_cast<std::size_t>(address.unsafe()));
 1655|       |
 1656|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1656:17): [True: 1, False: 0]
  ------------------
 1657|      1|            {
 1658|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1659|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1660|      1|                return;
 1661|      1|            }
 1662|       |
 1663|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1664|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1668|      1|        {
 1669|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1670|       |
 1671|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1672|       |
 1673|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1673:17): [True: 0, False: 1]
  ------------------
 1674|      0|            {
 1675|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1676|      0|                return;
 1677|      0|            }
 1678|       |
 1679|      1|            phi::i32 address = optional_address.value();
 1680|       |
 1681|      1|            auto optional_value =
 1682|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1683|       |
 1684|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1684:17): [True: 1, False: 0]
  ------------------
 1685|      1|            {
 1686|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1687|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1688|      1|                return;
 1689|      1|            }
 1690|       |
 1691|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1692|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1696|      1|        {
 1697|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1698|       |
 1699|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1700|       |
 1701|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1701:17): [True: 0, False: 1]
  ------------------
 1702|      0|            {
 1703|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1704|      0|                return;
 1705|      0|            }
 1706|       |
 1707|      1|            phi::i32 address = optional_address.value();
 1708|       |
 1709|      1|            auto optional_value =
 1710|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1711|       |
 1712|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1712:17): [True: 1, False: 0]
  ------------------
 1713|      1|            {
 1714|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1715|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1716|      1|                return;
 1717|      1|            }
 1718|       |
 1719|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1720|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|  46.8k|        {
 1945|  46.8k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|  46.8k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|  46.8k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|  46.8k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|  46.8k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|  17.0k|        {
 1956|  17.0k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|  17.0k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|  17.0k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|  17.0k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|  17.0k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|  8.34k|        {
 1967|  8.34k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|  8.34k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|  8.34k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|  8.34k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|  8.34k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|  8.34k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1979|  35.0k|        {
 1980|  35.0k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1981|  35.0k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1982|       |
 1983|  35.0k|            const std::int32_t source_value =
 1984|  35.0k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1985|       |
 1986|  35.0k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1987|       |
 1988|  35.0k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1989|  35.0k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|  38.8k|        {
 1994|  38.8k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|  38.8k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|  38.8k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|  38.8k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|  38.8k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|  72.7k|        {
 2005|  72.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|  72.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|  72.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|  72.7k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|  72.7k|            const float        converted_value_float =
 2011|  72.7k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|  72.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|  72.7k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|  32.1k|        {
 2019|  32.1k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|  32.1k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|  32.1k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|  32.1k|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|  32.1k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|  32.1k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|  47.5k|        {
 2031|  47.5k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|  47.5k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|  47.5k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|  47.5k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|  47.5k|            const float        converted_value_float =
 2037|  47.5k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|  47.5k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|  47.5k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|  26.0k|        {
 2045|  26.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|  26.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|  26.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|  26.0k|            const std::int32_t converted_value_int =
 2050|  26.0k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|  26.0k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|  26.0k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|  26.0k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|  25.0k|        {
 2059|  25.0k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|  25.0k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|  25.0k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|  25.0k|            const std::int32_t converted_value_int =
 2064|  25.0k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|  25.0k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|  25.0k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|  25.0k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      1|        {
 2073|      1|            processor.Raise(Exception::Trap);
 2074|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      8|        {
 2079|      8|            processor.Raise(Exception::Halt);
 2080|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|   215k|        {
 2085|       |            /* Do nothing */
 2086|   215k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|   299k|    {
  175|   299k|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|   299k|        SafeWriteInteger(processor, dest_reg, res);
  178|   299k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|   519k|    {
  130|   519k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|   519k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|   519k|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 12, False: 519k]
  ------------------
  135|     12|        {
  136|     12|            processor.Raise(Exception::Underflow);
  137|       |
  138|     12|            value = max + (value % (min - 1));
  139|     12|        }
  140|       |        // Check for overflow
  141|   519k|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 116, False: 518k]
  ------------------
  142|    116|        {
  143|    116|            processor.Raise(Exception::Overflow);
  144|       |
  145|    116|            value = min + (value % (max + 1));
  146|    116|        }
  147|       |
  148|   519k|        PHI_ASSERT(value >= min);
  149|   519k|        PHI_ASSERT(value <= max);
  150|       |
  151|   519k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|   519k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|  98.6k|    {
  183|  98.6k|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|  98.6k|        SafeWriteInteger(processor, dest_reg, res);
  186|  98.6k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|   402k|    {
  157|   402k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|   402k|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 725, False: 402k]
  ------------------
  161|    725|        {
  162|    725|            processor.Raise(Exception::Overflow);
  163|       |
  164|    725|            value %= max + 1u;
  165|    725|        }
  166|       |
  167|   402k|        PHI_ASSERT(value <= max);
  168|       |
  169|   402k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|   402k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|  91.4k|    {
  191|  91.4k|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|  91.4k|        SafeWriteInteger(processor, dest_reg, res);
  194|  91.4k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|  94.0k|    {
  199|  94.0k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|  94.0k|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 26.4k, False: 67.5k]
  ------------------
  202|  26.4k|        {
  203|  26.4k|            processor.Raise(Exception::Underflow);
  204|       |
  205|  26.4k|            phi::u64 res = max - rhs + lhs + 1u;
  206|  26.4k|            SafeWriteInteger(processor, dest_reg, res);
  207|  26.4k|            return;
  208|  26.4k|        }
  209|       |
  210|  67.5k|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|  67.5k|        SafeWriteInteger(processor, dest_reg, res);
  213|  67.5k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|   118k|    {
  218|   118k|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|   118k|        SafeWriteInteger(processor, dest_reg, res);
  221|   118k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|   187k|    {
  226|   187k|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|   187k|        SafeWriteInteger(processor, dest_reg, res);
  229|   187k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|  10.2k|    {
  234|  10.2k|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 2, False: 10.2k]
  ------------------
  235|      2|        {
  236|      2|            processor.Raise(Exception::DivideByZero);
  237|      2|            return;
  238|      2|        }
  239|       |
  240|  10.2k|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|  10.2k|        SafeWriteInteger(processor, dest_reg, res);
  243|  10.2k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|  23.0k|    {
  248|  23.0k|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 2, False: 23.0k]
  ------------------
  249|      2|        {
  250|      2|            processor.Raise(Exception::DivideByZero);
  251|      2|            return;
  252|      2|        }
  253|       |
  254|  23.0k|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|  23.0k|        SafeWriteInteger(processor, dest_reg, res);
  257|  23.0k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|   330k|    {
  331|   330k|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 5, False: 330k]
  ------------------
  332|      5|        {
  333|      5|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      5|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      5|            return;
  338|      5|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|   330k|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 60, False: 330k]
  ------------------
  342|     60|        {
  343|     60|            processor.Raise(Exception::BadShift);
  344|     60|            return;
  345|     60|        }
  346|       |
  347|   330k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|   330k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|   330k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|   240k|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|   240k|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 1, False: 240k]
  ------------------
  264|      1|        {
  265|      1|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      1|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      1|            return;
  270|      1|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|   240k|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 212k, False: 27.9k]
  ------------------
  274|   212k|        {
  275|   212k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|   212k|            return;
  277|   212k|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|  27.9k|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 1, False: 27.9k]
  ------------------
  281|      1|        {
  282|      1|            processor.Raise(Exception::BadShift);
  283|      1|            return;
  284|      1|        }
  285|       |
  286|  27.9k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|  27.9k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|  27.9k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|  27.9k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  27.9k|    {
   30|  27.9k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  27.9k|        return value & ~(-1 << (32 - n));
   33|  27.9k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|  72.4k|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|  72.4k|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 4, False: 72.4k]
  ------------------
  298|      4|        {
  299|      4|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      4|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 4]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      4|            else
  308|      4|            {
  309|       |                // Set every byte to 0
  310|      4|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      4|            }
  312|      4|            return;
  313|      4|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|  72.4k|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 2.31k, False: 70.1k]
  ------------------
  317|  2.31k|        {
  318|  2.31k|            processor.Raise(Exception::BadShift);
  319|  2.31k|            return;
  320|  2.31k|        }
  321|       |
  322|  70.1k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|  70.1k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|  70.1k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.62M|    {
   39|       |        // Lookup the label
   40|  1.62M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.62M|        PHI_ASSERT(program != nullptr);
   42|  1.62M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.62M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 80, False: 1.62M]
  ------------------
   45|     80|        {
   46|     80|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     80|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     80|            processor.Raise(Exception::UnknownLabel);
   48|     80|            return;
   49|     80|        }
   50|       |
   51|  1.62M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.62M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.62M|        processor.SetNextProgramCounter(jump_point);
   56|  1.62M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   610k|    {
   60|   610k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   610k|        phi::u32 max_address =
   63|   610k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   610k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 59, False: 609k]
  ------------------
   65|     59|        {
   66|     59|            processor.Raise(Exception::AddressOutOfBounds);
   67|     59|            return;
   68|     59|        }
   69|       |
   70|   609k|        processor.SetNextProgramCounter(address.unsafe());
   71|   609k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  13.1M|    {
   12|  13.1M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  13.1M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  13.1M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  13.1M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  13.1M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  13.1M|                   "Unexpected argument type for arg1");
   22|  13.1M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  13.1M|                   "Unexpected argument type for arg2");
   24|  13.1M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  13.1M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  13.1M|        m_Executor(processor, arg1, arg2, arg3);
   29|  13.1M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   211k|    {
  453|   211k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   211k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  4.66M|    {
   17|  4.66M|        m_ValueSigned = val;
   18|  4.66M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  2.12M|    {
   22|  2.12M|        m_ValueUnsigned = val;
   23|  2.12M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  6.58M|    {
   27|  6.58M|        return m_ValueSigned;
   28|  6.58M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  3.03M|    {
   32|  3.03M|        return m_ValueUnsigned;
   33|  3.03M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  8.32M|    {
   37|  8.32M|        return m_IsReadOnly;
   38|  8.32M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      1|    {
   20|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 1, False: 0]
  ------------------
   21|      1|        {
   22|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      1|            return {};
   24|      1|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      1|    {
   61|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 1, False: 0]
  ------------------
   62|      1|        {
   63|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      1|            return {};
   65|      1|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      1|    {
   78|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 1, False: 0]
  ------------------
   79|      1|        {
   80|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      1|            return {};
   82|      1|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      1|    {
   95|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 1, False: 0]
  ------------------
   96|      1|        {
   97|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      1|            return {};
   99|      1|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  111|      1|    {
  112|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 0]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  119|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
  120|      1|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  123|      1|    {
  124|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (124:13): [True: 1, False: 0]
  ------------------
  125|      1|        {
  126|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  127|      1|            return {};
  128|      1|        }
  129|       |
  130|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  131|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  132|      1|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      8|    {
  244|      8|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 8]
  ------------------
  245|      8|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      8|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  11.9k|    {
  256|  11.9k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 11.9M, False: 11.9k]
  ------------------
  257|  11.9M|        {
  258|  11.9M|            val.signed_value = 0;
  259|  11.9M|        }
  260|  11.9k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   974k|    {
   24|   974k|        switch (token.length())
   25|   974k|        {
   26|       |            // 1 character OpCodes
   27|  30.4k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 30.4k, False: 944k]
  ------------------
   28|  30.4k|                char c1 = token[0];
   29|  30.4k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 12.8k, False: 17.5k]
  ------------------
   30|  12.8k|                {
   31|  12.8k|                    return OpCode::J;
   32|  12.8k|                }
   33|  17.5k|                break;
   34|  30.4k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  50.2k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 50.2k, False: 924k]
  ------------------
   38|  50.2k|                char c1 = token[0];
   39|  50.2k|                char c2 = token[1];
   40|       |
   41|  50.2k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 20.6k, False: 29.5k]
  ------------------
   42|  50.2k|                {
   43|    344|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 344, False: 49.8k]
  ------------------
   44|    645|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 301, False: 49.9k]
  ------------------
   45|    645|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 224, False: 421]
  ------------------
   46|    224|                        {
   47|    224|                            return OpCode::JR;
   48|    224|                        }
   49|    421|                        break;
   50|       |
   51|  9.94k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 9.94k, False: 40.2k]
  ------------------
   52|  10.2k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 275, False: 49.9k]
  ------------------
   53|  10.2k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 118, False: 10.1k]
  ------------------
   54|  10.2k|                        {
   55|    681|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 681, False: 9.54k]
  ------------------
   56|    760|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 79, False: 10.1k]
  ------------------
   57|    760|                                return OpCode::LB;
   58|  3.44k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 3.44k, False: 6.77k]
  ------------------
   59|  3.45k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 10, False: 10.2k]
  ------------------
   60|  3.45k|                                return OpCode::LD;
   61|  1.00k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.00k, False: 9.21k]
  ------------------
   62|  1.11k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 106, False: 10.1k]
  ------------------
   63|  1.11k|                                return OpCode::LF;
   64|    458|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 458, False: 9.76k]
  ------------------
   65|    613|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 155, False: 10.0k]
  ------------------
   66|    613|                                return OpCode::LH;
   67|  3.27k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 3.27k, False: 6.95k]
  ------------------
   68|  4.16k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 890, False: 9.33k]
  ------------------
   69|  4.16k|                                return OpCode::LW;
   70|  10.2k|                        }
   71|    118|                        break;
   72|    272|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 272, False: 49.9k]
  ------------------
   73|  5.44k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 5.17k, False: 45.0k]
  ------------------
   74|  5.44k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 549, False: 4.89k]
  ------------------
   75|    549|                        {
   76|    549|                            return OpCode::OR;
   77|    549|                        }
   78|  4.89k|                        break;
   79|  12.2k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 12.2k, False: 37.9k]
  ------------------
   80|  13.2k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 1.01k, False: 49.1k]
  ------------------
   81|  13.2k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 320, False: 12.9k]
  ------------------
   82|  13.2k|                        {
   83|  1.44k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.44k, False: 11.8k]
  ------------------
   84|  1.74k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 299, False: 12.9k]
  ------------------
   85|  1.74k|                                return OpCode::SB;
   86|  1.23k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.23k, False: 12.0k]
  ------------------
   87|  1.62k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 387, False: 12.8k]
  ------------------
   88|  1.62k|                                return OpCode::SD;
   89|  8.24k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 8.24k, False: 4.99k]
  ------------------
   90|  8.56k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 322, False: 12.9k]
  ------------------
   91|  8.56k|                                return OpCode::SF;
   92|    519|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 519, False: 12.7k]
  ------------------
   93|    772|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 253, False: 12.9k]
  ------------------
   94|    772|                                return OpCode::SH;
   95|     21|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 21, False: 13.2k]
  ------------------
   96|    216|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 195, False: 13.0k]
  ------------------
   97|    216|                                return OpCode::SW;
   98|  13.2k|                        }
   99|    320|                        break;
  100|  50.2k|                }
  101|  26.4k|                break;
  102|  50.2k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   479k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 479k, False: 495k]
  ------------------
  106|   479k|                char c1 = token[0];
  107|   479k|                char c2 = token[1];
  108|   479k|                char c3 = token[2];
  109|       |
  110|   479k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 27.4k, False: 452k]
  ------------------
  111|   479k|                {
  112|   284k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 284k, False: 194k]
  ------------------
  113|   285k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 635, False: 478k]
  ------------------
  114|   285k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 282k, False: 2.93k]
  |  Branch (114:29): [True: 281k, False: 3.59k]
  |  Branch (114:45): [True: 281k, False: 662]
  ------------------
  115|   281k|                        {
  116|   281k|                            return OpCode::ADD;
  117|   281k|                        }
  118|  3.59k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.85k, False: 742]
  |  Branch (118:34): [True: 2.67k, False: 920]
  |  Branch (118:50): [True: 2.67k, False: 178]
  ------------------
  119|  2.67k|                        {
  120|  2.67k|                            return OpCode::AND;
  121|  2.67k|                        }
  122|    920|                        break;
  123|       |
  124|    920|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 419, False: 479k]
  ------------------
  125|    751|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 332, False: 479k]
  ------------------
  126|    751|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 529, False: 222]
  |  Branch (126:29): [True: 297, False: 454]
  |  Branch (126:45): [True: 297, False: 232]
  ------------------
  127|    297|                        {
  128|    297|                            return OpCode::DIV;
  129|    297|                        }
  130|    454|                        break;
  131|       |
  132|  4.77k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 4.77k, False: 474k]
  ------------------
  133|  5.50k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 734, False: 478k]
  ------------------
  134|  5.50k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 5.42k, False: 88]
  ------------------
  135|  5.42k|                        {
  136|  5.42k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 414, False: 5.00k]
  ------------------
  137|    414|                            {
  138|    414|                                return OpCode::EQD;
  139|    414|                            }
  140|  5.00k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 4.26k, False: 740]
  ------------------
  141|  4.26k|                            {
  142|  4.26k|                                return OpCode::EQF;
  143|  4.26k|                            }
  144|  5.42k|                        }
  145|    828|                        break;
  146|       |
  147|  13.8k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 13.8k, False: 465k]
  ------------------
  148|  15.5k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.70k, False: 477k]
  ------------------
  149|  15.5k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 2.47k, False: 13.0k]
  ------------------
  150|  2.47k|                        {
  151|  2.47k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 1.51k, False: 964]
  ------------------
  152|  1.51k|                            {
  153|  1.51k|                                return OpCode::GED;
  154|  1.51k|                            }
  155|    964|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 194, False: 770]
  ------------------
  156|    194|                            {
  157|    194|                                return OpCode::GEF;
  158|    194|                            }
  159|  2.47k|                        }
  160|  13.0k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 13.0k, False: 44]
  ------------------
  161|  13.0k|                        {
  162|  13.0k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 5.16k, False: 7.88k]
  ------------------
  163|  5.16k|                            {
  164|  5.16k|                                return OpCode::GTD;
  165|  5.16k|                            }
  166|  7.88k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 7.38k, False: 498]
  ------------------
  167|  7.38k|                            {
  168|  7.38k|                                return OpCode::GTF;
  169|  7.38k|                            }
  170|  7.88k|                        }
  171|  1.31k|                        break;
  172|       |
  173|  8.58k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 8.58k, False: 470k]
  ------------------
  174|  10.4k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.88k, False: 477k]
  ------------------
  175|  10.4k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 10.3k, False: 84]
  |  Branch (175:29): [True: 9.48k, False: 982]
  |  Branch (175:45): [True: 9.48k, False: 898]
  ------------------
  176|  9.48k|                        {
  177|  9.48k|                            return OpCode::JAL;
  178|  9.48k|                        }
  179|    982|                        break;
  180|       |
  181|  27.4k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 27.4k, False: 452k]
  ------------------
  182|  46.0k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 18.5k, False: 460k]
  ------------------
  183|  46.0k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 3.53k, False: 42.5k]
  ------------------
  184|  46.0k|                        {
  185|    181|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 181, False: 45.8k]
  ------------------
  186|  4.86k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 4.68k, False: 41.3k]
  ------------------
  187|  4.86k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 2.12k, False: 2.74k]
  ------------------
  188|  2.12k|                                {
  189|  2.12k|                                    return OpCode::LBU;
  190|  2.12k|                                }
  191|  2.74k|                                break;
  192|       |
  193|  4.55k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 4.55k, False: 41.4k]
  ------------------
  194|  15.5k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 10.9k, False: 35.0k]
  ------------------
  195|  15.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 4.74k, False: 10.7k]
  ------------------
  196|  4.74k|                                {
  197|  4.74k|                                    return OpCode::LED;
  198|  4.74k|                                }
  199|  10.7k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 6.12k, False: 4.63k]
  ------------------
  200|  6.12k|                                {
  201|  6.12k|                                    return OpCode::LEF;
  202|  6.12k|                                }
  203|  4.63k|                                break;
  204|       |
  205|  15.3k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 15.3k, False: 30.7k]
  ------------------
  206|  18.3k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 3.04k, False: 43.0k]
  ------------------
  207|  18.3k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.47k, False: 15.9k]
  ------------------
  208|  2.47k|                                {
  209|  2.47k|                                    return OpCode::LHI;
  210|  2.47k|                                }
  211|  15.9k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 12.9k, False: 2.99k]
  ------------------
  212|  12.9k|                                {
  213|  12.9k|                                    return OpCode::LHU;
  214|  12.9k|                                }
  215|  2.99k|                                break;
  216|       |
  217|  2.99k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.92k, False: 44.1k]
  ------------------
  218|  3.14k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.22k, False: 44.8k]
  ------------------
  219|  3.14k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 1.27k, False: 1.87k]
  ------------------
  220|  1.27k|                                {
  221|  1.27k|                                    return OpCode::LTD;
  222|  1.27k|                                }
  223|  1.87k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 650, False: 1.22k]
  ------------------
  224|    650|                                {
  225|    650|                                    return OpCode::LTF;
  226|    650|                                }
  227|  1.22k|                                break;
  228|       |
  229|  1.22k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 500, False: 45.5k]
  ------------------
  230|    613|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 113, False: 45.9k]
  ------------------
  231|    613|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 578, False: 35]
  ------------------
  232|    578|                                {
  233|    578|                                    return OpCode::LWU;
  234|    578|                                }
  235|     35|                                break;
  236|  46.0k|                        }
  237|  15.1k|                        break;
  238|       |
  239|  15.1k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.90k, False: 477k]
  ------------------
  240|  2.99k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.09k, False: 478k]
  ------------------
  241|  2.99k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.27k, False: 1.71k]
  ------------------
  242|  1.27k|                        {
  243|  1.27k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 613, False: 664]
  ------------------
  244|    613|                            {
  245|    613|                                return OpCode::NED;
  246|    613|                            }
  247|    664|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 486, False: 178]
  ------------------
  248|    486|                            {
  249|    486|                                return OpCode::NEF;
  250|    486|                            }
  251|  1.27k|                        }
  252|  1.71k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.11k, False: 602]
  |  Branch (252:34): [True: 1.09k, False: 620]
  |  Branch (252:50): [True: 1.09k, False: 18]
  ------------------
  253|  1.09k|                        {
  254|  1.09k|                            return OpCode::NOP;
  255|  1.09k|                        }
  256|       |
  257|    798|                        break;
  258|       |
  259|    798|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 188, False: 479k]
  ------------------
  260|  5.84k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 5.65k, False: 473k]
  ------------------
  261|  5.84k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 4.50k, False: 1.34k]
  |  Branch (261:29): [True: 2.51k, False: 3.33k]
  |  Branch (261:45): [True: 2.51k, False: 1.99k]
  ------------------
  262|  2.51k|                        {
  263|  2.51k|                            return OpCode::ORI;
  264|  2.51k|                        }
  265|  3.33k|                        break;
  266|       |
  267|  72.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 72.8k, False: 406k]
  ------------------
  268|  75.6k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 2.83k, False: 476k]
  ------------------
  269|  75.6k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 542, False: 75.1k]
  ------------------
  270|  75.6k|                        {
  271|    342|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 342, False: 75.3k]
  ------------------
  272|    664|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 322, False: 75.3k]
  ------------------
  273|    664|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 376, False: 288]
  ------------------
  274|    376|                                {
  275|    376|                                    return OpCode::SBU;
  276|    376|                                }
  277|    288|                                break;
  278|       |
  279|  1.39k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.39k, False: 74.2k]
  ------------------
  280|  2.23k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 838, False: 74.8k]
  ------------------
  281|  2.23k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.47k, False: 756]
  ------------------
  282|  1.47k|                                {
  283|  1.47k|                                    return OpCode::SEQ;
  284|  1.47k|                                }
  285|    756|                                break;
  286|       |
  287|  9.47k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 9.47k, False: 66.1k]
  ------------------
  288|  14.0k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 4.54k, False: 71.1k]
  ------------------
  289|  14.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 6.50k, False: 7.51k]
  ------------------
  290|  6.50k|                                {
  291|  6.50k|                                    return OpCode::SGE;
  292|  6.50k|                                }
  293|  7.51k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 4.50k, False: 3.00k]
  ------------------
  294|  4.50k|                                {
  295|  4.50k|                                    return OpCode::SGT;
  296|  4.50k|                                }
  297|  3.00k|                                break;
  298|       |
  299|  4.69k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 4.69k, False: 70.9k]
  ------------------
  300|  5.00k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 310, False: 75.3k]
  ------------------
  301|  5.00k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.82k, False: 181]
  ------------------
  302|  4.82k|                                {
  303|  4.82k|                                    return OpCode::SHU;
  304|  4.82k|                                }
  305|    181|                                break;
  306|       |
  307|  7.43k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.43k, False: 68.2k]
  ------------------
  308|  9.58k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.15k, False: 73.5k]
  ------------------
  309|  9.58k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.75k, False: 7.83k]
  ------------------
  310|  9.58k|                                {
  311|  1.24k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.24k, False: 8.34k]
  ------------------
  312|  1.31k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 9.52k]
  ------------------
  313|  1.31k|                                        return OpCode::SLA;
  314|       |
  315|  2.20k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.20k, False: 7.38k]
  ------------------
  316|  2.38k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 179, False: 9.41k]
  ------------------
  317|  2.38k|                                        return OpCode::SLE;
  318|       |
  319|  3.14k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.14k, False: 6.44k]
  ------------------
  320|  3.16k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 18, False: 9.57k]
  ------------------
  321|  3.16k|                                        return OpCode::SLL;
  322|       |
  323|    737|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 737, False: 8.85k]
  ------------------
  324|    974|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 237, False: 9.35k]
  ------------------
  325|    974|                                        return OpCode::SLT;
  326|  9.58k|                                }
  327|  1.75k|                                break;
  328|       |
  329|  18.5k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 18.5k, False: 57.1k]
  ------------------
  330|  18.6k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 92, False: 75.5k]
  ------------------
  331|  18.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 18.5k, False: 82]
  ------------------
  332|  18.5k|                                {
  333|  18.5k|                                    return OpCode::SNE;
  334|  18.5k|                                }
  335|     82|                                break;
  336|       |
  337|  13.5k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 13.5k, False: 62.0k]
  ------------------
  338|  13.6k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 97, False: 75.5k]
  ------------------
  339|  13.6k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 243, False: 13.4k]
  ------------------
  340|    243|                                {
  341|    243|                                    return OpCode::SRA;
  342|    243|                                }
  343|  13.4k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 13.3k, False: 34]
  ------------------
  344|  13.3k|                                {
  345|  13.3k|                                    return OpCode::SRL;
  346|  13.3k|                                }
  347|     34|                                break;
  348|       |
  349|  7.76k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 7.76k, False: 67.9k]
  ------------------
  350|  7.96k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 194, False: 75.4k]
  ------------------
  351|  7.96k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 7.81k, False: 150]
  ------------------
  352|  7.81k|                                {
  353|  7.81k|                                    return OpCode::SUB;
  354|  7.81k|                                }
  355|    150|                                break;
  356|       |
  357|  3.26k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 3.26k, False: 72.4k]
  ------------------
  358|  3.34k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 76, False: 75.5k]
  ------------------
  359|  3.34k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 3.27k, False: 67]
  ------------------
  360|  3.27k|                                {
  361|  3.27k|                                    return OpCode::SWU;
  362|  3.27k|                                }
  363|     67|                                break;
  364|  75.6k|                        }
  365|       |
  366|  9.69k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.83k, False: 476k]
  ------------------
  367|  10.4k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 760, False: 478k]
  ------------------
  368|  10.4k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.57k, False: 6.88k]
  |  Branch (368:29): [True: 2.99k, False: 7.46k]
  |  Branch (368:45): [True: 2.99k, False: 577]
  ------------------
  369|  2.99k|                        {
  370|  2.99k|                            return OpCode::XOR;
  371|  2.99k|                        }
  372|  7.46k|                        break;
  373|   479k|                }
  374|  58.7k|                break;
  375|   479k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   272k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 272k, False: 701k]
  ------------------
  379|   272k|                char c1 = token[0];
  380|   272k|                char c2 = token[1];
  381|   272k|                char c3 = token[2];
  382|   272k|                char c4 = token[3];
  383|       |
  384|   272k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 18.6k, False: 254k]
  ------------------
  385|   272k|                {
  386|  58.0k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 58.0k, False: 214k]
  ------------------
  387|  60.1k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.10k, False: 270k]
  ------------------
  388|  60.1k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 198, False: 59.9k]
  ------------------
  389|  60.1k|                        {
  390|  36.2k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 36.2k, False: 23.9k]
  ------------------
  391|  38.1k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.92k, False: 58.2k]
  ------------------
  392|  38.1k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 38.0k, False: 77]
  ------------------
  393|  38.0k|                                {
  394|  38.0k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.12k, False: 36.9k]
  ------------------
  395|  38.0k|                                    {
  396|  4.08k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.08k, False: 34.0k]
  ------------------
  397|  4.14k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 66, False: 38.0k]
  ------------------
  398|  4.14k|                                            return OpCode::ADDD;
  399|       |
  400|  4.91k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 4.91k, False: 33.1k]
  ------------------
  401|  5.54k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 629, False: 37.4k]
  ------------------
  402|  5.54k|                                            return OpCode::ADDF;
  403|       |
  404|  24.5k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 24.5k, False: 13.5k]
  ------------------
  405|  24.5k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 38.0k]
  ------------------
  406|  24.5k|                                            return OpCode::ADDI;
  407|       |
  408|  2.60k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 2.60k, False: 35.4k]
  ------------------
  409|  2.67k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 72, False: 38.0k]
  ------------------
  410|  2.67k|                                            return OpCode::ADDU;
  411|  38.0k|                                    }
  412|  38.0k|                                }
  413|  1.20k|                                break;
  414|       |
  415|  21.6k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 21.6k, False: 38.4k]
  ------------------
  416|  21.8k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 108, False: 60.0k]
  ------------------
  417|  21.8k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 21.7k, False: 72]
  |  Branch (417:37): [True: 21.6k, False: 140]
  |  Branch (417:53): [True: 21.6k, False: 68]
  ------------------
  418|  21.6k|                                {
  419|  21.6k|                                    return OpCode::ANDI;
  420|  21.6k|                                }
  421|       |
  422|    140|                                break;
  423|  60.1k|                        }
  424|  1.54k|                        break;
  425|       |
  426|  9.71k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 9.71k, False: 263k]
  ------------------
  427|  31.3k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 21.6k, False: 251k]
  ------------------
  428|  31.3k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 4.95k, False: 26.3k]
  ------------------
  429|  31.3k|                        {
  430|    540|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 540, False: 30.8k]
  ------------------
  431|  2.14k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.60k, False: 29.7k]
  ------------------
  432|  2.14k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.06k, False: 79]
  |  Branch (432:37): [True: 606, False: 1.54k]
  |  Branch (432:53): [True: 606, False: 1.46k]
  ------------------
  433|    606|                                {
  434|    606|                                    return OpCode::BEQZ;
  435|    606|                                }
  436|  1.54k|                                break;
  437|       |
  438|  8.73k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 8.73k, False: 22.6k]
  ------------------
  439|  17.0k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 8.34k, False: 23.0k]
  ------------------
  440|  17.0k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 15.2k, False: 1.81k]
  ------------------
  441|  15.2k|                                {
  442|  15.2k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 7.54k, False: 7.72k]
  ------------------
  443|  7.54k|                                    {
  444|  7.54k|                                        return OpCode::BFPF;
  445|  7.54k|                                    }
  446|  7.72k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 5.93k, False: 1.79k]
  ------------------
  447|  5.93k|                                    {
  448|  5.93k|                                        return OpCode::BFPT;
  449|  5.93k|                                    }
  450|  15.2k|                                }
  451|  3.61k|                                break;
  452|       |
  453|  7.07k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 7.07k, False: 24.2k]
  ------------------
  454|  7.16k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 31.2k]
  ------------------
  455|  7.16k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.36k, False: 804]
  |  Branch (455:37): [True: 3.78k, False: 3.38k]
  |  Branch (455:53): [True: 3.78k, False: 2.58k]
  ------------------
  456|  3.78k|                                {
  457|  3.78k|                                    return OpCode::BNEZ;
  458|  3.78k|                                }
  459|  31.3k|                        }
  460|  13.4k|                        break;
  461|       |
  462|  13.4k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 3.65k, False: 269k]
  ------------------
  463|  26.0k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 22.3k, False: 250k]
  ------------------
  464|  26.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 22.7k, False: 3.25k]
  |  Branch (464:29): [True: 16.4k, False: 9.56k]
  |  Branch (464:45): [True: 16.4k, False: 6.31k]
  ------------------
  465|  16.4k|                        {
  466|  16.4k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 5.38k, False: 11.0k]
  ------------------
  467|  16.4k|                            {
  468|    819|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 819, False: 15.6k]
  ------------------
  469|  1.03k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 218, False: 16.2k]
  ------------------
  470|  1.03k|                                    return OpCode::DIVD;
  471|       |
  472|  2.05k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 2.05k, False: 14.4k]
  ------------------
  473|  2.42k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 370, False: 16.0k]
  ------------------
  474|  2.42k|                                    return OpCode::DIVF;
  475|       |
  476|    153|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 153, False: 16.3k]
  ------------------
  477|  5.08k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 4.92k, False: 11.5k]
  ------------------
  478|  5.08k|                                    return OpCode::DIVI;
  479|       |
  480|    401|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 401, False: 16.0k]
  ------------------
  481|  2.53k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 2.13k, False: 14.3k]
  ------------------
  482|  2.53k|                                    return OpCode::DIVU;
  483|  16.4k|                            }
  484|  16.4k|                        }
  485|  14.9k|                        break;
  486|       |
  487|  14.9k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 2.67k, False: 270k]
  ------------------
  488|  3.19k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 514, False: 272k]
  ------------------
  489|  3.19k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 2.92k, False: 261]
  |  Branch (489:29): [True: 2.74k, False: 448]
  |  Branch (489:45): [True: 2.85k, False: 73]
  |  Branch (489:61): [True: 2.74k, False: 114]
  ------------------
  490|  2.74k|                        {
  491|  2.74k|                            return OpCode::HALT;
  492|  2.74k|                        }
  493|    448|                        break;
  494|       |
  495|  14.9k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 14.9k, False: 257k]
  ------------------
  496|  27.8k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 12.8k, False: 259k]
  ------------------
  497|  27.8k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 27.3k, False: 473]
  |  Branch (497:29): [True: 15.0k, False: 12.8k]
  |  Branch (497:45): [True: 23.2k, False: 4.12k]
  |  Branch (497:61): [True: 15.0k, False: 8.22k]
  ------------------
  498|  15.0k|                        {
  499|  15.0k|                            return OpCode::JALR;
  500|  15.0k|                        }
  501|  12.8k|                        break;
  502|       |
  503|  12.8k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 7.87k, False: 264k]
  ------------------
  504|  8.84k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 965, False: 271k]
  ------------------
  505|  8.84k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 5.79k, False: 3.04k]
  |  Branch (505:29): [True: 3.62k, False: 5.21k]
  |  Branch (505:45): [True: 3.62k, False: 2.16k]
  ------------------
  506|  3.62k|                        {
  507|  3.62k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 769, False: 2.85k]
  ------------------
  508|    769|                            {
  509|    769|                                return OpCode::MOVD;
  510|    769|                            }
  511|  2.85k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 196, False: 2.65k]
  ------------------
  512|    196|                            {
  513|    196|                                return OpCode::MOVF;
  514|    196|                            }
  515|  3.62k|                        }
  516|  5.21k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.61k, False: 2.60k]
  |  Branch (516:34): [True: 1.96k, False: 3.24k]
  |  Branch (516:50): [True: 2.32k, False: 290]
  |  Branch (516:66): [True: 1.96k, False: 356]
  ------------------
  517|  1.96k|                        {
  518|  1.96k|                            return OpCode::MULT;
  519|  1.96k|                        }
  520|  5.90k|                        break;
  521|       |
  522|  80.7k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 80.7k, False: 192k]
  ------------------
  523|  86.3k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 5.64k, False: 267k]
  ------------------
  524|  86.3k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 1.71k, False: 84.6k]
  ------------------
  525|  86.3k|                        {
  526|  8.56k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 8.56k, False: 77.8k]
  ------------------
  527|  10.4k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.89k, False: 84.4k]
  ------------------
  528|  10.4k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 8.79k, False: 1.67k]
  ------------------
  529|  8.79k|                                {
  530|  8.79k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 3.32k, False: 5.47k]
  ------------------
  531|  3.32k|                                    {
  532|  3.32k|                                        return OpCode::SEQI;
  533|  3.32k|                                    }
  534|  5.47k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 5.39k, False: 74]
  ------------------
  535|  5.39k|                                    {
  536|  5.39k|                                        return OpCode::SEQU;
  537|  5.39k|                                    }
  538|  8.79k|                                }
  539|  1.74k|                                break;
  540|       |
  541|  15.6k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 15.6k, False: 70.7k]
  ------------------
  542|  19.6k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 4.03k, False: 82.3k]
  ------------------
  543|  19.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 12.2k, False: 7.41k]
  ------------------
  544|  12.2k|                                {
  545|  12.2k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 10.7k, False: 1.46k]
  ------------------
  546|  10.7k|                                    {
  547|  10.7k|                                        return OpCode::SGEI;
  548|  10.7k|                                    }
  549|  1.46k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 542, False: 924]
  ------------------
  550|    542|                                    {
  551|    542|                                        return OpCode::SGEU;
  552|    542|                                    }
  553|  12.2k|                                }
  554|  7.41k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 6.58k, False: 835]
  ------------------
  555|  6.58k|                                {
  556|  6.58k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 780, False: 5.80k]
  ------------------
  557|    780|                                    {
  558|    780|                                        return OpCode::SGTI;
  559|    780|                                    }
  560|  5.80k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.69k, False: 2.10k]
  ------------------
  561|  3.69k|                                    {
  562|  3.69k|                                        return OpCode::SGTU;
  563|  3.69k|                                    }
  564|  6.58k|                                }
  565|  3.86k|                                break;
  566|       |
  567|  6.29k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 6.29k, False: 80.0k]
  ------------------
  568|  12.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 6.00k, False: 80.3k]
  ------------------
  569|  12.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.37k, False: 10.9k]
  ------------------
  570|  12.2k|                                {
  571|    496|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 496, False: 11.8k]
  ------------------
  572|    660|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 164, False: 12.1k]
  ------------------
  573|    660|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 593, False: 67]
  ------------------
  574|    593|                                        {
  575|    593|                                            return OpCode::SLAI;
  576|    593|                                        }
  577|     67|                                        break;
  578|       |
  579|  2.13k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 2.13k, False: 10.1k]
  ------------------
  580|  4.12k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 1.99k, False: 10.3k]
  ------------------
  581|  4.12k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 1.90k, False: 2.22k]
  ------------------
  582|  1.90k|                                        {
  583|  1.90k|                                            return OpCode::SLEI;
  584|  1.90k|                                        }
  585|  2.22k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 971, False: 1.25k]
  ------------------
  586|    971|                                        {
  587|    971|                                            return OpCode::SLEU;
  588|    971|                                        }
  589|  1.25k|                                        break;
  590|       |
  591|  1.25k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 395, False: 11.9k]
  ------------------
  592|  1.94k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 1.55k, False: 10.7k]
  ------------------
  593|  1.94k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.14k, False: 805]
  ------------------
  594|  1.14k|                                        {
  595|  1.14k|                                            return OpCode::SLLI;
  596|  1.14k|                                        }
  597|    805|                                        break;
  598|       |
  599|  3.27k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 3.27k, False: 9.01k]
  ------------------
  600|  4.18k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 903, False: 11.3k]
  ------------------
  601|  4.18k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 3.57k, False: 612]
  ------------------
  602|  3.57k|                                        {
  603|  3.57k|                                            return OpCode::SLTI;
  604|  3.57k|                                        }
  605|    612|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 446, False: 166]
  ------------------
  606|    446|                                        {
  607|    446|                                            return OpCode::SLTU;
  608|    446|                                        }
  609|    166|                                        break;
  610|  12.2k|                                }
  611|       |
  612|  4.47k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 807, False: 85.5k]
  ------------------
  613|  4.62k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 153, False: 86.2k]
  ------------------
  614|  4.62k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 2.20k, False: 2.41k]
  ------------------
  615|  2.20k|                                {
  616|  2.20k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 539, False: 1.67k]
  ------------------
  617|    539|                                    {
  618|    539|                                        return OpCode::SNEI;
  619|    539|                                    }
  620|  1.67k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 416, False: 1.25k]
  ------------------
  621|    416|                                    {
  622|    416|                                        return OpCode::SNEU;
  623|    416|                                    }
  624|  2.20k|                                }
  625|  3.67k|                                break;
  626|       |
  627|  19.6k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 19.6k, False: 66.7k]
  ------------------
  628|  19.8k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 277, False: 86.1k]
  ------------------
  629|  19.8k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 4.18k, False: 15.6k]
  |  Branch (629:37): [True: 3.87k, False: 16.0k]
  |  Branch (629:53): [True: 3.87k, False: 308]
  ------------------
  630|  3.87k|                                {
  631|  3.87k|                                    return OpCode::SRAI;
  632|  3.87k|                                }
  633|  16.0k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 15.6k, False: 393]
  |  Branch (633:42): [True: 15.5k, False: 460]
  |  Branch (633:58): [True: 15.5k, False: 67]
  ------------------
  634|  15.5k|                                {
  635|  15.5k|                                    return OpCode::SRLI;
  636|  15.5k|                                }
  637|    460|                                break;
  638|       |
  639|  20.9k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 20.9k, False: 65.4k]
  ------------------
  640|  21.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 451, False: 85.9k]
  ------------------
  641|  21.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 21.3k, False: 77]
  ------------------
  642|  21.3k|                                {
  643|  21.3k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 381, False: 20.9k]
  ------------------
  644|  21.3k|                                    {
  645|  2.40k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 2.40k, False: 18.9k]
  ------------------
  646|  2.47k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 21.2k]
  ------------------
  647|  2.47k|                                            return OpCode::SUBD;
  648|       |
  649|  4.76k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 4.76k, False: 16.5k]
  ------------------
  650|  5.08k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 326, False: 20.9k]
  ------------------
  651|  5.08k|                                            return OpCode::SUBF;
  652|       |
  653|  3.97k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 3.97k, False: 17.3k]
  ------------------
  654|  4.03k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 21.2k]
  ------------------
  655|  4.03k|                                            return OpCode::SUBI;
  656|       |
  657|  9.19k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 9.19k, False: 12.1k]
  ------------------
  658|  9.33k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 140, False: 21.1k]
  ------------------
  659|  9.33k|                                            return OpCode::SUBU;
  660|  21.3k|                                    }
  661|  21.3k|                                }
  662|    458|                                break;
  663|  86.3k|                        }
  664|  11.9k|                        break;
  665|       |
  666|  11.9k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.75k, False: 271k]
  ------------------
  667|  3.10k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 1.35k, False: 271k]
  ------------------
  668|  3.10k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 2.90k, False: 196]
  |  Branch (668:29): [True: 1.96k, False: 1.13k]
  |  Branch (668:45): [True: 2.04k, False: 866]
  |  Branch (668:61): [True: 1.96k, False: 74]
  ------------------
  669|  1.96k|                        {
  670|  1.96k|                            return OpCode::TRAP;
  671|  1.96k|                        }
  672|  1.13k|                        break;
  673|  4.43k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 4.43k, False: 268k]
  ------------------
  674|  7.24k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 2.80k, False: 270k]
  ------------------
  675|  7.24k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 6.08k, False: 1.16k]
  |  Branch (675:29): [True: 5.21k, False: 2.03k]
  |  Branch (675:45): [True: 5.43k, False: 650]
  |  Branch (675:61): [True: 5.21k, False: 220]
  ------------------
  676|  5.21k|                        {
  677|  5.21k|                            return OpCode::XORI;
  678|  5.21k|                        }
  679|  2.03k|                        break;
  680|   272k|                }
  681|  82.9k|                break;
  682|   272k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  82.9k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 50.6k, False: 924k]
  ------------------
  686|  50.6k|                char c1 = token[0];
  687|  50.6k|                char c2 = token[1];
  688|  50.6k|                char c3 = token[2];
  689|  50.6k|                char c4 = token[3];
  690|  50.6k|                char c5 = token[4];
  691|       |
  692|  50.6k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 7.18k, False: 43.4k]
  ------------------
  693|  50.6k|                {
  694|  14.5k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 14.5k, False: 36.1k]
  ------------------
  695|  14.5k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 50.6k]
  ------------------
  696|  14.5k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 14.5k, False: 0]
  |  Branch (696:29): [True: 14.5k, False: 0]
  |  Branch (696:45): [True: 14.5k, False: 0]
  |  Branch (696:61): [True: 14.5k, False: 0]
  |  Branch (696:77): [True: 14.5k, False: 0]
  ------------------
  697|  14.5k|                        {
  698|  14.5k|                            return OpCode::ADDUI;
  699|  14.5k|                        }
  700|      0|                        break;
  701|       |
  702|  3.87k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.87k, False: 46.8k]
  ------------------
  703|  3.87k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 50.6k]
  ------------------
  704|  3.87k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 3.87k, False: 0]
  |  Branch (704:29): [True: 3.87k, False: 0]
  |  Branch (704:45): [True: 3.87k, False: 0]
  |  Branch (704:61): [True: 3.87k, False: 0]
  |  Branch (704:77): [True: 3.87k, False: 0]
  ------------------
  705|  3.87k|                        {
  706|  3.87k|                            return OpCode::DIVUI;
  707|  3.87k|                        }
  708|      0|                        break;
  709|       |
  710|  12.5k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 12.5k, False: 38.0k]
  ------------------
  711|  12.5k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 50.6k]
  ------------------
  712|  12.5k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 12.5k, False: 0]
  |  Branch (712:29): [True: 12.5k, False: 0]
  |  Branch (712:45): [True: 12.5k, False: 0]
  |  Branch (712:61): [True: 12.5k, False: 0]
  ------------------
  713|  12.5k|                        {
  714|  12.5k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 12.5k]
  ------------------
  715|  12.5k|                            {
  716|  2.87k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 2.87k, False: 9.71k]
  ------------------
  717|  2.87k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 12.5k]
  ------------------
  718|  2.87k|                                    return OpCode::MULTD;
  719|       |
  720|  3.92k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 3.92k, False: 8.66k]
  ------------------
  721|  3.92k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 12.5k]
  ------------------
  722|  3.92k|                                    return OpCode::MULTF;
  723|       |
  724|  3.27k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 3.27k, False: 9.31k]
  ------------------
  725|  3.27k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 12.5k]
  ------------------
  726|  3.27k|                                    return OpCode::MULTI;
  727|       |
  728|  2.52k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 2.52k, False: 10.0k]
  ------------------
  729|  2.52k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 12.5k]
  ------------------
  730|  2.52k|                                    return OpCode::MULTU;
  731|  12.5k|                            }
  732|  12.5k|                        }
  733|      0|                        break;
  734|       |
  735|  12.5k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 12.5k, False: 38.1k]
  ------------------
  736|  12.5k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 50.6k]
  ------------------
  737|  12.5k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 12.5k]
  ------------------
  738|  12.5k|                        {
  739|  4.23k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.23k, False: 8.28k]
  ------------------
  740|  4.23k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 12.5k]
  ------------------
  741|  4.23k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.23k, False: 0]
  |  Branch (741:37): [True: 4.23k, False: 0]
  |  Branch (741:53): [True: 4.23k, False: 0]
  |  Branch (741:69): [True: 4.23k, False: 0]
  ------------------
  742|  4.23k|                                {
  743|  4.23k|                                    return OpCode::SEQUI;
  744|  4.23k|                                }
  745|      0|                                break;
  746|       |
  747|  3.79k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 3.79k, False: 8.72k]
  ------------------
  748|  3.79k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 12.5k]
  ------------------
  749|  3.79k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.80k, False: 989]
  |  Branch (749:37): [True: 2.80k, False: 989]
  |  Branch (749:53): [True: 2.80k, False: 0]
  |  Branch (749:69): [True: 2.80k, False: 0]
  ------------------
  750|  2.80k|                                {
  751|  2.80k|                                    return OpCode::SGEUI;
  752|  2.80k|                                }
  753|    989|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 989, False: 0]
  |  Branch (753:42): [True: 989, False: 0]
  |  Branch (753:58): [True: 989, False: 0]
  |  Branch (753:74): [True: 989, False: 0]
  ------------------
  754|    989|                                {
  755|    989|                                    return OpCode::SGTUI;
  756|    989|                                }
  757|      0|                                break;
  758|       |
  759|  3.46k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 3.46k, False: 9.05k]
  ------------------
  760|  3.46k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 12.5k]
  ------------------
  761|  3.46k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.70k, False: 1.75k]
  |  Branch (761:37): [True: 1.70k, False: 1.75k]
  |  Branch (761:53): [True: 1.70k, False: 0]
  |  Branch (761:69): [True: 1.70k, False: 0]
  ------------------
  762|  1.70k|                                {
  763|  1.70k|                                    return OpCode::SLEUI;
  764|  1.70k|                                }
  765|  1.75k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.75k, False: 0]
  |  Branch (765:42): [True: 1.75k, False: 0]
  |  Branch (765:58): [True: 1.75k, False: 0]
  |  Branch (765:74): [True: 1.75k, False: 0]
  ------------------
  766|  1.75k|                                {
  767|  1.75k|                                    return OpCode::SLTUI;
  768|  1.75k|                                }
  769|      0|                                break;
  770|       |
  771|    617|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 617, False: 11.8k]
  ------------------
  772|    617|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 12.5k]
  ------------------
  773|    617|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 617, False: 0]
  |  Branch (773:37): [True: 617, False: 0]
  |  Branch (773:53): [True: 617, False: 0]
  |  Branch (773:69): [True: 617, False: 0]
  ------------------
  774|    617|                                {
  775|    617|                                    return OpCode::SNEUI;
  776|    617|                                }
  777|      0|                                break;
  778|       |
  779|    411|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 411, False: 12.1k]
  ------------------
  780|    411|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 12.5k]
  ------------------
  781|    411|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 411, False: 0]
  |  Branch (781:37): [True: 411, False: 0]
  |  Branch (781:53): [True: 411, False: 0]
  |  Branch (781:69): [True: 411, False: 0]
  ------------------
  782|    411|                                {
  783|    411|                                    return OpCode::SUBUI;
  784|    411|                                }
  785|      0|                                break;
  786|  12.5k|                        }
  787|       |
  788|      0|                        break;
  789|  50.6k|                }
  790|       |
  791|  7.18k|                break;
  792|  50.6k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  7.49k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 7.49k, False: 967k]
  ------------------
  796|  7.49k|                char c1 = token[0];
  797|  7.49k|                char c2 = token[1];
  798|  7.49k|                char c3 = token[2];
  799|  7.49k|                char c4 = token[3];
  800|  7.49k|                char c5 = token[4];
  801|  7.49k|                char c6 = token[5];
  802|       |
  803|  7.49k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 4.69k, False: 2.80k]
  |  Branch (803:21): [True: 4.69k, False: 2.80k]
  |  Branch (803:37): [True: 4.69k, False: 0]
  |  Branch (803:53): [True: 4.69k, False: 0]
  ------------------
  804|  4.69k|                {
  805|  4.69k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 4.69k]
  ------------------
  806|  4.69k|                    {
  807|  3.45k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 3.45k, False: 1.24k]
  ------------------
  808|  3.45k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 4.69k]
  ------------------
  809|  3.45k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 3.45k, False: 0]
  ------------------
  810|  3.45k|                            {
  811|  3.45k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 177, False: 3.27k]
  ------------------
  812|    177|                                {
  813|    177|                                    return OpCode::CVTD2F;
  814|    177|                                }
  815|  3.27k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 3.27k, False: 0]
  ------------------
  816|  3.27k|                                {
  817|  3.27k|                                    return OpCode::CVTD2I;
  818|  3.27k|                                }
  819|  3.45k|                            }
  820|      0|                            break;
  821|       |
  822|    655|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 655, False: 4.03k]
  ------------------
  823|    655|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 4.69k]
  ------------------
  824|    655|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 655, False: 0]
  ------------------
  825|    655|                            {
  826|    655|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 321, False: 334]
  ------------------
  827|    321|                                {
  828|    321|                                    return OpCode::CVTF2D;
  829|    321|                                }
  830|    334|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 334, False: 0]
  ------------------
  831|    334|                                {
  832|    334|                                    return OpCode::CVTF2I;
  833|    334|                                }
  834|    655|                            }
  835|      0|                            break;
  836|       |
  837|    585|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 585, False: 4.10k]
  ------------------
  838|    585|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 4.69k]
  ------------------
  839|    585|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 585, False: 0]
  ------------------
  840|    585|                            {
  841|    585|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 429, False: 156]
  ------------------
  842|    429|                                {
  843|    429|                                    return OpCode::CVTI2D;
  844|    429|                                }
  845|    156|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 156, False: 0]
  ------------------
  846|    156|                                {
  847|    156|                                    return OpCode::CVTI2F;
  848|    156|                                }
  849|    585|                            }
  850|  4.69k|                    }
  851|  4.69k|                }
  852|  2.80k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 1.68k, False: 1.12k]
  |  Branch (852:26): [True: 1.68k, False: 1.12k]
  |  Branch (852:42): [True: 1.68k, False: 0]
  |  Branch (852:58): [True: 1.68k, False: 0]
  |  Branch (852:74): [True: 1.68k, False: 0]
  ------------------
  853|  2.80k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.68k, False: 0]
  |  Branch (853:42): [True: 1.68k, False: 0]
  ------------------
  854|  1.68k|                {
  855|  1.68k|                    return OpCode::MULTUI;
  856|  1.68k|                }
  857|  1.12k|                break;
  858|  7.49k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  12.6k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 12.6k, False: 962k]
  ------------------
  862|  12.6k|                char c1 = token[0];
  863|  12.6k|                char c2 = token[1];
  864|  12.6k|                char c3 = token[2];
  865|  12.6k|                char c4 = token[3];
  866|  12.6k|                char c5 = token[4];
  867|  12.6k|                char c6 = token[5];
  868|  12.6k|                char c7 = token[6];
  869|       |
  870|  12.6k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 11.7k, False: 958]
  |  Branch (870:21): [True: 11.7k, False: 958]
  |  Branch (870:37): [True: 11.7k, False: 0]
  |  Branch (870:53): [True: 11.7k, False: 0]
  ------------------
  871|  11.7k|                {
  872|  11.7k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 8.93k, False: 2.78k]
  |  Branch (872:25): [True: 8.93k, False: 2.78k]
  |  Branch (872:41): [True: 8.93k, False: 0]
  |  Branch (872:54): [True: 8.93k, False: 0]
  |  Branch (872:70): [True: 8.93k, False: 0]
  ------------------
  873|  8.93k|                    {
  874|  8.93k|                        return OpCode::MOVI2FP;
  875|  8.93k|                    }
  876|  2.78k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 2.78k, False: 0]
  |  Branch (876:30): [True: 2.78k, False: 0]
  |  Branch (876:46): [True: 2.78k, False: 0]
  |  Branch (876:62): [True: 2.78k, False: 0]
  |  Branch (876:75): [True: 2.78k, False: 0]
  ------------------
  877|  2.78k|                    {
  878|  2.78k|                        return OpCode::MOVFP2I;
  879|  2.78k|                    }
  880|  11.7k|                }
  881|    958|                break;
  882|  12.6k|            }
  883|       |
  884|  70.8k|            default: {
  ------------------
  |  Branch (884:13): [True: 70.8k, False: 903k]
  ------------------
  885|  70.8k|                break;
  886|  12.6k|            }
  887|   974k|        }
  888|       |
  889|       |        // None found
  890|   265k|        return OpCode::NONE;
  891|   974k|    }
_ZN3dlx3iceEcc:
   17|  1.66M|    {
   18|  1.66M|        constexpr const char diff = 'a' - 'A';
   19|  1.66M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.27M, False: 389k]
  |  Branch (19:28): [True: 128k, False: 260k]
  ------------------
   20|  1.66M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.07M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  17.5k|    {
  193|  17.5k|        ParseError err;
  194|       |
  195|  17.5k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  17.5k|        err.m_LineNumber                           = line_number;
  197|  17.5k|        err.m_Column                               = column;
  198|  17.5k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  17.5k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  17.5k|        return err;
  202|  17.5k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  17.5k|    {
  207|  17.5k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  17.5k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  17.5k|                                                         actual_type);
  210|  17.5k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.42k|    {
  216|  1.42k|        ParseError err;
  217|       |
  218|  1.42k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.42k|        err.m_LineNumber        = line_number;
  220|  1.42k|        err.m_Column            = column;
  221|  1.42k|        err.invalid_number.text = text;
  222|       |
  223|  1.42k|        return err;
  224|  1.42k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.42k|    {
  228|  1.42k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.42k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.42k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      4|    {
  235|      4|        ParseError err;
  236|       |
  237|      4|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      4|        err.m_LineNumber = line_number;
  239|      4|        err.m_Column     = column;
  240|       |
  241|      4|        return err;
  242|      4|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      4|    {
  247|      4|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      4|                                                                     token.GetColumn().unsafe());
  249|      4|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   312k|    {
  255|   312k|        ParseError err;
  256|       |
  257|   312k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   312k|        err.m_LineNumber                   = line_number;
  259|   312k|        err.m_Column                       = column;
  260|   312k|        err.unexpected_token.expected_type = expected_type;
  261|   312k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   312k|        return err;
  264|   312k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   312k|    {
  269|   312k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   312k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   312k|                                                  token.GetType());
  272|   312k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  8.41k|    {
  277|  8.41k|        ParseError err;
  278|       |
  279|  8.41k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  8.41k|        err.m_LineNumber                   = line_number;
  281|  8.41k|        err.m_Column                       = column;
  282|  8.41k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  8.41k|        return err;
  285|  8.41k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  4.20k|    {
  289|  4.20k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  4.20k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  4.20k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   171k|    {
  296|   171k|        ParseError err;
  297|       |
  298|   171k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   171k|        err.m_LineNumber                       = line_number;
  300|   171k|        err.m_Column                           = column;
  301|   171k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   171k|        return err;
  304|   171k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   171k|    {
  309|   171k|        return ConstructInvalidLabelIdentifierParseError(
  310|   171k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   171k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  17.8k|    {
  317|  17.8k|        ParseError err;
  318|       |
  319|  17.8k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  17.8k|        err.m_LineNumber                     = line_number;
  321|  17.8k|        err.m_Column                         = column;
  322|  17.8k|        err.label_already_defined.label_name = label_name;
  323|  17.8k|        err.label_already_defined.at_line    = at_line;
  324|  17.8k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  17.8k|        return err;
  327|  17.8k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  17.8k|    {
  332|  17.8k|        return ConstructLabelAlreadyDefinedParseError(
  333|  17.8k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  17.8k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  17.8k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   458k|    {
  340|   458k|        ParseError err;
  341|       |
  342|   458k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   458k|        err.m_LineNumber = line_number;
  344|   458k|        err.m_Column     = column;
  345|       |
  346|   458k|        return err;
  347|   458k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   458k|    {
  352|   458k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   458k|                                                        token.GetColumn().unsafe());
  354|   458k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  85.9k|    {
  360|  85.9k|        ParseError err;
  361|       |
  362|  85.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  85.9k|        err.m_LineNumber               = line_number;
  364|  85.9k|        err.m_Column                   = column;
  365|  85.9k|        err.too_few_arguments.required = required;
  366|  85.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  85.9k|        return err;
  369|  85.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  85.9k|    {
  374|  85.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  85.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  85.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  2.69k|    {
  381|  2.69k|        ParseError err;
  382|       |
  383|  2.69k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  2.69k|        err.m_LineNumber           = line_number;
  385|  2.69k|        err.m_Column               = column;
  386|  2.69k|        err.empty_label.label_name = label_name;
  387|       |
  388|  2.69k|        return err;
  389|  2.69k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  2.69k|    {
  393|  2.69k|        return ConstructEmptyLabelParseError(
  394|  2.69k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  2.69k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 2.07k, False: 620]
  ------------------
  396|  2.07k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  2.69k|                        token.GetText());
  398|  2.69k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    334|    {
  403|    334|        ParseError err;
  404|       |
  405|    334|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    334|        err.m_LineNumber = line_number;
  407|    334|        err.m_Column     = column;
  408|       |
  409|    334|        return err;
  410|    334|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    334|    {
  414|    334|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    334|                                               token.GetColumn().unsafe());
  416|    334|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.07M|    {
   19|  1.07M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.07M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  11.9k|    {
  182|  11.9k|        ParsedProgram program;
  183|       |
  184|  11.9k|        program.m_Tokens = tokens;
  185|       |
  186|  11.9k|        phi::boolean line_has_instruction{false};
  187|  11.9k|        phi::usize   label_count{0u};
  188|       |
  189|  2.40M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.38M, False: 11.9k]
  ------------------
  190|  2.38M|        {
  191|  2.38M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.38M|            switch (current_token.GetType())
  196|  2.38M|            {
  197|       |                // Ignore comments
  198|   255k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 255k, False: 2.13M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   255k|                    break;
  201|       |
  202|  1.02M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.02M, False: 1.36M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.02M|                    line_has_instruction = false;
  205|  1.02M|                    break;
  206|       |
  207|   205k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 205k, False: 2.18M]
  ------------------
  208|   205k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 16.6k, False: 189k]
  ------------------
  209|  16.6k|                    {
  210|  16.6k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  16.6k|                                current_token, Token::Type::NewLine));
  212|  16.6k|                        break;
  213|  16.6k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   189k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 155k, False: 33.1k]
  ------------------
  218|   155k|                    {
  219|   155k|                        program.AddParseError(
  220|   155k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   155k|                        break;
  222|   155k|                    }
  223|       |
  224|  33.1k|                    std::string_view label_name = current_token.GetText();
  225|  33.1k|                    label_name.remove_suffix(1);
  226|       |
  227|  33.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 4.21k, False: 28.9k]
  ------------------
  228|  4.21k|                    {
  229|  4.21k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  4.21k|                                current_token.GetLineNumber().unsafe(),
  231|  4.21k|                                current_token.GetColumn().unsafe(), label_name));
  232|  4.21k|                        break;
  233|  4.21k|                    }
  234|       |
  235|  28.9k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 5.70k, False: 23.2k]
  ------------------
  236|  5.70k|                    {
  237|  5.70k|                        program.AddParseError(
  238|  5.70k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  5.70k|                        break;
  240|  5.70k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  23.2k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 17.8k, False: 5.42k]
  ------------------
  244|  17.8k|                    {
  245|       |                        // Find first defintions of label
  246|  17.8k|                        const Token* first_label_definition =
  247|  17.8k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  17.8k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  17.8k|                                    {
  250|  17.8k|                                        std::string_view token_label_name = t.GetText();
  251|  17.8k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  17.8k|                                        if (token_label_name == label_name)
  254|  17.8k|                                        {
  255|  17.8k|                                            return true;
  256|  17.8k|                                        }
  257|  17.8k|                                    }
  258|       |
  259|  17.8k|                                    return false;
  260|  17.8k|                                });
  261|       |
  262|  17.8k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  17.8k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  17.8k|                                current_token, *first_label_definition));
  266|  17.8k|                        break;
  267|  17.8k|                    }
  268|       |
  269|  5.42k|                    program.m_JumpData[label_name] =
  270|  5.42k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  5.42k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  5.42k|                    break;
  277|  23.2k|                }
  278|       |
  279|   670k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 670k, False: 1.71M]
  ------------------
  280|   670k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 458k, False: 211k]
  ------------------
  281|   458k|                    {
  282|   458k|                        program.AddParseError(
  283|   458k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   458k|                        break;
  285|   458k|                    }
  286|       |
  287|   211k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   211k|                    PHI_ASSERT(current_token.HasHint());
  291|   211k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   211k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   211k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   211k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   211k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   211k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   211k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   211k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   211k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   350k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 318k, False: 32.5k]
  ------------------
  313|   318k|                    {
  314|       |                        // Get next token
  315|   318k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 632, False: 317k]
  ------------------
  316|    632|                        {
  317|    632|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    632|                                    current_token, number_of_argument_required.unsafe(),
  319|    632|                                    argument_num.unsafe()));
  320|    632|                            break;
  321|    632|                        }
  322|       |
  323|   317k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   317k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 51.3k, False: 266k]
  ------------------
  327|  51.3k|                        {
  328|  51.3k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 334, False: 50.9k]
  ------------------
  329|    334|                            {
  330|    334|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    334|                            }
  332|       |
  333|  51.3k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  51.3k|                            continue;
  336|  51.3k|                        }
  337|       |
  338|   266k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 85.3k, False: 180k]
  ------------------
  339|  85.3k|                        {
  340|  85.3k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  85.3k|                                    token, number_of_argument_required.unsafe(),
  342|  85.3k|                                    argument_num.unsafe()));
  343|  85.3k|                            break;
  344|  85.3k|                        }
  345|       |
  346|   180k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   180k|                                parse_instruction_argument(
  348|   180k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   180k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 93.4k, False: 87.5k]
  ------------------
  350|  93.4k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  93.4k|                            break;
  353|  93.4k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  87.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  87.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  87.5k|                        argument_num++;
  360|  87.5k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  87.5k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   211k|                    program.m_Instructions.emplace_back(instruction);
  368|   211k|                    line_has_instruction = true;
  369|   211k|                    break;
  370|   670k|                }
  371|       |
  372|   235k|                default:
  ------------------
  |  Branch (372:17): [True: 235k, False: 2.15M]
  ------------------
  373|   235k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   235k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 154k, False: 80.3k]
  ------------------
  375|   154k|                    {
  376|   154k|                        expected_token_type = Token::Type::NewLine;
  377|   154k|                    }
  378|       |
  379|   235k|                    program.AddParseError(
  380|   235k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   235k|                    break;
  382|  2.38M|            }
  383|  2.38M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  11.9k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 500, False: 11.4k]
  ------------------
  387|    500|        {
  388|  8.41k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 7.91k, False: 500]
  ------------------
  389|  7.91k|            {
  390|  7.91k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  7.91k|                const Token& token = *it;
  393|  7.91k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 2.69k, False: 5.22k]
  ------------------
  394|  2.69k|                {
  395|  2.69k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  2.69k|                    --label_count;
  397|  2.69k|                }
  398|  7.91k|            }
  399|    500|        }
  400|       |
  401|  11.9k|        return program;
  402|  11.9k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  11.9k|    {
  406|  11.9k|        TokenStream tokens = Tokenize(source);
  407|  11.9k|        return Parse(tokens);
  408|  11.9k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   180k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   180k|        switch (token.GetType())
   38|   180k|        {
   39|  8.24k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 8.24k, False: 172k]
  ------------------
   40|  8.24k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.13k, False: 6.10k]
  ------------------
   41|  8.24k|                                          ArgumentType::AddressDisplacement))
   42|  2.13k|                {
   43|  2.13k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.13k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.13k|                    return {};
   47|  2.13k|                }
   48|       |
   49|       |                // Get address displacement
   50|  6.10k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  6.10k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  6.10k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 4, False: 6.10k]
  ------------------
   55|      4|                {
   56|      4|                    program.AddParseError(
   57|      4|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      4|                    return {};
   59|      4|                }
   60|       |
   61|  6.10k|                auto         it           = tokens.current_position();
   62|  6.10k|                const Token& first_token  = tokens.consume();
   63|  6.10k|                const Token& second_token = tokens.consume();
   64|  6.10k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  6.10k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 6.10k, False: 0]
  ------------------
   67|  6.10k|                {
   68|  6.10k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  6.10k|                            first_token, Token::Type::OpenBracket));
   70|  6.10k|                    return {};
   71|  6.10k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  51.8k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 51.8k, False: 129k]
  ------------------
   98|  51.8k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.63k, False: 49.2k]
  ------------------
   99|  2.63k|                {
  100|  2.63k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.63k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.63k|                    return {};
  103|  2.63k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  49.2k|                return ConstructInstructionArgumentRegisterInt(
  109|  49.2k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  51.8k|            }
  111|  28.6k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 28.6k, False: 152k]
  ------------------
  112|  28.6k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 7.88k, False: 20.7k]
  ------------------
  113|  7.88k|                {
  114|  7.88k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  7.88k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  7.88k|                    return {};
  117|  7.88k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  20.7k|                return ConstructInstructionArgumentRegisterFloat(
  123|  20.7k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  28.6k|            }
  125|  4.20k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 4.20k, False: 176k]
  ------------------
  126|  4.20k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  4.20k|                return {};
  129|  28.6k|            }
  130|  16.7k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 16.7k, False: 164k]
  ------------------
  131|       |                // Parse as Label
  132|  16.7k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.89k, False: 13.8k]
  ------------------
  133|  2.89k|                {
  134|  2.89k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.89k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.89k|                    return {};
  137|  2.89k|                }
  138|       |
  139|  13.8k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 13.8k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  13.8k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 9.99k, False: 3.83k]
  ------------------
  146|  9.99k|                {
  147|  9.99k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  9.99k|                    return {};
  149|  9.99k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.83k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  13.8k|            }
  155|  17.1k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 17.1k, False: 163k]
  ------------------
  156|  17.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.99k, False: 15.1k]
  ------------------
  157|  1.99k|                {
  158|  1.99k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.99k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.99k|                    return {};
  161|  1.99k|                }
  162|       |
  163|  15.1k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 13.6k, False: 1.42k]
  ------------------
  164|  13.6k|                {
  165|  13.6k|                    return ConstructInstructionArgumentImmediateValue(
  166|  13.6k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  13.6k|                }
  168|       |
  169|  1.42k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.42k|                return {};
  171|  15.1k|            }
  172|       |
  173|  54.1k|            default:
  ------------------
  |  Branch (173:13): [True: 54.1k, False: 126k]
  ------------------
  174|  54.1k|                program.AddParseError(
  175|  54.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  54.1k|                return {};
  177|   180k|        }
  178|   180k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   560k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   560k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 82.9k, False: 477k]
  ------------------
  249|  82.9k|                                    {
  250|  82.9k|                                        std::string_view token_label_name = t.GetText();
  251|  82.9k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  82.9k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 17.8k, False: 65.0k]
  ------------------
  254|  17.8k|                                        {
  255|  17.8k|                                            return true;
  256|  17.8k|                                        }
  257|  82.9k|                                    }
  258|       |
  259|   542k|                                    return false;
  260|   560k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  8.32M|    {
   70|  8.32M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  8.32M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  8.32M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  8.32M|        return m_IntRegisters[id_value];
   76|  8.32M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  9.61M|    {
   81|  9.61M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  9.61M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  9.61M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  9.61M|        return m_IntRegisters[id_value];
   87|  9.61M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  6.58M|    {
   91|  6.58M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  6.58M|                                             RegisterAccessType::Signed),
   93|  6.58M|                   "Mismatch for instruction access type");
   94|       |
   95|  6.58M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  6.58M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  6.58M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  6.58M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 4.80M, False: 1.78M]
  ------------------
  100|  6.58M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 1.18M, False: 3.62M]
  ------------------
  101|  1.18M|        {
  102|  1.18M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.18M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|  1.18M|        }
  104|       |
  105|  6.58M|        return GetIntRegister(id).GetSignedValue();
  106|  6.58M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  3.03M|    {
  110|  3.03M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  3.03M|                                             RegisterAccessType::Unsigned),
  112|  3.03M|                   "Mismatch for instruction access type");
  113|       |
  114|  3.03M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  3.03M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  3.03M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  3.03M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 1.80M, False: 1.22M]
  ------------------
  119|  3.03M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 1.36M, False: 439k]
  ------------------
  120|  1.36M|        {
  121|  1.36M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.36M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|  1.36M|        }
  123|       |
  124|  3.03M|        return GetIntRegister(id).GetUnsignedValue();
  125|  3.03M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|  5.60M|    {
  129|  5.60M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|  5.60M|                                             RegisterAccessType::Signed),
  131|  5.60M|                   "Mismatch for instruction access type");
  132|       |
  133|  5.60M|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|  5.60M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 1.32M, False: 4.28M]
  ------------------
  136|  1.32M|        {
  137|  1.32M|            return;
  138|  1.32M|        }
  139|       |
  140|  4.28M|        reg.SetSignedValue(value);
  141|       |
  142|  4.28M|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|  4.28M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|  4.28M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|  4.28M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  2.72M|    {
  150|  2.72M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  2.72M|                                             RegisterAccessType::Unsigned),
  152|  2.72M|                   "Mismatch for instruction access type");
  153|       |
  154|  2.72M|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  2.72M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 596k, False: 2.12M]
  ------------------
  157|   596k|        {
  158|   596k|            return;
  159|   596k|        }
  160|       |
  161|  2.12M|        reg.SetUnsignedValue(value);
  162|       |
  163|  2.12M|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  2.12M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  2.12M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  2.12M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  8.11M|    {
  171|  8.11M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  8.11M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  8.11M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  8.11M|        return m_FloatRegisters[id_value];
  177|  8.11M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|  2.03M|    {
  182|  2.03M|        PHI_ASSERT(id != FloatRegisterID::None);
  183|  2.03M|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|  2.03M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|  2.03M|        return m_FloatRegisters[id_value];
  188|  2.03M|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|  2.03M|    {
  192|  2.03M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|  2.03M|                                             RegisterAccessType::Float),
  194|  2.03M|                   "Mismatch for instruction access type");
  195|       |
  196|  2.03M|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|  2.03M|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|  2.03M|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|  2.03M|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 1.97M, False: 54.8k]
  ------------------
  201|  2.03M|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 671k, False: 1.30M]
  ------------------
  202|   671k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   671k|        }
  207|       |
  208|  2.03M|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|  2.03M|        return reg.GetValue();
  211|  2.03M|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|  3.46M|    {
  215|  3.46M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|  3.46M|                                             RegisterAccessType::Double),
  217|  3.46M|                   "Mismatch for instruction access type");
  218|       |
  219|  3.46M|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 17, False: 3.46M]
  ------------------
  220|     17|        {
  221|     17|            Raise(Exception::MisalignedRegisterAccess);
  222|     17|            return {0.0};
  223|     17|        }
  224|       |
  225|  3.46M|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|  3.46M|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|  3.46M|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|  3.46M|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 3.44M, False: 15.3k]
  ------------------
  230|  3.46M|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 2.40M, False: 1.04M]
  ------------------
  231|  2.40M|        {
  232|  2.40M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  2.40M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|  2.40M|        }
  234|       |
  235|  3.46M|        const FloatRegisterValueType register_value_type_high =
  236|  3.46M|                m_FloatRegistersValueTypes[id_value + 1u];
  237|  3.46M|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 3.44M, False: 16.2k]
  ------------------
  238|  3.46M|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 1.11k, False: 3.44M]
  ------------------
  239|  1.11k|        {
  240|  1.11k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.11k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|  1.11k|        }
  242|       |
  243|  3.46M|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|  3.46M|        const FloatRegister& second_reg =
  245|  3.46M|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|  3.46M|        const float first_value  = first_reg.GetValue().unsafe();
  248|  3.46M|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|  3.46M|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|  3.46M|        const std::uint32_t first_value_bits =
  254|  3.46M|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|  3.46M|        const std::uint32_t second_value_bits =
  256|  3.46M|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|  3.46M|        std::uint64_t final_value_bits =
  259|  3.46M|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|  3.46M|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|  3.46M|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|  3.46M|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   450k|    {
  268|   450k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   450k|                                             RegisterAccessType::Float),
  270|   450k|                   "Mismatch for instruction access type");
  271|       |
  272|   450k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   450k|        reg.SetValue(value);
  275|       |
  276|   450k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   450k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   450k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   450k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|   371k|    {
  284|   371k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|   371k|                                             RegisterAccessType::Double),
  286|   371k|                   "Mismatch for instruction access type");
  287|       |
  288|   371k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 2, False: 371k]
  ------------------
  289|      2|        {
  290|      2|            Raise(Exception::MisalignedRegisterAccess);
  291|      2|            return;
  292|      2|        }
  293|       |
  294|   371k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|   371k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|   371k|        double              value_raw  = value.unsafe();
  298|   371k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|   371k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|   371k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|   371k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|   371k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|   371k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|   371k|        FloatRegister& second_reg =
  308|   371k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|   371k|        first_reg.SetValue(first_value);
  311|   371k|        second_reg.SetValue(second_value);
  312|       |
  313|   371k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|   371k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|   371k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|   371k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|   371k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|  2.10M|    {
  322|  2.10M|        return m_FPSR;
  323|  2.10M|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|  1.50M|    {
  327|  1.50M|        return m_FPSR;
  328|  1.50M|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|  1.50M|    {
  332|  1.50M|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|  1.50M|        return status_reg.Get();
  335|  1.50M|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|  2.10M|    {
  339|  2.10M|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|  2.10M|        status_reg.SetStatus(value);
  342|  2.10M|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  13.1M|    {
  346|  13.1M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  13.1M|        inst.Execute(*this);
  349|  13.1M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  11.9k|    {
  353|  11.9k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 9.76k, False: 2.22k]
  ------------------
  354|  9.76k|        {
  355|  9.76k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  9.76k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  9.76k|            return false;
  357|  9.76k|        }
  358|       |
  359|  2.22k|        m_CurrentProgram = &program;
  360|       |
  361|  2.22k|        m_ProgramCounter               = 0u;
  362|  2.22k|        m_Halted                       = false;
  363|  2.22k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  2.22k|        m_LastRaisedException          = Exception::None;
  365|  2.22k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  2.22k|        return true;
  368|  11.9k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  2.23M|    {
  373|  2.23M|        return m_CurrentProgram;
  374|  2.23M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  13.1M|    {
  378|       |        // No nothing when no program is loaded
  379|  13.1M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 13.1M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  13.1M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 148, False: 13.1M]
  ------------------
  386|    148|        {
  387|    148|            m_Halted                       = true;
  388|    148|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|    148|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  13.1M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 148, False: 13.1M]
  ------------------
  393|    148|        {
  394|    148|            return;
  395|    148|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  13.1M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  13.1M|        const auto& current_instruction =
  402|  13.1M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  13.1M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  13.1M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 179, False: 13.1M]
  ------------------
  409|    179|        {
  410|    179|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    179|            return;
  412|    179|        }
  413|       |
  414|  13.1M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  13.1M|        ++m_CurrentStepCount;
  417|       |
  418|  13.1M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 1.90k, False: 13.1M]
  |  Branch (418:14): [True: 13.1M, False: 0]
  |  Branch (418:42): [True: 1.31k, False: 13.1M]
  ------------------
  419|  13.1M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 589, False: 13.1M]
  ------------------
  420|  1.90k|        {
  421|  1.90k|            m_Halted                       = true;
  422|  1.90k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|  1.90k|        }
  424|  13.1M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  2.22k|    {
  428|       |        // Do nothing when no program is loaded
  429|  2.22k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 2.22k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  2.22k|        m_ProgramCounter               = 0u;
  435|  2.22k|        m_Halted                       = false;
  436|  2.22k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  2.22k|        m_LastRaisedException          = Exception::None;
  438|  2.22k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  13.1M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 13.1M, False: 2.22k]
  ------------------
  441|  13.1M|        {
  442|  13.1M|            ExecuteStep();
  443|  13.1M|        }
  444|       |
  445|  2.22k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  2.22k|                   "RegisterAccessType was not reset correctly");
  447|  2.22k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  11.9k|    {
  464|  11.9k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 383k, False: 11.9k]
  ------------------
  465|   383k|        {
  466|   383k|            reg.SetSignedValue(0);
  467|   383k|        }
  468|       |
  469|  11.9k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 383k, False: 11.9k]
  ------------------
  470|   383k|        {
  471|   383k|            reg.SetValue(0.0f);
  472|   383k|        }
  473|       |
  474|  11.9k|        m_FPSR.SetStatus(false);
  475|  11.9k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  11.9k|    {
  479|  11.9k|        m_MemoryBlock.Clear();
  480|  11.9k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|  29.9k|    {
  488|  29.9k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|  29.9k|        m_LastRaisedException = exception;
  491|       |
  492|  29.9k|        switch (exception)
  493|  29.9k|        {
  494|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 6, False: 29.8k]
  ------------------
  495|      6|                m_Halted = true;
  496|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      6|                return;
  498|    841|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 841, False: 29.0k]
  ------------------
  499|    841|                DLX_WARN("Overflow");
  ------------------
  |  |    8|    841|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|    841|                return;
  501|  26.4k|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 26.4k, False: 3.40k]
  ------------------
  502|  26.4k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  26.4k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|  26.4k|                return;
  504|      1|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 1, False: 29.9k]
  ------------------
  505|      1|                m_Halted = true;
  506|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      1|                return;
  508|      8|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 8, False: 29.8k]
  ------------------
  509|      8|                m_Halted = true;
  510|      8|                return;
  511|     80|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 80, False: 29.8k]
  ------------------
  512|     80|                m_Halted = true;
  513|     80|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     80|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     80|                return;
  515|  2.38k|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 2.38k, False: 27.5k]
  ------------------
  516|  2.38k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  2.38k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|  2.38k|                return;
  518|     67|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 67, False: 29.8k]
  ------------------
  519|     67|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     67|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     67|                m_Halted = true;
  521|     67|                return;
  522|     19|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 19, False: 29.8k]
  ------------------
  523|     19|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     19|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     19|                m_Halted = true;
  525|     19|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 29.9k]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|  29.9k|#endif
  531|  29.9k|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      8|    {
  558|      8|        return m_MemoryBlock;
  559|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   640k|    {
  573|   640k|        return m_NextProgramCounter;
  574|   640k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  2.23M|    {
  578|  2.23M|        m_NextProgramCounter = new_npc;
  579|  2.23M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  24.2M|    {
   36|  24.2M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  24.2M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  24.2M|        switch (expected_access)
   40|  24.2M|        {
   41|  6.89M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 6.89M, False: 17.3M]
  ------------------
   42|  6.89M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 24.2M]
  ------------------
   44|      0|                return false;
   45|   287k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 287k, False: 23.9M]
  ------------------
   46|   287k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 143k, False: 143k]
  |  Branch (46:63): [True: 143k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 24.2M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|  86.7k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 86.7k, False: 24.1M]
  ------------------
   51|  86.7k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 43.3k, False: 43.3k]
  |  Branch (51:63): [True: 43.3k, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 24.2M]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  16.9M|            default:
  ------------------
  |  Branch (54:13): [True: 16.9M, False: 7.26M]
  ------------------
   55|  16.9M|                return expected_access == access;
   56|  24.2M|        }
   57|  24.2M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.14M|    {
   14|  1.14M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 156k, False: 986k]
  ------------------
   15|   156k|        {
   16|   156k|            char first_char = token[0];
   17|   156k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 96.2k, False: 59.8k]
  |  Branch (17:38): [True: 4.80k, False: 55.0k]
  ------------------
   18|   101k|            {
   19|   101k|                char second_char = token[1];
   20|   101k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 98.5k, False: 2.43k]
  |  Branch (20:43): [True: 98.4k, False: 159]
  ------------------
   21|  98.4k|                {
   22|  98.4k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  98.4k|                }
   24|   101k|            }
   25|   156k|        }
   26|   986k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 541k, False: 445k]
  ------------------
   27|   541k|        {
   28|   541k|            char first_char = token[0];
   29|   541k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 30.1k, False: 511k]
  |  Branch (29:38): [True: 8.79k, False: 502k]
  ------------------
   30|  38.9k|            {
   31|  38.9k|                char second_char = token[1];
   32|  38.9k|                char third_char  = token[2];
   33|       |
   34|  38.9k|                switch (second_char)
   35|  38.9k|                {
   36|  17.6k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 17.6k, False: 21.3k]
  ------------------
   37|  17.6k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 15.3k, False: 2.23k]
  |  Branch (37:50): [True: 13.9k, False: 1.44k]
  ------------------
   38|  13.9k|                        {
   39|  13.9k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  13.9k|                        }
   41|  3.67k|                        break;
   42|  17.6k|                    }
   43|  10.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 10.9k, False: 27.9k]
  ------------------
   44|  10.9k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 9.26k, False: 1.69k]
  |  Branch (44:50): [True: 8.80k, False: 462]
  ------------------
   45|  8.80k|                        {
   46|  8.80k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  8.80k|                        }
   48|  2.15k|                        break;
   49|  10.9k|                    }
   50|  7.14k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 7.14k, False: 31.8k]
  ------------------
   51|  7.14k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 5.41k, False: 1.72k]
  |  Branch (51:50): [True: 1.19k, False: 532]
  ------------------
   52|  6.60k|                        {
   53|  6.60k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  6.60k|                        }
   55|    532|                        break;
   56|  7.14k|                    }
   57|  3.23k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.23k, False: 35.7k]
  ------------------
   58|  3.23k|                        break;
   59|  7.14k|                    }
   60|  38.9k|                }
   61|  38.9k|            }
   62|   541k|        }
   63|       |
   64|  1.01M|        return IntRegisterID::None;
   65|  1.14M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.01M|    {
   69|  1.01M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 57.6k, False: 957k]
  ------------------
   70|  57.6k|        {
   71|  57.6k|            char first_char = token[0];
   72|  57.6k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 7.30k, False: 50.3k]
  |  Branch (72:38): [True: 566, False: 49.7k]
  ------------------
   73|  7.86k|            {
   74|  7.86k|                char second_char = token[1];
   75|  7.86k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 7.59k, False: 271]
  |  Branch (75:43): [True: 7.39k, False: 206]
  ------------------
   76|  7.39k|                {
   77|  7.39k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  7.39k|                }
   79|  7.86k|            }
   80|  57.6k|        }
   81|   957k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 512k, False: 445k]
  ------------------
   82|   512k|        {
   83|   512k|            char first_char = token[0];
   84|   512k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 34.2k, False: 478k]
  |  Branch (84:38): [True: 7.27k, False: 470k]
  ------------------
   85|  41.5k|            {
   86|  41.5k|                char second_char = token[1];
   87|  41.5k|                char third_char  = token[2];
   88|       |
   89|  41.5k|                switch (second_char)
   90|  41.5k|                {
   91|  7.08k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 7.08k, False: 34.4k]
  ------------------
   92|  7.08k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 3.26k, False: 3.82k]
  |  Branch (92:50): [True: 3.18k, False: 82]
  ------------------
   93|  3.18k|                        {
   94|  3.18k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  3.18k|                        }
   96|  3.90k|                        break;
   97|  7.08k|                    }
   98|  30.5k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 30.5k, False: 10.9k]
  ------------------
   99|  30.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 30.0k, False: 495]
  |  Branch (99:50): [True: 29.4k, False: 629]
  ------------------
  100|  29.4k|                        {
  101|  29.4k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  29.4k|                        }
  103|  1.12k|                        break;
  104|  30.5k|                    }
  105|  1.12k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 622, False: 40.8k]
  ------------------
  106|    622|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 123, False: 499]
  |  Branch (106:50): [True: 249, False: 250]
  ------------------
  107|    372|                        {
  108|    372|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    372|                        }
  110|    250|                        break;
  111|    622|                    }
  112|  3.23k|                    default: {
  ------------------
  |  Branch (112:21): [True: 3.23k, False: 38.2k]
  ------------------
  113|  3.23k|                        break;
  114|    622|                    }
  115|  41.5k|                }
  116|  41.5k|            }
  117|   512k|        }
  118|       |
  119|   974k|        return FloatRegisterID::None;
  120|  1.01M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.15M|    {
  124|  1.15M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 292k, False: 865k]
  ------------------
  125|   292k|        {
  126|   292k|            char c1 = token[0];
  127|   292k|            char c2 = token[1];
  128|   292k|            char c3 = token[2];
  129|   292k|            char c4 = token[3];
  130|       |
  131|   292k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 20.4k, False: 272k]
  |  Branch (131:34): [True: 621, False: 271k]
  |  Branch (131:49): [True: 20.2k, False: 869]
  |  Branch (131:62): [True: 482, False: 387]
  ------------------
  132|   292k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 20.0k, False: 628]
  |  Branch (132:34): [True: 227, False: 401]
  |  Branch (132:49): [True: 20.0k, False: 227]
  |  Branch (132:62): [True: 0, False: 227]
  ------------------
  133|   292k|        }
  134|       |
  135|   865k|        return false;
  136|  1.15M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  2.11M|    {
   12|  2.11M|        m_Value = value;
   13|  2.11M|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|  1.50M|    {
   17|  1.50M|        return m_Value;
   18|  1.50M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.79M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   925k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  4.04M|    {
   41|  4.04M|        return m_Type;
   42|  4.04M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.30M|    {
   51|  1.30M|        return m_LineNumber;
   52|  1.30M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.09M|    {
   56|  1.09M|        return m_Column;
   57|  1.09M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   539k|    {
   66|   539k|        return m_Text;
   67|   539k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   233k|    {
   80|   233k|        return m_HasHint;
   81|   233k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   301k|    {
   85|   301k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   301k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   301k|                   m_Type == Type::ImmediateInteger);
   88|   301k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   301k|        return m_Hint;
   91|   301k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  11.9k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  11.9k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  11.9k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  6.10k|    {
   51|  6.10k|        auto it = m_Iterator;
   52|  24.4k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 18.3k, False: 6.10k]
  ------------------
   53|  18.3k|        {
   54|  18.3k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 4, False: 18.3k]
  ------------------
   55|      4|            {
   56|      4|                return false;
   57|      4|            }
   58|  18.3k|        }
   59|       |
   60|  6.10k|        return true;
   61|  6.10k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.71M|    {
   65|  2.71M|        return m_Iterator != m_Tokens.end();
   66|  2.71M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.72M|    {
   70|  2.72M|        return m_Iterator == m_Tokens.end();
   71|  2.72M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.72M|    {
   85|  2.72M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.72M|        return *m_Iterator++;
   91|  2.72M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  6.10k|    {
  164|  6.10k|        return m_Iterator;
  165|  6.10k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    500|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    500|        return m_Tokens.rbegin();
  224|    500|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  7.91k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  7.91k|        return m_Tokens.rend();
  233|  7.91k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  11.9k|    {
   63|  11.9k|        TokenStream tokens;
   64|       |
   65|  11.9k|        std::string_view current_token;
   66|       |
   67|  11.9k|        phi::u64 current_line_number{1u};
   68|  11.9k|        phi::u64 current_column{1u};
   69|  11.9k|        phi::u64 token_begin{0u};
   70|       |
   71|  11.9k|        phi::boolean parsing_comment{false};
   72|       |
   73|  7.00M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 6.99M, False: 11.9k]
  ------------------
   74|  6.99M|        {
   75|  6.99M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  6.99M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.12M, False: 5.86M]
  ------------------
   78|  1.12M|            {
   79|  1.12M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 632k, False: 493k]
  ------------------
   80|   632k|                {
   81|       |                    // Skip empty lines
   82|   632k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   632k|                                        current_line_number, current_column);
   84|       |
   85|   632k|                    parsing_comment = false;
   86|   632k|                    current_line_number += 1u;
   87|   632k|                    current_column = 1u;
   88|   632k|                    continue;
   89|   632k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   493k|                tokens.emplace_back(
   93|   493k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   493k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   493k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   493k|                                    current_line_number, current_column);
   98|       |
   99|   493k|                current_token   = std::string_view{};
  100|   493k|                parsing_comment = false;
  101|   493k|                current_line_number += 1u;
  102|   493k|                current_column = 0u;
  103|   493k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  5.86M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 6.83k, False: 5.86M]
  |  Branch (105:34): [True: 266k, False: 5.59M]
  ------------------
  106|   273k|            {
  107|   273k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 248k, False: 25.4k]
  ------------------
  108|   248k|                {
  109|   248k|                    token_begin = i;
  110|   248k|                }
  111|  25.4k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 22.4k, False: 3.05k]
  ------------------
  112|  22.4k|                {
  113|  22.4k|                    tokens.emplace_back(ParseToken(
  114|  22.4k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  22.4k|                            current_line_number, current_column - current_token.length()));
  116|  22.4k|                    token_begin   = i;
  117|  22.4k|                    current_token = std::string_view{};
  118|  22.4k|                }
  119|       |
  120|   273k|                parsing_comment = true;
  121|   273k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   273k|            }
  123|  5.59M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 619k, False: 4.97M]
  ------------------
  124|   619k|            {
  125|       |                // simply append the character
  126|   619k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   619k|            }
  128|  4.97M|            else
  129|  4.97M|            {
  130|       |                // Not parsing a comment
  131|  4.97M|                switch (c)
  132|  4.97M|                {
  133|   744k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 744k, False: 4.23M]
  ------------------
  134|   748k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 4.27k, False: 4.97M]
  ------------------
  135|   763k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 15.3k, False: 4.95M]
  ------------------
  136|   763k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 6.79k, False: 757k]
  ------------------
  137|  6.79k|                        {
  138|  6.79k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  6.79k|                            continue;
  141|  6.79k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   757k|                        tokens.emplace_back(ParseToken(
  145|   757k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   757k|                                current_line_number, current_column - current_token.length()));
  147|   757k|                        current_token = std::string_view{};
  148|   757k|                        break;
  149|  55.0k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 55.0k, False: 4.92M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  55.0k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 41.4k, False: 13.6k]
  ------------------
  152|  41.4k|                        {
  153|  41.4k|                            current_token =
  154|  41.4k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  41.4k|                            tokens.emplace_back(ParseToken(
  156|  41.4k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  41.4k|                                    current_line_number,
  158|  41.4k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  41.4k|                            current_token = std::string_view{};
  161|  41.4k|                        }
  162|  13.6k|                        else
  163|  13.6k|                        {
  164|       |                            // Orphan colon
  165|  13.6k|                            token_begin = i;
  166|       |
  167|  13.6k|                            tokens.emplace_back(Token::Type::Colon,
  168|  13.6k|                                                source.substr(token_begin.unsafe(), 1),
  169|  13.6k|                                                current_line_number, current_column);
  170|  13.6k|                        }
  171|  55.0k|                        break;
  172|   125k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 125k, False: 4.84M]
  ------------------
  173|   135k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 10.5k, False: 4.96M]
  ------------------
  174|   139k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 3.70k, False: 4.97M]
  ------------------
  175|   139k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 128k, False: 11.4k]
  ------------------
  176|   128k|                        {
  177|   128k|                            tokens.emplace_back(ParseToken(
  178|   128k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   128k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   128k|                            current_token = std::string_view{};
  182|   128k|                        }
  183|       |
  184|   139k|                        Token::Type type;
  185|   139k|                        switch (c)
  186|   139k|                        {
  187|   125k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 125k, False: 14.2k]
  ------------------
  188|   125k|                                type = Token::Type::Comma;
  189|   125k|                                break;
  190|  10.5k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 10.5k, False: 129k]
  ------------------
  191|  10.5k|                                type = Token::Type::OpenBracket;
  192|  10.5k|                                break;
  193|  3.70k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 3.70k, False: 135k]
  ------------------
  194|  3.70k|                                type = Token::Type::ClosingBracket;
  195|  3.70k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 139k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   139k|#endif
  201|   139k|                        }
  202|       |
  203|   139k|                        token_begin = i;
  204|       |
  205|   139k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   139k|                                            current_line_number, current_column);
  207|   139k|                        break;
  208|       |
  209|  4.01M|                    default:
  ------------------
  |  Branch (209:21): [True: 4.01M, False: 958k]
  ------------------
  210|  4.01M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.17M, False: 2.84M]
  ------------------
  211|  1.17M|                        {
  212|  1.17M|                            token_begin = i;
  213|  1.17M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  4.01M|                        current_token =
  217|  4.01M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  4.97M|                }
  219|  4.97M|            }
  220|       |
  221|  6.35M|            current_column += 1u;
  222|  6.35M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  11.9k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 4.84k, False: 7.14k]
  ------------------
  226|  4.84k|        {
  227|  4.84k|            tokens.emplace_back(
  228|  4.84k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  4.84k|                               current_line_number, current_column - current_token.length()));
  230|  4.84k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  11.9k|        tokens.finalize();
  234|       |
  235|  11.9k|        return tokens;
  236|  11.9k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.44M|    {
   11|  1.44M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 24.3k, False: 1.42M]
  |  Branch (11:35): [True: 24.1k, False: 166]
  ------------------
   12|  24.1k|        {
   13|  24.1k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  24.1k|            if (number)
  ------------------
  |  Branch (15:17): [True: 16.9k, False: 7.20k]
  ------------------
   16|  16.9k|            {
   17|  16.9k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  16.9k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  16.9k|            }
   20|       |
   21|  7.20k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  24.1k|        }
   23|       |
   24|  1.42M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 4.24k, False: 1.41M]
  |  Branch (24:35): [True: 266k, False: 1.15M]
  ------------------
   25|   270k|        {
   26|   270k|            return {Token::Type::Comment, token, line_number, column};
   27|   270k|        }
   28|       |
   29|  1.15M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 36.0k, False: 1.11M]
  ------------------
   30|  36.0k|        {
   31|  36.0k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  36.0k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  36.0k|        }
   34|       |
   35|  1.11M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 20.0k, False: 1.09M]
  ------------------
   36|  20.0k|        {
   37|  20.0k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  20.0k|        }
   39|       |
   40|  1.09M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 125k, False: 970k]
  ------------------
   41|   125k|        {
   42|   125k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   125k|                    static_cast<std::uint32_t>(id)};
   44|   125k|        }
   45|       |
   46|   970k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 39.7k, False: 930k]
  ------------------
   47|  39.7k|        {
   48|  39.7k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  39.7k|                    static_cast<std::uint32_t>(id)};
   50|  39.7k|        }
   51|       |
   52|   930k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 707k, False: 222k]
  ------------------
   53|   707k|        {
   54|   707k|            return {Token::Type::OpCode, token, line_number, column,
   55|   707k|                    static_cast<std::uint32_t>(opcode)};
   56|   707k|        }
   57|       |
   58|   222k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   930k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  11.9k|    {
   53|       |        // Constants
   54|  11.9k|        constexpr std::uint8_t number_of_opcodes =
   55|  11.9k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  11.9k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  11.9k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  11.9k|        std::string ret;
   60|       |
   61|  1.98M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.97M, False: 11.9k]
  ------------------
   62|  1.97M|        {
   63|  1.97M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.97M|            switch (current_value)
   66|  1.97M|            {
   67|       |                // OpCode
   68|   684k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 684k, False: 1.28M]
  ------------------
   69|       |                    // Has one more value
   70|   684k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 683k, False: 1.02k]
  ------------------
   71|   683k|                    {
   72|   683k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   683k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   683k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 10, False: 683k]
  ------------------
   77|     10|                        {
   78|     10|                            return detail::ErrorString;
   79|     10|                        }
   80|   683k|                    }
   81|   684k|                    break;
   82|   684k|                }
   83|       |
   84|       |                // Int Register
   85|   684k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 130k, False: 1.84M]
  ------------------
   86|       |                    // Has one more value
   87|   130k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 130k, False: 171]
  ------------------
   88|   130k|                    {
   89|   130k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   130k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   130k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 2, False: 130k]
  ------------------
   93|      2|                        {
   94|      2|                            return detail::ErrorString;
   95|      2|                        }
   96|   130k|                    }
   97|   130k|                    break;
   98|   130k|                }
   99|       |
  100|       |                // Float register
  101|   130k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 42.1k, False: 1.92M]
  ------------------
  102|       |                    // Has one more value
  103|  42.1k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 41.8k, False: 233]
  ------------------
  104|  41.8k|                    {
  105|  41.8k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  41.8k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  41.8k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 3, False: 41.8k]
  ------------------
  109|      3|                        {
  110|      3|                            return detail::ErrorString;
  111|      3|                        }
  112|  41.8k|                    }
  113|  42.1k|                    break;
  114|  42.1k|                }
  115|       |
  116|       |                // Floating point status register
  117|  42.1k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 21.5k, False: 1.94M]
  ------------------
  118|  21.5k|                    ret += "FPSR";
  119|  21.5k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 3, False: 21.5k]
  ------------------
  120|      3|                    {
  121|      3|                        return detail::ErrorString;
  122|      3|                    }
  123|       |
  124|  21.5k|                    break;
  125|  21.5k|                }
  126|       |
  127|       |                // Immediate integer
  128|  35.3k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 35.3k, False: 1.93M]
  ------------------
  129|  35.3k|                    ret += "#";
  130|  35.3k|                    [[fallthrough]];
  131|  35.3k|                }
  132|       |
  133|       |                // Integer literal
  134|   136k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 101k, False: 1.86M]
  ------------------
  135|   136k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   136k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 136k, False: 290]
  ------------------
  138|   136k|                    {
  139|   136k|                        std::int16_t value = 0;
  140|       |
  141|   409k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 272k, False: 136k]
  ------------------
  142|   272k|                        {
  143|   272k|                            value <<= 8;
  144|   272k|                            value &= data[index++];
  145|   272k|                        }
  146|       |
  147|   136k|                        ret += std::to_string(value);
  148|   136k|                    }
  149|   136k|                    break;
  150|  35.3k|                }
  151|       |
  152|       |                // Label
  153|  44.0k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 44.0k, False: 1.92M]
  ------------------
  154|  44.0k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  44.0k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 44.0k, False: 20]
  ------------------
  157|  44.0k|                    {
  158|  44.0k|                        std::string label_name = "lbl_";
  159|       |
  160|   263k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 219k, False: 44.0k]
  ------------------
  161|   219k|                        {
  162|   219k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   219k|                            label_name += c;
  165|   219k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  44.0k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 42.7k, False: 1.24k]
  |  Branch (168:45): [True: 35.2k, False: 7.58k]
  ------------------
  169|  35.2k|                        {
  170|  35.2k|                            label_name += ':';
  171|  35.2k|                            ret += label_name;
  172|  35.2k|                        }
  173|  8.83k|                        else
  174|  8.83k|                        {
  175|  8.83k|                            ret += label_name;
  176|  8.83k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 6, False: 8.83k]
  ------------------
  177|      6|                            {
  178|      6|                                return detail::ErrorString;
  179|      6|                            }
  180|  8.83k|                        }
  181|  44.0k|                    }
  182|  44.0k|                    break;
  183|  44.0k|                }
  184|       |
  185|       |                // Newline
  186|   641k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 641k, False: 1.32M]
  ------------------
  187|   641k|                    ret += '\n';
  188|   641k|                    break;
  189|  44.0k|                }
  190|       |
  191|       |                // Comment
  192|   268k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 268k, False: 1.70M]
  ------------------
  193|   268k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   268k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 268k, False: 256]
  ------------------
  196|   268k|                    {
  197|   268k|                        std::string comment = "; ";
  198|       |
  199|  1.60M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.33M, False: 268k]
  ------------------
  200|  1.33M|                        {
  201|  1.33M|                            comment += static_cast<char>(data[index++]);
  202|  1.33M|                        }
  203|       |
  204|   268k|                        ret += comment + '\n';
  205|   268k|                    }
  206|   268k|                    break;
  207|  44.0k|                }
  208|       |
  209|       |                // Ignore
  210|     53|                default:
  ------------------
  |  Branch (210:17): [True: 53, False: 1.97M]
  ------------------
  211|     53|                    return detail::ErrorString;
  212|  1.97M|            }
  213|  1.97M|        }
  214|       |
  215|  11.9k|        return ret;
  216|  11.9k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   886k|        {
   20|   886k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 882k, False: 3.83k]
  ------------------
   21|   882k|            {
   22|   882k|                std::uint8_t val = data[index++];
   23|   882k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 754k, False: 127k]
  ------------------
   24|   754k|                {
   25|   754k|                    text += ' ';
   26|   754k|                }
   27|   127k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 127k, False: 24]
  ------------------
   28|   127k|                {
   29|   127k|                    text += ',';
   30|   127k|                }
   31|     24|                else
   32|     24|                {
   33|     24|                    return false;
   34|     24|                }
   35|   882k|            }
   36|       |
   37|   886k|            return true;
   38|   886k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   219k|        {
   42|   219k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 174k, False: 44.5k]
  ------------------
   43|   174k|            {
   44|   174k|                return '_';
   45|   174k|            }
   46|       |
   47|  44.5k|            return c;
   48|   219k|        }

LLVMFuzzerTestOneInput:
   12|  11.9k|{
   13|  11.9k|    static dlx::Processor processor;
   14|       |
   15|  11.9k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  11.9k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  11.9k|    processor.ClearRegisters();
   22|  11.9k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  11.9k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 2.22k, False: 9.76k]
  ------------------
   26|  2.22k|    {
   27|  2.22k|        processor.ExecuteCurrentProgram();
   28|  2.22k|    }
   29|       |
   30|  11.9k|    return 0;
   31|  11.9k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   376k|        {
  169|   376k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   376k|            switch (index.unsafe())
  172|   376k|            {
  173|   155k|                case 0:
  ------------------
  |  Branch (173:17): [True: 155k, False: 220k]
  ------------------
  174|   155k|                    return m_Arg1Type;
  175|       |
  176|   113k|                case 1:
  ------------------
  |  Branch (176:17): [True: 113k, False: 263k]
  ------------------
  177|   113k|                    return m_Arg2Type;
  178|       |
  179|   107k|                case 2:
  ------------------
  |  Branch (179:17): [True: 107k, False: 269k]
  ------------------
  180|   107k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 376k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   376k|#endif
  187|   376k|            }
  188|   376k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  96.8k|        {
  195|  96.8k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  96.8k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 94.0k, False: 2.82k]
  ------------------
  199|  94.0k|            {
  200|  94.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  94.0k|            }
  202|  96.8k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 75.0k, False: 21.7k]
  ------------------
  203|  75.0k|            {
  204|  75.0k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  75.0k|            }
  206|  96.8k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 51.5k, False: 45.2k]
  ------------------
  207|  51.5k|            {
  208|  51.5k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  51.5k|            }
  210|       |
  211|  96.8k|            return number_of_argument_required;
  212|  96.8k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  6.14M|        {
  216|  6.14M|            return m_RegisterAccessType;
  217|  6.14M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  96.8k|        {
  221|  96.8k|            return m_Executor;
  222|  96.8k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  18.4M|    {
   38|  18.4M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  18.4M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  18.4M|                                         static_cast<underlying_t>(rhs));
   42|  18.4M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  18.4M|    {
   55|  18.4M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  18.4M|        return static_cast<underlying_t>(type & test) != 0;
   58|  18.4M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   316k|    {
  204|   316k|        switch (value)
  205|   316k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   123k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   123k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 123k, False: 192k]
  |  |  |  |  ------------------
  |  |  |  |  208|   123k|        return #name;
  |  |  ------------------
  |  |   16|   123k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  10.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.1k, False: 306k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.1k|        return #name;
  |  |  ------------------
  |  |   17|  10.1k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.60k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.60k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.60k|        return #name;
  |  |  ------------------
  |  |   18|  7.25k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  7.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.25k, False: 308k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.25k|        return #name;
  |  |  ------------------
  |  |   19|  7.25k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.19k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.19k|        return #name;
  |  |  ------------------
  |  |   20|  2.19k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.97k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.97k|        return #name;
  |  |  ------------------
  |  |   21|  1.97k|                                                                                                   \
  |  |   22|  1.97k|    /* Sub */                                                                                      \
  |  |   23|  3.06k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.06k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.06k|        return #name;
  |  |  ------------------
  |  |   24|  3.06k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.08k, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.08k|        return #name;
  |  |  ------------------
  |  |   25|  4.17k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.17k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.17k|        return #name;
  |  |  ------------------
  |  |   26|  4.17k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    191|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 191, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    191|        return #name;
  |  |  ------------------
  |  |   27|  2.75k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.75k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.75k|        return #name;
  |  |  ------------------
  |  |   28|  2.75k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.42k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.42k|        return #name;
  |  |  ------------------
  |  |   29|  1.42k|                                                                                                   \
  |  |   30|  1.42k|    /* Multiplication */                                                                           \
  |  |   31|  1.42k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.33k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.33k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.33k|        return #name;
  |  |  ------------------
  |  |   32|  1.33k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.05k, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.05k|        return #name;
  |  |  ------------------
  |  |   33|  3.67k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.67k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.67k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.67k|        return #name;
  |  |  ------------------
  |  |   34|  3.67k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    364|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 364, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    364|        return #name;
  |  |  ------------------
  |  |   35|  4.20k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.20k, False: 311k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.20k|        return #name;
  |  |  ------------------
  |  |   36|  4.20k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.18k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.18k, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.18k|        return #name;
  |  |  ------------------
  |  |   37|  1.18k|                                                                                                   \
  |  |   38|  1.18k|    /* Division */                                                                                 \
  |  |   39|  1.18k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    113|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 113, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    113|        return #name;
  |  |  ------------------
  |  |   40|    113|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     97|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 97, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     97|        return #name;
  |  |  ------------------
  |  |   41|    125|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    125|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 125, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    125|        return #name;
  |  |  ------------------
  |  |   42|  1.45k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.45k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.45k|        return #name;
  |  |  ------------------
  |  |   43|  1.45k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    603|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 603, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    603|        return #name;
  |  |  ------------------
  |  |   44|    603|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    228|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 228, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    228|        return #name;
  |  |  ------------------
  |  |   45|    228|                                                                                                   \
  |  |   46|    228|    /* Shift left (logical) */                                                                     \
  |  |   47|    256|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    256|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 256, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    256|        return #name;
  |  |  ------------------
  |  |   48|    256|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    132|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 132, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    132|        return #name;
  |  |  ------------------
  |  |   49|    132|                                                                                                   \
  |  |   50|    132|    /* Shift right (logical) */                                                                    \
  |  |   51|  5.74k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.74k, False: 310k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.74k|        return #name;
  |  |  ------------------
  |  |   52|  7.27k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.27k, False: 308k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.27k|        return #name;
  |  |  ------------------
  |  |   53|  7.27k|                                                                                                   \
  |  |   54|  7.27k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  7.27k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.62k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.62k|        return #name;
  |  |  ------------------
  |  |   56|  1.62k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 88, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     88|        return #name;
  |  |  ------------------
  |  |   57|     88|                                                                                                   \
  |  |   58|     88|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    123|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    123|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 123, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    123|        return #name;
  |  |  ------------------
  |  |   60|    645|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    645|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 645, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    645|        return #name;
  |  |  ------------------
  |  |   61|    645|                                                                                                   \
  |  |   62|    645|    /* Logic */                                                                                    \
  |  |   63|    645|                                                                                                   \
  |  |   64|    645|    /* And */                                                                                      \
  |  |   65|    987|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    987|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 987, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    987|        return #name;
  |  |  ------------------
  |  |   66|  2.95k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.95k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.95k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.95k|        return #name;
  |  |  ------------------
  |  |   67|  2.95k|                                                                                                   \
  |  |   68|  2.95k|    /* Or */                                                                                       \
  |  |   69|  2.95k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 80, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     80|        return #name;
  |  |  ------------------
  |  |   70|     91|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 91, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     91|        return #name;
  |  |  ------------------
  |  |   71|     91|                                                                                                   \
  |  |   72|     91|    /* XOR */                                                                                      \
  |  |   73|  1.62k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.62k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.62k|        return #name;
  |  |  ------------------
  |  |   74|  2.10k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.10k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.10k|        return #name;
  |  |  ------------------
  |  |   75|  2.10k|                                                                                                   \
  |  |   76|  2.10k|    /* Set conditionals */                                                                         \
  |  |   77|  2.10k|                                                                                                   \
  |  |   78|  2.10k|    /* Less than */                                                                                \
  |  |   79|  2.10k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    228|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 228, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    228|        return #name;
  |  |  ------------------
  |  |   80|  1.44k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.44k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.44k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.44k|        return #name;
  |  |  ------------------
  |  |   81|  1.44k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    494|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 494, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    494|        return #name;
  |  |  ------------------
  |  |   82|    494|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 129, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    129|        return #name;
  |  |  ------------------
  |  |   83|    395|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    395|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 395, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    395|        return #name;
  |  |  ------------------
  |  |   84|    395|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    345|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 345, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    345|        return #name;
  |  |  ------------------
  |  |   85|    345|                                                                                                   \
  |  |   86|    345|    /* Greater than */                                                                             \
  |  |   87|  1.94k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.94k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.94k|        return #name;
  |  |  ------------------
  |  |   88|  1.94k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     95|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 95, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     95|        return #name;
  |  |  ------------------
  |  |   89|  3.34k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.34k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.34k|        return #name;
  |  |  ------------------
  |  |   90|  3.34k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 93, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     93|        return #name;
  |  |  ------------------
  |  |   91|  4.31k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.31k, False: 311k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.31k|        return #name;
  |  |  ------------------
  |  |   92|  4.37k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.37k, False: 311k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.37k|        return #name;
  |  |  ------------------
  |  |   93|  4.37k|                                                                                                   \
  |  |   94|  4.37k|    /* Less than or equal */                                                                       \
  |  |   95|  4.37k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.74k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.74k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.74k|        return #name;
  |  |  ------------------
  |  |   96|  1.74k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    159|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 159, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    159|        return #name;
  |  |  ------------------
  |  |   97|    304|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    304|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 304, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    304|        return #name;
  |  |  ------------------
  |  |   98|    968|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    968|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 968, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    968|        return #name;
  |  |  ------------------
  |  |   99|    968|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    160|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 160, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    160|        return #name;
  |  |  ------------------
  |  |  100|  2.20k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.20k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.20k|        return #name;
  |  |  ------------------
  |  |  101|  2.20k|                                                                                                   \
  |  |  102|  2.20k|    /* Greater than or equal */                                                                    \
  |  |  103|  9.59k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  9.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 9.59k, False: 306k]
  |  |  |  |  ------------------
  |  |  |  |  208|  9.59k|        return #name;
  |  |  ------------------
  |  |  104|  9.59k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.47k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.47k, False: 310k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.47k|        return #name;
  |  |  ------------------
  |  |  105|  5.47k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    169|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 169, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    169|        return #name;
  |  |  ------------------
  |  |  106|  2.22k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.22k, False: 313k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.22k|        return #name;
  |  |  ------------------
  |  |  107|  2.22k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |  108|    193|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    193|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 193, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    193|        return #name;
  |  |  ------------------
  |  |  109|    193|                                                                                                   \
  |  |  110|    193|    /* Equal */                                                                                    \
  |  |  111|    193|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    179|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 179, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    179|        return #name;
  |  |  ------------------
  |  |  112|  1.28k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.28k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.28k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.28k|        return #name;
  |  |  ------------------
  |  |  113|  4.07k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.07k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.07k|        return #name;
  |  |  ------------------
  |  |  114|  4.07k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.70k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.70k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.70k|        return #name;
  |  |  ------------------
  |  |  115|  1.70k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.68k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.68k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.68k|        return #name;
  |  |  ------------------
  |  |  116|  1.68k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 80, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     80|        return #name;
  |  |  ------------------
  |  |  117|     80|                                                                                                   \
  |  |  118|     80|    /* Not equal */                                                                                \
  |  |  119|  7.54k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.54k, False: 308k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.54k|        return #name;
  |  |  ------------------
  |  |  120|  7.54k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    181|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 181, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    181|        return #name;
  |  |  ------------------
  |  |  121|    181|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 106, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    106|        return #name;
  |  |  ------------------
  |  |  122|    440|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    440|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 440, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    440|        return #name;
  |  |  ------------------
  |  |  123|    440|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 84, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     84|        return #name;
  |  |  ------------------
  |  |  124|     88|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     88|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 88, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     88|        return #name;
  |  |  ------------------
  |  |  125|     88|                                                                                                   \
  |  |  126|     88|    /* Conditional branching */                                                                    \
  |  |  127|    100|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    100|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 100, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    100|        return #name;
  |  |  ------------------
  |  |  128|    100|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     99|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 99, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     99|        return #name;
  |  |  ------------------
  |  |  129|     99|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 94, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     94|        return #name;
  |  |  ------------------
  |  |  130|  8.06k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.06k, False: 308k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.06k|        return #name;
  |  |  ------------------
  |  |  131|  8.06k|                                                                                                   \
  |  |  132|  8.06k|    /* Unconditional branching */                                                                  \
  |  |  133|  8.06k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|  2.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.05k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.05k|        return #name;
  |  |  ------------------
  |  |  134|  2.05k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     87|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 87, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     87|        return #name;
  |  |  ------------------
  |  |  135|  3.87k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.87k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.87k|        return #name;
  |  |  ------------------
  |  |  136|  3.88k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.88k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.88k|        return #name;
  |  |  ------------------
  |  |  137|  3.88k|                                                                                                   \
  |  |  138|  3.88k|    /* Loading data */                                                                             \
  |  |  139|  3.88k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.02k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.02k|        return #name;
  |  |  ------------------
  |  |  140|  2.02k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  141|    109|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 109, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    109|        return #name;
  |  |  ------------------
  |  |  142|    109|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     84|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 84, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     84|        return #name;
  |  |  ------------------
  |  |  143|  3.94k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.94k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.94k|        return #name;
  |  |  ------------------
  |  |  144|  3.94k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.89k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.89k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.89k|        return #name;
  |  |  ------------------
  |  |  145|  3.89k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  146|     70|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 70, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     70|        return #name;
  |  |  ------------------
  |  |  147|  1.71k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.71k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.71k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.71k|        return #name;
  |  |  ------------------
  |  |  148|  1.71k|                                                                                                   \
  |  |  149|  1.71k|    /* Storing data */                                                                             \
  |  |  150|  1.71k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.63k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.63k|        return #name;
  |  |  ------------------
  |  |  151|  1.63k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     71|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 71, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     71|        return #name;
  |  |  ------------------
  |  |  152|    157|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    157|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 157, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    157|        return #name;
  |  |  ------------------
  |  |  153|  1.21k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.21k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.21k|        return #name;
  |  |  ------------------
  |  |  154|  1.21k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 75, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     75|        return #name;
  |  |  ------------------
  |  |  155|  1.63k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.63k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.63k|        return #name;
  |  |  ------------------
  |  |  156|  5.15k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  5.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.15k, False: 311k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.15k|        return #name;
  |  |  ------------------
  |  |  157|  5.15k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    380|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 380, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    380|        return #name;
  |  |  ------------------
  |  |  158|    380|                                                                                                   \
  |  |  159|    380|    /* Moving data */                                                                              \
  |  |  160|  5.24k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.24k, False: 310k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.24k|        return #name;
  |  |  ------------------
  |  |  161|  5.24k|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    129|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 129, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    129|        return #name;
  |  |  ------------------
  |  |  162|  3.29k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  3.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.29k, False: 312k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.29k|        return #name;
  |  |  ------------------
  |  |  163|  6.83k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  6.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.83k, False: 309k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.83k|        return #name;
  |  |  ------------------
  |  |  164|  6.83k|                                                                                                   \
  |  |  165|  6.83k|    /* Converting data */                                                                          \
  |  |  166|  6.83k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |  167|    105|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    105|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 105, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    105|        return #name;
  |  |  ------------------
  |  |  168|    105|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 80, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     80|        return #name;
  |  |  ------------------
  |  |  169|    466|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    466|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 466, False: 315k]
  |  |  |  |  ------------------
  |  |  |  |  208|    466|        return #name;
  |  |  ------------------
  |  |  170|    466|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 96, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|     96|        return #name;
  |  |  ------------------
  |  |  171|    153|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    153|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 153, False: 316k]
  |  |  |  |  ------------------
  |  |  |  |  208|    153|        return #name;
  |  |  ------------------
  |  |  172|    153|                                                                                                   \
  |  |  173|    153|    /* Other */                                                                                    \
  |  |  174|  1.28k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.28k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.28k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.28k|        return #name;
  |  |  ------------------
  |  |  175|  1.28k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.27k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.27k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.27k|        return #name;
  |  |  ------------------
  |  |  176|  1.41k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.41k, False: 314k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.41k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 316k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   316k|        }
  217|   316k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  25.2k|    {
   32|  25.2k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 437, False: 24.8k]
  ------------------
   33|    437|        {
   34|    437|            return true;
   35|    437|        }
   36|       |
   37|  24.8k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 107, False: 24.7k]
  ------------------
   38|    107|        {
   39|    107|            return true;
   40|    107|        }
   41|       |
   42|  24.7k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 1.29k, False: 23.4k]
  ------------------
   43|  1.29k|        {
   44|  1.29k|            return true;
   45|  1.29k|        }
   46|       |
   47|  23.4k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 23.4k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  23.4k|        return false;
   53|  23.4k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  23.4k|    {
   57|  23.4k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 23.4k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  23.4k|        const char first_char = token.at(0);
   63|       |
   64|  23.4k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 1.17k, False: 22.2k]
  ------------------
   65|  1.17k|        {
   66|  1.17k|            return phi::is_alpha(first_char);
   67|  1.17k|        }
   68|       |
   69|  22.2k|        phi::boolean just_under_scores = (first_char == '_');
   70|  22.2k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 3.74k, False: 18.5k]
  |  Branch (70:15): [True: 18.3k, False: 3.94k]
  |  Branch (70:44): [True: 200, False: 3.74k]
  ------------------
   71|  3.74k|        {
   72|  3.74k|            return false;
   73|  3.74k|        }
   74|       |
   75|   120k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 109k, False: 11.3k]
  ------------------
   76|   109k|        {
   77|   109k|            const char c{token.at(index)};
   78|       |
   79|   109k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 43.8k, False: 65.6k]
  ------------------
   80|  43.8k|            {
   81|  43.8k|                just_under_scores = false;
   82|  43.8k|            }
   83|  65.6k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 58.5k, False: 7.10k]
  ------------------
   84|  58.5k|            {
   85|  58.5k|                continue;
   86|  58.5k|            }
   87|  7.10k|            else
   88|  7.10k|            {
   89|  7.10k|                return false;
   90|  7.10k|            }
   91|   109k|        }
   92|       |
   93|  11.3k|        return !just_under_scores;
   94|  18.5k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|   597k|    {
  101|   597k|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 597k]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|   597k|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 36.2k, False: 561k]
  ------------------
  107|  36.2k|        {
  108|  36.2k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 19.2k, False: 16.9k]
  ------------------
  109|  19.2k|            {
  110|  19.2k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  19.2k|            }
  112|       |
  113|  16.9k|            return {};
  114|  36.2k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|   561k|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 178, False: 560k]
  ------------------
  118|    178|        {
  119|    178|            return {};
  120|    178|        }
  121|       |
  122|   560k|        std::int32_t number{0};
  123|   560k|        phi::boolean is_negative{false};
  124|   560k|        phi::boolean starts_with_zero{false};
  125|   560k|        phi::boolean parsing_binary{false};
  126|   560k|        phi::boolean parsing_octal{false};
  127|   560k|        phi::boolean parsing_hexadecimal{false};
  128|   560k|        phi::boolean parsed_something{false};
  129|   560k|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|   611k|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 605k, False: 6.12k]
  ------------------
  134|   605k|        {
  135|   605k|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|   605k|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 560k, False: 44.6k]
  ------------------
  139|   560k|            {
  140|   560k|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 262, False: 560k]
  ------------------
  141|    262|                {
  142|    262|                    continue;
  143|    262|                }
  144|       |
  145|   560k|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 669, False: 559k]
  ------------------
  146|    669|                {
  147|    669|                    is_negative = true;
  148|    669|                    continue;
  149|    669|                }
  150|       |
  151|   559k|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 21.5k, False: 538k]
  ------------------
  152|  21.5k|                {
  153|  21.5k|                    starts_with_zero = true;
  154|  21.5k|                    continue;
  155|  21.5k|                }
  156|       |
  157|   538k|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 98, False: 538k]
  ------------------
  158|     98|                {
  159|     98|                    return {};
  160|     98|                }
  161|   538k|            }
  162|       |
  163|       |            // Second character
  164|   583k|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 22.9k, False: 560k]
  ------------------
  165|  22.9k|            {
  166|  22.9k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 21.5k, False: 1.46k]
  ------------------
  167|  21.5k|                {
  168|       |                    // Binary
  169|  21.5k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 2.40k, False: 19.0k]
  |  Branch (169:37): [True: 2.70k, False: 16.3k]
  ------------------
  170|  5.10k|                    {
  171|  5.10k|                        parsing_binary = true;
  172|  5.10k|                        continue;
  173|  5.10k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  16.3k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 3.55k, False: 12.8k]
  |  Branch (176:37): [True: 1.03k, False: 11.8k]
  ------------------
  177|  4.59k|                    {
  178|  4.59k|                        parsing_hexadecimal = true;
  179|  4.59k|                        continue;
  180|  4.59k|                    }
  181|       |
  182|       |                    // Octal
  183|  11.8k|                    parsing_octal = true;
  184|  11.8k|                }
  185|  22.9k|            }
  186|       |
  187|       |            // Handle seperators
  188|   573k|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 139, False: 573k]
  ------------------
  189|    139|            {
  190|    139|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 66, False: 73]
  ------------------
  191|     66|                {
  192|     66|                    return {};
  193|     66|                }
  194|       |
  195|     73|                parsed_separator = true;
  196|     73|                continue;
  197|    139|            }
  198|       |
  199|       |            // Check for over/underflow
  200|   573k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 679, False: 572k]
  |  Branch (200:32): [True: 0, False: 679]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|   573k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 572k, False: 679]
  |  Branch (205:17): [True: 0, False: 573k]
  |  Branch (205:33): [True: 0, False: 572k]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|   573k|            parsed_separator = false;
  212|   573k|            parsed_something = true;
  213|       |
  214|   573k|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 6.84k, False: 566k]
  ------------------
  215|  6.84k|            {
  216|  6.84k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 2.77k, False: 4.07k]
  ------------------
  217|  2.77k|                {
  218|  2.77k|                    return {};
  219|  2.77k|                }
  220|       |
  221|  4.07k|                number <<= 1;
  222|  4.07k|                number |= (c - '0');
  223|  4.07k|            }
  224|   566k|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 19.1k, False: 547k]
  ------------------
  225|  19.1k|            {
  226|  19.1k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 9.42k, False: 9.74k]
  ------------------
  227|  9.42k|                {
  228|  9.42k|                    return {};
  229|  9.42k|                }
  230|       |
  231|  9.74k|                number <<= 3;
  232|  9.74k|                number |= (c - '0');
  233|  9.74k|            }
  234|   547k|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 7.15k, False: 540k]
  ------------------
  235|  7.15k|            {
  236|  7.15k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.45k, False: 3.69k]
  ------------------
  237|  3.45k|                {
  238|  3.45k|                    return {};
  239|  3.45k|                }
  240|       |
  241|  3.69k|                number <<= 4;
  242|  3.69k|                number |= phi::hex_digit_value(c).unsafe();
  243|  3.69k|            }
  244|   540k|            else
  245|   540k|            {
  246|   540k|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 538k, False: 1.26k]
  ------------------
  247|   538k|                {
  248|   538k|                    return {};
  249|   538k|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  1.26k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 928, False: 341]
  |  Branch (252:36): [True: 226, False: 702]
  ------------------
  253|    226|                {
  254|    226|                    return {};
  255|    226|                }
  256|       |
  257|  1.04k|                number *= 10;
  258|  1.04k|                number += (c - '0');
  259|  1.04k|            }
  260|   573k|        }
  261|       |
  262|  6.12k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 5.21k, False: 903]
  ------------------
  263|  5.21k|        {
  264|       |            // Check for over/underflow
  265|  5.21k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 166, False: 5.05k]
  |  Branch (265:32): [True: 0, False: 166]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  5.21k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 5.05k, False: 166]
  |  Branch (270:17): [True: 0, False: 5.21k]
  |  Branch (270:33): [True: 0, False: 5.05k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  5.21k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 166, False: 5.05k]
  ------------------
  277|    166|            {
  278|    166|                return static_cast<std::int16_t>(-number);
  279|    166|            }
  280|       |
  281|  5.05k|            return static_cast<std::int16_t>(number);
  282|  5.21k|        }
  283|       |
  284|    903|        return {};
  285|  6.12k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  56.2k|    {
   96|  56.2k|        switch (value)
   97|  56.2k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  8.11k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  8.11k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.11k, False: 48.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.11k|        return #name;
  |  |  ------------------
  |  |   14|  21.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  21.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 21.4k, False: 34.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  21.4k|        return #name;
  |  |  ------------------
  |  |   15|  21.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    408|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 408, False: 55.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    408|        return #name;
  |  |  ------------------
  |  |   16|  5.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  5.53k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.53k, False: 50.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.53k|        return #name;
  |  |  ------------------
  |  |   17|  5.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    519|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 519, False: 55.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    519|        return #name;
  |  |  ------------------
  |  |   18|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.85k, False: 54.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.85k|        return #name;
  |  |  ------------------
  |  |   19|  1.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    107|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 107, False: 56.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    107|        return #name;
  |  |  ------------------
  |  |   20|    107|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     51|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 51, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     51|        return #name;
  |  |  ------------------
  |  |   21|    427|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    427|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 427, False: 55.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    427|        return #name;
  |  |  ------------------
  |  |   22|    427|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    340|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 340, False: 55.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    340|        return #name;
  |  |  ------------------
  |  |   23|    340|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|     99|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 99, False: 56.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|     99|        return #name;
  |  |  ------------------
  |  |   24|    150|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    150|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 150, False: 56.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    150|        return #name;
  |  |  ------------------
  |  |   25|    150|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     10|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     10|        return #name;
  |  |  ------------------
  |  |   26|    384|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    384|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 384, False: 55.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    384|        return #name;
  |  |  ------------------
  |  |   27|    384|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   28|    920|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|    920|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 920, False: 55.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    920|        return #name;
  |  |  ------------------
  |  |   29|  5.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  5.71k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5.71k, False: 50.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  5.71k|        return #name;
  |  |  ------------------
  |  |   30|  5.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|     82|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 82, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     82|        return #name;
  |  |  ------------------
  |  |   31|     82|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     64|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 64, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     64|        return #name;
  |  |  ------------------
  |  |   32|     64|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   33|    424|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    424|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 424, False: 55.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    424|        return #name;
  |  |  ------------------
  |  |   34|    913|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    913|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 913, False: 55.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    913|        return #name;
  |  |  ------------------
  |  |   35|    913|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|      3|        return #name;
  |  |  ------------------
  |  |   36|  2.45k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.45k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.45k, False: 53.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.45k|        return #name;
  |  |  ------------------
  |  |   37|  2.45k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     36|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 36, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     36|        return #name;
  |  |  ------------------
  |  |   38|     36|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 20, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     20|        return #name;
  |  |  ------------------
  |  |   39|  1.51k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.51k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.51k, False: 54.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.51k|        return #name;
  |  |  ------------------
  |  |   40|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.53k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.53k, False: 54.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.53k|        return #name;
  |  |  ------------------
  |  |   41|  1.53k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     42|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 42, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     42|        return #name;
  |  |  ------------------
  |  |   42|     45|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 56.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   43|  2.66k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.66k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.66k, False: 53.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.66k|        return #name;
  |  |  ------------------
  |  |   44|  2.66k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    451|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 451, False: 55.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    451|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 56.2k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  56.2k|        }
  109|  56.2k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  24.7k|    {
  131|  24.7k|        switch (value)
  132|  24.7k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.55k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.55k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.55k, False: 21.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.55k|        return #name;
  |  |  ------------------
  |  |   48|  3.55k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.64k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.64k, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.64k|        return #name;
  |  |  ------------------
  |  |   49|  1.64k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     11|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 11, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     11|        return #name;
  |  |  ------------------
  |  |   50|     11|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     21|        return #name;
  |  |  ------------------
  |  |   52|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   53|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     17|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 17, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     17|        return #name;
  |  |  ------------------
  |  |   54|     17|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     16|        return #name;
  |  |  ------------------
  |  |   55|    361|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    361|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 361, False: 24.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    361|        return #name;
  |  |  ------------------
  |  |   56|  1.54k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  1.54k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.54k, False: 23.1k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.54k|        return #name;
  |  |  ------------------
  |  |   57|  1.54k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   58|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   59|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   60|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     42|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 42, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     42|        return #name;
  |  |  ------------------
  |  |   61|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   63|  1.10k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.10k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.10k, False: 23.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.10k|        return #name;
  |  |  ------------------
  |  |   64|  1.10k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    176|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 176, False: 24.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    176|        return #name;
  |  |  ------------------
  |  |   65|    194|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|    194|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 194, False: 24.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|    194|        return #name;
  |  |  ------------------
  |  |   66|    194|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   67|  12.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  12.4k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12.4k, False: 12.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|  12.4k|        return #name;
  |  |  ------------------
  |  |   68|  12.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     44|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 44, False: 24.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     44|        return #name;
  |  |  ------------------
  |  |   69|     44|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|     20|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 20, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     20|        return #name;
  |  |  ------------------
  |  |   70|     20|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   71|    280|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    280|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 280, False: 24.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    280|        return #name;
  |  |  ------------------
  |  |   72|    280|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     16|        return #name;
  |  |  ------------------
  |  |   73|  2.91k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  2.91k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.91k, False: 21.8k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.91k|        return #name;
  |  |  ------------------
  |  |   74|  2.91k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     65|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 65, False: 24.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     65|        return #name;
  |  |  ------------------
  |  |   75|     65|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     24|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 24, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     24|        return #name;
  |  |  ------------------
  |  |   76|     24|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 24.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   77|    142|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    142|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 142, False: 24.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    142|        return #name;
  |  |  ------------------
  |  |   78|    142|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|     70|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 70, False: 24.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|     70|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 24.7k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  24.7k|        }
  144|  24.7k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  6.60k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  6.60k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 133k, False: 0]
  ------------------
   64|   133k|            {
   65|   133k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 6.60k, False: 126k]
  ------------------
   66|  6.60k|                {
   67|  6.60k|                    return &token;
   68|  6.60k|                }
   69|   133k|            }
   70|       |
   71|      0|            return nullptr;
   72|  6.60k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   545k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   545k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   545k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|   771k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   771k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   771k|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  57.4k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  57.4k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  57.4k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   600k|    {
   11|   600k|        m_Value = val;
   12|   600k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.55M|    {
   16|  2.55M|        return m_Value;
   17|  2.55M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|  96.8k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  43.2k|    {
   24|  43.2k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  43.2k|        switch (argument_number.unsafe())
   27|  43.2k|        {
   28|  19.6k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 19.6k, False: 23.5k]
  ------------------
   29|  19.6k|                m_Arg1 = argument;
   30|  19.6k|                break;
   31|  15.3k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 15.3k, False: 27.8k]
  ------------------
   32|  15.3k|                m_Arg2 = argument;
   33|  15.3k|                break;
   34|  8.23k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 8.23k, False: 34.9k]
  ------------------
   35|  8.23k|                m_Arg3 = argument;
   36|  8.23k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 43.2k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  43.2k|#endif
   41|  43.2k|        }
   42|  43.2k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  6.14M|    {
   83|  6.14M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  6.14M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  6.14M|    {
   88|  6.14M|        return m_Info;
   89|  6.14M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   333k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  36.8M|    {
   27|  36.8M|        return m_Type;
   28|  36.8M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  8.61M|    {
   78|  8.61M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  8.61M|        return register_int;
   81|  8.61M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  1.93M|    {
   86|  1.93M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  1.93M|        return register_float;
   89|  1.93M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  2.24M|    {
   94|  2.24M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  2.24M|        return immediate_value;
   97|  2.24M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  1.14M|    {
  110|  1.14M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  1.14M|        return label;
  113|  1.14M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  22.3k|    {
  174|  22.3k|        InstructionArgument arg;
  175|  22.3k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  22.3k|        arg.register_int.register_id = id;
  177|  22.3k|        return arg;
  178|  22.3k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  11.6k|    {
  183|  11.6k|        InstructionArgument arg;
  184|  11.6k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  11.6k|        arg.register_float.register_id = id;
  186|  11.6k|        return arg;
  187|  11.6k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  6.24k|    {
  192|  6.24k|        InstructionArgument arg;
  193|  6.24k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  6.24k|        arg.immediate_value.signed_value = value;
  195|  6.24k|        return arg;
  196|  6.24k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  2.92k|    {
  211|  2.92k|        InstructionArgument arg;
  212|  2.92k|        arg.m_Type           = ArgumentType::Label;
  213|  2.92k|        arg.label.label_name = label_name;
  214|  2.92k|        return arg;
  215|  2.92k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  351|   258k|        {
  352|   258k|            const auto& dest_reg = arg1.AsRegisterInt();
  353|   258k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  354|   258k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  355|       |
  356|   258k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  357|   258k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  358|       |
  359|   258k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  360|   258k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  364|  55.6k|        {
  365|  55.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  366|  55.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  367|  55.6k|            const auto& imm_value = arg3.AsImmediateValue();
  368|       |
  369|  55.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  370|       |
  371|  55.6k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  372|  55.6k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  376|  49.3k|        {
  377|  49.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  378|  49.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  379|  49.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  380|       |
  381|  49.3k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  382|  49.3k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  383|       |
  384|  49.3k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  385|  49.3k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  389|  24.2k|        {
  390|  24.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  391|  24.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  392|  24.2k|            const auto& imm_value = arg3.AsImmediateValue();
  393|       |
  394|  24.2k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  395|       |
  396|  24.2k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  397|  24.2k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  401|  31.0k|        {
  402|  31.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  403|  31.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  404|  31.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  405|       |
  406|  31.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  407|  31.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  408|       |
  409|  31.0k|            const phi::f32 new_value = lhs_value + rhs_value;
  410|       |
  411|  31.0k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  412|  31.0k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  416|  9.37k|        {
  417|  9.37k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  418|  9.37k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  419|  9.37k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  420|       |
  421|  9.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  422|  9.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  423|       |
  424|  9.37k|            const phi::f64 new_value = lhs_value + rhs_value;
  425|       |
  426|  9.37k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  427|  9.37k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  431|  44.4k|        {
  432|  44.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  433|  44.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  434|  44.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  435|       |
  436|  44.4k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  437|  44.4k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  438|       |
  439|  44.4k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  440|  44.4k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  444|  10.8k|        {
  445|  10.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  446|  10.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  447|  10.8k|            const auto& imm_value = arg3.AsImmediateValue();
  448|       |
  449|  10.8k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  450|       |
  451|  10.8k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  452|  10.8k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  456|   113k|        {
  457|   113k|            const auto& dest_reg = arg1.AsRegisterInt();
  458|   113k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  459|   113k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  460|       |
  461|   113k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  462|   113k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  463|       |
  464|   113k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  465|   113k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  469|  20.6k|        {
  470|  20.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  471|  20.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  472|  20.6k|            const auto& imm_value = arg3.AsImmediateValue();
  473|       |
  474|  20.6k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  475|       |
  476|  20.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  477|  20.6k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  481|  23.3k|        {
  482|  23.3k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  483|  23.3k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  484|  23.3k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  485|       |
  486|  23.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  487|  23.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  488|       |
  489|  23.3k|            const phi::f32 new_value = lhs_value - rhs_value;
  490|       |
  491|  23.3k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  492|  23.3k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  496|  26.2k|        {
  497|  26.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  498|  26.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  499|  26.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  500|       |
  501|  26.2k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  502|  26.2k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  503|       |
  504|  26.2k|            const phi::f64 new_value = lhs_value - rhs_value;
  505|       |
  506|  26.2k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  507|  26.2k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  511|  51.1k|        {
  512|  51.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  513|  51.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  514|  51.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  515|       |
  516|  51.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  517|  51.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  518|       |
  519|  51.1k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  520|  51.1k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  524|  42.6k|        {
  525|  42.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  526|  42.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  527|  42.6k|            const auto& imm_value = arg3.AsImmediateValue();
  528|       |
  529|  42.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  530|       |
  531|  42.6k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  532|  42.6k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  536|  22.6k|        {
  537|  22.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  538|  22.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  539|  22.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  540|       |
  541|  22.6k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  542|  22.6k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  543|       |
  544|  22.6k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  545|  22.6k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  549|  93.3k|        {
  550|  93.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  551|  93.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  552|  93.3k|            const auto& imm_value = arg3.AsImmediateValue();
  553|       |
  554|  93.3k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  555|       |
  556|  93.3k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  557|  93.3k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  561|  33.8k|        {
  562|  33.8k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  563|  33.8k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  564|  33.8k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  565|       |
  566|  33.8k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  567|  33.8k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  568|       |
  569|  33.8k|            const phi::f32 new_value = lhs_value * rhs_value;
  570|       |
  571|  33.8k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  572|  33.8k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  576|  25.6k|        {
  577|  25.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  578|  25.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  579|  25.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  580|       |
  581|  25.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  582|  25.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  583|       |
  584|  25.6k|            const phi::f64 new_value = lhs_value * rhs_value;
  585|       |
  586|  25.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  587|  25.6k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  591|  8.29k|        {
  592|  8.29k|            const auto& dest_reg = arg1.AsRegisterInt();
  593|  8.29k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  594|  8.29k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  595|       |
  596|  8.29k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  597|  8.29k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  598|       |
  599|  8.29k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  600|  8.29k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  604|      1|        {
  605|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  606|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  607|      1|            const auto& imm_value = arg3.AsImmediateValue();
  608|       |
  609|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  610|       |
  611|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  612|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  616|  15.1k|        {
  617|  15.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  618|  15.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  619|  15.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  620|       |
  621|  15.1k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  622|  15.1k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  623|       |
  624|  15.1k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  625|  15.1k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  629|      1|        {
  630|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  631|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  632|      1|            const auto& imm_value = arg3.AsImmediateValue();
  633|       |
  634|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  635|       |
  636|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  637|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  641|      1|        {
  642|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  643|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  644|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  645|       |
  646|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  647|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  648|       |
  649|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (649:17): [True: 1, False: 0]
  ------------------
  650|      1|            {
  651|      1|                processor.Raise(Exception::DivideByZero);
  652|      1|                return;
  653|      1|            }
  654|       |
  655|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  656|       |
  657|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  658|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  662|      1|        {
  663|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  664|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  665|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  666|       |
  667|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  668|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  669|       |
  670|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (670:17): [True: 1, False: 0]
  ------------------
  671|      1|            {
  672|      1|                processor.Raise(Exception::DivideByZero);
  673|      1|                return;
  674|      1|            }
  675|       |
  676|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  677|       |
  678|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  679|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  683|  71.6k|        {
  684|  71.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  685|  71.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  686|  71.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  687|       |
  688|  71.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  689|  71.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  690|       |
  691|  71.6k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  692|  71.6k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  696|  24.5k|        {
  697|  24.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  698|  24.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  699|  24.5k|            const auto& imm_value = arg3.AsImmediateValue();
  700|       |
  701|  24.5k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  702|  24.5k|            phi::i32 shift_value = imm_value.signed_value;
  703|       |
  704|  24.5k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  705|  24.5k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  709|  66.0k|        {
  710|  66.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  711|  66.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  712|  66.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  713|       |
  714|  66.0k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  715|  66.0k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  716|       |
  717|  66.0k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  718|  66.0k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  722|  39.9k|        {
  723|  39.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  724|  39.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  725|  39.9k|            const auto& imm_value = arg3.AsImmediateValue();
  726|       |
  727|  39.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  728|  39.9k|            phi::i32 shift_value = imm_value.signed_value;
  729|       |
  730|  39.9k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  731|  39.9k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  735|  85.6k|        {
  736|  85.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  737|  85.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  738|  85.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  739|       |
  740|  85.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  741|  85.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  742|       |
  743|  85.6k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  744|  85.6k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  748|  27.9k|        {
  749|  27.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  750|  27.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  751|  27.9k|            const auto& imm_value = arg3.AsImmediateValue();
  752|       |
  753|  27.9k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  754|  27.9k|            phi::i32 shift_value = imm_value.signed_value;
  755|       |
  756|  27.9k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  757|  27.9k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  761|  46.9k|        {
  762|  46.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  763|  46.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  764|  46.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  765|       |
  766|  46.9k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  767|  46.9k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  768|       |
  769|  46.9k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  770|  46.9k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  774|  34.8k|        {
  775|  34.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  776|  34.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  777|  34.8k|            const auto& imm_value = arg3.AsImmediateValue();
  778|       |
  779|  34.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  780|  34.8k|            phi::i32 shift_value = imm_value.signed_value;
  781|       |
  782|  34.8k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  783|  34.8k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  787|  23.6k|        {
  788|  23.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  789|  23.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  790|  23.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  791|       |
  792|  23.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  793|  23.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  794|  23.6k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  795|       |
  796|  23.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  797|  23.6k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  801|   118k|        {
  802|   118k|            const auto& dest_reg  = arg1.AsRegisterInt();
  803|   118k|            const auto& src_reg   = arg2.AsRegisterInt();
  804|   118k|            const auto& imm_value = arg3.AsImmediateValue();
  805|       |
  806|   118k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  807|   118k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  808|       |
  809|   118k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  810|   118k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  814|  14.5k|        {
  815|  14.5k|            const auto& dest_reg = arg1.AsRegisterInt();
  816|  14.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  817|  14.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  818|       |
  819|  14.5k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  820|  14.5k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  821|  14.5k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  822|       |
  823|  14.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  824|  14.5k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  828|  20.4k|        {
  829|  20.4k|            const auto& dest_reg  = arg1.AsRegisterInt();
  830|  20.4k|            const auto& src_reg   = arg2.AsRegisterInt();
  831|  20.4k|            const auto& imm_value = arg3.AsImmediateValue();
  832|       |
  833|  20.4k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  834|  20.4k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  835|       |
  836|  20.4k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  837|  20.4k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  841|  20.8k|        {
  842|  20.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  843|  20.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  844|  20.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  845|       |
  846|  20.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  847|  20.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  848|  20.8k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  849|       |
  850|  20.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  851|  20.8k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  855|   611k|        {
  856|   611k|            const auto& dest_reg  = arg1.AsRegisterInt();
  857|   611k|            const auto& src_reg   = arg2.AsRegisterInt();
  858|   611k|            const auto& imm_value = arg3.AsImmediateValue();
  859|       |
  860|   611k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  861|   611k|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  862|       |
  863|   611k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  864|   611k|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  868|  14.1k|        {
  869|  14.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  870|  14.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  871|  14.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  872|       |
  873|  14.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  874|  14.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  875|       |
  876|  14.1k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (876:41): [True: 1, False: 14.1k]
  ------------------
  877|       |
  878|  14.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  879|  14.1k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  883|  31.5k|        {
  884|  31.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  885|  31.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  886|  31.5k|            const auto& imm_value = arg3.AsImmediateValue();
  887|       |
  888|  31.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  889|       |
  890|  31.5k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (890:41): [True: 0, False: 31.5k]
  ------------------
  891|       |
  892|  31.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  893|  31.5k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  897|  15.0k|        {
  898|  15.0k|            const auto& dest_reg = arg1.AsRegisterInt();
  899|  15.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  900|  15.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  901|       |
  902|  15.0k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  903|  15.0k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  904|       |
  905|  15.0k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (905:41): [True: 1, False: 15.0k]
  ------------------
  906|       |
  907|  15.0k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  908|  15.0k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  912|   111k|        {
  913|   111k|            const auto& dest_reg  = arg1.AsRegisterInt();
  914|   111k|            const auto& src_reg   = arg2.AsRegisterInt();
  915|   111k|            const auto& imm_value = arg3.AsImmediateValue();
  916|       |
  917|   111k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  918|       |
  919|   111k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (919:41): [True: 0, False: 111k]
  ------------------
  920|       |
  921|   111k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  922|   111k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  926|  13.3k|        {
  927|  13.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  928|  13.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  929|       |
  930|  13.3k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  931|  13.3k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  932|       |
  933|  13.3k|            const phi::boolean new_value = (lhs_value < rhs_value);
  934|       |
  935|  13.3k|            processor.SetFPSRValue(new_value);
  936|  13.3k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  940|  25.8k|        {
  941|  25.8k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  942|  25.8k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  943|       |
  944|  25.8k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  945|  25.8k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  946|       |
  947|  25.8k|            const phi::boolean new_value = (lhs_value < rhs_value);
  948|       |
  949|  25.8k|            processor.SetFPSRValue(new_value);
  950|  25.8k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  954|  12.8k|        {
  955|  12.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  956|  12.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  957|  12.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  958|       |
  959|  12.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  960|  12.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  961|       |
  962|  12.8k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (962:41): [True: 0, False: 12.8k]
  ------------------
  963|       |
  964|  12.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  965|  12.8k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  969|  30.8k|        {
  970|  30.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  971|  30.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  972|  30.8k|            const auto& imm_value = arg3.AsImmediateValue();
  973|       |
  974|  30.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  975|       |
  976|  30.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (976:41): [True: 1.00k, False: 29.8k]
  ------------------
  977|       |
  978|  30.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  979|  30.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  983|  11.4k|        {
  984|  11.4k|            const auto& dest_reg = arg1.AsRegisterInt();
  985|  11.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  986|  11.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  987|       |
  988|  11.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  989|  11.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  990|       |
  991|  11.4k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (991:41): [True: 0, False: 11.4k]
  ------------------
  992|       |
  993|  11.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  994|  11.4k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  998|  24.7k|        {
  999|  24.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1000|  24.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1001|  24.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1002|       |
 1003|  24.7k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1004|       |
 1005|  24.7k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1005:41): [True: 0, False: 24.7k]
  ------------------
 1006|       |
 1007|  24.7k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1008|  24.7k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1012|   118k|        {
 1013|   118k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1014|   118k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1015|       |
 1016|   118k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1017|   118k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1018|       |
 1019|   118k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1020|       |
 1021|   118k|            processor.SetFPSRValue(new_value);
 1022|   118k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1026|   283k|        {
 1027|   283k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1028|   283k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1029|       |
 1030|   283k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1031|   283k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1032|       |
 1033|   283k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1034|       |
 1035|   283k|            processor.SetFPSRValue(new_value);
 1036|   283k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1040|  11.7k|        {
 1041|  11.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1042|  11.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1043|  11.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1044|       |
 1045|  11.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1046|  11.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1047|       |
 1048|  11.7k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1048:41): [True: 11.7k, False: 1]
  ------------------
 1049|       |
 1050|  11.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1051|  11.7k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1055|  24.5k|        {
 1056|  24.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1057|  24.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1058|  24.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1059|       |
 1060|  24.5k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1061|       |
 1062|  24.5k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1062:41): [True: 24.5k, False: 0]
  ------------------
 1063|       |
 1064|  24.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1065|  24.5k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1069|  24.2k|        {
 1070|  24.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1071|  24.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1072|  24.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1073|       |
 1074|  24.2k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1075|  24.2k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1076|       |
 1077|  24.2k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1077:41): [True: 24.2k, False: 0]
  ------------------
 1078|       |
 1079|  24.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1080|  24.2k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1084|   259k|        {
 1085|   259k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1086|   259k|            const auto& src_reg   = arg2.AsRegisterInt();
 1087|   259k|            const auto& imm_value = arg3.AsImmediateValue();
 1088|       |
 1089|   259k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1090|       |
 1091|   259k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1091:41): [True: 176k, False: 83.0k]
  ------------------
 1092|       |
 1093|   259k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1094|   259k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1098|  18.9k|        {
 1099|  18.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1100|  18.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1101|       |
 1102|  18.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1103|  18.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1104|       |
 1105|  18.9k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1106|       |
 1107|  18.9k|            processor.SetFPSRValue(new_value);
 1108|  18.9k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1112|  16.0k|        {
 1113|  16.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1114|  16.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1115|       |
 1116|  16.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1117|  16.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1118|       |
 1119|  16.0k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1120|       |
 1121|  16.0k|            processor.SetFPSRValue(new_value);
 1122|  16.0k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1126|  14.2k|        {
 1127|  14.2k|            const auto& dest_reg = arg1.AsRegisterInt();
 1128|  14.2k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1129|  14.2k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1130|       |
 1131|  14.2k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1132|  14.2k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1133|       |
 1134|  14.2k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1134:41): [True: 14.2k, False: 0]
  ------------------
 1135|       |
 1136|  14.2k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1137|  14.2k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1141|   353k|        {
 1142|   353k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1143|   353k|            const auto& src_reg   = arg2.AsRegisterInt();
 1144|   353k|            const auto& imm_value = arg3.AsImmediateValue();
 1145|       |
 1146|   353k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1147|       |
 1148|   353k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1148:41): [True: 351k, False: 1.96k]
  ------------------
 1149|       |
 1150|   353k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1151|   353k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1155|  13.4k|        {
 1156|  13.4k|            const auto& dest_reg = arg1.AsRegisterInt();
 1157|  13.4k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1158|  13.4k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1159|       |
 1160|  13.4k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1161|  13.4k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1162|       |
 1163|  13.4k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1163:41): [True: 13.4k, False: 0]
  ------------------
 1164|       |
 1165|  13.4k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1166|  13.4k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1170|  31.5k|        {
 1171|  31.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1172|  31.5k|            const auto& src_reg   = arg2.AsRegisterInt();
 1173|  31.5k|            const auto& imm_value = arg3.AsImmediateValue();
 1174|       |
 1175|  31.5k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1176|       |
 1177|  31.5k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1177:41): [True: 31.5k, False: 0]
  ------------------
 1178|       |
 1179|  31.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1180|  31.5k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1184|  17.9k|        {
 1185|  17.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1186|  17.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1187|       |
 1188|  17.9k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1189|  17.9k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1190|       |
 1191|  17.9k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1192|       |
 1193|  17.9k|            processor.SetFPSRValue(new_value);
 1194|  17.9k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1198|  31.3k|        {
 1199|  31.3k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1200|  31.3k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1201|       |
 1202|  31.3k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1203|  31.3k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1204|       |
 1205|  31.3k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1206|       |
 1207|  31.3k|            processor.SetFPSRValue(new_value);
 1208|  31.3k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1212|  32.6k|        {
 1213|  32.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1214|  32.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1215|  32.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1216|       |
 1217|  32.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1218|  32.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1219|       |
 1220|  32.6k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1220:41): [True: 31.2k, False: 1.42k]
  ------------------
 1221|       |
 1222|  32.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1223|  32.6k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1227|  24.9k|        {
 1228|  24.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1229|  24.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1230|  24.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1231|       |
 1232|  24.9k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1233|       |
 1234|  24.9k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1234:41): [True: 24.9k, False: 0]
  ------------------
 1235|       |
 1236|  24.9k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1237|  24.9k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1241|  96.6k|        {
 1242|  96.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1243|  96.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1244|  96.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1245|       |
 1246|  96.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1247|  96.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1248|       |
 1249|  96.6k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1249:41): [True: 92.2k, False: 4.45k]
  ------------------
 1250|       |
 1251|  96.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1252|  96.6k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1256|  91.8k|        {
 1257|  91.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1258|  91.8k|            const auto& src_reg   = arg2.AsRegisterInt();
 1259|  91.8k|            const auto& imm_value = arg3.AsImmediateValue();
 1260|       |
 1261|  91.8k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1262|       |
 1263|  91.8k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1263:41): [True: 91.8k, False: 0]
  ------------------
 1264|       |
 1265|  91.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1266|  91.8k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1270|  24.2k|        {
 1271|  24.2k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1272|  24.2k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1273|       |
 1274|  24.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1275|  24.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1276|       |
 1277|  24.2k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1278|       |
 1279|  24.2k|            processor.SetFPSRValue(new_value);
 1280|  24.2k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1284|  13.0k|        {
 1285|  13.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1286|  13.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1287|       |
 1288|  13.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1289|  13.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1290|       |
 1291|  13.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1292|       |
 1293|  13.0k|            processor.SetFPSRValue(new_value);
 1294|  13.0k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1298|  20.7k|        {
 1299|  20.7k|            const auto& dest_reg = arg1.AsRegisterInt();
 1300|  20.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1301|  20.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1302|       |
 1303|  20.7k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1304|  20.7k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1305|       |
 1306|  20.7k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1306:41): [True: 1, False: 20.7k]
  ------------------
 1307|       |
 1308|  20.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1309|  20.7k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1313|  28.3k|        {
 1314|  28.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1315|  28.3k|            const auto& src_reg   = arg2.AsRegisterInt();
 1316|  28.3k|            const auto& imm_value = arg3.AsImmediateValue();
 1317|       |
 1318|  28.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1319|       |
 1320|  28.3k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1320:41): [True: 0, False: 28.3k]
  ------------------
 1321|       |
 1322|  28.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1323|  28.3k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1327|  23.9k|        {
 1328|  23.9k|            const auto& dest_reg = arg1.AsRegisterInt();
 1329|  23.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1330|  23.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1331|       |
 1332|  23.9k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1333|  23.9k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1334|       |
 1335|  23.9k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1335:41): [True: 1, False: 23.9k]
  ------------------
 1336|       |
 1337|  23.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1338|  23.9k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1342|  91.2k|        {
 1343|  91.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1344|  91.2k|            const auto& src_reg   = arg2.AsRegisterInt();
 1345|  91.2k|            const auto& imm_value = arg3.AsImmediateValue();
 1346|       |
 1347|  91.2k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1348|       |
 1349|  91.2k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1349:41): [True: 30.5k, False: 60.6k]
  ------------------
 1350|       |
 1351|  91.2k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1352|  91.2k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1356|  14.6k|        {
 1357|  14.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1358|  14.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1359|       |
 1360|  14.6k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1361|  14.6k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1362|       |
 1363|  14.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1364|       |
 1365|  14.6k|            processor.SetFPSRValue(new_value);
 1366|  14.6k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1370|  13.6k|        {
 1371|  13.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1372|  13.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1373|       |
 1374|  13.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1375|  13.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1376|       |
 1377|  13.6k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1378|       |
 1379|  13.6k|            processor.SetFPSRValue(new_value);
 1380|  13.6k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1384|  55.4k|        {
 1385|  55.4k|            const auto& test_reg   = arg1.AsRegisterInt();
 1386|  55.4k|            const auto& jump_label = arg2.AsLabel();
 1387|       |
 1388|  55.4k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1389|       |
 1390|  55.4k|            if (test_value == 0)
  ------------------
  |  Branch (1390:17): [True: 34.4k, False: 21.0k]
  ------------------
 1391|  34.4k|            {
 1392|  34.4k|                JumpToLabel(processor, jump_label.label_name);
 1393|  34.4k|            }
 1394|  55.4k|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1398|  45.8k|        {
 1399|  45.8k|            const auto& test_reg   = arg1.AsRegisterInt();
 1400|  45.8k|            const auto& jump_label = arg2.AsLabel();
 1401|       |
 1402|  45.8k|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1403|       |
 1404|  45.8k|            if (test_value != 0)
  ------------------
  |  Branch (1404:17): [True: 23.3k, False: 22.5k]
  ------------------
 1405|  23.3k|            {
 1406|  23.3k|                JumpToLabel(processor, jump_label.label_name);
 1407|  23.3k|            }
 1408|  45.8k|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1412|  23.4k|        {
 1413|  23.4k|            const auto& jump_label = arg1.AsLabel();
 1414|       |
 1415|  23.4k|            phi::boolean test_value = processor.GetFPSRValue();
 1416|       |
 1417|  23.4k|            if (test_value)
  ------------------
  |  Branch (1417:17): [True: 8.33k, False: 15.0k]
  ------------------
 1418|  8.33k|            {
 1419|  8.33k|                JumpToLabel(processor, jump_label.label_name);
 1420|  8.33k|            }
 1421|  23.4k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1425|   893k|        {
 1426|   893k|            const auto& jump_label = arg1.AsLabel();
 1427|       |
 1428|   893k|            phi::boolean test_value = processor.GetFPSRValue();
 1429|       |
 1430|   893k|            if (!test_value)
  ------------------
  |  Branch (1430:17): [True: 871k, False: 21.9k]
  ------------------
 1431|   871k|            {
 1432|   871k|                JumpToLabel(processor, jump_label.label_name);
 1433|   871k|            }
 1434|   893k|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1438|  64.1k|        {
 1439|  64.1k|            const auto& jump_label = arg1.AsLabel();
 1440|       |
 1441|  64.1k|            JumpToLabel(processor, jump_label.label_name);
 1442|  64.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1446|  35.5k|        {
 1447|  35.5k|            const auto& jump_register = arg1.AsRegisterInt();
 1448|       |
 1449|  35.5k|            JumpToRegister(processor, jump_register.register_id);
 1450|  35.5k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1454|  61.0k|        {
 1455|  61.0k|            const auto& jump_label = arg1.AsLabel();
 1456|       |
 1457|  61.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1458|  61.0k|                                                  processor.GetNextProgramCounter());
 1459|       |
 1460|  61.0k|            JumpToLabel(processor, jump_label.label_name);
 1461|  61.0k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1465|   416k|        {
 1466|   416k|            const auto& jump_register = arg1.AsRegisterInt();
 1467|       |
 1468|   416k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1469|   416k|                                                  processor.GetNextProgramCounter());
 1470|       |
 1471|   416k|            JumpToRegister(processor, jump_register.register_id);
 1472|   416k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1476|  17.9k|        {
 1477|  17.9k|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1478|  17.9k|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1479|       |
 1480|  17.9k|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1481|       |
 1482|  17.9k|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1483|  17.9k|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1487|      1|        {
 1488|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1489|       |
 1490|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1491|       |
 1492|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1492:17): [True: 0, False: 1]
  ------------------
 1493|      0|            {
 1494|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1495|      0|                return;
 1496|      0|            }
 1497|       |
 1498|      1|            phi::i32 address = optional_address.value();
 1499|       |
 1500|      1|            auto optional_value =
 1501|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1502|       |
 1503|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1503:17): [True: 1, False: 0]
  ------------------
 1504|      1|            {
 1505|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1506|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1507|      1|                return;
 1508|      1|            }
 1509|       |
 1510|      0|            phi::i32 value = optional_value.value();
 1511|       |
 1512|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1513|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1517|      1|        {
 1518|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1519|       |
 1520|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1521|       |
 1522|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1522:17): [True: 0, False: 1]
  ------------------
 1523|      0|            {
 1524|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1525|      0|                return;
 1526|      0|            }
 1527|       |
 1528|      1|            phi::i32 address = optional_address.value();
 1529|       |
 1530|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1531|      1|                    static_cast<std::size_t>(address.unsafe()));
 1532|       |
 1533|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1533:17): [True: 1, False: 0]
  ------------------
 1534|      1|            {
 1535|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1536|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1537|      1|                return;
 1538|      1|            }
 1539|       |
 1540|      0|            phi::u32 value = optional_value.value();
 1541|       |
 1542|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1543|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1547|      1|        {
 1548|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1549|       |
 1550|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1551|       |
 1552|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1552:17): [True: 0, False: 1]
  ------------------
 1553|      0|            {
 1554|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1555|      0|                return;
 1556|      0|            }
 1557|       |
 1558|      1|            phi::i32 address = optional_address.value();
 1559|       |
 1560|      1|            auto optional_value =
 1561|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1562|       |
 1563|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1563:17): [True: 1, False: 0]
  ------------------
 1564|      1|            {
 1565|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1566|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1567|      1|                return;
 1568|      1|            }
 1569|       |
 1570|      0|            phi::i32 value = optional_value.value();
 1571|       |
 1572|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1573|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1577|      1|        {
 1578|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1579|       |
 1580|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1581|       |
 1582|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1582:17): [True: 0, False: 1]
  ------------------
 1583|      0|            {
 1584|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1585|      0|                return;
 1586|      0|            }
 1587|       |
 1588|      1|            phi::i32 address = optional_address.value();
 1589|       |
 1590|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1591|      1|                    static_cast<std::size_t>(address.unsafe()));
 1592|       |
 1593|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1593:17): [True: 1, False: 0]
  ------------------
 1594|      1|            {
 1595|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1596|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1597|      1|                return;
 1598|      1|            }
 1599|       |
 1600|      0|            phi::u32 value = optional_value.value();
 1601|       |
 1602|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1603|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1607|      1|        {
 1608|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1609|       |
 1610|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1611|       |
 1612|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1612:17): [True: 0, False: 1]
  ------------------
 1613|      0|            {
 1614|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1615|      0|                return;
 1616|      0|            }
 1617|       |
 1618|      1|            phi::i32 address = optional_address.value();
 1619|       |
 1620|      1|            auto optional_value =
 1621|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1622|       |
 1623|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1623:17): [True: 1, False: 0]
  ------------------
 1624|      1|            {
 1625|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1626|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1627|      1|                return;
 1628|      1|            }
 1629|       |
 1630|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1631|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1635|      1|        {
 1636|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1637|       |
 1638|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1639|       |
 1640|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1640:17): [True: 0, False: 1]
  ------------------
 1641|      0|            {
 1642|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1643|      0|                return;
 1644|      0|            }
 1645|       |
 1646|      1|            phi::i32 address = optional_address.value();
 1647|       |
 1648|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1649|      1|                    static_cast<std::size_t>(address.unsafe()));
 1650|       |
 1651|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1651:17): [True: 1, False: 0]
  ------------------
 1652|      1|            {
 1653|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1654|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1655|      1|                return;
 1656|      1|            }
 1657|       |
 1658|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1659|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1663|      1|        {
 1664|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1665|       |
 1666|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1667|       |
 1668|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1668:17): [True: 0, False: 1]
  ------------------
 1669|      0|            {
 1670|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1671|      0|                return;
 1672|      0|            }
 1673|       |
 1674|      1|            phi::i32 address = optional_address.value();
 1675|       |
 1676|      1|            auto optional_value =
 1677|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1678|       |
 1679|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1679:17): [True: 1, False: 0]
  ------------------
 1680|      1|            {
 1681|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1682|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1683|      1|                return;
 1684|      1|            }
 1685|       |
 1686|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1687|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1691|      1|        {
 1692|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1693|       |
 1694|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1695|       |
 1696|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1696:17): [True: 0, False: 1]
  ------------------
 1697|      0|            {
 1698|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1699|      0|                return;
 1700|      0|            }
 1701|       |
 1702|      1|            phi::i32 address = optional_address.value();
 1703|       |
 1704|      1|            auto optional_value =
 1705|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1706|       |
 1707|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1707:17): [True: 1, False: 0]
  ------------------
 1708|      1|            {
 1709|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1710|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1711|      1|                return;
 1712|      1|            }
 1713|       |
 1714|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1715|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1939|  22.8k|        {
 1940|  22.8k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1941|  22.8k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1942|       |
 1943|  22.8k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1944|       |
 1945|  22.8k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1946|  22.8k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1950|  7.94k|        {
 1951|  7.94k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1952|  7.94k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1953|       |
 1954|  7.94k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1955|       |
 1956|  7.94k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1957|  7.94k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1961|  14.0k|        {
 1962|  14.0k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1963|  14.0k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1964|       |
 1965|  14.0k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1966|       |
 1967|  14.0k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1968|       |
 1969|  14.0k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1970|  14.0k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1974|  19.6k|        {
 1975|  19.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1976|  19.6k|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1977|       |
 1978|  19.6k|            const std::int32_t source_value =
 1979|  19.6k|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1980|       |
 1981|  19.6k|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1982|       |
 1983|  19.6k|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1984|  19.6k|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1988|  14.6k|        {
 1989|  14.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1990|  14.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1991|       |
 1992|  14.6k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1993|       |
 1994|  14.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 1995|  14.6k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1999|  30.6k|        {
 2000|  30.6k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2001|  30.6k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2002|       |
 2003|  30.6k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2004|  30.6k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2005|  30.6k|            const float        converted_value_float =
 2006|  30.6k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2007|       |
 2008|  30.6k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2009|  30.6k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2013|  9.37k|        {
 2014|  9.37k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2015|  9.37k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2016|       |
 2017|  9.37k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2018|  9.37k|            const float  converted_value = static_cast<float>(src_value);
 2019|       |
 2020|  9.37k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2021|  9.37k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2025|  20.2k|        {
 2026|  20.2k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2027|  20.2k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2028|       |
 2029|  20.2k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2030|  20.2k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2031|  20.2k|            const float        converted_value_float =
 2032|  20.2k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2033|       |
 2034|  20.2k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2035|  20.2k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2039|  18.4k|        {
 2040|  18.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2041|  18.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2042|       |
 2043|  18.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2044|  18.4k|            const std::int32_t converted_value_int =
 2045|  18.4k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2046|  18.4k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2047|       |
 2048|  18.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2049|  18.4k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2053|  11.7k|        {
 2054|  11.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2055|  11.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2056|       |
 2057|  11.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2058|  11.7k|            const std::int32_t converted_value_int =
 2059|  11.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2060|  11.7k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2061|       |
 2062|  11.7k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2063|  11.7k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2067|      1|        {
 2068|      1|            processor.Raise(Exception::Trap);
 2069|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2073|      8|        {
 2074|      8|            processor.Raise(Exception::Halt);
 2075|      8|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2079|   203k|        {
 2080|       |            /* Do nothing */
 2081|   203k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  169|   314k|    {
  170|   314k|        phi::i64 res = phi::i64(lhs) + rhs;
  171|       |
  172|   314k|        SafeWriteInteger(processor, dest_reg, res);
  173|   314k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  124|   472k|    {
  125|   472k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  126|   472k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  127|       |
  128|       |        // Check for underflow
  129|   472k|        if (value < min)
  ------------------
  |  Branch (129:13): [True: 21.1k, False: 450k]
  ------------------
  130|  21.1k|        {
  131|  21.1k|            processor.Raise(Exception::Underflow);
  132|       |
  133|  21.1k|            value = max + (value % (min - 1));
  134|  21.1k|        }
  135|       |        // Check for overflow
  136|   450k|        else if (value > max)
  ------------------
  |  Branch (136:18): [True: 19.3k, False: 431k]
  ------------------
  137|  19.3k|        {
  138|  19.3k|            processor.Raise(Exception::Overflow);
  139|       |
  140|  19.3k|            value = min + (value % (max + 1));
  141|  19.3k|        }
  142|       |
  143|   472k|        PHI_ASSERT(value >= min);
  144|   472k|        PHI_ASSERT(value <= max);
  145|       |
  146|   472k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  147|   472k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  177|  73.5k|    {
  178|  73.5k|        phi::u64 res = phi::u64(lhs) + rhs;
  179|       |
  180|  73.5k|        SafeWriteInteger(processor, dest_reg, res);
  181|  73.5k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  151|   338k|    {
  152|   338k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  153|       |
  154|       |        // Check for overflow
  155|   338k|        if (value > max)
  ------------------
  |  Branch (155:13): [True: 27.4k, False: 311k]
  ------------------
  156|  27.4k|        {
  157|  27.4k|            processor.Raise(Exception::Overflow);
  158|       |
  159|  27.4k|            value %= max + 1u;
  160|  27.4k|        }
  161|       |
  162|   338k|        PHI_ASSERT(value <= max);
  163|       |
  164|   338k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  165|   338k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  185|  55.2k|    {
  186|  55.2k|        phi::i64 res = phi::i64(lhs) - rhs;
  187|       |
  188|  55.2k|        SafeWriteInteger(processor, dest_reg, res);
  189|  55.2k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  193|   134k|    {
  194|   134k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  195|       |
  196|   134k|        if (lhs < rhs)
  ------------------
  |  Branch (196:13): [True: 28.0k, False: 106k]
  ------------------
  197|  28.0k|        {
  198|  28.0k|            processor.Raise(Exception::Underflow);
  199|       |
  200|  28.0k|            phi::u64 res = max - rhs + lhs + 1u;
  201|  28.0k|            SafeWriteInteger(processor, dest_reg, res);
  202|  28.0k|            return;
  203|  28.0k|        }
  204|       |
  205|   106k|        phi::u64 res = phi::u64(lhs) - rhs;
  206|       |
  207|   106k|        SafeWriteInteger(processor, dest_reg, res);
  208|   106k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  212|  93.8k|    {
  213|  93.8k|        phi::i64 res = phi::i64(lhs) * rhs;
  214|       |
  215|  93.8k|        SafeWriteInteger(processor, dest_reg, res);
  216|  93.8k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  220|   115k|    {
  221|   115k|        phi::u64 res = phi::u64(lhs) * rhs;
  222|       |
  223|   115k|        SafeWriteInteger(processor, dest_reg, res);
  224|   115k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  228|  8.29k|    {
  229|  8.29k|        if (rhs == 0)
  ------------------
  |  Branch (229:13): [True: 2, False: 8.29k]
  ------------------
  230|      2|        {
  231|      2|            processor.Raise(Exception::DivideByZero);
  232|      2|            return;
  233|      2|        }
  234|       |
  235|  8.29k|        phi::i64 res = phi::i64(lhs) / rhs;
  236|       |
  237|  8.29k|        SafeWriteInteger(processor, dest_reg, res);
  238|  8.29k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  242|  15.1k|    {
  243|  15.1k|        if (rhs == 0u)
  ------------------
  |  Branch (243:13): [True: 2, False: 15.1k]
  ------------------
  244|      2|        {
  245|      2|            processor.Raise(Exception::DivideByZero);
  246|      2|            return;
  247|      2|        }
  248|       |
  249|  15.1k|        phi::u64 res = phi::u64(lhs) / rhs;
  250|       |
  251|  15.1k|        SafeWriteInteger(processor, dest_reg, res);
  252|  15.1k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  325|   209k|    {
  326|   209k|        if (shift > 31)
  ------------------
  |  Branch (326:13): [True: 9.98k, False: 199k]
  ------------------
  327|  9.98k|        {
  328|  9.98k|            processor.Raise(Exception::BadShift);
  329|       |
  330|       |            // Just set register to 0
  331|  9.98k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  332|  9.98k|            return;
  333|  9.98k|        }
  334|       |
  335|       |        // Negative shifts are undefined behavior
  336|   199k|        if (shift < 0)
  ------------------
  |  Branch (336:13): [True: 17.6k, False: 182k]
  ------------------
  337|  17.6k|        {
  338|  17.6k|            processor.Raise(Exception::BadShift);
  339|  17.6k|            return;
  340|  17.6k|        }
  341|       |
  342|   182k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  343|       |
  344|   182k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  345|   182k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  256|   105k|    {
  257|       |        // Prevent undefined behavior by shifting by more than 31
  258|   105k|        if (shift > 31)
  ------------------
  |  Branch (258:13): [True: 11.4k, False: 94.4k]
  ------------------
  259|  11.4k|        {
  260|  11.4k|            processor.Raise(Exception::BadShift);
  261|       |
  262|       |            // Just set register to 0
  263|  11.4k|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  264|  11.4k|            return;
  265|  11.4k|        }
  266|       |
  267|       |        // Do nothing when shifting by zero to prevent undefined behavior
  268|  94.4k|        if (shift == 0)
  ------------------
  |  Branch (268:13): [True: 59.2k, False: 35.1k]
  ------------------
  269|  59.2k|        {
  270|  59.2k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  271|  59.2k|            return;
  272|  59.2k|        }
  273|       |
  274|       |        // Negative shifts are undefiend behavior
  275|  35.1k|        if (shift < 0)
  ------------------
  |  Branch (275:13): [True: 7.40k, False: 27.7k]
  ------------------
  276|  7.40k|        {
  277|  7.40k|            processor.Raise(Exception::BadShift);
  278|  7.40k|            return;
  279|  7.40k|        }
  280|       |
  281|  27.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  282|       |
  283|  27.7k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  284|       |
  285|  27.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  286|  27.7k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  27.7k|    {
   30|  27.7k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  27.7k|        return value & ~(-1 << (32 - n));
   33|  27.7k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  290|  81.8k|    {
  291|       |        // Prevent undefined behavior by shifting by more than 31
  292|  81.8k|        if (shift > 31)
  ------------------
  |  Branch (292:13): [True: 4.67k, False: 77.1k]
  ------------------
  293|  4.67k|        {
  294|  4.67k|            processor.Raise(Exception::BadShift);
  295|       |
  296|       |            // Is negative ie. sign bit is set
  297|  4.67k|            if (base < 0)
  ------------------
  |  Branch (297:17): [True: 2.93k, False: 1.74k]
  ------------------
  298|  2.93k|            {
  299|       |                // Set every byte to 1
  300|  2.93k|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  301|  2.93k|            }
  302|  1.74k|            else
  303|  1.74k|            {
  304|       |                // Set every byte to 0
  305|  1.74k|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  306|  1.74k|            }
  307|  4.67k|            return;
  308|  4.67k|        }
  309|       |
  310|       |        // Negative shifts are undefined behavior
  311|  77.1k|        if (shift < 0)
  ------------------
  |  Branch (311:13): [True: 19.3k, False: 57.7k]
  ------------------
  312|  19.3k|        {
  313|  19.3k|            processor.Raise(Exception::BadShift);
  314|  19.3k|            return;
  315|  19.3k|        }
  316|       |
  317|  57.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  318|       |
  319|  57.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  320|  57.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.06M|    {
   39|       |        // Lookup the label
   40|  1.06M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.06M|        PHI_ASSERT(program != nullptr);
   42|  1.06M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.06M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 45, False: 1.06M]
  ------------------
   45|     45|        {
   46|     45|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     45|            processor.Raise(Exception::UnknownLabel);
   48|     45|            return;
   49|     45|        }
   50|       |
   51|  1.06M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.06M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.06M|        processor.SetNextProgramCounter(jump_point);
   56|  1.06M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   452k|    {
   60|   452k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   452k|        phi::u32 max_address =
   63|   452k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   452k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 9, False: 452k]
  ------------------
   65|      9|        {
   66|      9|            processor.Raise(Exception::AddressOutOfBounds);
   67|      9|            return;
   68|      9|        }
   69|       |
   70|   452k|        processor.SetNextProgramCounter(address.unsafe());
   71|   452k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      8|    {
  101|      8|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 8, False: 0]
  ------------------
  102|      8|        {
  103|      8|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      8|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 8]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      8|            return imm_value.signed_value;
  111|      8|        }
  112|       |
  113|      0|        PHI_ASSERT(argument.GetType() == ArgumentType::AddressDisplacement);
  114|       |
  115|      0|        const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|        return CalculateDisplacementAddress(processor, adr_displacement);
  117|      8|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  6.14M|    {
   12|  6.14M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  6.14M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  6.14M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  6.14M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  6.14M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  6.14M|                   "Unexpected argument type for arg1");
   22|  6.14M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  6.14M|                   "Unexpected argument type for arg2");
   24|  6.14M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  6.14M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  6.14M|        m_Executor(processor, arg1, arg2, arg3);
   29|  6.14M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  96.8k|    {
  453|  96.8k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  96.8k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.98M|    {
   17|  1.98M|        m_ValueSigned = val;
   18|  1.98M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  1.28M|    {
   22|  1.28M|        m_ValueUnsigned = val;
   23|  1.28M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  3.19M|    {
   27|  3.19M|        return m_ValueSigned;
   28|  3.19M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.97M|    {
   32|  1.97M|        return m_ValueUnsigned;
   33|  1.97M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  3.87M|    {
   37|  3.87M|        return m_IsReadOnly;
   38|  3.87M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      1|    {
   20|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 1, False: 0]
  ------------------
   21|      1|        {
   22|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      1|            return {};
   24|      1|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      1|    {
   61|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 1, False: 0]
  ------------------
   62|      1|        {
   63|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      1|            return {};
   65|      1|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      1|    {
   78|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 1, False: 0]
  ------------------
   79|      1|        {
   80|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      1|            return {};
   82|      1|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      1|    {
   95|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 1, False: 0]
  ------------------
   96|      1|        {
   97|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      1|            return {};
   99|      1|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  111|      1|    {
  112|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 0]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  119|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
  120|      1|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  123|      1|    {
  124|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (124:13): [True: 1, False: 0]
  ------------------
  125|      1|        {
  126|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  127|      1|            return {};
  128|      1|        }
  129|       |
  130|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  131|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  132|      1|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      8|    {
  244|      8|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 8]
  ------------------
  245|      8|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      8|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  6.23k|    {
  256|  6.23k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 6.23M, False: 6.23k]
  ------------------
  257|  6.23M|        {
  258|  6.23M|            val.signed_value = 0;
  259|  6.23M|        }
  260|  6.23k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   506k|    {
   24|   506k|        switch (token.length())
   25|   506k|        {
   26|       |            // 1 character OpCodes
   27|  18.3k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 18.3k, False: 487k]
  ------------------
   28|  18.3k|                char c1 = token[0];
   29|  18.3k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 9.18k, False: 9.13k]
  ------------------
   30|  9.18k|                {
   31|  9.18k|                    return OpCode::J;
   32|  9.18k|                }
   33|  9.13k|                break;
   34|  18.3k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  33.0k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 33.0k, False: 473k]
  ------------------
   38|  33.0k|                char c1 = token[0];
   39|  33.0k|                char c2 = token[1];
   40|       |
   41|  33.0k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 14.4k, False: 18.6k]
  ------------------
   42|  33.0k|                {
   43|    207|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 207, False: 32.8k]
  ------------------
   44|    470|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 263, False: 32.8k]
  ------------------
   45|    470|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 153, False: 317]
  ------------------
   46|    153|                        {
   47|    153|                            return OpCode::JR;
   48|    153|                        }
   49|    317|                        break;
   50|       |
   51|  5.14k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 5.14k, False: 27.9k]
  ------------------
   52|  5.36k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 218, False: 32.8k]
  ------------------
   53|  5.36k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 113, False: 5.25k]
  ------------------
   54|  5.36k|                        {
   55|     67|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 67, False: 5.30k]
  ------------------
   56|    144|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 77, False: 5.29k]
  ------------------
   57|    144|                                return OpCode::LB;
   58|  1.71k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 1.71k, False: 3.64k]
  ------------------
   59|  1.72k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 10, False: 5.35k]
  ------------------
   60|  1.72k|                                return OpCode::LD;
   61|     70|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 70, False: 5.29k]
  ------------------
   62|    140|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 70, False: 5.29k]
  ------------------
   63|    140|                                return OpCode::LF;
   64|     84|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 84, False: 5.28k]
  ------------------
   65|    207|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 123, False: 5.24k]
  ------------------
   66|    207|                                return OpCode::LH;
   67|  2.74k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 2.74k, False: 2.62k]
  ------------------
   68|  3.03k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 290, False: 5.07k]
  ------------------
   69|  3.03k|                                return OpCode::LW;
   70|  5.36k|                        }
   71|    113|                        break;
   72|    113|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 80, False: 33.0k]
  ------------------
   73|  4.53k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 4.45k, False: 28.6k]
  ------------------
   74|  4.53k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 282, False: 4.24k]
  ------------------
   75|    282|                        {
   76|    282|                            return OpCode::OR;
   77|    282|                        }
   78|  4.24k|                        break;
   79|  7.63k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 7.63k, False: 25.4k]
  ------------------
   80|  8.24k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 615, False: 32.4k]
  ------------------
   81|  8.24k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 156, False: 8.09k]
  ------------------
   82|  8.24k|                        {
   83|  1.63k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.63k, False: 6.61k]
  ------------------
   84|  1.73k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 99, False: 8.14k]
  ------------------
   85|  1.73k|                                return OpCode::SB;
   86|    380|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 380, False: 7.86k]
  ------------------
   87|    640|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 260, False: 7.98k]
  ------------------
   88|    640|                                return OpCode::SD;
   89|  5.15k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 5.15k, False: 3.09k]
  ------------------
   90|  5.31k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 162, False: 8.08k]
  ------------------
   91|  5.31k|                                return OpCode::SF;
   92|    157|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 157, False: 8.08k]
  ------------------
   93|    301|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 144, False: 8.10k]
  ------------------
   94|    301|                                return OpCode::SH;
   95|     21|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 21, False: 8.22k]
  ------------------
   96|     96|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 75, False: 8.17k]
  ------------------
   97|     96|                                return OpCode::SW;
   98|  8.24k|                        }
   99|    156|                        break;
  100|  33.0k|                }
  101|  19.3k|                break;
  102|  33.0k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   229k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 229k, False: 276k]
  ------------------
  106|   229k|                char c1 = token[0];
  107|   229k|                char c2 = token[1];
  108|   229k|                char c3 = token[2];
  109|       |
  110|   229k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 17.7k, False: 211k]
  ------------------
  111|   229k|                {
  112|   122k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 122k, False: 107k]
  ------------------
  113|   122k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 149, False: 229k]
  ------------------
  114|   122k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 121k, False: 1.17k]
  |  Branch (114:29): [True: 121k, False: 1.31k]
  |  Branch (114:45): [True: 121k, False: 138]
  ------------------
  115|   121k|                        {
  116|   121k|                            return OpCode::ADD;
  117|   121k|                        }
  118|  1.31k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 1.15k, False: 160]
  |  Branch (118:34): [True: 1.05k, False: 258]
  |  Branch (118:50): [True: 1.05k, False: 98]
  ------------------
  119|  1.05k|                        {
  120|  1.05k|                            return OpCode::AND;
  121|  1.05k|                        }
  122|    258|                        break;
  123|       |
  124|    258|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 205, False: 229k]
  ------------------
  125|    448|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 243, False: 229k]
  ------------------
  126|    448|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 350, False: 98]
  |  Branch (126:29): [True: 199, False: 249]
  |  Branch (126:45): [True: 199, False: 151]
  ------------------
  127|    199|                        {
  128|    199|                            return OpCode::DIV;
  129|    199|                        }
  130|    249|                        break;
  131|       |
  132|  1.85k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.85k, False: 227k]
  ------------------
  133|  2.02k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 178, False: 229k]
  ------------------
  134|  2.02k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 1.93k, False: 95]
  ------------------
  135|  1.93k|                        {
  136|  1.93k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 146, False: 1.78k]
  ------------------
  137|    146|                            {
  138|    146|                                return OpCode::EQD;
  139|    146|                            }
  140|  1.78k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 1.65k, False: 138]
  ------------------
  141|  1.65k|                            {
  142|  1.65k|                                return OpCode::EQF;
  143|  1.65k|                            }
  144|  1.93k|                        }
  145|    233|                        break;
  146|       |
  147|  8.95k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 8.95k, False: 220k]
  ------------------
  148|  9.65k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 706, False: 229k]
  ------------------
  149|  9.65k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 670, False: 8.98k]
  ------------------
  150|    670|                        {
  151|    670|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 259, False: 411]
  ------------------
  152|    259|                            {
  153|    259|                                return OpCode::GED;
  154|    259|                            }
  155|    411|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 217, False: 194]
  ------------------
  156|    217|                            {
  157|    217|                                return OpCode::GEF;
  158|    217|                            }
  159|    670|                        }
  160|  8.98k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 8.90k, False: 85]
  ------------------
  161|  8.90k|                        {
  162|  8.90k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.43k, False: 4.46k]
  ------------------
  163|  4.43k|                            {
  164|  4.43k|                                return OpCode::GTD;
  165|  4.43k|                            }
  166|  4.46k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.30k, False: 162]
  ------------------
  167|  4.30k|                            {
  168|  4.30k|                                return OpCode::GTF;
  169|  4.30k|                            }
  170|  4.46k|                        }
  171|    441|                        break;
  172|       |
  173|  3.92k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 3.92k, False: 225k]
  ------------------
  174|  5.82k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.89k, False: 227k]
  ------------------
  175|  5.82k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 5.75k, False: 70]
  |  Branch (175:29): [True: 4.90k, False: 914]
  |  Branch (175:45): [True: 4.90k, False: 844]
  ------------------
  176|  4.90k|                        {
  177|  4.90k|                            return OpCode::JAL;
  178|  4.90k|                        }
  179|    914|                        break;
  180|       |
  181|  13.2k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 13.2k, False: 216k]
  ------------------
  182|  22.8k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 9.64k, False: 220k]
  ------------------
  183|  22.8k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 2.78k, False: 20.0k]
  ------------------
  184|  22.8k|                        {
  185|    108|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 108, False: 22.7k]
  ------------------
  186|  3.83k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 3.72k, False: 19.1k]
  ------------------
  187|  3.83k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 1.89k, False: 1.93k]
  ------------------
  188|  1.89k|                                {
  189|  1.89k|                                    return OpCode::LBU;
  190|  1.89k|                                }
  191|  1.93k|                                break;
  192|       |
  193|  2.36k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 2.36k, False: 20.4k]
  ------------------
  194|  5.95k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 3.59k, False: 19.2k]
  ------------------
  195|  5.95k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 2.51k, False: 3.44k]
  ------------------
  196|  2.51k|                                {
  197|  2.51k|                                    return OpCode::LED;
  198|  2.51k|                                }
  199|  3.44k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.04k, False: 2.39k]
  ------------------
  200|  1.04k|                                {
  201|  1.04k|                                    return OpCode::LEF;
  202|  1.04k|                                }
  203|  2.39k|                                break;
  204|       |
  205|  5.90k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 5.90k, False: 16.9k]
  ------------------
  206|  8.55k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 2.65k, False: 20.1k]
  ------------------
  207|  8.55k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.08k, False: 6.46k]
  ------------------
  208|  2.08k|                                {
  209|  2.08k|                                    return OpCode::LHI;
  210|  2.08k|                                }
  211|  6.46k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 3.89k, False: 2.57k]
  ------------------
  212|  3.89k|                                {
  213|  3.89k|                                    return OpCode::LHU;
  214|  3.89k|                                }
  215|  2.57k|                                break;
  216|       |
  217|  2.57k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 869, False: 21.9k]
  ------------------
  218|  1.56k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 694, False: 22.1k]
  ------------------
  219|  1.56k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 411, False: 1.15k]
  ------------------
  220|    411|                                {
  221|    411|                                    return OpCode::LTD;
  222|    411|                                }
  223|  1.15k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 461, False: 691]
  ------------------
  224|    461|                                {
  225|    461|                                    return OpCode::LTF;
  226|    461|                                }
  227|    691|                                break;
  228|       |
  229|    691|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 70, False: 22.7k]
  ------------------
  230|    167|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 97, False: 22.7k]
  ------------------
  231|    167|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 133, False: 34]
  ------------------
  232|    133|                                {
  233|    133|                                    return OpCode::LWU;
  234|    133|                                }
  235|     34|                                break;
  236|  22.8k|                        }
  237|  10.4k|                        break;
  238|       |
  239|  10.4k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 4.17k, False: 225k]
  ------------------
  240|  4.35k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 180, False: 229k]
  ------------------
  241|  4.35k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 339, False: 4.01k]
  ------------------
  242|    339|                        {
  243|    339|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 154, False: 185]
  ------------------
  244|    154|                            {
  245|    154|                                return OpCode::NED;
  246|    154|                            }
  247|    185|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 110, False: 75]
  ------------------
  248|    110|                            {
  249|    110|                                return OpCode::NEF;
  250|    110|                            }
  251|    339|                        }
  252|  4.01k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 3.79k, False: 216]
  |  Branch (252:34): [True: 2.79k, False: 1.21k]
  |  Branch (252:50): [True: 2.79k, False: 999]
  ------------------
  253|  2.79k|                        {
  254|  2.79k|                            return OpCode::NOP;
  255|  2.79k|                        }
  256|       |
  257|  1.29k|                        break;
  258|       |
  259|  1.29k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 92, False: 229k]
  ------------------
  260|  3.34k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 3.25k, False: 226k]
  ------------------
  261|  3.34k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 3.03k, False: 310]
  |  Branch (261:29): [True: 1.58k, False: 1.75k]
  |  Branch (261:45): [True: 1.58k, False: 1.44k]
  ------------------
  262|  1.58k|                        {
  263|  1.58k|                            return OpCode::ORI;
  264|  1.58k|                        }
  265|  1.75k|                        break;
  266|       |
  267|  37.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 37.8k, False: 191k]
  ------------------
  268|  39.0k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 1.21k, False: 228k]
  ------------------
  269|  39.0k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 290, False: 38.7k]
  ------------------
  270|  39.0k|                        {
  271|     71|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 71, False: 38.9k]
  ------------------
  272|    172|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 101, False: 38.9k]
  ------------------
  273|    172|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 106, False: 66]
  ------------------
  274|    106|                                {
  275|    106|                                    return OpCode::SBU;
  276|    106|                                }
  277|     66|                                break;
  278|       |
  279|    179|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 179, False: 38.8k]
  ------------------
  280|    631|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 452, False: 38.5k]
  ------------------
  281|    631|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 245, False: 386]
  ------------------
  282|    245|                                {
  283|    245|                                    return OpCode::SEQ;
  284|    245|                                }
  285|    386|                                break;
  286|       |
  287|  11.5k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 11.5k, False: 27.4k]
  ------------------
  288|  13.9k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 2.37k, False: 36.6k]
  ------------------
  289|  13.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 9.81k, False: 4.15k]
  ------------------
  290|  9.81k|                                {
  291|  9.81k|                                    return OpCode::SGE;
  292|  9.81k|                                }
  293|  4.15k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 2.01k, False: 2.13k]
  ------------------
  294|  2.01k|                                {
  295|  2.01k|                                    return OpCode::SGT;
  296|  2.01k|                                }
  297|  2.13k|                                break;
  298|       |
  299|  2.13k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 1.22k, False: 37.8k]
  ------------------
  300|  1.39k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 176, False: 38.8k]
  ------------------
  301|  1.39k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 1.31k, False: 79]
  ------------------
  302|  1.31k|                                {
  303|  1.31k|                                    return OpCode::SHU;
  304|  1.31k|                                }
  305|     79|                                break;
  306|       |
  307|  3.92k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 3.92k, False: 35.1k]
  ------------------
  308|  4.72k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 803, False: 38.2k]
  ------------------
  309|  4.72k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 483, False: 4.24k]
  ------------------
  310|  4.72k|                                {
  311|  1.62k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.62k, False: 3.10k]
  ------------------
  312|  1.69k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 66, False: 4.66k]
  ------------------
  313|  1.69k|                                        return OpCode::SLA;
  314|       |
  315|  1.74k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.74k, False: 2.98k]
  ------------------
  316|  1.87k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 130, False: 4.59k]
  ------------------
  317|  1.87k|                                        return OpCode::SLE;
  318|       |
  319|    256|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 256, False: 4.47k]
  ------------------
  320|    322|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 66, False: 4.66k]
  ------------------
  321|    322|                                        return OpCode::SLL;
  322|       |
  323|    228|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 228, False: 4.50k]
  ------------------
  324|    353|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 125, False: 4.60k]
  ------------------
  325|    353|                                        return OpCode::SLT;
  326|  4.72k|                                }
  327|    483|                                break;
  328|       |
  329|  7.53k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 7.53k, False: 31.5k]
  ------------------
  330|  7.62k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 84, False: 38.9k]
  ------------------
  331|  7.62k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 7.55k, False: 66]
  ------------------
  332|  7.55k|                                {
  333|  7.55k|                                    return OpCode::SNE;
  334|  7.55k|                                }
  335|     66|                                break;
  336|       |
  337|  5.27k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 5.27k, False: 33.7k]
  ------------------
  338|  5.37k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 97, False: 38.9k]
  ------------------
  339|  5.37k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 221, False: 5.15k]
  ------------------
  340|    221|                                {
  341|    221|                                    return OpCode::SRA;
  342|    221|                                }
  343|  5.15k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 5.11k, False: 34]
  ------------------
  344|  5.11k|                                {
  345|  5.11k|                                    return OpCode::SRL;
  346|  5.11k|                                }
  347|     34|                                break;
  348|       |
  349|  3.15k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 3.15k, False: 35.8k]
  ------------------
  350|  3.23k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 81, False: 38.9k]
  ------------------
  351|  3.23k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 3.16k, False: 66]
  ------------------
  352|  3.16k|                                {
  353|  3.16k|                                    return OpCode::SUB;
  354|  3.16k|                                }
  355|     66|                                break;
  356|       |
  357|  1.51k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.51k, False: 37.5k]
  ------------------
  358|  1.62k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 108, False: 38.9k]
  ------------------
  359|  1.62k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 1.52k, False: 98]
  ------------------
  360|  1.52k|                                {
  361|  1.52k|                                    return OpCode::SWU;
  362|  1.52k|                                }
  363|     98|                                break;
  364|  39.0k|                        }
  365|       |
  366|  5.33k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.62k, False: 228k]
  ------------------
  367|  5.59k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 264, False: 229k]
  ------------------
  368|  5.59k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 1.86k, False: 3.73k]
  |  Branch (368:29): [True: 1.71k, False: 3.87k]
  |  Branch (368:45): [True: 1.71k, False: 145]
  ------------------
  369|  1.71k|                        {
  370|  1.71k|                            return OpCode::XOR;
  371|  1.71k|                        }
  372|  3.87k|                        break;
  373|   229k|                }
  374|  37.1k|                break;
  375|   229k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   153k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 153k, False: 352k]
  ------------------
  379|   153k|                char c1 = token[0];
  380|   153k|                char c2 = token[1];
  381|   153k|                char c3 = token[2];
  382|   153k|                char c4 = token[3];
  383|       |
  384|   153k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 13.2k, False: 140k]
  ------------------
  385|   153k|                {
  386|  17.9k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 17.9k, False: 135k]
  ------------------
  387|  19.4k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 1.53k, False: 152k]
  ------------------
  388|  19.4k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 96, False: 19.3k]
  ------------------
  389|  19.4k|                        {
  390|  14.9k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 14.9k, False: 4.56k]
  ------------------
  391|  16.2k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 1.38k, False: 18.0k]
  ------------------
  392|  16.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 16.2k, False: 66]
  ------------------
  393|  16.2k|                                {
  394|  16.2k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 905, False: 15.3k]
  ------------------
  395|  16.2k|                                    {
  396|  1.89k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 1.89k, False: 14.3k]
  ------------------
  397|  1.96k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 67, False: 16.1k]
  ------------------
  398|  1.96k|                                            return OpCode::ADDD;
  399|       |
  400|  2.10k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 2.10k, False: 14.1k]
  ------------------
  401|  2.42k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 321, False: 15.8k]
  ------------------
  402|  2.42k|                                            return OpCode::ADDF;
  403|       |
  404|  9.20k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 9.20k, False: 7.01k]
  ------------------
  405|  9.26k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 66, False: 16.1k]
  ------------------
  406|  9.26k|                                            return OpCode::ADDI;
  407|       |
  408|  1.58k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 1.58k, False: 14.6k]
  ------------------
  409|  1.65k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 68, False: 16.1k]
  ------------------
  410|  1.65k|                                            return OpCode::ADDU;
  411|  16.2k|                                    }
  412|  16.2k|                                }
  413|    971|                                break;
  414|       |
  415|  2.98k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 2.98k, False: 16.4k]
  ------------------
  416|  3.08k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 102, False: 19.3k]
  ------------------
  417|  3.08k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 3.02k, False: 66]
  |  Branch (417:37): [True: 2.95k, False: 132]
  |  Branch (417:53): [True: 2.95k, False: 66]
  ------------------
  418|  2.95k|                                {
  419|  2.95k|                                    return OpCode::ANDI;
  420|  2.95k|                                }
  421|       |
  422|    132|                                break;
  423|  19.4k|                        }
  424|  1.19k|                        break;
  425|       |
  426|  5.64k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 5.64k, False: 147k]
  ------------------
  427|  20.8k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 15.2k, False: 138k]
  ------------------
  428|  20.8k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 2.84k, False: 18.0k]
  ------------------
  429|  20.8k|                        {
  430|     87|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 87, False: 20.7k]
  ------------------
  431|  1.03k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 947, False: 19.9k]
  ------------------
  432|  1.03k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 954, False: 80]
  |  Branch (432:37): [True: 153, False: 881]
  |  Branch (432:53): [True: 153, False: 801]
  ------------------
  433|    153|                                {
  434|    153|                                    return OpCode::BEQZ;
  435|    153|                                }
  436|    881|                                break;
  437|       |
  438|  5.45k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 5.45k, False: 15.4k]
  ------------------
  439|  12.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 6.71k, False: 14.1k]
  ------------------
  440|  12.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 11.3k, False: 853]
  ------------------
  441|  11.3k|                                {
  442|  11.3k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 5.55k, False: 5.76k]
  ------------------
  443|  5.55k|                                    {
  444|  5.55k|                                        return OpCode::BFPF;
  445|  5.55k|                                    }
  446|  5.76k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 4.80k, False: 960]
  ------------------
  447|  4.80k|                                    {
  448|  4.80k|                                        return OpCode::BFPT;
  449|  4.80k|                                    }
  450|  11.3k|                                }
  451|  1.81k|                                break;
  452|       |
  453|  4.72k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 4.72k, False: 16.1k]
  ------------------
  454|  4.81k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 87, False: 20.7k]
  ------------------
  455|  4.81k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 4.29k, False: 513]
  |  Branch (455:37): [True: 2.42k, False: 2.38k]
  |  Branch (455:53): [True: 2.42k, False: 1.87k]
  ------------------
  456|  2.42k|                                {
  457|  2.42k|                                    return OpCode::BNEZ;
  458|  2.42k|                                }
  459|  20.8k|                        }
  460|  7.92k|                        break;
  461|       |
  462|  7.92k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.02k, False: 152k]
  ------------------
  463|  17.0k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 16.0k, False: 137k]
  ------------------
  464|  17.0k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 11.1k, False: 5.93k]
  |  Branch (464:29): [True: 8.66k, False: 8.41k]
  |  Branch (464:45): [True: 8.66k, False: 2.48k]
  ------------------
  465|  8.66k|                        {
  466|  8.66k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.03k, False: 5.62k]
  ------------------
  467|  8.66k|                            {
  468|    163|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 163, False: 8.49k]
  ------------------
  469|    309|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 146, False: 8.51k]
  ------------------
  470|    309|                                    return OpCode::DIVD;
  471|       |
  472|    603|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 603, False: 8.05k]
  ------------------
  473|    701|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 98, False: 8.56k]
  ------------------
  474|    701|                                    return OpCode::DIVF;
  475|       |
  476|     97|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 97, False: 8.56k]
  ------------------
  477|  3.23k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 3.14k, False: 5.51k]
  ------------------
  478|  3.23k|                                    return OpCode::DIVI;
  479|       |
  480|    125|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 125, False: 8.53k]
  ------------------
  481|  1.37k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.25k, False: 7.40k]
  ------------------
  482|  1.37k|                                    return OpCode::DIVU;
  483|  8.66k|                            }
  484|  8.66k|                        }
  485|  11.4k|                        break;
  486|       |
  487|  11.4k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 1.27k, False: 152k]
  ------------------
  488|  1.54k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 270, False: 153k]
  ------------------
  489|  1.54k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 1.47k, False: 72]
  |  Branch (489:29): [True: 1.34k, False: 204]
  |  Branch (489:45): [True: 1.41k, False: 66]
  |  Branch (489:61): [True: 1.34k, False: 66]
  ------------------
  490|  1.34k|                        {
  491|  1.34k|                            return OpCode::HALT;
  492|  1.34k|                        }
  493|    204|                        break;
  494|       |
  495|  3.88k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 3.88k, False: 149k]
  ------------------
  496|  12.0k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 8.15k, False: 145k]
  ------------------
  497|  12.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 11.6k, False: 400]
  |  Branch (497:29): [True: 3.94k, False: 8.09k]
  |  Branch (497:45): [True: 9.35k, False: 2.28k]
  |  Branch (497:61): [True: 3.94k, False: 5.40k]
  ------------------
  498|  3.94k|                        {
  499|  3.94k|                            return OpCode::JALR;
  500|  3.94k|                        }
  501|  8.09k|                        break;
  502|       |
  503|  16.6k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 16.6k, False: 136k]
  ------------------
  504|  16.9k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 344, False: 153k]
  ------------------
  505|  16.9k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 15.0k, False: 1.86k]
  |  Branch (505:29): [True: 12.0k, False: 4.95k]
  |  Branch (505:45): [True: 12.0k, False: 3.08k]
  ------------------
  506|  12.0k|                        {
  507|  12.0k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 5.31k, False: 6.70k]
  ------------------
  508|  5.31k|                            {
  509|  5.31k|                                return OpCode::MOVD;
  510|  5.31k|                            }
  511|  6.70k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 195, False: 6.50k]
  ------------------
  512|    195|                            {
  513|    195|                                return OpCode::MOVF;
  514|    195|                            }
  515|  12.0k|                        }
  516|  4.95k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 1.69k, False: 3.25k]
  |  Branch (516:34): [True: 1.37k, False: 3.57k]
  |  Branch (516:50): [True: 1.63k, False: 66]
  |  Branch (516:66): [True: 1.37k, False: 256]
  ------------------
  517|  1.37k|                        {
  518|  1.37k|                            return OpCode::MULT;
  519|  1.37k|                        }
  520|  10.0k|                        break;
  521|       |
  522|  43.9k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 43.9k, False: 109k]
  ------------------
  523|  45.4k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 1.47k, False: 152k]
  ------------------
  524|  45.4k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 612, False: 44.8k]
  ------------------
  525|  45.4k|                        {
  526|  5.35k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 5.35k, False: 40.0k]
  ------------------
  527|  5.68k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 326, False: 45.0k]
  ------------------
  528|  5.68k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 5.55k, False: 131]
  ------------------
  529|  5.55k|                                {
  530|  5.55k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.34k, False: 4.20k]
  ------------------
  531|  1.34k|                                    {
  532|  1.34k|                                        return OpCode::SEQI;
  533|  1.34k|                                    }
  534|  4.20k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 4.13k, False: 66]
  ------------------
  535|  4.13k|                                    {
  536|  4.13k|                                        return OpCode::SEQU;
  537|  4.13k|                                    }
  538|  5.55k|                                }
  539|    197|                                break;
  540|       |
  541|  9.17k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 9.17k, False: 36.2k]
  ------------------
  542|  12.5k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 3.32k, False: 42.0k]
  ------------------
  543|  12.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 5.94k, False: 6.55k]
  ------------------
  544|  5.94k|                                {
  545|  5.94k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 5.54k, False: 407]
  ------------------
  546|  5.54k|                                    {
  547|  5.54k|                                        return OpCode::SGEI;
  548|  5.54k|                                    }
  549|    407|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 231, False: 176]
  ------------------
  550|    231|                                    {
  551|    231|                                        return OpCode::SGEU;
  552|    231|                                    }
  553|  5.94k|                                }
  554|  6.55k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 6.23k, False: 313]
  ------------------
  555|  6.23k|                                {
  556|  6.23k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 161, False: 6.07k]
  ------------------
  557|    161|                                    {
  558|    161|                                        return OpCode::SGTI;
  559|    161|                                    }
  560|  6.07k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.44k, False: 2.63k]
  ------------------
  561|  3.44k|                                    {
  562|  3.44k|                                        return OpCode::SGTU;
  563|  3.44k|                                    }
  564|  6.23k|                                }
  565|  3.12k|                                break;
  566|       |
  567|  3.12k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 2.66k, False: 42.7k]
  ------------------
  568|  7.81k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 5.14k, False: 40.2k]
  ------------------
  569|  7.81k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 255, False: 7.55k]
  ------------------
  570|  7.81k|                                {
  571|     87|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 87, False: 7.72k]
  ------------------
  572|    219|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 132, False: 7.67k]
  ------------------
  573|    219|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 152, False: 67]
  ------------------
  574|    152|                                        {
  575|    152|                                            return OpCode::SLAI;
  576|    152|                                        }
  577|     67|                                        break;
  578|       |
  579|    463|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 463, False: 7.34k]
  ------------------
  580|  1.26k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 806, False: 7.00k]
  ------------------
  581|  1.26k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 257, False: 1.01k]
  ------------------
  582|    257|                                        {
  583|    257|                                            return OpCode::SLEI;
  584|    257|                                        }
  585|  1.01k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 370, False: 642]
  ------------------
  586|    370|                                        {
  587|    370|                                            return OpCode::SLEU;
  588|    370|                                        }
  589|    642|                                        break;
  590|       |
  591|    642|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 132, False: 7.67k]
  ------------------
  592|  3.91k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 3.78k, False: 4.02k]
  ------------------
  593|  3.91k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.06k, False: 1.85k]
  ------------------
  594|  2.06k|                                        {
  595|  2.06k|                                            return OpCode::SLLI;
  596|  2.06k|                                        }
  597|  1.85k|                                        break;
  598|       |
  599|  2.01k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.01k, False: 5.79k]
  ------------------
  600|  2.15k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 138, False: 7.67k]
  ------------------
  601|  2.15k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.51k, False: 639]
  ------------------
  602|  1.51k|                                        {
  603|  1.51k|                                            return OpCode::SLTI;
  604|  1.51k|                                        }
  605|    639|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 560, False: 79]
  ------------------
  606|    560|                                        {
  607|    560|                                            return OpCode::SLTU;
  608|    560|                                        }
  609|     79|                                        break;
  610|  7.81k|                                }
  611|       |
  612|  3.18k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 287, False: 45.1k]
  ------------------
  613|  3.33k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 153, False: 45.2k]
  ------------------
  614|  3.33k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 1.08k, False: 2.25k]
  ------------------
  615|  1.08k|                                {
  616|  1.08k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 247, False: 833]
  ------------------
  617|    247|                                    {
  618|    247|                                        return OpCode::SNEI;
  619|    247|                                    }
  620|    833|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 172, False: 661]
  ------------------
  621|    172|                                    {
  622|    172|                                        return OpCode::SNEU;
  623|    172|                                    }
  624|  1.08k|                                }
  625|  2.91k|                                break;
  626|       |
  627|  8.07k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 8.07k, False: 37.3k]
  ------------------
  628|  8.23k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 155, False: 45.2k]
  ------------------
  629|  8.23k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 769, False: 7.46k]
  |  Branch (629:37): [True: 692, False: 7.53k]
  |  Branch (629:53): [True: 692, False: 77]
  ------------------
  630|    692|                                {
  631|    692|                                    return OpCode::SRAI;
  632|    692|                                }
  633|  7.53k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 7.46k, False: 77]
  |  Branch (633:42): [True: 7.39k, False: 143]
  |  Branch (633:58): [True: 7.39k, False: 66]
  ------------------
  634|  7.39k|                                {
  635|  7.39k|                                    return OpCode::SRLI;
  636|  7.39k|                                }
  637|    143|                                break;
  638|       |
  639|  9.79k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 9.79k, False: 35.6k]
  ------------------
  640|  10.1k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 348, False: 45.0k]
  ------------------
  641|  10.1k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 10.0k, False: 66]
  ------------------
  642|  10.0k|                                {
  643|  10.0k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 226, False: 9.85k]
  ------------------
  644|  10.0k|                                    {
  645|  1.42k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 1.42k, False: 8.64k]
  ------------------
  646|  1.49k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 66, False: 10.0k]
  ------------------
  647|  1.49k|                                            return OpCode::SUBD;
  648|       |
  649|  2.74k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 2.74k, False: 7.32k]
  ------------------
  650|  2.97k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 226, False: 9.85k]
  ------------------
  651|  2.97k|                                            return OpCode::SUBF;
  652|       |
  653|  1.07k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 1.07k, False: 8.99k]
  ------------------
  654|  1.14k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 66, False: 10.0k]
  ------------------
  655|  1.14k|                                            return OpCode::SUBI;
  656|       |
  657|  4.16k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 4.16k, False: 5.90k]
  ------------------
  658|  4.23k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 66, False: 10.0k]
  ------------------
  659|  4.23k|                                            return OpCode::SUBU;
  660|  10.0k|                                    }
  661|  10.0k|                                }
  662|    292|                                break;
  663|  45.4k|                        }
  664|  7.28k|                        break;
  665|       |
  666|  7.28k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 557, False: 153k]
  ------------------
  667|    984|                    case 't':
  ------------------
  |  Branch (667:21): [True: 427, False: 153k]
  ------------------
  668|    984|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 833, False: 151]
  |  Branch (668:29): [True: 605, False: 379]
  |  Branch (668:45): [True: 671, False: 162]
  |  Branch (668:61): [True: 605, False: 66]
  ------------------
  669|    605|                        {
  670|    605|                            return OpCode::TRAP;
  671|    605|                        }
  672|    379|                        break;
  673|  2.10k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.10k, False: 151k]
  ------------------
  674|  5.99k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 3.89k, False: 149k]
  ------------------
  675|  5.99k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 4.26k, False: 1.73k]
  |  Branch (675:29): [True: 3.52k, False: 2.46k]
  |  Branch (675:45): [True: 4.04k, False: 215]
  |  Branch (675:61): [True: 3.52k, False: 524]
  ------------------
  676|  3.52k|                        {
  677|  3.52k|                            return OpCode::XORI;
  678|  3.52k|                        }
  679|  2.46k|                        break;
  680|   153k|                }
  681|  62.2k|                break;
  682|   153k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  62.2k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 28.5k, False: 477k]
  ------------------
  686|  28.5k|                char c1 = token[0];
  687|  28.5k|                char c2 = token[1];
  688|  28.5k|                char c3 = token[2];
  689|  28.5k|                char c4 = token[3];
  690|  28.5k|                char c5 = token[4];
  691|       |
  692|  28.5k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 4.21k, False: 24.3k]
  ------------------
  693|  28.5k|                {
  694|  7.23k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 7.23k, False: 21.3k]
  ------------------
  695|  7.23k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 28.5k]
  ------------------
  696|  7.23k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 7.23k, False: 0]
  |  Branch (696:29): [True: 7.23k, False: 0]
  |  Branch (696:45): [True: 7.23k, False: 0]
  |  Branch (696:61): [True: 7.23k, False: 0]
  |  Branch (696:77): [True: 7.23k, False: 0]
  ------------------
  697|  7.23k|                        {
  698|  7.23k|                            return OpCode::ADDUI;
  699|  7.23k|                        }
  700|      0|                        break;
  701|       |
  702|  1.41k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.41k, False: 27.1k]
  ------------------
  703|  1.41k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 28.5k]
  ------------------
  704|  1.41k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 1.41k, False: 0]
  |  Branch (704:29): [True: 1.41k, False: 0]
  |  Branch (704:45): [True: 1.41k, False: 0]
  |  Branch (704:61): [True: 1.41k, False: 0]
  |  Branch (704:77): [True: 1.41k, False: 0]
  ------------------
  705|  1.41k|                        {
  706|  1.41k|                            return OpCode::DIVUI;
  707|  1.41k|                        }
  708|      0|                        break;
  709|       |
  710|  10.1k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 10.1k, False: 18.4k]
  ------------------
  711|  10.1k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 28.5k]
  ------------------
  712|  10.1k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 10.1k, False: 0]
  |  Branch (712:29): [True: 10.1k, False: 0]
  |  Branch (712:45): [True: 10.1k, False: 0]
  |  Branch (712:61): [True: 10.1k, False: 0]
  ------------------
  713|  10.1k|                        {
  714|  10.1k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 10.1k]
  ------------------
  715|  10.1k|                            {
  716|  1.18k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 1.18k, False: 8.92k]
  ------------------
  717|  1.18k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 10.1k]
  ------------------
  718|  1.18k|                                    return OpCode::MULTD;
  719|       |
  720|  4.20k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 4.20k, False: 5.90k]
  ------------------
  721|  4.20k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 10.1k]
  ------------------
  722|  4.20k|                                    return OpCode::MULTF;
  723|       |
  724|  1.04k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 1.04k, False: 9.06k]
  ------------------
  725|  1.04k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 10.1k]
  ------------------
  726|  1.04k|                                    return OpCode::MULTI;
  727|       |
  728|  3.67k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 3.67k, False: 6.43k]
  ------------------
  729|  3.67k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 10.1k]
  ------------------
  730|  3.67k|                                    return OpCode::MULTU;
  731|  10.1k|                            }
  732|  10.1k|                        }
  733|      0|                        break;
  734|       |
  735|  5.59k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 5.59k, False: 22.9k]
  ------------------
  736|  5.59k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 28.5k]
  ------------------
  737|  5.59k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 5.59k]
  ------------------
  738|  5.59k|                        {
  739|  1.60k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 1.60k, False: 3.99k]
  ------------------
  740|  1.60k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 5.59k]
  ------------------
  741|  1.60k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 1.60k, False: 0]
  |  Branch (741:37): [True: 1.60k, False: 0]
  |  Branch (741:53): [True: 1.60k, False: 0]
  |  Branch (741:69): [True: 1.60k, False: 0]
  ------------------
  742|  1.60k|                                {
  743|  1.60k|                                    return OpCode::SEQUI;
  744|  1.60k|                                }
  745|      0|                                break;
  746|       |
  747|  2.31k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 2.31k, False: 3.28k]
  ------------------
  748|  2.31k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 5.59k]
  ------------------
  749|  2.31k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.22k, False: 93]
  |  Branch (749:37): [True: 2.22k, False: 93]
  |  Branch (749:53): [True: 2.22k, False: 0]
  |  Branch (749:69): [True: 2.22k, False: 0]
  ------------------
  750|  2.22k|                                {
  751|  2.22k|                                    return OpCode::SGEUI;
  752|  2.22k|                                }
  753|     93|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 93, False: 0]
  |  Branch (753:42): [True: 93, False: 0]
  |  Branch (753:58): [True: 93, False: 0]
  |  Branch (753:74): [True: 93, False: 0]
  ------------------
  754|     93|                                {
  755|     93|                                    return OpCode::SGTUI;
  756|     93|                                }
  757|      0|                                break;
  758|       |
  759|  1.07k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.07k, False: 4.52k]
  ------------------
  760|  1.07k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 5.59k]
  ------------------
  761|  1.07k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 950, False: 124]
  |  Branch (761:37): [True: 950, False: 124]
  |  Branch (761:53): [True: 950, False: 0]
  |  Branch (761:69): [True: 950, False: 0]
  ------------------
  762|    950|                                {
  763|    950|                                    return OpCode::SLEUI;
  764|    950|                                }
  765|    124|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 124, False: 0]
  |  Branch (765:42): [True: 124, False: 0]
  |  Branch (765:58): [True: 124, False: 0]
  |  Branch (765:74): [True: 124, False: 0]
  ------------------
  766|    124|                                {
  767|    124|                                    return OpCode::SLTUI;
  768|    124|                                }
  769|      0|                                break;
  770|       |
  771|    440|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 440, False: 5.15k]
  ------------------
  772|    440|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 5.59k]
  ------------------
  773|    440|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 440, False: 0]
  |  Branch (773:37): [True: 440, False: 0]
  |  Branch (773:53): [True: 440, False: 0]
  |  Branch (773:69): [True: 440, False: 0]
  ------------------
  774|    440|                                {
  775|    440|                                    return OpCode::SNEUI;
  776|    440|                                }
  777|      0|                                break;
  778|       |
  779|    167|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 167, False: 5.42k]
  ------------------
  780|    167|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 5.59k]
  ------------------
  781|    167|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 167, False: 0]
  |  Branch (781:37): [True: 167, False: 0]
  |  Branch (781:53): [True: 167, False: 0]
  |  Branch (781:69): [True: 167, False: 0]
  ------------------
  782|    167|                                {
  783|    167|                                    return OpCode::SUBUI;
  784|    167|                                }
  785|      0|                                break;
  786|  5.59k|                        }
  787|       |
  788|      0|                        break;
  789|  28.5k|                }
  790|       |
  791|  4.21k|                break;
  792|  28.5k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  4.21k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 1.93k, False: 504k]
  ------------------
  796|  1.93k|                char c1 = token[0];
  797|  1.93k|                char c2 = token[1];
  798|  1.93k|                char c3 = token[2];
  799|  1.93k|                char c4 = token[3];
  800|  1.93k|                char c5 = token[4];
  801|  1.93k|                char c6 = token[5];
  802|       |
  803|  1.93k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 983, False: 956]
  |  Branch (803:21): [True: 983, False: 956]
  |  Branch (803:37): [True: 983, False: 0]
  |  Branch (803:53): [True: 983, False: 0]
  ------------------
  804|    983|                {
  805|    983|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 983]
  ------------------
  806|    983|                    {
  807|    546|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 546, False: 437]
  ------------------
  808|    546|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 983]
  ------------------
  809|    546|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 546, False: 0]
  ------------------
  810|    546|                            {
  811|    546|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 80, False: 466]
  ------------------
  812|     80|                                {
  813|     80|                                    return OpCode::CVTD2F;
  814|     80|                                }
  815|    466|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 466, False: 0]
  ------------------
  816|    466|                                {
  817|    466|                                    return OpCode::CVTD2I;
  818|    466|                                }
  819|    546|                            }
  820|      0|                            break;
  821|       |
  822|    188|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 188, False: 795]
  ------------------
  823|    188|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 983]
  ------------------
  824|    188|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 188, False: 0]
  ------------------
  825|    188|                            {
  826|    188|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 83, False: 105]
  ------------------
  827|     83|                                {
  828|     83|                                    return OpCode::CVTF2D;
  829|     83|                                }
  830|    105|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 105, False: 0]
  ------------------
  831|    105|                                {
  832|    105|                                    return OpCode::CVTF2I;
  833|    105|                                }
  834|    188|                            }
  835|      0|                            break;
  836|       |
  837|    249|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 249, False: 734]
  ------------------
  838|    249|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 983]
  ------------------
  839|    249|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 249, False: 0]
  ------------------
  840|    249|                            {
  841|    249|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 153, False: 96]
  ------------------
  842|    153|                                {
  843|    153|                                    return OpCode::CVTI2D;
  844|    153|                                }
  845|     96|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 96, False: 0]
  ------------------
  846|     96|                                {
  847|     96|                                    return OpCode::CVTI2F;
  848|     96|                                }
  849|    249|                            }
  850|    983|                    }
  851|    983|                }
  852|    956|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 364, False: 592]
  |  Branch (852:26): [True: 364, False: 592]
  |  Branch (852:42): [True: 364, False: 0]
  |  Branch (852:58): [True: 364, False: 0]
  |  Branch (852:74): [True: 364, False: 0]
  ------------------
  853|    956|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 364, False: 0]
  |  Branch (853:42): [True: 364, False: 0]
  ------------------
  854|    364|                {
  855|    364|                    return OpCode::MULTUI;
  856|    364|                }
  857|    592|                break;
  858|  1.93k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  10.3k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 10.3k, False: 495k]
  ------------------
  862|  10.3k|                char c1 = token[0];
  863|  10.3k|                char c2 = token[1];
  864|  10.3k|                char c3 = token[2];
  865|  10.3k|                char c4 = token[3];
  866|  10.3k|                char c5 = token[4];
  867|  10.3k|                char c6 = token[5];
  868|  10.3k|                char c7 = token[6];
  869|       |
  870|  10.3k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 10.1k, False: 194]
  |  Branch (870:21): [True: 10.1k, False: 194]
  |  Branch (870:37): [True: 10.1k, False: 0]
  |  Branch (870:53): [True: 10.1k, False: 0]
  ------------------
  871|  10.1k|                {
  872|  10.1k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 6.83k, False: 3.29k]
  |  Branch (872:25): [True: 6.83k, False: 3.29k]
  |  Branch (872:41): [True: 6.83k, False: 0]
  |  Branch (872:54): [True: 6.83k, False: 0]
  |  Branch (872:70): [True: 6.83k, False: 0]
  ------------------
  873|  6.83k|                    {
  874|  6.83k|                        return OpCode::MOVI2FP;
  875|  6.83k|                    }
  876|  3.29k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 3.29k, False: 0]
  |  Branch (876:30): [True: 3.29k, False: 0]
  |  Branch (876:46): [True: 3.29k, False: 0]
  |  Branch (876:62): [True: 3.29k, False: 0]
  |  Branch (876:75): [True: 3.29k, False: 0]
  ------------------
  877|  3.29k|                    {
  878|  3.29k|                        return OpCode::MOVFP2I;
  879|  3.29k|                    }
  880|  10.1k|                }
  881|    194|                break;
  882|  10.3k|            }
  883|       |
  884|  30.5k|            default: {
  ------------------
  |  Branch (884:13): [True: 30.5k, False: 475k]
  ------------------
  885|  30.5k|                break;
  886|  10.3k|            }
  887|   506k|        }
  888|       |
  889|       |        // None found
  890|   163k|        return OpCode::NONE;
  891|   506k|    }
_ZN3dlx3iceEcc:
   17|   882k|    {
   18|   882k|        constexpr const char diff = 'a' - 'A';
   19|   882k|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 614k, False: 267k]
  |  Branch (19:28): [True: 98.5k, False: 169k]
  ------------------
   20|   882k|    }

_ZN3dlx10ParseErrorC2Ev:
   20|   544k|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  5.92k|    {
  193|  5.92k|        ParseError err;
  194|       |
  195|  5.92k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  5.92k|        err.m_LineNumber                           = line_number;
  197|  5.92k|        err.m_Column                               = column;
  198|  5.92k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  5.92k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  5.92k|        return err;
  202|  5.92k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  5.92k|    {
  207|  5.92k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  5.92k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  5.92k|                                                         actual_type);
  210|  5.92k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    695|    {
  216|    695|        ParseError err;
  217|       |
  218|    695|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    695|        err.m_LineNumber        = line_number;
  220|    695|        err.m_Column            = column;
  221|    695|        err.invalid_number.text = text;
  222|       |
  223|    695|        return err;
  224|    695|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    695|    {
  228|    695|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    695|                                                token.GetColumn().unsafe(), token.GetText());
  230|    695|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     19|    {
  235|     19|        ParseError err;
  236|       |
  237|     19|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     19|        err.m_LineNumber = line_number;
  239|     19|        err.m_Column     = column;
  240|       |
  241|     19|        return err;
  242|     19|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     19|    {
  247|     19|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     19|                                                                     token.GetColumn().unsafe());
  249|     19|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   144k|    {
  255|   144k|        ParseError err;
  256|       |
  257|   144k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   144k|        err.m_LineNumber                   = line_number;
  259|   144k|        err.m_Column                       = column;
  260|   144k|        err.unexpected_token.expected_type = expected_type;
  261|   144k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   144k|        return err;
  264|   144k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   144k|    {
  269|   144k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   144k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   144k|                                                  token.GetType());
  272|   144k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  4.21k|    {
  277|  4.21k|        ParseError err;
  278|       |
  279|  4.21k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  4.21k|        err.m_LineNumber                   = line_number;
  281|  4.21k|        err.m_Column                       = column;
  282|  4.21k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  4.21k|        return err;
  285|  4.21k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.36k|    {
  289|  2.36k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.36k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.36k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   116k|    {
  296|   116k|        ParseError err;
  297|       |
  298|   116k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   116k|        err.m_LineNumber                       = line_number;
  300|   116k|        err.m_Column                           = column;
  301|   116k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   116k|        return err;
  304|   116k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   116k|    {
  309|   116k|        return ConstructInvalidLabelIdentifierParseError(
  310|   116k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   116k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  6.60k|    {
  317|  6.60k|        ParseError err;
  318|       |
  319|  6.60k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  6.60k|        err.m_LineNumber                     = line_number;
  321|  6.60k|        err.m_Column                         = column;
  322|  6.60k|        err.label_already_defined.label_name = label_name;
  323|  6.60k|        err.label_already_defined.at_line    = at_line;
  324|  6.60k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  6.60k|        return err;
  327|  6.60k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  6.60k|    {
  332|  6.60k|        return ConstructLabelAlreadyDefinedParseError(
  333|  6.60k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  6.60k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  6.60k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   229k|    {
  340|   229k|        ParseError err;
  341|       |
  342|   229k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   229k|        err.m_LineNumber = line_number;
  344|   229k|        err.m_Column     = column;
  345|       |
  346|   229k|        return err;
  347|   229k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   229k|    {
  352|   229k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   229k|                                                        token.GetColumn().unsafe());
  354|   229k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  35.0k|    {
  360|  35.0k|        ParseError err;
  361|       |
  362|  35.0k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  35.0k|        err.m_LineNumber               = line_number;
  364|  35.0k|        err.m_Column                   = column;
  365|  35.0k|        err.too_few_arguments.required = required;
  366|  35.0k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  35.0k|        return err;
  369|  35.0k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  35.0k|    {
  374|  35.0k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  35.0k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  35.0k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  1.36k|    {
  381|  1.36k|        ParseError err;
  382|       |
  383|  1.36k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  1.36k|        err.m_LineNumber           = line_number;
  385|  1.36k|        err.m_Column               = column;
  386|  1.36k|        err.empty_label.label_name = label_name;
  387|       |
  388|  1.36k|        return err;
  389|  1.36k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  1.36k|    {
  393|  1.36k|        return ConstructEmptyLabelParseError(
  394|  1.36k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  1.36k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 1.13k, False: 231]
  ------------------
  396|  1.13k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  1.36k|                        token.GetText());
  398|  1.36k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    247|    {
  403|    247|        ParseError err;
  404|       |
  405|    247|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    247|        err.m_LineNumber = line_number;
  407|    247|        err.m_Column     = column;
  408|       |
  409|    247|        return err;
  410|    247|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    247|    {
  414|    247|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    247|                                               token.GetColumn().unsafe());
  416|    247|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|   544k|    {
   19|   544k|        m_ParseErrors.emplace_back(phi::move(error));
   20|   544k|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  6.23k|    {
  182|  6.23k|        ParsedProgram program;
  183|       |
  184|  6.23k|        program.m_Tokens = tokens;
  185|       |
  186|  6.23k|        phi::boolean line_has_instruction{false};
  187|  6.23k|        phi::usize   label_count{0u};
  188|       |
  189|  1.23M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 1.22M, False: 6.23k]
  ------------------
  190|  1.22M|        {
  191|  1.22M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  1.22M|            switch (current_token.GetType())
  196|  1.22M|            {
  197|       |                // Ignore comments
  198|   167k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 167k, False: 1.06M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   167k|                    break;
  201|       |
  202|   496k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 496k, False: 732k]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   496k|                    line_has_instruction = false;
  205|   496k|                    break;
  206|       |
  207|   128k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 128k, False: 1.10M]
  ------------------
  208|   128k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 8.09k, False: 120k]
  ------------------
  209|  8.09k|                    {
  210|  8.09k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  8.09k|                                current_token, Token::Type::NewLine));
  212|  8.09k|                        break;
  213|  8.09k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   120k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 105k, False: 15.1k]
  ------------------
  218|   105k|                    {
  219|   105k|                        program.AddParseError(
  220|   105k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   105k|                        break;
  222|   105k|                    }
  223|       |
  224|  15.1k|                    std::string_view label_name = current_token.GetText();
  225|  15.1k|                    label_name.remove_suffix(1);
  226|       |
  227|  15.1k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 1.84k, False: 13.2k]
  ------------------
  228|  1.84k|                    {
  229|  1.84k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  1.84k|                                current_token.GetLineNumber().unsafe(),
  231|  1.84k|                                current_token.GetColumn().unsafe(), label_name));
  232|  1.84k|                        break;
  233|  1.84k|                    }
  234|       |
  235|  13.2k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 4.25k, False: 9.00k]
  ------------------
  236|  4.25k|                    {
  237|  4.25k|                        program.AddParseError(
  238|  4.25k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  4.25k|                        break;
  240|  4.25k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  9.00k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 6.60k, False: 2.40k]
  ------------------
  244|  6.60k|                    {
  245|       |                        // Find first defintions of label
  246|  6.60k|                        const Token* first_label_definition =
  247|  6.60k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  6.60k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  6.60k|                                    {
  250|  6.60k|                                        std::string_view token_label_name = t.GetText();
  251|  6.60k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  6.60k|                                        if (token_label_name == label_name)
  254|  6.60k|                                        {
  255|  6.60k|                                            return true;
  256|  6.60k|                                        }
  257|  6.60k|                                    }
  258|       |
  259|  6.60k|                                    return false;
  260|  6.60k|                                });
  261|       |
  262|  6.60k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  6.60k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  6.60k|                                current_token, *first_label_definition));
  266|  6.60k|                        break;
  267|  6.60k|                    }
  268|       |
  269|  2.40k|                    program.m_JumpData[label_name] =
  270|  2.40k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  2.40k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  2.40k|                    break;
  277|  9.00k|                }
  278|       |
  279|   325k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 325k, False: 902k]
  ------------------
  280|   325k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 229k, False: 96.8k]
  ------------------
  281|   229k|                    {
  282|   229k|                        program.AddParseError(
  283|   229k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   229k|                        break;
  285|   229k|                    }
  286|       |
  287|  96.8k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  96.8k|                    PHI_ASSERT(current_token.HasHint());
  291|  96.8k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  96.8k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  96.8k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  96.8k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  96.8k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  96.8k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  96.8k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  96.8k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  96.8k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   155k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 136k, False: 19.3k]
  ------------------
  313|   136k|                    {
  314|       |                        // Get next token
  315|   136k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 266, False: 136k]
  ------------------
  316|    266|                        {
  317|    266|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    266|                                    current_token, number_of_argument_required.unsafe(),
  319|    266|                                    argument_num.unsafe()));
  320|    266|                            break;
  321|    266|                        }
  322|       |
  323|   136k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   136k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 15.9k, False: 120k]
  ------------------
  327|  15.9k|                        {
  328|  15.9k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 247, False: 15.6k]
  ------------------
  329|    247|                            {
  330|    247|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    247|                            }
  332|       |
  333|  15.9k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  15.9k|                            continue;
  336|  15.9k|                        }
  337|       |
  338|   120k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 34.7k, False: 85.7k]
  ------------------
  339|  34.7k|                        {
  340|  34.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  34.7k|                                    token, number_of_argument_required.unsafe(),
  342|  34.7k|                                    argument_num.unsafe()));
  343|  34.7k|                            break;
  344|  34.7k|                        }
  345|       |
  346|  85.7k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  85.7k|                                parse_instruction_argument(
  348|  85.7k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  85.7k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 42.5k, False: 43.2k]
  ------------------
  350|  42.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  42.5k|                            break;
  353|  42.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  43.2k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  43.2k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  43.2k|                        argument_num++;
  360|  43.2k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  43.2k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  96.8k|                    program.m_Instructions.emplace_back(instruction);
  368|  96.8k|                    line_has_instruction = true;
  369|  96.8k|                    break;
  370|   325k|                }
  371|       |
  372|   110k|                default:
  ------------------
  |  Branch (372:17): [True: 110k, False: 1.11M]
  ------------------
  373|   110k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   110k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 67.8k, False: 42.4k]
  ------------------
  375|  67.8k|                    {
  376|  67.8k|                        expected_token_type = Token::Type::NewLine;
  377|  67.8k|                    }
  378|       |
  379|   110k|                    program.AddParseError(
  380|   110k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   110k|                    break;
  382|  1.22M|            }
  383|  1.22M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  6.23k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 250, False: 5.98k]
  ------------------
  387|    250|        {
  388|  2.64k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 2.39k, False: 250]
  ------------------
  389|  2.39k|            {
  390|  2.39k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  2.39k|                const Token& token = *it;
  393|  2.39k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 1.36k, False: 1.02k]
  ------------------
  394|  1.36k|                {
  395|  1.36k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  1.36k|                    --label_count;
  397|  1.36k|                }
  398|  2.39k|            }
  399|    250|        }
  400|       |
  401|  6.23k|        return program;
  402|  6.23k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  6.23k|    {
  406|  6.23k|        TokenStream tokens = Tokenize(source);
  407|  6.23k|        return Parse(tokens);
  408|  6.23k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  85.7k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  85.7k|        switch (token.GetType())
   38|  85.7k|        {
   39|  3.56k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 3.56k, False: 82.1k]
  ------------------
   40|  3.56k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 395, False: 3.17k]
  ------------------
   41|  3.56k|                                          ArgumentType::AddressDisplacement))
   42|    395|                {
   43|    395|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    395|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    395|                    return {};
   47|    395|                }
   48|       |
   49|       |                // Get address displacement
   50|  3.17k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  3.17k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  3.17k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 19, False: 3.15k]
  ------------------
   55|     19|                {
   56|     19|                    program.AddParseError(
   57|     19|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     19|                    return {};
   59|     19|                }
   60|       |
   61|  3.15k|                auto         it           = tokens.current_position();
   62|  3.15k|                const Token& first_token  = tokens.consume();
   63|  3.15k|                const Token& second_token = tokens.consume();
   64|  3.15k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  3.15k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.15k, False: 0]
  ------------------
   67|  3.15k|                {
   68|  3.15k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.15k|                            first_token, Token::Type::OpenBracket));
   70|  3.15k|                    return {};
   71|  3.15k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  23.3k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 23.3k, False: 62.3k]
  ------------------
   98|  23.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 994, False: 22.3k]
  ------------------
   99|    994|                {
  100|    994|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|    994|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|    994|                    return {};
  103|    994|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  22.3k|                return ConstructInstructionArgumentRegisterInt(
  109|  22.3k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  23.3k|            }
  111|  14.2k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 14.2k, False: 71.5k]
  ------------------
  112|  14.2k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.59k, False: 11.6k]
  ------------------
  113|  2.59k|                {
  114|  2.59k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.59k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.59k|                    return {};
  117|  2.59k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  11.6k|                return ConstructInstructionArgumentRegisterFloat(
  123|  11.6k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  14.2k|            }
  125|  2.36k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.36k, False: 83.3k]
  ------------------
  126|  2.36k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.36k|                return {};
  129|  14.2k|            }
  130|  11.3k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 11.3k, False: 74.4k]
  ------------------
  131|       |                // Parse as Label
  132|  11.3k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 1.14k, False: 10.1k]
  ------------------
  133|  1.14k|                {
  134|  1.14k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  1.14k|                            token, expected_argument_type, ArgumentType::Label));
  136|  1.14k|                    return {};
  137|  1.14k|                }
  138|       |
  139|  10.1k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 10.1k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  10.1k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 7.23k, False: 2.92k]
  ------------------
  146|  7.23k|                {
  147|  7.23k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  7.23k|                    return {};
  149|  7.23k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  2.92k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  10.1k|            }
  155|  7.72k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 7.72k, False: 78.0k]
  ------------------
  156|  7.72k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 789, False: 6.93k]
  ------------------
  157|    789|                {
  158|    789|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|    789|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|    789|                    return {};
  161|    789|                }
  162|       |
  163|  6.93k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 6.24k, False: 695]
  ------------------
  164|  6.24k|                {
  165|  6.24k|                    return ConstructInstructionArgumentImmediateValue(
  166|  6.24k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  6.24k|                }
  168|       |
  169|    695|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    695|                return {};
  171|  6.93k|            }
  172|       |
  173|  23.1k|            default:
  ------------------
  |  Branch (173:13): [True: 23.1k, False: 62.5k]
  ------------------
  174|  23.1k|                program.AddParseError(
  175|  23.1k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  23.1k|                return {};
  177|  85.7k|        }
  178|  85.7k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   133k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   133k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 30.0k, False: 103k]
  ------------------
  249|  30.0k|                                    {
  250|  30.0k|                                        std::string_view token_label_name = t.GetText();
  251|  30.0k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  30.0k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 6.60k, False: 23.4k]
  ------------------
  254|  6.60k|                                        {
  255|  6.60k|                                            return true;
  256|  6.60k|                                        }
  257|  30.0k|                                    }
  258|       |
  259|   126k|                                    return false;
  260|   133k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  3.87M|    {
   70|  3.87M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  3.87M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  3.87M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  3.87M|        return m_IntRegisters[id_value];
   76|  3.87M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  5.17M|    {
   81|  5.17M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  5.17M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  5.17M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  5.17M|        return m_IntRegisters[id_value];
   87|  5.17M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  3.19M|    {
   91|  3.19M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  3.19M|                                             RegisterAccessType::Signed),
   93|  3.19M|                   "Mismatch for instruction access type");
   94|       |
   95|  3.19M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  3.19M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  3.19M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  3.19M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 2.36M, False: 835k]
  ------------------
  100|  3.19M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 954k, False: 1.40M]
  ------------------
  101|   954k|        {
  102|   954k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   954k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|   954k|        }
  104|       |
  105|  3.19M|        return GetIntRegister(id).GetSignedValue();
  106|  3.19M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  1.97M|    {
  110|  1.97M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  1.97M|                                             RegisterAccessType::Unsigned),
  112|  1.97M|                   "Mismatch for instruction access type");
  113|       |
  114|  1.97M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  1.97M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  1.97M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  1.97M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 1.16M, False: 802k]
  ------------------
  119|  1.97M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 717k, False: 451k]
  ------------------
  120|   717k|        {
  121|   717k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   717k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|   717k|        }
  123|       |
  124|  1.97M|        return GetIntRegister(id).GetUnsignedValue();
  125|  1.97M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|  2.26M|    {
  129|  2.26M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|  2.26M|                                             RegisterAccessType::Signed),
  131|  2.26M|                   "Mismatch for instruction access type");
  132|       |
  133|  2.26M|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|  2.26M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 485k, False: 1.78M]
  ------------------
  136|   485k|        {
  137|   485k|            return;
  138|   485k|        }
  139|       |
  140|  1.78M|        reg.SetSignedValue(value);
  141|       |
  142|  1.78M|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|  1.78M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|  1.78M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|  1.78M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  1.61M|    {
  150|  1.61M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  1.61M|                                             RegisterAccessType::Unsigned),
  152|  1.61M|                   "Mismatch for instruction access type");
  153|       |
  154|  1.61M|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  1.61M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 324k, False: 1.28M]
  ------------------
  157|   324k|        {
  158|   324k|            return;
  159|   324k|        }
  160|       |
  161|  1.28M|        reg.SetUnsignedValue(value);
  162|       |
  163|  1.28M|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  1.28M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  1.28M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  1.28M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  2.25M|    {
  171|  2.25M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  2.25M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  2.25M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  2.25M|        return m_FloatRegisters[id_value];
  177|  2.25M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|   704k|    {
  182|   704k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|   704k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|   704k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|   704k|        return m_FloatRegisters[id_value];
  188|   704k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|   704k|    {
  192|   704k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|   704k|                                             RegisterAccessType::Float),
  194|   704k|                   "Mismatch for instruction access type");
  195|       |
  196|   704k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|   704k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|   704k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|   704k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 686k, False: 18.0k]
  ------------------
  201|   704k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 209k, False: 477k]
  ------------------
  202|   209k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   209k|        }
  207|       |
  208|   704k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|   704k|        return reg.GetValue();
  211|   704k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|   926k|    {
  215|   926k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|   926k|                                             RegisterAccessType::Double),
  217|   926k|                   "Mismatch for instruction access type");
  218|       |
  219|   926k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 12, False: 926k]
  ------------------
  220|     12|        {
  221|     12|            Raise(Exception::MisalignedRegisterAccess);
  222|     12|            return {0.0};
  223|     12|        }
  224|       |
  225|   926k|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|   926k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|   926k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|   926k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 911k, False: 15.1k]
  ------------------
  230|   926k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 697k, False: 214k]
  ------------------
  231|   697k|        {
  232|   697k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   697k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|   697k|        }
  234|       |
  235|   926k|        const FloatRegisterValueType register_value_type_high =
  236|   926k|                m_FloatRegistersValueTypes[id_value + 1u];
  237|   926k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 911k, False: 15.1k]
  ------------------
  238|   926k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 2, False: 911k]
  ------------------
  239|      2|        {
  240|      2|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      2|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      2|        }
  242|       |
  243|   926k|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|   926k|        const FloatRegister& second_reg =
  245|   926k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|   926k|        const float first_value  = first_reg.GetValue().unsafe();
  248|   926k|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|   926k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|   926k|        const std::uint32_t first_value_bits =
  254|   926k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|   926k|        const std::uint32_t second_value_bits =
  256|   926k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|   926k|        std::uint64_t final_value_bits =
  259|   926k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|   926k|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|   926k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|   926k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   209k|    {
  268|   209k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   209k|                                             RegisterAccessType::Float),
  270|   209k|                   "Mismatch for instruction access type");
  271|       |
  272|   209k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   209k|        reg.SetValue(value);
  275|       |
  276|   209k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   209k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   209k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   209k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|  95.6k|    {
  284|  95.6k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|  95.6k|                                             RegisterAccessType::Double),
  286|  95.6k|                   "Mismatch for instruction access type");
  287|       |
  288|  95.6k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 2, False: 95.6k]
  ------------------
  289|      2|        {
  290|      2|            Raise(Exception::MisalignedRegisterAccess);
  291|      2|            return;
  292|      2|        }
  293|       |
  294|  95.6k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|  95.6k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|  95.6k|        double              value_raw  = value.unsafe();
  298|  95.6k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|  95.6k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|  95.6k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|  95.6k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|  95.6k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|  95.6k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|  95.6k|        FloatRegister& second_reg =
  308|  95.6k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|  95.6k|        first_reg.SetValue(first_value);
  311|  95.6k|        second_reg.SetValue(second_value);
  312|       |
  313|  95.6k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|  95.6k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|  95.6k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|  95.6k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|  95.6k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|   591k|    {
  322|   591k|        return m_FPSR;
  323|   591k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|   917k|    {
  327|   917k|        return m_FPSR;
  328|   917k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|   917k|    {
  332|   917k|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|   917k|        return status_reg.Get();
  335|   917k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|   591k|    {
  339|   591k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|   591k|        status_reg.SetStatus(value);
  342|   591k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  6.14M|    {
  346|  6.14M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  6.14M|        inst.Execute(*this);
  349|  6.14M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  6.23k|    {
  353|  6.23k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 5.09k, False: 1.13k]
  ------------------
  354|  5.09k|        {
  355|  5.09k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  5.09k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  5.09k|            return false;
  357|  5.09k|        }
  358|       |
  359|  1.13k|        m_CurrentProgram = &program;
  360|       |
  361|  1.13k|        m_ProgramCounter               = 0u;
  362|  1.13k|        m_Halted                       = false;
  363|  1.13k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  1.13k|        m_LastRaisedException          = Exception::None;
  365|  1.13k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  1.13k|        return true;
  368|  6.23k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  1.51M|    {
  373|  1.51M|        return m_CurrentProgram;
  374|  1.51M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  6.14M|    {
  378|       |        // No nothing when no program is loaded
  379|  6.14M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 6.14M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  6.14M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 85, False: 6.14M]
  ------------------
  386|     85|        {
  387|     85|            m_Halted                       = true;
  388|     85|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|     85|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  6.14M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 85, False: 6.14M]
  ------------------
  393|     85|        {
  394|     85|            return;
  395|     85|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  6.14M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  6.14M|        const auto& current_instruction =
  402|  6.14M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  6.14M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  6.14M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 89, False: 6.14M]
  ------------------
  409|     89|        {
  410|     89|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|     89|            return;
  412|     89|        }
  413|       |
  414|  6.14M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  6.14M|        ++m_CurrentStepCount;
  417|       |
  418|  6.14M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 962, False: 6.14M]
  |  Branch (418:14): [True: 6.14M, False: 0]
  |  Branch (418:42): [True: 614, False: 6.14M]
  ------------------
  419|  6.14M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 348, False: 6.14M]
  ------------------
  420|    962|        {
  421|    962|            m_Halted                       = true;
  422|    962|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    962|        }
  424|  6.14M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  1.13k|    {
  428|       |        // Do nothing when no program is loaded
  429|  1.13k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 1.13k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  1.13k|        m_ProgramCounter               = 0u;
  435|  1.13k|        m_Halted                       = false;
  436|  1.13k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  1.13k|        m_LastRaisedException          = Exception::None;
  438|  1.13k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  6.14M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 6.14M, False: 1.13k]
  ------------------
  441|  6.14M|        {
  442|  6.14M|            ExecuteStep();
  443|  6.14M|        }
  444|       |
  445|  1.13k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  1.13k|                   "RegisterAccessType was not reset correctly");
  447|  1.13k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  6.23k|    {
  464|  6.23k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 199k, False: 6.23k]
  ------------------
  465|   199k|        {
  466|   199k|            reg.SetSignedValue(0);
  467|   199k|        }
  468|       |
  469|  6.23k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 199k, False: 6.23k]
  ------------------
  470|   199k|        {
  471|   199k|            reg.SetValue(0.0f);
  472|   199k|        }
  473|       |
  474|  6.23k|        m_FPSR.SetStatus(false);
  475|  6.23k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  6.23k|    {
  479|  6.23k|        m_MemoryBlock.Clear();
  480|  6.23k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|   166k|    {
  488|   166k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|   166k|        m_LastRaisedException = exception;
  491|       |
  492|   166k|        switch (exception)
  493|   166k|        {
  494|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 6, False: 166k]
  ------------------
  495|      6|                m_Halted = true;
  496|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      6|                return;
  498|  46.8k|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 46.8k, False: 119k]
  ------------------
  499|  46.8k|                DLX_WARN("Overflow");
  ------------------
  |  |    8|  46.8k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|  46.8k|                return;
  501|  49.2k|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 49.2k, False: 117k]
  ------------------
  502|  49.2k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  49.2k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|  49.2k|                return;
  504|      1|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 1, False: 166k]
  ------------------
  505|      1|                m_Halted = true;
  506|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      1|                return;
  508|      8|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 8, False: 166k]
  ------------------
  509|      8|                m_Halted = true;
  510|      8|                return;
  511|     45|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 45, False: 166k]
  ------------------
  512|     45|                m_Halted = true;
  513|     45|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     45|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     45|                return;
  515|  70.5k|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 70.5k, False: 96.1k]
  ------------------
  516|  70.5k|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|  70.5k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|  70.5k|                return;
  518|     17|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 17, False: 166k]
  ------------------
  519|     17|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     17|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     17|                m_Halted = true;
  521|     17|                return;
  522|     14|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 14, False: 166k]
  ------------------
  523|     14|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     14|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     14|                m_Halted = true;
  525|     14|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 166k]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|   166k|#endif
  531|   166k|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      8|    {
  558|      8|        return m_MemoryBlock;
  559|      8|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   477k|    {
  573|   477k|        return m_NextProgramCounter;
  574|   477k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  1.51M|    {
  578|  1.51M|        m_NextProgramCounter = new_npc;
  579|  1.51M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  10.9M|    {
   36|  10.9M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  10.9M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  10.9M|        switch (expected_access)
   40|  10.9M|        {
   41|  2.80M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 2.80M, False: 8.18M]
  ------------------
   42|  2.80M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 10.9M]
  ------------------
   44|      0|                return false;
   45|   112k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 112k, False: 10.8M]
  ------------------
   46|   112k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 56.1k, False: 56.1k]
  |  Branch (46:63): [True: 56.1k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 10.9M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|  67.5k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 67.5k, False: 10.9M]
  ------------------
   51|  67.5k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 33.7k, False: 33.7k]
  |  Branch (51:63): [True: 33.7k, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 10.9M]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  8.00M|            default:
  ------------------
  |  Branch (54:13): [True: 8.00M, False: 2.98M]
  ------------------
   55|  8.00M|                return expected_access == access;
   56|  10.9M|        }
   57|  10.9M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|   582k|    {
   14|   582k|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 76.7k, False: 505k]
  ------------------
   15|  76.7k|        {
   16|  76.7k|            char first_char = token[0];
   17|  76.7k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 37.2k, False: 39.5k]
  |  Branch (17:38): [True: 3.26k, False: 36.2k]
  ------------------
   18|  40.4k|            {
   19|  40.4k|                char second_char = token[1];
   20|  40.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 37.7k, False: 2.76k]
  |  Branch (20:43): [True: 37.6k, False: 83]
  ------------------
   21|  37.6k|                {
   22|  37.6k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  37.6k|                }
   24|  40.4k|            }
   25|  76.7k|        }
   26|   505k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 262k, False: 243k]
  ------------------
   27|   262k|        {
   28|   262k|            char first_char = token[0];
   29|   262k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 15.9k, False: 246k]
  |  Branch (29:38): [True: 6.57k, False: 240k]
  ------------------
   30|  22.5k|            {
   31|  22.5k|                char second_char = token[1];
   32|  22.5k|                char third_char  = token[2];
   33|       |
   34|  22.5k|                switch (second_char)
   35|  22.5k|                {
   36|  8.64k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 8.64k, False: 13.8k]
  ------------------
   37|  8.64k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 6.72k, False: 1.91k]
  |  Branch (37:50): [True: 6.47k, False: 244]
  ------------------
   38|  6.47k|                        {
   39|  6.47k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  6.47k|                        }
   41|  2.16k|                        break;
   42|  8.64k|                    }
   43|  7.31k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 7.31k, False: 15.1k]
  ------------------
   44|  7.31k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 5.82k, False: 1.49k]
  |  Branch (44:50): [True: 5.62k, False: 199]
  ------------------
   45|  5.62k|                        {
   46|  5.62k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  5.62k|                        }
   48|  1.69k|                        break;
   49|  7.31k|                    }
   50|  3.40k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 3.40k, False: 19.1k]
  ------------------
   51|  3.40k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 2.66k, False: 734]
  |  Branch (51:50): [True: 450, False: 284]
  ------------------
   52|  3.11k|                        {
   53|  3.11k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  3.11k|                        }
   55|    284|                        break;
   56|  3.40k|                    }
   57|  3.15k|                    default: {
  ------------------
  |  Branch (57:21): [True: 3.15k, False: 19.3k]
  ------------------
   58|  3.15k|                        break;
   59|  3.40k|                    }
   60|  22.5k|                }
   61|  22.5k|            }
   62|   262k|        }
   63|       |
   64|   529k|        return IntRegisterID::None;
   65|   582k|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|   529k|    {
   69|   529k|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 39.1k, False: 490k]
  ------------------
   70|  39.1k|        {
   71|  39.1k|            char first_char = token[0];
   72|  39.1k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 5.93k, False: 33.1k]
  |  Branch (72:38): [True: 665, False: 32.5k]
  ------------------
   73|  6.60k|            {
   74|  6.60k|                char second_char = token[1];
   75|  6.60k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 6.08k, False: 515]
  |  Branch (75:43): [True: 6.01k, False: 75]
  ------------------
   76|  6.01k|                {
   77|  6.01k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  6.01k|                }
   79|  6.60k|            }
   80|  39.1k|        }
   81|   490k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 247k, False: 243k]
  ------------------
   82|   247k|        {
   83|   247k|            char first_char = token[0];
   84|   247k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 17.8k, False: 229k]
  |  Branch (84:38): [True: 5.61k, False: 223k]
  ------------------
   85|  23.4k|            {
   86|  23.4k|                char second_char = token[1];
   87|  23.4k|                char third_char  = token[2];
   88|       |
   89|  23.4k|                switch (second_char)
   90|  23.4k|                {
   91|  4.24k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.24k, False: 19.2k]
  ------------------
   92|  4.24k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.66k, False: 2.58k]
  |  Branch (92:50): [True: 1.59k, False: 66]
  ------------------
   93|  1.59k|                        {
   94|  1.59k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  1.59k|                        }
   96|  2.65k|                        break;
   97|  4.24k|                    }
   98|  16.0k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 16.0k, False: 7.41k]
  ------------------
   99|  16.0k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 15.9k, False: 148]
  |  Branch (99:50): [True: 15.7k, False: 102]
  ------------------
  100|  15.7k|                        {
  101|  15.7k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  15.7k|                        }
  103|    250|                        break;
  104|  16.0k|                    }
  105|    280|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 280, False: 23.1k]
  ------------------
  106|    280|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 142, False: 138]
  |  Branch (106:50): [True: 70, False: 68]
  ------------------
  107|    212|                        {
  108|    212|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    212|                        }
  110|     68|                        break;
  111|    280|                    }
  112|  2.88k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.88k, False: 20.5k]
  ------------------
  113|  2.88k|                        break;
  114|    280|                    }
  115|  23.4k|                }
  116|  23.4k|            }
  117|   247k|        }
  118|       |
  119|   506k|        return FloatRegisterID::None;
  120|   529k|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|   592k|    {
  124|   592k|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 165k, False: 427k]
  ------------------
  125|   165k|        {
  126|   165k|            char c1 = token[0];
  127|   165k|            char c2 = token[1];
  128|   165k|            char c3 = token[2];
  129|   165k|            char c4 = token[3];
  130|       |
  131|   165k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 12.2k, False: 153k]
  |  Branch (131:34): [True: 876, False: 152k]
  |  Branch (131:49): [True: 12.5k, False: 539]
  |  Branch (131:62): [True: 277, False: 262]
  ------------------
  132|   165k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 12.1k, False: 703]
  |  Branch (132:34): [True: 613, False: 90]
  |  Branch (132:49): [True: 12.1k, False: 613]
  |  Branch (132:62): [True: 0, False: 613]
  ------------------
  133|   165k|        }
  134|       |
  135|   427k|        return false;
  136|   592k|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   597k|    {
   12|   597k|        m_Value = value;
   13|   597k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|   917k|    {
   17|   917k|        return m_Value;
   18|   917k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|   932k|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   441k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  1.85M|    {
   41|  1.85M|        return m_Type;
   42|  1.85M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|   648k|    {
   51|   648k|        return m_LineNumber;
   52|   648k|    }
_ZNK3dlx5Token9GetColumnEv:
   55|   551k|    {
   56|   551k|        return m_Column;
   57|   551k|    }
_ZNK3dlx5Token7GetTextEv:
   65|   319k|    {
   66|   319k|        return m_Text;
   67|   319k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   106k|    {
   80|   106k|        return m_HasHint;
   81|   106k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   140k|    {
   85|   140k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   140k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   140k|                   m_Type == Type::ImmediateInteger);
   88|   140k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   140k|        return m_Hint;
   91|   140k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  6.23k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  6.23k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  6.23k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  3.17k|    {
   51|  3.17k|        auto it = m_Iterator;
   52|  12.6k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 9.50k, False: 3.15k]
  ------------------
   53|  9.50k|        {
   54|  9.50k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 19, False: 9.48k]
  ------------------
   55|     19|            {
   56|     19|                return false;
   57|     19|            }
   58|  9.50k|        }
   59|       |
   60|  3.15k|        return true;
   61|  3.17k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  1.37M|    {
   65|  1.37M|        return m_Iterator != m_Tokens.end();
   66|  1.37M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  1.37M|    {
   70|  1.37M|        return m_Iterator == m_Tokens.end();
   71|  1.37M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  1.37M|    {
   85|  1.37M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  1.37M|        return *m_Iterator++;
   91|  1.37M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  3.15k|    {
  164|  3.15k|        return m_Iterator;
  165|  3.15k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    250|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    250|        return m_Tokens.rbegin();
  224|    250|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  2.39k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  2.39k|        return m_Tokens.rend();
  233|  2.39k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  6.23k|    {
   63|  6.23k|        TokenStream tokens;
   64|       |
   65|  6.23k|        std::string_view current_token;
   66|       |
   67|  6.23k|        phi::u64 current_line_number{1u};
   68|  6.23k|        phi::u64 current_column{1u};
   69|  6.23k|        phi::u64 token_begin{0u};
   70|       |
   71|  6.23k|        phi::boolean parsing_comment{false};
   72|       |
   73|  3.57M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 3.56M, False: 6.23k]
  ------------------
   74|  3.56M|        {
   75|  3.56M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  3.56M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 540k, False: 3.02M]
  ------------------
   78|   540k|            {
   79|   540k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 219k, False: 321k]
  ------------------
   80|   219k|                {
   81|       |                    // Skip empty lines
   82|   219k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   219k|                                        current_line_number, current_column);
   84|       |
   85|   219k|                    parsing_comment = false;
   86|   219k|                    current_line_number += 1u;
   87|   219k|                    current_column = 1u;
   88|   219k|                    continue;
   89|   219k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   321k|                tokens.emplace_back(
   93|   321k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   321k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   321k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   321k|                                    current_line_number, current_column);
   98|       |
   99|   321k|                current_token   = std::string_view{};
  100|   321k|                parsing_comment = false;
  101|   321k|                current_line_number += 1u;
  102|   321k|                current_column = 0u;
  103|   321k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  3.02M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 4.46k, False: 3.02M]
  |  Branch (105:34): [True: 173k, False: 2.85M]
  ------------------
  106|   177k|            {
  107|   177k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 164k, False: 13.7k]
  ------------------
  108|   164k|                {
  109|   164k|                    token_begin = i;
  110|   164k|                }
  111|  13.7k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 10.2k, False: 3.45k]
  ------------------
  112|  10.2k|                {
  113|  10.2k|                    tokens.emplace_back(ParseToken(
  114|  10.2k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  10.2k|                            current_line_number, current_column - current_token.length()));
  116|  10.2k|                    token_begin   = i;
  117|  10.2k|                    current_token = std::string_view{};
  118|  10.2k|                }
  119|       |
  120|   177k|                parsing_comment = true;
  121|   177k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   177k|            }
  123|  2.85M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 353k, False: 2.49M]
  ------------------
  124|   353k|            {
  125|       |                // simply append the character
  126|   353k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   353k|            }
  128|  2.49M|            else
  129|  2.49M|            {
  130|       |                // Not parsing a comment
  131|  2.49M|                switch (c)
  132|  2.49M|                {
  133|   360k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 360k, False: 2.13M]
  ------------------
  134|   363k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 3.58k, False: 2.49M]
  ------------------
  135|   372k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 8.60k, False: 2.48M]
  ------------------
  136|   372k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 2.89k, False: 369k]
  ------------------
  137|  2.89k|                        {
  138|  2.89k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  2.89k|                            continue;
  141|  2.89k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   369k|                        tokens.emplace_back(ParseToken(
  145|   369k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   369k|                                current_line_number, current_column - current_token.length()));
  147|   369k|                        current_token = std::string_view{};
  148|   369k|                        break;
  149|  24.7k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 24.7k, False: 2.47M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  24.7k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 19.6k, False: 5.16k]
  ------------------
  152|  19.6k|                        {
  153|  19.6k|                            current_token =
  154|  19.6k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  19.6k|                            tokens.emplace_back(ParseToken(
  156|  19.6k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  19.6k|                                    current_line_number,
  158|  19.6k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  19.6k|                            current_token = std::string_view{};
  161|  19.6k|                        }
  162|  5.16k|                        else
  163|  5.16k|                        {
  164|       |                            // Orphan colon
  165|  5.16k|                            token_begin = i;
  166|       |
  167|  5.16k|                            tokens.emplace_back(Token::Type::Colon,
  168|  5.16k|                                                source.substr(token_begin.unsafe(), 1),
  169|  5.16k|                                                current_line_number, current_column);
  170|  5.16k|                        }
  171|  24.7k|                        break;
  172|  47.2k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 47.2k, False: 2.45M]
  ------------------
  173|  54.6k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 7.43k, False: 2.49M]
  ------------------
  174|  57.4k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 2.72k, False: 2.49M]
  ------------------
  175|  57.4k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 48.7k, False: 8.71k]
  ------------------
  176|  48.7k|                        {
  177|  48.7k|                            tokens.emplace_back(ParseToken(
  178|  48.7k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|  48.7k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|  48.7k|                            current_token = std::string_view{};
  182|  48.7k|                        }
  183|       |
  184|  57.4k|                        Token::Type type;
  185|  57.4k|                        switch (c)
  186|  57.4k|                        {
  187|  47.2k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 47.2k, False: 10.1k]
  ------------------
  188|  47.2k|                                type = Token::Type::Comma;
  189|  47.2k|                                break;
  190|  7.43k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 7.43k, False: 49.9k]
  ------------------
  191|  7.43k|                                type = Token::Type::OpenBracket;
  192|  7.43k|                                break;
  193|  2.72k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 2.72k, False: 54.6k]
  ------------------
  194|  2.72k|                                type = Token::Type::ClosingBracket;
  195|  2.72k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 57.4k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  57.4k|#endif
  201|  57.4k|                        }
  202|       |
  203|  57.4k|                        token_begin = i;
  204|       |
  205|  57.4k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  57.4k|                                            current_line_number, current_column);
  207|  57.4k|                        break;
  208|       |
  209|  2.04M|                    default:
  ------------------
  |  Branch (209:21): [True: 2.04M, False: 454k]
  ------------------
  210|  2.04M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 597k, False: 1.44M]
  ------------------
  211|   597k|                        {
  212|   597k|                            token_begin = i;
  213|   597k|                        }
  214|       |
  215|       |                        // simply append the character
  216|  2.04M|                        current_token =
  217|  2.04M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  2.49M|                }
  219|  2.49M|            }
  220|       |
  221|  3.34M|            current_column += 1u;
  222|  3.34M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  6.23k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 2.53k, False: 3.69k]
  ------------------
  226|  2.53k|        {
  227|  2.53k|            tokens.emplace_back(
  228|  2.53k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  2.53k|                               current_line_number, current_column - current_token.length()));
  230|  2.53k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  6.23k|        tokens.finalize();
  234|       |
  235|  6.23k|        return tokens;
  236|  6.23k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|   771k|    {
   11|   771k|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 11.0k, False: 760k]
  |  Branch (11:35): [True: 11.0k, False: 83]
  ------------------
   12|  11.0k|        {
   13|  11.0k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  11.0k|            if (number)
  ------------------
  |  Branch (15:17): [True: 7.63k, False: 3.37k]
  ------------------
   16|  7.63k|            {
   17|  7.63k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  7.63k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  7.63k|            }
   20|       |
   21|  3.37k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  11.0k|        }
   23|       |
   24|   760k|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 1.24k, False: 759k]
  |  Branch (24:35): [True: 173k, False: 586k]
  ------------------
   25|   174k|        {
   26|   174k|            return {Token::Type::Comment, token, line_number, column};
   27|   174k|        }
   28|       |
   29|   586k|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 16.8k, False: 569k]
  ------------------
   30|  16.8k|        {
   31|  16.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  16.8k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  16.8k|        }
   34|       |
   35|   569k|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 12.1k, False: 557k]
  ------------------
   36|  12.1k|        {
   37|  12.1k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  12.1k|        }
   39|       |
   40|   557k|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 52.4k, False: 504k]
  ------------------
   41|  52.4k|        {
   42|  52.4k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  52.4k|                    static_cast<std::uint32_t>(id)};
   44|  52.4k|        }
   45|       |
   46|   504k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 23.5k, False: 481k]
  ------------------
   47|  23.5k|        {
   48|  23.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  23.5k|                    static_cast<std::uint32_t>(id)};
   50|  23.5k|        }
   51|       |
   52|   481k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 341k, False: 140k]
  ------------------
   53|   341k|        {
   54|   341k|            return {Token::Type::OpCode, token, line_number, column,
   55|   341k|                    static_cast<std::uint32_t>(opcode)};
   56|   341k|        }
   57|       |
   58|   140k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   481k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  6.23k|    {
   53|       |        // Constants
   54|  6.23k|        constexpr std::uint8_t number_of_opcodes =
   55|  6.23k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  6.23k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  6.23k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  6.23k|        std::string ret;
   60|       |
   61|   871k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 864k, False: 6.21k]
  ------------------
   62|   864k|        {
   63|   864k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   864k|            switch (current_value)
   66|   864k|            {
   67|       |                // OpCode
   68|   316k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 316k, False: 548k]
  ------------------
   69|       |                    // Has one more value
   70|   316k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 316k, False: 293]
  ------------------
   71|   316k|                    {
   72|   316k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   316k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   316k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1, False: 316k]
  ------------------
   77|      1|                        {
   78|      1|                            return detail::ErrorString;
   79|      1|                        }
   80|   316k|                    }
   81|   316k|                    break;
   82|   316k|                }
   83|       |
   84|       |                // Int Register
   85|   316k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 56.3k, False: 808k]
  ------------------
   86|       |                    // Has one more value
   87|  56.3k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 56.2k, False: 33]
  ------------------
   88|  56.2k|                    {
   89|  56.2k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  56.2k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  56.2k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 1, False: 56.2k]
  ------------------
   93|      1|                        {
   94|      1|                            return detail::ErrorString;
   95|      1|                        }
   96|  56.2k|                    }
   97|  56.3k|                    break;
   98|  56.3k|                }
   99|       |
  100|       |                // Float register
  101|  56.3k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 24.7k, False: 840k]
  ------------------
  102|       |                    // Has one more value
  103|  24.7k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 24.7k, False: 39]
  ------------------
  104|  24.7k|                    {
  105|  24.7k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  24.7k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  24.7k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 1, False: 24.7k]
  ------------------
  109|      1|                        {
  110|      1|                            return detail::ErrorString;
  111|      1|                        }
  112|  24.7k|                    }
  113|  24.7k|                    break;
  114|  24.7k|                }
  115|       |
  116|       |                // Floating point status register
  117|  24.7k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 13.6k, False: 851k]
  ------------------
  118|  13.6k|                    ret += "FPSR";
  119|  13.6k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 2, False: 13.6k]
  ------------------
  120|      2|                    {
  121|      2|                        return detail::ErrorString;
  122|      2|                    }
  123|       |
  124|  13.6k|                    break;
  125|  13.6k|                }
  126|       |
  127|       |                // Immediate integer
  128|  15.0k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 15.0k, False: 849k]
  ------------------
  129|  15.0k|                    ret += "#";
  130|  15.0k|                    [[fallthrough]];
  131|  15.0k|                }
  132|       |
  133|       |                // Integer literal
  134|  47.1k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 32.1k, False: 832k]
  ------------------
  135|  47.1k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  47.1k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 47.0k, False: 85]
  ------------------
  138|  47.0k|                    {
  139|  47.0k|                        std::int16_t value = 0;
  140|       |
  141|   141k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 93.9k, False: 47.0k]
  ------------------
  142|  93.9k|                        {
  143|  93.9k|                            value <<= 8;
  144|  93.9k|                            value &= data[index++];
  145|  93.9k|                        }
  146|       |
  147|  47.0k|                        ret += std::to_string(value);
  148|  47.0k|                    }
  149|  47.1k|                    break;
  150|  15.0k|                }
  151|       |
  152|       |                // Label
  153|  17.0k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 17.0k, False: 847k]
  ------------------
  154|  17.0k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  17.0k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 17.0k, False: 8]
  ------------------
  157|  17.0k|                    {
  158|  17.0k|                        std::string label_name = "lbl_";
  159|       |
  160|   101k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 84.8k, False: 17.0k]
  ------------------
  161|  84.8k|                        {
  162|  84.8k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  84.8k|                            label_name += c;
  165|  84.8k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  17.0k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 16.4k, False: 554]
  |  Branch (168:45): [True: 13.8k, False: 2.62k]
  ------------------
  169|  13.8k|                        {
  170|  13.8k|                            label_name += ':';
  171|  13.8k|                            ret += label_name;
  172|  13.8k|                        }
  173|  3.17k|                        else
  174|  3.17k|                        {
  175|  3.17k|                            ret += label_name;
  176|  3.17k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 1, False: 3.17k]
  ------------------
  177|      1|                            {
  178|      1|                                return detail::ErrorString;
  179|      1|                            }
  180|  3.17k|                        }
  181|  17.0k|                    }
  182|  17.0k|                    break;
  183|  17.0k|                }
  184|       |
  185|       |                // Newline
  186|   215k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 215k, False: 649k]
  ------------------
  187|   215k|                    ret += '\n';
  188|   215k|                    break;
  189|  17.0k|                }
  190|       |
  191|       |                // Comment
  192|   174k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 174k, False: 690k]
  ------------------
  193|   174k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   174k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 174k, False: 118]
  ------------------
  196|   174k|                    {
  197|   174k|                        std::string comment = "; ";
  198|       |
  199|  1.04M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 867k, False: 174k]
  ------------------
  200|   867k|                        {
  201|   867k|                            comment += static_cast<char>(data[index++]);
  202|   867k|                        }
  203|       |
  204|   174k|                        ret += comment + '\n';
  205|   174k|                    }
  206|   174k|                    break;
  207|  17.0k|                }
  208|       |
  209|       |                // Ignore
  210|     16|                default:
  ------------------
  |  Branch (210:17): [True: 16, False: 864k]
  ------------------
  211|     16|                    return detail::ErrorString;
  212|   864k|            }
  213|   864k|        }
  214|       |
  215|  6.21k|        return ret;
  216|  6.23k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   414k|        {
   20|   414k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 411k, False: 2.20k]
  ------------------
   21|   411k|            {
   22|   411k|                std::uint8_t val = data[index++];
   23|   411k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 362k, False: 48.8k]
  ------------------
   24|   362k|                {
   25|   362k|                    text += ' ';
   26|   362k|                }
   27|  48.8k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 48.8k, False: 6]
  ------------------
   28|  48.8k|                {
   29|  48.8k|                    text += ',';
   30|  48.8k|                }
   31|      6|                else
   32|      6|                {
   33|      6|                    return false;
   34|      6|                }
   35|   411k|            }
   36|       |
   37|   414k|            return true;
   38|   414k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  84.8k|        {
   42|  84.8k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 64.4k, False: 20.4k]
  ------------------
   43|  64.4k|            {
   44|  64.4k|                return '_';
   45|  64.4k|            }
   46|       |
   47|  20.4k|            return c;
   48|  84.8k|        }

LLVMFuzzerTestOneInput:
   12|  6.23k|{
   13|  6.23k|    static dlx::Processor processor;
   14|       |
   15|  6.23k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  6.23k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  6.23k|    processor.ClearRegisters();
   22|  6.23k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  6.23k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 1.13k, False: 5.09k]
  ------------------
   26|  1.13k|    {
   27|  1.13k|        processor.ExecuteCurrentProgram();
   28|  1.13k|    }
   29|       |
   30|  6.23k|    return 0;
   31|  6.23k|}


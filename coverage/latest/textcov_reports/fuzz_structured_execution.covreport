_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   781k|        {
  169|   781k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   781k|            switch (index.unsafe())
  172|   781k|            {
  173|   322k|                case 0:
  ------------------
  |  Branch (173:17): [True: 322k, False: 459k]
  ------------------
  174|   322k|                    return m_Arg1Type;
  175|       |
  176|   235k|                case 1:
  ------------------
  |  Branch (176:17): [True: 235k, False: 545k]
  ------------------
  177|   235k|                    return m_Arg2Type;
  178|       |
  179|   223k|                case 2:
  ------------------
  |  Branch (179:17): [True: 223k, False: 558k]
  ------------------
  180|   223k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 781k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   781k|#endif
  187|   781k|            }
  188|   781k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   207k|        {
  195|   207k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   207k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 204k, False: 2.34k]
  ------------------
  199|   204k|            {
  200|   204k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   204k|            }
  202|   207k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 175k, False: 32.2k]
  ------------------
  203|   175k|            {
  204|   175k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   175k|            }
  206|   207k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 129k, False: 77.6k]
  ------------------
  207|   129k|            {
  208|   129k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|   129k|            }
  210|       |
  211|   207k|            return number_of_argument_required;
  212|   207k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  8.54M|        {
  216|  8.54M|            return m_RegisterAccessType;
  217|  8.54M|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   207k|        {
  221|   207k|            return m_Executor;
  222|   207k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|  25.7M|    {
   38|  25.7M|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|  25.7M|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|  25.7M|                                         static_cast<underlying_t>(rhs));
   42|  25.7M|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|  25.7M|    {
   55|  25.7M|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|  25.7M|        return static_cast<underlying_t>(type & test) != 0;
   58|  25.7M|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   663k|    {
  204|   663k|        switch (value)
  205|   663k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   310k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   310k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 310k, False: 353k]
  |  |  |  |  ------------------
  |  |  |  |  208|   310k|        return #name;
  |  |  ------------------
  |  |   16|   310k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  22.2k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 22.2k, False: 640k]
  |  |  |  |  ------------------
  |  |  |  |  208|  22.2k|        return #name;
  |  |  ------------------
  |  |   17|  22.2k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.77k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.77k|        return #name;
  |  |  ------------------
  |  |   18|  8.46k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  8.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.46k, False: 654k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.46k|        return #name;
  |  |  ------------------
  |  |   19|  8.46k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.31k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.31k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.31k|        return #name;
  |  |  ------------------
  |  |   20|  5.31k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.82k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.82k|        return #name;
  |  |  ------------------
  |  |   21|  4.82k|                                                                                                   \
  |  |   22|  4.82k|    /* Sub */                                                                                      \
  |  |   23|  5.59k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.59k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.59k|        return #name;
  |  |  ------------------
  |  |   24|  5.59k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.87k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.87k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.87k|        return #name;
  |  |  ------------------
  |  |   25|  8.20k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.20k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.20k, False: 654k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.20k|        return #name;
  |  |  ------------------
  |  |   26|  8.20k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    842|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 842, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    842|        return #name;
  |  |  ------------------
  |  |   27|  3.19k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.19k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.19k|        return #name;
  |  |  ------------------
  |  |   28|  3.19k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.79k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.79k|        return #name;
  |  |  ------------------
  |  |   29|  1.79k|                                                                                                   \
  |  |   30|  1.79k|    /* Multiplication */                                                                           \
  |  |   31|  1.79k|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.38k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.38k|        return #name;
  |  |  ------------------
  |  |   32|  4.65k|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.65k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.65k|        return #name;
  |  |  ------------------
  |  |   33|  4.65k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.53k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.53k|        return #name;
  |  |  ------------------
  |  |   34|  2.53k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.00k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.00k|        return #name;
  |  |  ------------------
  |  |   35|  4.72k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.72k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.72k|        return #name;
  |  |  ------------------
  |  |   36|  4.72k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.19k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.19k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.19k|        return #name;
  |  |  ------------------
  |  |   37|  2.19k|                                                                                                   \
  |  |   38|  2.19k|    /* Division */                                                                                 \
  |  |   39|  2.19k|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    573|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 573, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    573|        return #name;
  |  |  ------------------
  |  |   40|    573|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    312|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 312, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    312|        return #name;
  |  |  ------------------
  |  |   41|    438|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    438|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 438, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    438|        return #name;
  |  |  ------------------
  |  |   42|  3.12k|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.12k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.12k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.12k|        return #name;
  |  |  ------------------
  |  |   43|  4.02k|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.02k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.02k|        return #name;
  |  |  ------------------
  |  |   44|  4.02k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.17k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.17k|        return #name;
  |  |  ------------------
  |  |   45|  1.17k|                                                                                                   \
  |  |   46|  1.17k|    /* Shift left (logical) */                                                                     \
  |  |   47|  3.82k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.82k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.82k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.82k|        return #name;
  |  |  ------------------
  |  |   48|  3.82k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    488|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 488, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    488|        return #name;
  |  |  ------------------
  |  |   49|    488|                                                                                                   \
  |  |   50|    488|    /* Shift right (logical) */                                                                    \
  |  |   51|  11.3k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  11.3k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.3k, False: 651k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.3k|        return #name;
  |  |  ------------------
  |  |   52|  11.5k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.5k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.5k, False: 651k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.5k|        return #name;
  |  |  ------------------
  |  |   53|  11.5k|                                                                                                   \
  |  |   54|  11.5k|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|  11.5k|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |   56|  1.04k|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    797|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 797, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    797|        return #name;
  |  |  ------------------
  |  |   57|    797|                                                                                                   \
  |  |   58|    797|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    797|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    268|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 268, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    268|        return #name;
  |  |  ------------------
  |  |   60|  4.01k|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.01k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.01k|        return #name;
  |  |  ------------------
  |  |   61|  4.01k|                                                                                                   \
  |  |   62|  4.01k|    /* Logic */                                                                                    \
  |  |   63|  4.01k|                                                                                                   \
  |  |   64|  4.01k|    /* And */                                                                                      \
  |  |   65|  4.01k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.17k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.17k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.17k|        return #name;
  |  |  ------------------
  |  |   66|  25.1k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  25.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 25.1k, False: 638k]
  |  |  |  |  ------------------
  |  |  |  |  208|  25.1k|        return #name;
  |  |  ------------------
  |  |   67|  25.1k|                                                                                                   \
  |  |   68|  25.1k|    /* Or */                                                                                       \
  |  |   69|  25.1k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    101|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 101, False: 663k]
  |  |  |  |  ------------------
  |  |  |  |  208|    101|        return #name;
  |  |  ------------------
  |  |   70|    296|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    296|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 296, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    296|        return #name;
  |  |  ------------------
  |  |   71|    296|                                                                                                   \
  |  |   72|    296|    /* XOR */                                                                                      \
  |  |   73|  2.51k|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.51k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.51k|        return #name;
  |  |  ------------------
  |  |   74|  2.51k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.11k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.11k|        return #name;
  |  |  ------------------
  |  |   75|  2.11k|                                                                                                   \
  |  |   76|  2.11k|    /* Set conditionals */                                                                         \
  |  |   77|  2.11k|                                                                                                   \
  |  |   78|  2.11k|    /* Less than */                                                                                \
  |  |   79|  2.11k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    637|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 637, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    637|        return #name;
  |  |  ------------------
  |  |   80|  2.22k|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.22k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.22k|        return #name;
  |  |  ------------------
  |  |   81|  2.22k|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    432|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 432, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    432|        return #name;
  |  |  ------------------
  |  |   82|  1.78k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.78k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.78k|        return #name;
  |  |  ------------------
  |  |   83|  1.78k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    716|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 716, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    716|        return #name;
  |  |  ------------------
  |  |   84|    960|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    960|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 960, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    960|        return #name;
  |  |  ------------------
  |  |   85|    960|                                                                                                   \
  |  |   86|    960|    /* Greater than */                                                                             \
  |  |   87|  3.52k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.52k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.52k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.52k|        return #name;
  |  |  ------------------
  |  |   88|  3.52k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    755|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 755, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    755|        return #name;
  |  |  ------------------
  |  |   89|  3.57k|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.57k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.57k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.57k|        return #name;
  |  |  ------------------
  |  |   90|  3.57k|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.42k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.42k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.42k|        return #name;
  |  |  ------------------
  |  |   91|  7.02k|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  7.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.02k, False: 656k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.02k|        return #name;
  |  |  ------------------
  |  |   92|  7.02k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.96k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.96k|        return #name;
  |  |  ------------------
  |  |   93|  5.96k|                                                                                                   \
  |  |   94|  5.96k|    /* Less than or equal */                                                                       \
  |  |   95|  5.96k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.16k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.16k|        return #name;
  |  |  ------------------
  |  |   96|  2.16k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.34k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.34k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.34k|        return #name;
  |  |  ------------------
  |  |   97|  1.34k|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    788|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 788, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    788|        return #name;
  |  |  ------------------
  |  |   98|  1.04k|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |   99|  1.04k|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    661|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 661, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    661|        return #name;
  |  |  ------------------
  |  |  100|  3.86k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.86k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.86k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.86k|        return #name;
  |  |  ------------------
  |  |  101|  3.86k|                                                                                                   \
  |  |  102|  3.86k|    /* Greater than or equal */                                                                    \
  |  |  103|  4.55k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.55k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.55k|        return #name;
  |  |  ------------------
  |  |  104|  8.88k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  8.88k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.88k, False: 654k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.88k|        return #name;
  |  |  ------------------
  |  |  105|  8.88k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    932|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 932, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    932|        return #name;
  |  |  ------------------
  |  |  106|  2.29k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.29k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.29k|        return #name;
  |  |  ------------------
  |  |  107|  2.29k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    151|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 151, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    151|        return #name;
  |  |  ------------------
  |  |  108|  2.11k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.11k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.11k|        return #name;
  |  |  ------------------
  |  |  109|  2.11k|                                                                                                   \
  |  |  110|  2.11k|    /* Equal */                                                                                    \
  |  |  111|  2.11k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.00k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.00k|        return #name;
  |  |  ------------------
  |  |  112|  2.79k|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.79k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.79k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.79k|        return #name;
  |  |  ------------------
  |  |  113|  4.15k|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.15k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.15k|        return #name;
  |  |  ------------------
  |  |  114|  4.24k|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.24k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.24k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.24k|        return #name;
  |  |  ------------------
  |  |  115|  5.54k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.54k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.54k|        return #name;
  |  |  ------------------
  |  |  116|  5.54k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    415|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 415, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    415|        return #name;
  |  |  ------------------
  |  |  117|    415|                                                                                                   \
  |  |  118|    415|    /* Not equal */                                                                                \
  |  |  119|  12.4k|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  12.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12.4k, False: 650k]
  |  |  |  |  ------------------
  |  |  |  |  208|  12.4k|        return #name;
  |  |  ------------------
  |  |  120|  12.4k|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    676|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 676, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    676|        return #name;
  |  |  ------------------
  |  |  121|    676|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    436|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 436, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    436|        return #name;
  |  |  ------------------
  |  |  122|    436|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    406|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 406, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    406|        return #name;
  |  |  ------------------
  |  |  123|    512|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    512|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 512, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    512|        return #name;
  |  |  ------------------
  |  |  124|    512|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 201, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    201|        return #name;
  |  |  ------------------
  |  |  125|    201|                                                                                                   \
  |  |  126|    201|    /* Conditional branching */                                                                    \
  |  |  127|    429|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    429|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 429, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    429|        return #name;
  |  |  ------------------
  |  |  128|    429|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    404|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 404, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    404|        return #name;
  |  |  ------------------
  |  |  129|    854|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    854|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 854, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    854|        return #name;
  |  |  ------------------
  |  |  130|  10.0k|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  10.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 10.0k, False: 653k]
  |  |  |  |  ------------------
  |  |  |  |  208|  10.0k|        return #name;
  |  |  ------------------
  |  |  131|  10.0k|                                                                                                   \
  |  |  132|  10.0k|    /* Unconditional branching */                                                                  \
  |  |  133|  10.0k|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|  2.73k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.73k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.73k|        return #name;
  |  |  ------------------
  |  |  134|  2.73k|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    298|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 298, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    298|        return #name;
  |  |  ------------------
  |  |  135|  5.69k|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.69k, False: 657k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.69k|        return #name;
  |  |  ------------------
  |  |  136|  15.0k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  15.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15.0k, False: 648k]
  |  |  |  |  ------------------
  |  |  |  |  208|  15.0k|        return #name;
  |  |  ------------------
  |  |  137|  15.0k|                                                                                                   \
  |  |  138|  15.0k|    /* Loading data */                                                                             \
  |  |  139|  15.0k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.46k, False: 660k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.46k|        return #name;
  |  |  ------------------
  |  |  140|  2.46k|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    446|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 446, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    446|        return #name;
  |  |  ------------------
  |  |  141|    755|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    755|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 755, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    755|        return #name;
  |  |  ------------------
  |  |  142|  1.09k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.09k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.09k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.09k|        return #name;
  |  |  ------------------
  |  |  143|  14.1k|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  14.1k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.1k, False: 649k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.1k|        return #name;
  |  |  ------------------
  |  |  144|  14.1k|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  3.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.93k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.93k|        return #name;
  |  |  ------------------
  |  |  145|  3.93k|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    559|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 559, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    559|        return #name;
  |  |  ------------------
  |  |  146|  1.21k|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.21k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.21k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.21k|        return #name;
  |  |  ------------------
  |  |  147|  5.07k|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  5.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.07k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.07k|        return #name;
  |  |  ------------------
  |  |  148|  5.07k|                                                                                                   \
  |  |  149|  5.07k|    /* Storing data */                                                                             \
  |  |  150|  5.07k|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.48k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.48k|        return #name;
  |  |  ------------------
  |  |  151|  1.48k|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    518|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 518, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    518|        return #name;
  |  |  ------------------
  |  |  152|    933|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    933|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 933, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    933|        return #name;
  |  |  ------------------
  |  |  153|  3.55k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.55k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.55k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.55k|        return #name;
  |  |  ------------------
  |  |  154|  3.55k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 144, False: 663k]
  |  |  |  |  ------------------
  |  |  |  |  208|    144|        return #name;
  |  |  ------------------
  |  |  155|  3.29k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.29k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.29k, False: 659k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.29k|        return #name;
  |  |  ------------------
  |  |  156|  8.59k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  8.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8.59k, False: 654k]
  |  |  |  |  ------------------
  |  |  |  |  208|  8.59k|        return #name;
  |  |  ------------------
  |  |  157|  8.59k|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.35k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.35k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.35k|        return #name;
  |  |  ------------------
  |  |  158|  1.35k|                                                                                                   \
  |  |  159|  1.35k|    /* Moving data */                                                                              \
  |  |  160|  1.35k|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    608|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 608, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    608|        return #name;
  |  |  ------------------
  |  |  161|    608|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    333|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 333, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    333|        return #name;
  |  |  ------------------
  |  |  162|  1.51k|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  1.51k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.51k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.51k|        return #name;
  |  |  ------------------
  |  |  163|  4.40k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  4.40k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.40k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.40k|        return #name;
  |  |  ------------------
  |  |  164|  4.40k|                                                                                                   \
  |  |  165|  4.40k|    /* Converting data */                                                                          \
  |  |  166|  4.40k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    585|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 585, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    585|        return #name;
  |  |  ------------------
  |  |  167|    585|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    249|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 249, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    249|        return #name;
  |  |  ------------------
  |  |  168|    319|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    319|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 319, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    319|        return #name;
  |  |  ------------------
  |  |  169|  1.53k|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|  1.53k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.53k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.53k|        return #name;
  |  |  ------------------
  |  |  170|  1.53k|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 236, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    236|        return #name;
  |  |  ------------------
  |  |  171|    671|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    671|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 671, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|    671|        return #name;
  |  |  ------------------
  |  |  172|    671|                                                                                                   \
  |  |  173|    671|    /* Other */                                                                                    \
  |  |  174|  2.06k|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.06k, False: 661k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.06k|        return #name;
  |  |  ------------------
  |  |  175|  4.80k|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.80k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.80k, False: 658k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.80k|        return #name;
  |  |  ------------------
  |  |  176|  4.80k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.11k, False: 662k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.11k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 663k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   663k|        }
  217|   663k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  47.8k|    {
   32|  47.8k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 2.82k, False: 45.0k]
  ------------------
   33|  2.82k|        {
   34|  2.82k|            return true;
   35|  2.82k|        }
   36|       |
   37|  45.0k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 767, False: 44.2k]
  ------------------
   38|    767|        {
   39|    767|            return true;
   40|    767|        }
   41|       |
   42|  44.2k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 1.59k, False: 42.7k]
  ------------------
   43|  1.59k|        {
   44|  1.59k|            return true;
   45|  1.59k|        }
   46|       |
   47|  42.7k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 0, False: 42.7k]
  ------------------
   48|      0|        {
   49|      0|            return true;
   50|      0|        }
   51|       |
   52|  42.7k|        return false;
   53|  42.7k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  42.7k|    {
   57|  42.7k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 42.7k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  42.7k|        const char first_char = token.at(0);
   63|       |
   64|  42.7k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 2.18k, False: 40.5k]
  ------------------
   65|  2.18k|        {
   66|  2.18k|            return phi::is_alpha(first_char);
   67|  2.18k|        }
   68|       |
   69|  40.5k|        phi::boolean just_under_scores = (first_char == '_');
   70|  40.5k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 4.28k, False: 36.2k]
  |  Branch (70:15): [True: 35.6k, False: 4.85k]
  |  Branch (70:44): [True: 576, False: 4.28k]
  ------------------
   71|  4.28k|        {
   72|  4.28k|            return false;
   73|  4.28k|        }
   74|       |
   75|   261k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 235k, False: 26.0k]
  ------------------
   76|   235k|        {
   77|   235k|            const char c{token.at(index)};
   78|       |
   79|   235k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 92.6k, False: 143k]
  ------------------
   80|  92.6k|            {
   81|  92.6k|                just_under_scores = false;
   82|  92.6k|            }
   83|   143k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 132k, False: 10.1k]
  ------------------
   84|   132k|            {
   85|   132k|                continue;
   86|   132k|            }
   87|  10.1k|            else
   88|  10.1k|            {
   89|  10.1k|                return false;
   90|  10.1k|            }
   91|   235k|        }
   92|       |
   93|  26.0k|        return !just_under_scores;
   94|  36.2k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.12M|    {
  101|  1.12M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.12M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.12M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 61.6k, False: 1.06M]
  ------------------
  107|  61.6k|        {
  108|  61.6k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 32.4k, False: 29.2k]
  ------------------
  109|  32.4k|            {
  110|  32.4k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  32.4k|            }
  112|       |
  113|  29.2k|            return {};
  114|  61.6k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.06M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 327, False: 1.06M]
  ------------------
  118|    327|        {
  119|    327|            return {};
  120|    327|        }
  121|       |
  122|  1.06M|        std::int32_t number{0};
  123|  1.06M|        phi::boolean is_negative{false};
  124|  1.06M|        phi::boolean starts_with_zero{false};
  125|  1.06M|        phi::boolean parsing_binary{false};
  126|  1.06M|        phi::boolean parsing_octal{false};
  127|  1.06M|        phi::boolean parsing_hexadecimal{false};
  128|  1.06M|        phi::boolean parsed_something{false};
  129|  1.06M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.20M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.18M, False: 15.5k]
  ------------------
  134|  1.18M|        {
  135|  1.18M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.18M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.06M, False: 120k]
  ------------------
  139|  1.06M|            {
  140|  1.06M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 855, False: 1.06M]
  ------------------
  141|    855|                {
  142|    855|                    continue;
  143|    855|                }
  144|       |
  145|  1.06M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 1.24k, False: 1.06M]
  ------------------
  146|  1.24k|                {
  147|  1.24k|                    is_negative = true;
  148|  1.24k|                    continue;
  149|  1.24k|                }
  150|       |
  151|  1.06M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 47.8k, False: 1.01M]
  ------------------
  152|  47.8k|                {
  153|  47.8k|                    starts_with_zero = true;
  154|  47.8k|                    continue;
  155|  47.8k|                }
  156|       |
  157|  1.01M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 352, False: 1.01M]
  ------------------
  158|    352|                {
  159|    352|                    return {};
  160|    352|                }
  161|  1.01M|            }
  162|       |
  163|       |            // Second character
  164|  1.13M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 51.2k, False: 1.08M]
  ------------------
  165|  51.2k|            {
  166|  51.2k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 47.8k, False: 3.41k]
  ------------------
  167|  47.8k|                {
  168|       |                    // Binary
  169|  47.8k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 3.92k, False: 43.8k]
  |  Branch (169:37): [True: 3.17k, False: 40.7k]
  ------------------
  170|  7.09k|                    {
  171|  7.09k|                        parsing_binary = true;
  172|  7.09k|                        continue;
  173|  7.09k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  40.7k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 5.92k, False: 34.7k]
  |  Branch (176:37): [True: 1.74k, False: 33.0k]
  ------------------
  177|  7.66k|                    {
  178|  7.66k|                        parsing_hexadecimal = true;
  179|  7.66k|                        continue;
  180|  7.66k|                    }
  181|       |
  182|       |                    // Octal
  183|  33.0k|                    parsing_octal = true;
  184|  33.0k|                }
  185|  51.2k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.12M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 395, False: 1.12M]
  ------------------
  189|    395|            {
  190|    395|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 138, False: 257]
  ------------------
  191|    138|                {
  192|    138|                    return {};
  193|    138|                }
  194|       |
  195|    257|                parsed_separator = true;
  196|    257|                continue;
  197|    395|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.12M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 1.27k, False: 1.12M]
  |  Branch (200:32): [True: 0, False: 1.27k]
  ------------------
  201|      0|            {
  202|       |                // Would underflow
  203|      0|                return {};
  204|      0|            }
  205|  1.12M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.12M, False: 1.27k]
  |  Branch (205:17): [True: 0, False: 1.12M]
  |  Branch (205:33): [True: 0, False: 1.12M]
  ------------------
  206|      0|            {
  207|       |                // Would overflow
  208|      0|                return {};
  209|      0|            }
  210|       |
  211|  1.12M|            parsed_separator = false;
  212|  1.12M|            parsed_something = true;
  213|       |
  214|  1.12M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 9.26k, False: 1.11M]
  ------------------
  215|  9.26k|            {
  216|  9.26k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 3.75k, False: 5.50k]
  ------------------
  217|  3.75k|                {
  218|  3.75k|                    return {};
  219|  3.75k|                }
  220|       |
  221|  5.50k|                number <<= 1;
  222|  5.50k|                number |= (c - '0');
  223|  5.50k|            }
  224|  1.11M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 81.2k, False: 1.03M]
  ------------------
  225|  81.2k|            {
  226|  81.2k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 23.6k, False: 57.6k]
  ------------------
  227|  23.6k|                {
  228|  23.6k|                    return {};
  229|  23.6k|                }
  230|       |
  231|  57.6k|                number <<= 3;
  232|  57.6k|                number |= (c - '0');
  233|  57.6k|            }
  234|  1.03M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 11.3k, False: 1.01M]
  ------------------
  235|  11.3k|            {
  236|  11.3k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 5.45k, False: 5.91k]
  ------------------
  237|  5.45k|                {
  238|  5.45k|                    return {};
  239|  5.45k|                }
  240|       |
  241|  5.91k|                number <<= 4;
  242|  5.91k|                number |= phi::hex_digit_value(c).unsafe();
  243|  5.91k|            }
  244|  1.01M|            else
  245|  1.01M|            {
  246|  1.01M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.01M, False: 2.99k]
  ------------------
  247|  1.01M|                {
  248|  1.01M|                    return {};
  249|  1.01M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  2.99k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 2.46k, False: 534]
  |  Branch (252:36): [True: 670, False: 1.79k]
  ------------------
  253|    670|                {
  254|    670|                    return {};
  255|    670|                }
  256|       |
  257|  2.32k|                number *= 10;
  258|  2.32k|                number += (c - '0');
  259|  2.32k|            }
  260|  1.12M|        }
  261|       |
  262|  15.5k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 13.9k, False: 1.63k]
  ------------------
  263|  13.9k|        {
  264|       |            // Check for over/underflow
  265|  13.9k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 455, False: 13.4k]
  |  Branch (265:32): [True: 0, False: 455]
  ------------------
  266|      0|            {
  267|       |                // Would underflow
  268|      0|                return {};
  269|      0|            }
  270|  13.9k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 13.4k, False: 455]
  |  Branch (270:17): [True: 0, False: 13.9k]
  |  Branch (270:33): [True: 0, False: 13.4k]
  ------------------
  271|      0|            {
  272|       |                // Would overflow
  273|      0|                return {};
  274|      0|            }
  275|       |
  276|  13.9k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 455, False: 13.4k]
  ------------------
  277|    455|            {
  278|    455|                return static_cast<std::int16_t>(-number);
  279|    455|            }
  280|       |
  281|  13.4k|            return static_cast<std::int16_t>(number);
  282|  13.9k|        }
  283|       |
  284|  1.63k|        return {};
  285|  15.5k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|   108k|    {
   96|   108k|        switch (value)
   97|   108k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  21.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  21.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 21.3k, False: 87.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  21.3k|        return #name;
  |  |  ------------------
  |  |   14|  48.6k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  48.6k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 48.6k, False: 60.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  48.6k|        return #name;
  |  |  ------------------
  |  |   15|  48.6k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|    323|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 323, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    323|        return #name;
  |  |  ------------------
  |  |   16|  8.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  8.85k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.85k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.85k|        return #name;
  |  |  ------------------
  |  |   17|  8.85k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    648|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 648, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    648|        return #name;
  |  |  ------------------
  |  |   18|  2.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.69k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.69k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.69k|        return #name;
  |  |  ------------------
  |  |   19|  2.69k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    219|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 219, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    219|        return #name;
  |  |  ------------------
  |  |   20|    219|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     68|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 68, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     68|        return #name;
  |  |  ------------------
  |  |   21|  1.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|  1.01k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.01k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.01k|        return #name;
  |  |  ------------------
  |  |   22|  1.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|    157|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 157, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    157|        return #name;
  |  |  ------------------
  |  |   23|    157|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    123|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 123, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    123|        return #name;
  |  |  ------------------
  |  |   24|    146|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    146|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 146, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    146|        return #name;
  |  |  ------------------
  |  |   25|    146|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     16|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 16, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     16|        return #name;
  |  |  ------------------
  |  |   26|    599|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    599|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 599, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    599|        return #name;
  |  |  ------------------
  |  |   27|    599|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     16|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 16, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     16|        return #name;
  |  |  ------------------
  |  |   28|  1.13k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.13k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.13k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.13k|        return #name;
  |  |  ------------------
  |  |   29|  8.80k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  8.80k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8.80k, False: 100k]
  |  |  |  |  ------------------
  |  |  |  |  100|  8.80k|        return #name;
  |  |  ------------------
  |  |   30|  8.80k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    481|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 481, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    481|        return #name;
  |  |  ------------------
  |  |   31|    481|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|    195|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 195, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    195|        return #name;
  |  |  ------------------
  |  |   32|    195|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|      5|        return #name;
  |  |  ------------------
  |  |   33|    858|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|    858|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 858, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    858|        return #name;
  |  |  ------------------
  |  |   34|    858|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|    767|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 767, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|    767|        return #name;
  |  |  ------------------
  |  |   35|    767|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|     35|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 35, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     35|        return #name;
  |  |  ------------------
  |  |   36|  2.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.01k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.01k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.01k|        return #name;
  |  |  ------------------
  |  |   37|  2.01k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     90|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 90, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     90|        return #name;
  |  |  ------------------
  |  |   38|     90|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     50|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 50, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     50|        return #name;
  |  |  ------------------
  |  |   39|  1.17k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.17k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.17k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.17k|        return #name;
  |  |  ------------------
  |  |   40|  3.40k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.40k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.40k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.40k|        return #name;
  |  |  ------------------
  |  |   41|  3.40k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     30|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 30, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     30|        return #name;
  |  |  ------------------
  |  |   42|     88|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     88|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 88, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  100|     88|        return #name;
  |  |  ------------------
  |  |   43|  3.80k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.80k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.80k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.80k|        return #name;
  |  |  ------------------
  |  |   44|  3.80k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|  1.07k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.07k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.07k|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 108k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|   108k|        }
  109|   108k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  45.5k|    {
  131|  45.5k|        switch (value)
  132|  45.5k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  4.61k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  4.61k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4.61k, False: 40.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  4.61k|        return #name;
  |  |  ------------------
  |  |   48|  4.61k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.55k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.55k, False: 43.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.55k|        return #name;
  |  |  ------------------
  |  |   49|  2.55k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     56|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 56, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     56|        return #name;
  |  |  ------------------
  |  |   50|     56|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   52|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   53|     50|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|     50|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 50, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     50|        return #name;
  |  |  ------------------
  |  |   54|     50|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   55|    885|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|    885|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 885, False: 44.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|    885|        return #name;
  |  |  ------------------
  |  |   56|  2.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|  2.13k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2.13k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|  2.13k|        return #name;
  |  |  ------------------
  |  |   57|  2.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|    123|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 123, False: 45.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    123|        return #name;
  |  |  ------------------
  |  |   58|    123|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   59|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   60|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     21|        return #name;
  |  |  ------------------
  |  |   61|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 26, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     26|        return #name;
  |  |  ------------------
  |  |   62|     57|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|     57|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 57, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     57|        return #name;
  |  |  ------------------
  |  |   63|  1.96k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.96k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.96k, False: 43.6k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.96k|        return #name;
  |  |  ------------------
  |  |   64|  1.96k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|    818|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 818, False: 44.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|    818|        return #name;
  |  |  ------------------
  |  |   65|  1.63k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|  1.63k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1.63k, False: 43.9k]
  |  |  |  |  ------------------
  |  |  |  |  135|  1.63k|        return #name;
  |  |  ------------------
  |  |   66|  1.63k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   67|  23.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|  23.4k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 23.4k, False: 22.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|  23.4k|        return #name;
  |  |  ------------------
  |  |   68|  23.4k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     33|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 33, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     33|        return #name;
  |  |  ------------------
  |  |   69|     33|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   70|     13|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|     13|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 13, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     13|        return #name;
  |  |  ------------------
  |  |   71|    516|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|    516|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 516, False: 45.0k]
  |  |  |  |  ------------------
  |  |  |  |  135|    516|        return #name;
  |  |  ------------------
  |  |   72|    516|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   73|  5.81k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|  5.81k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.81k, False: 39.7k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.81k|        return #name;
  |  |  ------------------
  |  |   74|  5.81k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|    106|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 106, False: 45.4k]
  |  |  |  |  ------------------
  |  |  |  |  135|    106|        return #name;
  |  |  ------------------
  |  |   75|    106|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   76|     48|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|     48|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 48, False: 45.5k]
  |  |  |  |  ------------------
  |  |  |  |  135|     48|        return #name;
  |  |  ------------------
  |  |   77|    305|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    305|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 305, False: 45.2k]
  |  |  |  |  ------------------
  |  |  |  |  135|    305|        return #name;
  |  |  ------------------
  |  |   78|    305|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    210|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 210, False: 45.3k]
  |  |  |  |  ------------------
  |  |  |  |  135|    210|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 45.5k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  45.5k|        }
  144|  45.5k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|  16.4k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|  16.4k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 803k, False: 0]
  ------------------
   64|   803k|            {
   65|   803k|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 16.4k, False: 787k]
  ------------------
   66|  16.4k|                {
   67|  16.4k|                    return &token;
   68|  16.4k|                }
   69|   803k|            }
   70|       |
   71|      0|            return nullptr;
   72|  16.4k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.17M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.17M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.17M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.40M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.40M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.40M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   141k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   141k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   141k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   903k|    {
   11|   903k|        m_Value = val;
   12|   903k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|  2.30M|    {
   16|  2.30M|        return m_Value;
   17|  2.30M|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   207k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  70.1k|    {
   24|  70.1k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  70.1k|        switch (argument_number.unsafe())
   27|  70.1k|        {
   28|  32.2k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 32.2k, False: 37.8k]
  ------------------
   29|  32.2k|                m_Arg1 = argument;
   30|  32.2k|                break;
   31|  25.6k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 25.6k, False: 44.4k]
  ------------------
   32|  25.6k|                m_Arg2 = argument;
   33|  25.6k|                break;
   34|  12.2k|            case 2u:
  ------------------
  |  Branch (34:13): [True: 12.2k, False: 57.9k]
  ------------------
   35|  12.2k|                m_Arg3 = argument;
   36|  12.2k|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 70.1k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  70.1k|#endif
   41|  70.1k|        }
   42|  70.1k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  8.54M|    {
   83|  8.54M|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  8.54M|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  8.54M|    {
   88|  8.54M|        return m_Info;
   89|  8.54M|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   692k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|  51.2M|    {
   27|  51.2M|        return m_Type;
   28|  51.2M|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  11.8M|    {
   78|  11.8M|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  11.8M|        return register_int;
   81|  11.8M|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|  1.76M|    {
   86|  1.76M|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|  1.76M|        return register_float;
   89|  1.76M|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|  4.24M|    {
   94|  4.24M|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|  4.24M|        return immediate_value;
   97|  4.24M|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  1.96M|    {
  110|  1.96M|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  1.96M|        return label;
  113|  1.96M|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  35.7k|    {
  174|  35.7k|        InstructionArgument arg;
  175|  35.7k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  35.7k|        arg.register_int.register_id = id;
  177|  35.7k|        return arg;
  178|  35.7k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|  22.2k|    {
  183|  22.2k|        InstructionArgument arg;
  184|  22.2k|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|  22.2k|        arg.register_float.register_id = id;
  186|  22.2k|        return arg;
  187|  22.2k|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  8.86k|    {
  192|  8.86k|        InstructionArgument arg;
  193|  8.86k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  8.86k|        arg.immediate_value.signed_value = value;
  195|  8.86k|        return arg;
  196|  8.86k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  3.30k|    {
  211|  3.30k|        InstructionArgument arg;
  212|  3.30k|        arg.m_Type           = ArgumentType::Label;
  213|  3.30k|        arg.label.label_name = label_name;
  214|  3.30k|        return arg;
  215|  3.30k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|  81.8k|        {
  357|  81.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  358|  81.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|  81.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|  81.8k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|  81.8k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|  81.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|  81.8k|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|  99.2k|        {
  370|  99.2k|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|  99.2k|            const auto& src_reg   = arg2.AsRegisterInt();
  372|  99.2k|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|  99.2k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|  99.2k|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|  99.2k|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|  38.8k|        {
  382|  38.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  383|  38.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|  38.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|  38.8k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|  38.8k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|  38.8k|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|  38.8k|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|  26.9k|        {
  395|  26.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|  26.9k|            const auto& src_reg   = arg2.AsRegisterInt();
  397|  26.9k|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|  26.9k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|  26.9k|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|  26.9k|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|  18.2k|        {
  407|  18.2k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|  18.2k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|  18.2k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|  18.2k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|  18.2k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|  18.2k|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|  18.2k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|  18.2k|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|  9.72k|        {
  422|  9.72k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|  9.72k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|  9.72k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|  9.72k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|  9.72k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|  9.72k|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|  9.72k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|  9.72k|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|  25.3k|        {
  437|  25.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  438|  25.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|  25.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|  25.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|  25.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|  25.3k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|  25.3k|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|  48.6k|        {
  450|  48.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|  48.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  452|  48.6k|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|  48.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|  48.6k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|  48.6k|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|  34.9k|        {
  462|  34.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  463|  34.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|  34.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|  34.9k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|  34.9k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|  34.9k|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|  34.9k|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|  46.5k|        {
  475|  46.5k|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|  46.5k|            const auto& src_reg   = arg2.AsRegisterInt();
  477|  46.5k|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|  46.5k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|  46.5k|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|  46.5k|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|  29.1k|        {
  487|  29.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|  29.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|  29.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|  29.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|  29.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|  29.1k|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|  29.1k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|  29.1k|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|  27.0k|        {
  502|  27.0k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|  27.0k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|  27.0k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|  27.0k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|  27.0k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|  27.0k|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|  27.0k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|  27.0k|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|  81.3k|        {
  517|  81.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  518|  81.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|  81.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|  81.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|  81.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|  81.3k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|  81.3k|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|  46.6k|        {
  530|  46.6k|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|  46.6k|            const auto& src_reg   = arg2.AsRegisterInt();
  532|  46.6k|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|  46.6k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|  46.6k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|  46.6k|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|  14.9k|        {
  542|  14.9k|            const auto& dest_reg = arg1.AsRegisterInt();
  543|  14.9k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|  14.9k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|  14.9k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|  14.9k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|  14.9k|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|  14.9k|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|  83.7k|        {
  555|  83.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|  83.7k|            const auto& src_reg   = arg2.AsRegisterInt();
  557|  83.7k|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|  83.7k|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|  83.7k|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|  83.7k|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|  49.1k|        {
  567|  49.1k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|  49.1k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|  49.1k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|  49.1k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|  49.1k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|  49.1k|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|  49.1k|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|  49.1k|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|  32.6k|        {
  582|  32.6k|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|  32.6k|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|  32.6k|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|  32.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|  32.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|  32.6k|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|  32.6k|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|  32.6k|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|  9.74k|        {
  597|  9.74k|            const auto& dest_reg = arg1.AsRegisterInt();
  598|  9.74k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|  9.74k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|  9.74k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|  9.74k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|  9.74k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|  9.74k|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      3|        {
  610|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      3|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      3|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      3|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      3|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      3|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|  17.7k|        {
  622|  17.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  623|  17.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|  17.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|  17.7k|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|  17.7k|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|  17.7k|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|  17.7k|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      3|        {
  635|      3|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      3|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      3|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      3|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      3|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      3|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      3|        {
  647|      3|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      3|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      3|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      3|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      3|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      3|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 3, False: 0]
  ------------------
  655|      3|            {
  656|      3|                processor.Raise(Exception::DivideByZero);
  657|      3|                return;
  658|      3|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      3|        {
  668|      3|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      3|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      3|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      3|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      3|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      3|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 3, False: 0]
  ------------------
  676|      3|            {
  677|      3|                processor.Raise(Exception::DivideByZero);
  678|      3|                return;
  679|      3|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|   155k|        {
  689|   155k|            const auto& dest_reg = arg1.AsRegisterInt();
  690|   155k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|   155k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|   155k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|   155k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|   155k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|   155k|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|  57.8k|        {
  702|  57.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|  57.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  704|  57.8k|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|  57.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|  57.8k|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|  57.8k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|  57.8k|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|  87.3k|        {
  715|  87.3k|            const auto& dest_reg = arg1.AsRegisterInt();
  716|  87.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|  87.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|  87.3k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|  87.3k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|  87.3k|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|  87.3k|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|   184k|        {
  728|   184k|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|   184k|            const auto& src_reg   = arg2.AsRegisterInt();
  730|   184k|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|   184k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|   184k|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|   184k|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|   184k|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|  66.1k|        {
  741|  66.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  742|  66.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|  66.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|  66.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|  66.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|  66.1k|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|  66.1k|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|  51.8k|        {
  754|  51.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|  51.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  756|  51.8k|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|  51.8k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|  51.8k|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|  51.8k|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|  51.8k|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|  26.7k|        {
  767|  26.7k|            const auto& dest_reg = arg1.AsRegisterInt();
  768|  26.7k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|  26.7k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|  26.7k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|  26.7k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|  26.7k|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|  26.7k|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|  41.0k|        {
  780|  41.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|  41.0k|            const auto& src_reg   = arg2.AsRegisterInt();
  782|  41.0k|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|  41.0k|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|  41.0k|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|  41.0k|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|  41.0k|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|  29.1k|        {
  793|  29.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  794|  29.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|  29.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|  29.1k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|  29.1k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|  29.1k|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|  29.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|  29.1k|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|   370k|        {
  807|   370k|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|   370k|            const auto& src_reg   = arg2.AsRegisterInt();
  809|   370k|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|   370k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|   370k|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|   370k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|   370k|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|  17.6k|        {
  820|  17.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  821|  17.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|  17.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|  17.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|  17.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|  17.6k|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|  17.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|  17.6k|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|  70.3k|        {
  834|  70.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|  70.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  836|  70.3k|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|  70.3k|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|  70.3k|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|  70.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|  70.3k|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|  20.6k|        {
  847|  20.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  848|  20.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|  20.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|  20.6k|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|  20.6k|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|  20.6k|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|  20.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|  20.6k|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|  1.04M|        {
  861|  1.04M|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|  1.04M|            const auto& src_reg   = arg2.AsRegisterInt();
  863|  1.04M|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|  1.04M|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|  1.04M|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|  1.04M|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|  1.04M|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|  23.1k|        {
  874|  23.1k|            const auto& dest_reg = arg1.AsRegisterInt();
  875|  23.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|  23.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|  23.1k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|  23.1k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|  23.1k|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 1, False: 23.1k]
  ------------------
  882|       |
  883|  23.1k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|  23.1k|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|  39.3k|        {
  889|  39.3k|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|  39.3k|            const auto& src_reg   = arg2.AsRegisterInt();
  891|  39.3k|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|  39.3k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|  39.3k|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 39.3k]
  ------------------
  896|       |
  897|  39.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|  39.3k|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|  31.8k|        {
  903|  31.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  904|  31.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|  31.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|  31.8k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|  31.8k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|  31.8k|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 1, False: 31.8k]
  ------------------
  911|       |
  912|  31.8k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|  31.8k|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|   192k|        {
  918|   192k|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|   192k|            const auto& src_reg   = arg2.AsRegisterInt();
  920|   192k|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|   192k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|   192k|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 192k]
  ------------------
  925|       |
  926|   192k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|   192k|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|  11.7k|        {
  932|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|  11.7k|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|  11.7k|            processor.SetFPSRValue(new_value);
  941|  11.7k|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|  30.9k|        {
  946|  30.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|  30.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|  30.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|  30.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|  30.9k|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|  30.9k|            processor.SetFPSRValue(new_value);
  955|  30.9k|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|  33.8k|        {
  960|  33.8k|            const auto& dest_reg = arg1.AsRegisterInt();
  961|  33.8k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|  33.8k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|  33.8k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|  33.8k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|  33.8k|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 33.8k]
  ------------------
  968|       |
  969|  33.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|  33.8k|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|  40.8k|        {
  975|  40.8k|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|  40.8k|            const auto& src_reg   = arg2.AsRegisterInt();
  977|  40.8k|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|  40.8k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|  40.8k|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 0, False: 40.8k]
  ------------------
  982|       |
  983|  40.8k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|  40.8k|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|  41.6k|        {
  989|  41.6k|            const auto& dest_reg = arg1.AsRegisterInt();
  990|  41.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|  41.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|  41.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|  41.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|  41.6k|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 41.6k]
  ------------------
  997|       |
  998|  41.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|  41.6k|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|   110k|        {
 1004|   110k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|   110k|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|   110k|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|   110k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|   110k|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 110k]
  ------------------
 1011|       |
 1012|   110k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|   110k|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|   122k|        {
 1018|   122k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|   122k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|   122k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|   122k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|   122k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|   122k|            processor.SetFPSRValue(new_value);
 1027|   122k|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|   256k|        {
 1032|   256k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|   256k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|   256k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|   256k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|   256k|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|   256k|            processor.SetFPSRValue(new_value);
 1041|   256k|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|  24.0k|        {
 1046|  24.0k|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|  24.0k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|  24.0k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|  24.0k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|  24.0k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|  24.0k|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 24.0k, False: 1]
  ------------------
 1054|       |
 1055|  24.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|  24.0k|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|  27.7k|        {
 1061|  27.7k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|  27.7k|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|  27.7k|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|  27.7k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|  27.7k|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 27.7k, False: 0]
  ------------------
 1068|       |
 1069|  27.7k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|  27.7k|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|  34.1k|        {
 1075|  34.1k|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|  34.1k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|  34.1k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|  34.1k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|  34.1k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|  34.1k|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 32.4k, False: 1.66k]
  ------------------
 1083|       |
 1084|  34.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|  34.1k|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|   425k|        {
 1090|   425k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|   425k|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|   425k|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|   425k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|   425k|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 408k, False: 16.9k]
  ------------------
 1097|       |
 1098|   425k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|   425k|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|  11.7k|        {
 1104|  11.7k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|  11.7k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|  11.7k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|  11.7k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|  11.7k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|  11.7k|            processor.SetFPSRValue(new_value);
 1113|  11.7k|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|  6.77k|        {
 1118|  6.77k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|  6.77k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|  6.77k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|  6.77k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|  6.77k|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|  6.77k|            processor.SetFPSRValue(new_value);
 1127|  6.77k|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|  19.6k|        {
 1132|  19.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|  19.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|  19.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|  19.6k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|  19.6k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|  19.6k|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 19.6k, False: 0]
  ------------------
 1140|       |
 1141|  19.6k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|  19.6k|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|   852k|        {
 1147|   852k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|   852k|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|   852k|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|   852k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|   852k|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 852k, False: 0]
  ------------------
 1154|       |
 1155|   852k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|   852k|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|  18.3k|        {
 1161|  18.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|  18.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|  18.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|  18.3k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|  18.3k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|  18.3k|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 18.3k, False: 0]
  ------------------
 1169|       |
 1170|  18.3k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|  18.3k|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|  29.9k|        {
 1176|  29.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|  29.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|  29.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|  29.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|  29.9k|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 29.9k, False: 0]
  ------------------
 1183|       |
 1184|  29.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|  29.9k|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|  9.45k|        {
 1190|  9.45k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|  9.45k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|  9.45k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|  9.45k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|  9.45k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|  9.45k|            processor.SetFPSRValue(new_value);
 1199|  9.45k|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|  11.6k|        {
 1204|  11.6k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|  11.6k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|  11.6k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|  11.6k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|  11.6k|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|  11.6k|            processor.SetFPSRValue(new_value);
 1213|  11.6k|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|  25.3k|        {
 1218|  25.3k|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|  25.3k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|  25.3k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|  25.3k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|  25.3k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|  25.3k|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 23.0k, False: 2.22k]
  ------------------
 1226|       |
 1227|  25.3k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|  25.3k|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|  73.0k|        {
 1233|  73.0k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|  73.0k|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|  73.0k|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|  73.0k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|  73.0k|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 73.0k, False: 0]
  ------------------
 1240|       |
 1241|  73.0k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|  73.0k|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|  24.6k|        {
 1247|  24.6k|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|  24.6k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|  24.6k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|  24.6k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|  24.6k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|  24.6k|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 24.6k, False: 0]
  ------------------
 1255|       |
 1256|  24.6k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|  24.6k|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|  97.1k|        {
 1262|  97.1k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|  97.1k|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|  97.1k|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|  97.1k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|  97.1k|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 97.1k, False: 0]
  ------------------
 1269|       |
 1270|  97.1k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|  97.1k|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|  14.0k|        {
 1276|  14.0k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|  14.0k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|  14.0k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|  14.0k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|  14.0k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|  14.0k|            processor.SetFPSRValue(new_value);
 1285|  14.0k|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|  8.37k|        {
 1290|  8.37k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|  8.37k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|  8.37k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|  8.37k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|  8.37k|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|  8.37k|            processor.SetFPSRValue(new_value);
 1299|  8.37k|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|  25.5k|        {
 1304|  25.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|  25.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|  25.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|  25.5k|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|  25.5k|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|  25.5k|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 1, False: 25.5k]
  ------------------
 1312|       |
 1313|  25.5k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|  25.5k|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|   108k|        {
 1319|   108k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|   108k|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|   108k|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|   108k|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|   108k|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 108k]
  ------------------
 1326|       |
 1327|   108k|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|   108k|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|  22.5k|        {
 1333|  22.5k|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|  22.5k|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|  22.5k|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|  22.5k|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|  22.5k|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|  22.5k|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 1, False: 22.5k]
  ------------------
 1341|       |
 1342|  22.5k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|  22.5k|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|  74.9k|        {
 1348|  74.9k|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|  74.9k|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|  74.9k|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|  74.9k|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|  74.9k|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 3.37k, False: 71.5k]
  ------------------
 1355|       |
 1356|  74.9k|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|  74.9k|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|  8.87k|        {
 1362|  8.87k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|  8.87k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|  8.87k|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|  8.87k|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|  8.87k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|  8.87k|            processor.SetFPSRValue(new_value);
 1371|  8.87k|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|  14.9k|        {
 1376|  14.9k|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|  14.9k|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|  14.9k|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|  14.9k|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|  14.9k|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|  14.9k|            processor.SetFPSRValue(new_value);
 1385|  14.9k|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|      3|        {
 1390|      3|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|      3|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|      3|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|      3|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 3, False: 0]
  ------------------
 1396|      3|            {
 1397|      3|                JumpToLabel(processor, jump_label.label_name);
 1398|      3|            }
 1399|      3|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      3|        {
 1404|      3|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      3|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      3|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      3|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 3]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      3|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|      4|        {
 1418|      4|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|      4|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|      4|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 1, False: 3]
  ------------------
 1423|      1|            {
 1424|      1|                JumpToLabel(processor, jump_label.label_name);
 1425|      1|            }
 1426|      4|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|  1.68M|        {
 1431|  1.68M|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|  1.68M|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|  1.68M|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 1.67M, False: 5.01k]
  ------------------
 1436|  1.67M|            {
 1437|  1.67M|                JumpToLabel(processor, jump_label.label_name);
 1438|  1.67M|            }
 1439|  1.68M|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|   150k|        {
 1444|   150k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|   150k|            JumpToLabel(processor, jump_label.label_name);
 1447|   150k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  51.6k|        {
 1452|  51.6k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  51.6k|            JumpToRegister(processor, jump_register.register_id);
 1455|  51.6k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|   136k|        {
 1460|   136k|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|   136k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|   136k|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|   136k|            JumpToLabel(processor, jump_label.label_name);
 1466|   136k|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|   224k|        {
 1471|   224k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|   224k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|   224k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|   224k|            JumpToRegister(processor, jump_register.register_id);
 1477|   224k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1481|      3|        {
 1482|      3|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1483|      3|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1484|       |
 1485|      3|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1486|       |
 1487|      3|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1488|      3|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1492|      3|        {
 1493|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1494|       |
 1495|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1496|       |
 1497|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1497:17): [True: 0, False: 3]
  ------------------
 1498|      0|            {
 1499|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1500|      0|                return;
 1501|      0|            }
 1502|       |
 1503|      3|            phi::i32 address = optional_address.value();
 1504|       |
 1505|      3|            auto optional_value =
 1506|      3|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1507|       |
 1508|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1508:17): [True: 3, False: 0]
  ------------------
 1509|      3|            {
 1510|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1511|      3|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1512|      3|                return;
 1513|      3|            }
 1514|       |
 1515|      0|            phi::i32 value = optional_value.value();
 1516|       |
 1517|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1518|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      3|        {
 1523|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 3]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      3|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      3|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      3|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 3, False: 0]
  ------------------
 1539|      3|            {
 1540|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      3|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      3|                return;
 1543|      3|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      3|        {
 1553|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 3]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      3|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      3|            auto optional_value =
 1566|      3|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 3, False: 0]
  ------------------
 1569|      3|            {
 1570|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      3|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      3|                return;
 1573|      3|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1582|      3|        {
 1583|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1584|       |
 1585|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1586|       |
 1587|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1587:17): [True: 0, False: 3]
  ------------------
 1588|      0|            {
 1589|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1590|      0|                return;
 1591|      0|            }
 1592|       |
 1593|      3|            phi::i32 address = optional_address.value();
 1594|       |
 1595|      3|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1596|      3|                    static_cast<std::size_t>(address.unsafe()));
 1597|       |
 1598|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1598:17): [True: 3, False: 0]
  ------------------
 1599|      3|            {
 1600|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      3|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1602|      3|                return;
 1603|      3|            }
 1604|       |
 1605|      0|            phi::u32 value = optional_value.value();
 1606|       |
 1607|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1608|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1612|      3|        {
 1613|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1614|       |
 1615|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1616|       |
 1617|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1617:17): [True: 0, False: 3]
  ------------------
 1618|      0|            {
 1619|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1620|      0|                return;
 1621|      0|            }
 1622|       |
 1623|      3|            phi::i32 address = optional_address.value();
 1624|       |
 1625|      3|            auto optional_value =
 1626|      3|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1627|       |
 1628|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1628:17): [True: 3, False: 0]
  ------------------
 1629|      3|            {
 1630|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1631|      3|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1632|      3|                return;
 1633|      3|            }
 1634|       |
 1635|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1636|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1640|      3|        {
 1641|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1642|       |
 1643|      3|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1644|       |
 1645|      3|            if (!optional_address.has_value())
  ------------------
  |  Branch (1645:17): [True: 0, False: 3]
  ------------------
 1646|      0|            {
 1647|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1648|      0|                return;
 1649|      0|            }
 1650|       |
 1651|      3|            phi::i32 address = optional_address.value();
 1652|       |
 1653|      3|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1654|      3|                    static_cast<std::size_t>(address.unsafe()));
 1655|       |
 1656|      3|            if (!optional_value.has_value())
  ------------------
  |  Branch (1656:17): [True: 3, False: 0]
  ------------------
 1657|      3|            {
 1658|      3|                processor.Raise(Exception::AddressOutOfBounds);
 1659|      3|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1660|      3|                return;
 1661|      3|            }
 1662|       |
 1663|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1664|      0|        }
_ZN3dlx4impl2LFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1668|      1|        {
 1669|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1670|       |
 1671|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1672|       |
 1673|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1673:17): [True: 0, False: 1]
  ------------------
 1674|      0|            {
 1675|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1676|      0|                return;
 1677|      0|            }
 1678|       |
 1679|      1|            phi::i32 address = optional_address.value();
 1680|       |
 1681|      1|            auto optional_value =
 1682|      1|                    processor.GetMemory().LoadFloat(static_cast<std::size_t>(address.unsafe()));
 1683|       |
 1684|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1684:17): [True: 1, False: 0]
  ------------------
 1685|      1|            {
 1686|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1687|      1|                DLX_ERROR("Failed to load float at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1688|      1|                return;
 1689|      1|            }
 1690|       |
 1691|      0|            processor.FloatRegisterSetFloatValue(dest_reg.register_id, optional_value.value());
 1692|      0|        }
_ZN3dlx4impl2LDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1696|      1|        {
 1697|      1|            const auto& dest_reg = arg1.AsRegisterFloat();
 1698|       |
 1699|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1700|       |
 1701|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1701:17): [True: 0, False: 1]
  ------------------
 1702|      0|            {
 1703|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1704|      0|                return;
 1705|      0|            }
 1706|       |
 1707|      1|            phi::i32 address = optional_address.value();
 1708|       |
 1709|      1|            auto optional_value =
 1710|      1|                    processor.GetMemory().LoadDouble(static_cast<std::size_t>(address.unsafe()));
 1711|       |
 1712|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1712:17): [True: 1, False: 0]
  ------------------
 1713|      1|            {
 1714|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1715|      1|                DLX_ERROR("Failed to load double at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1716|      1|                return;
 1717|      1|            }
 1718|       |
 1719|      0|            processor.FloatRegisterSetDoubleValue(dest_reg.register_id, optional_value.value());
 1720|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|  17.6k|        {
 1945|  17.6k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|  17.6k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|  17.6k|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|  17.6k|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|  17.6k|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|  6.18k|        {
 1956|  6.18k|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|  6.18k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|  6.18k|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|  6.18k|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|  6.18k|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|  8.34k|        {
 1967|  8.34k|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|  8.34k|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|  8.34k|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|  8.34k|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|  8.34k|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|  8.34k|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1979|      1|        {
 1980|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1981|      1|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1982|       |
 1983|      1|            const std::int32_t source_value =
 1984|      1|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1985|       |
 1986|      1|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1987|       |
 1988|      1|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1989|      1|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|  16.4k|        {
 1994|  16.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|  16.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|  16.4k|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|  16.4k|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|  16.4k|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|  25.4k|        {
 2005|  25.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|  25.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|  25.4k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|  25.4k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|  25.4k|            const float        converted_value_float =
 2011|  25.4k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|  25.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|  25.4k|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|  6.89k|        {
 2019|  6.89k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|  6.89k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|  6.89k|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|  6.89k|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|  6.89k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|  6.89k|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|  20.4k|        {
 2031|  20.4k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|  20.4k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|  20.4k|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|  20.4k|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|  20.4k|            const float        converted_value_float =
 2037|  20.4k|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|  20.4k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|  20.4k|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|  19.7k|        {
 2045|  19.7k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|  19.7k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|  19.7k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|  19.7k|            const std::int32_t converted_value_int =
 2050|  19.7k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|  19.7k|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|  19.7k|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|  19.7k|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|  9.70k|        {
 2059|  9.70k|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|  9.70k|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|  9.70k|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|  9.70k|            const std::int32_t converted_value_int =
 2064|  9.70k|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|  9.70k|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|  9.70k|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|  9.70k|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      3|        {
 2073|      3|            processor.Raise(Exception::Trap);
 2074|      3|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|     14|        {
 2079|     14|            processor.Raise(Exception::Halt);
 2080|     14|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|   209k|        {
 2085|       |            /* Do nothing */
 2086|   209k|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|   181k|    {
  175|   181k|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|   181k|        SafeWriteInteger(processor, dest_reg, res);
  178|   181k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|   392k|    {
  130|   392k|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|   392k|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|   392k|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 392k]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|   392k|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 392k]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|   392k|        PHI_ASSERT(value >= min);
  149|   392k|        PHI_ASSERT(value <= max);
  150|       |
  151|   392k|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|   392k|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|  65.8k|    {
  183|  65.8k|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|  65.8k|        SafeWriteInteger(processor, dest_reg, res);
  186|  65.8k|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|   263k|    {
  157|   263k|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|   263k|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 5, False: 263k]
  ------------------
  161|      5|        {
  162|      5|            processor.Raise(Exception::Overflow);
  163|       |
  164|      5|            value %= max + 1u;
  165|      5|        }
  166|       |
  167|   263k|        PHI_ASSERT(value <= max);
  168|       |
  169|   263k|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|   263k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|  74.0k|    {
  191|  74.0k|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|  74.0k|        SafeWriteInteger(processor, dest_reg, res);
  194|  74.0k|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|  81.5k|    {
  199|  81.5k|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|  81.5k|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 10.9k, False: 70.6k]
  ------------------
  202|  10.9k|        {
  203|  10.9k|            processor.Raise(Exception::Underflow);
  204|       |
  205|  10.9k|            phi::u64 res = max - rhs + lhs + 1u;
  206|  10.9k|            SafeWriteInteger(processor, dest_reg, res);
  207|  10.9k|            return;
  208|  10.9k|        }
  209|       |
  210|  70.6k|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|  70.6k|        SafeWriteInteger(processor, dest_reg, res);
  213|  70.6k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|   128k|    {
  218|   128k|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|   128k|        SafeWriteInteger(processor, dest_reg, res);
  221|   128k|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|  98.6k|    {
  226|  98.6k|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|  98.6k|        SafeWriteInteger(processor, dest_reg, res);
  229|  98.6k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|  9.74k|    {
  234|  9.74k|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 6, False: 9.73k]
  ------------------
  235|      6|        {
  236|      6|            processor.Raise(Exception::DivideByZero);
  237|      6|            return;
  238|      6|        }
  239|       |
  240|  9.73k|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|  9.73k|        SafeWriteInteger(processor, dest_reg, res);
  243|  9.73k|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|  17.7k|    {
  248|  17.7k|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 6, False: 17.7k]
  ------------------
  249|      6|        {
  250|      6|            processor.Raise(Exception::DivideByZero);
  251|      6|            return;
  252|      6|        }
  253|       |
  254|  17.7k|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|  17.7k|        SafeWriteInteger(processor, dest_reg, res);
  257|  17.7k|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|   331k|    {
  331|   331k|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 331k]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|   331k|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 17, False: 331k]
  ------------------
  342|     17|        {
  343|     17|            processor.Raise(Exception::BadShift);
  344|     17|            return;
  345|     17|        }
  346|       |
  347|   331k|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|   331k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|   331k|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|   271k|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|   271k|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 271k]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|   271k|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 242k, False: 29.4k]
  ------------------
  274|   242k|        {
  275|   242k|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|   242k|            return;
  277|   242k|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|  29.4k|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 1, False: 29.4k]
  ------------------
  281|      1|        {
  282|      1|            processor.Raise(Exception::BadShift);
  283|      1|            return;
  284|      1|        }
  285|       |
  286|  29.4k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|  29.4k|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|  29.4k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|  29.4k|    }
InstructionImplementation.cpp:_ZN3dlxL16clear_top_n_bitsEii:
   29|  29.4k|    {
   30|  29.4k|        PHI_ASSERT(n > 0 && n < 32, "Would invoke undefined behavior");
   31|       |
   32|  29.4k|        return value & ~(-1 << (32 - n));
   33|  29.4k|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|  67.7k|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|  67.7k|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 67.7k]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|  67.7k|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 12, False: 67.7k]
  ------------------
  317|     12|        {
  318|     12|            processor.Raise(Exception::BadShift);
  319|     12|            return;
  320|     12|        }
  321|       |
  322|  67.7k|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|  67.7k|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|  67.7k|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  1.96M|    {
   39|       |        // Lookup the label
   40|  1.96M|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  1.96M|        PHI_ASSERT(program != nullptr);
   42|  1.96M|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  1.96M|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 105, False: 1.96M]
  ------------------
   45|    105|        {
   46|    105|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    105|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    105|            processor.Raise(Exception::UnknownLabel);
   48|    105|            return;
   49|    105|        }
   50|       |
   51|  1.96M|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  1.96M|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  1.96M|        processor.SetNextProgramCounter(jump_point);
   56|  1.96M|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|   276k|    {
   60|   276k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|   276k|        phi::u32 max_address =
   63|   276k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|   276k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 12, False: 276k]
  ------------------
   65|     12|        {
   66|     12|            processor.Raise(Exception::AddressOutOfBounds);
   67|     12|            return;
   68|     12|        }
   69|       |
   70|   276k|        processor.SetNextProgramCounter(address.unsafe());
   71|   276k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|     20|    {
  101|     20|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 20, False: 0]
  ------------------
  102|     20|        {
  103|     20|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|     20|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 20]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|     20|            return imm_value.signed_value;
  111|     20|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  8.54M|    {
   12|  8.54M|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  8.54M|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  8.54M|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  8.54M|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  8.54M|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  8.54M|                   "Unexpected argument type for arg1");
   22|  8.54M|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  8.54M|                   "Unexpected argument type for arg2");
   24|  8.54M|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  8.54M|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  8.54M|        m_Executor(processor, arg1, arg2, arg3);
   29|  8.54M|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   207k|    {
  453|   207k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   207k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  3.34M|    {
   17|  3.34M|        m_ValueSigned = val;
   18|  3.34M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  1.28M|    {
   22|  1.28M|        m_ValueUnsigned = val;
   23|  1.28M|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|  4.66M|    {
   27|  4.66M|        return m_ValueSigned;
   28|  4.66M|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  1.92M|    {
   32|  1.92M|        return m_ValueUnsigned;
   33|  1.92M|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  5.65M|    {
   37|  5.65M|        return m_IsReadOnly;
   38|  5.65M|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      3|    {
   20|      3|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 3, False: 0]
  ------------------
   21|      3|        {
   22|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      3|            return {};
   24|      3|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      3|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      3|    {
   32|      3|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 3, False: 0]
  ------------------
   33|      3|        {
   34|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      3|            return {};
   36|      3|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      3|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      3|    {
   44|      3|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 3, False: 0]
  ------------------
   45|      3|        {
   46|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      3|            return {};
   48|      3|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      3|    {
   61|      3|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 3, False: 0]
  ------------------
   62|      3|        {
   63|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      3|            return {};
   65|      3|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      3|    {
   78|      3|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 3, False: 0]
  ------------------
   79|      3|        {
   80|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      3|            return {};
   82|      3|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      3|    {
   95|      3|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 3, False: 0]
  ------------------
   96|      3|        {
   97|      3|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      3|            return {};
   99|      3|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  111|      1|    {
  112|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (112:13): [True: 1, False: 0]
  ------------------
  113|      1|        {
  114|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|      1|            return {};
  116|      1|        }
  117|       |
  118|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  119|      0|        return *reinterpret_cast<const float*>(&m_Values[index].signed_value);
  120|      1|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  123|      1|    {
  124|      1|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (124:13): [True: 1, False: 0]
  ------------------
  125|      1|        {
  126|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  127|      1|            return {};
  128|      1|        }
  129|       |
  130|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  131|      0|        return *reinterpret_cast<const double*>(&m_Values[(index)].signed_value);
  132|      1|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|     20|    {
  244|     20|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 20]
  ------------------
  245|     20|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|     20|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  16.0k|    {
  256|  16.0k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 16.0M, False: 16.0k]
  ------------------
  257|  16.0M|        {
  258|  16.0M|            val.signed_value = 0;
  259|  16.0M|        }
  260|  16.0k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|   956k|    {
   24|   956k|        switch (token.length())
   25|   956k|        {
   26|       |            // 1 character OpCodes
   27|  31.9k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 31.9k, False: 924k]
  ------------------
   28|  31.9k|                char c1 = token[0];
   29|  31.9k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 12.0k, False: 19.8k]
  ------------------
   30|  12.0k|                {
   31|  12.0k|                    return OpCode::J;
   32|  12.0k|                }
   33|  19.8k|                break;
   34|  31.9k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|  52.0k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 52.0k, False: 904k]
  ------------------
   38|  52.0k|                char c1 = token[0];
   39|  52.0k|                char c2 = token[1];
   40|       |
   41|  52.0k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 19.6k, False: 32.4k]
  ------------------
   42|  52.0k|                {
   43|    562|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 562, False: 51.4k]
  ------------------
   44|  1.05k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 492, False: 51.5k]
  ------------------
   45|  1.05k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 418, False: 636]
  ------------------
   46|    418|                        {
   47|    418|                            return OpCode::JR;
   48|    418|                        }
   49|    636|                        break;
   50|       |
   51|  12.3k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 12.3k, False: 39.7k]
  ------------------
   52|  12.8k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 468, False: 51.5k]
  ------------------
   53|  12.8k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 169, False: 12.6k]
  ------------------
   54|  12.8k|                        {
   55|    445|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 445, False: 12.3k]
  ------------------
   56|    592|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 147, False: 12.6k]
  ------------------
   57|    592|                                return OpCode::LB;
   58|  5.02k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 5.02k, False: 7.79k]
  ------------------
   59|  5.04k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 20, False: 12.7k]
  ------------------
   60|  5.04k|                                return OpCode::LD;
   61|  1.21k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.21k, False: 11.5k]
  ------------------
   62|  1.31k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 99, False: 12.7k]
  ------------------
   63|  1.31k|                                return OpCode::LF;
   64|  1.05k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 1.05k, False: 11.7k]
  ------------------
   65|  1.42k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 369, False: 12.4k]
  ------------------
   66|  1.42k|                                return OpCode::LH;
   67|  3.40k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 3.40k, False: 9.41k]
  ------------------
   68|  4.26k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 869, False: 11.9k]
  ------------------
   69|  4.26k|                                return OpCode::LW;
   70|  12.8k|                        }
   71|    169|                        break;
   72|    169|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 167, False: 51.8k]
  ------------------
   73|  4.33k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 4.17k, False: 47.8k]
  ------------------
   74|  4.33k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 305, False: 4.03k]
  ------------------
   75|    305|                        {
   76|    305|                            return OpCode::OR;
   77|    305|                        }
   78|  4.03k|                        break;
   79|  13.3k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 13.3k, False: 38.6k]
  ------------------
   80|  14.2k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 836, False: 51.2k]
  ------------------
   81|  14.2k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 867, False: 13.3k]
  ------------------
   82|  14.2k|                        {
   83|  1.48k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.48k, False: 12.7k]
  ------------------
   84|  1.56k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 85, False: 14.1k]
  ------------------
   85|  1.56k|                                return OpCode::SB;
   86|  1.33k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 1.33k, False: 12.8k]
  ------------------
   87|  1.37k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 46, False: 14.1k]
  ------------------
   88|  1.37k|                                return OpCode::SD;
   89|  8.33k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 8.33k, False: 5.89k]
  ------------------
   90|  8.70k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 373, False: 13.8k]
  ------------------
   91|  8.70k|                                return OpCode::SF;
   92|    933|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 933, False: 13.2k]
  ------------------
   93|  1.51k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 580, False: 13.6k]
  ------------------
   94|  1.51k|                                return OpCode::SH;
   95|     47|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 47, False: 14.1k]
  ------------------
   96|    191|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 144, False: 14.0k]
  ------------------
   97|    191|                                return OpCode::SW;
   98|  14.2k|                        }
   99|    867|                        break;
  100|  52.0k|                }
  101|  25.3k|                break;
  102|  52.0k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   484k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 484k, False: 471k]
  ------------------
  106|   484k|                char c1 = token[0];
  107|   484k|                char c2 = token[1];
  108|   484k|                char c3 = token[2];
  109|       |
  110|   484k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 29.8k, False: 455k]
  ------------------
  111|   484k|                {
  112|   298k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 298k, False: 186k]
  ------------------
  113|   298k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 674, False: 484k]
  ------------------
  114|   298k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 296k, False: 2.65k]
  |  Branch (114:29): [True: 295k, False: 3.32k]
  |  Branch (114:45): [True: 295k, False: 662]
  ------------------
  115|   295k|                        {
  116|   295k|                            return OpCode::ADD;
  117|   295k|                        }
  118|  3.32k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 2.57k, False: 748]
  |  Branch (118:34): [True: 2.33k, False: 985]
  |  Branch (118:50): [True: 2.33k, False: 237]
  ------------------
  119|  2.33k|                        {
  120|  2.33k|                            return OpCode::AND;
  121|  2.33k|                        }
  122|    985|                        break;
  123|       |
  124|    985|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 800, False: 484k]
  ------------------
  125|  1.23k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 430, False: 484k]
  ------------------
  126|  1.23k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 831, False: 399]
  |  Branch (126:29): [True: 680, False: 550]
  |  Branch (126:45): [True: 680, False: 151]
  ------------------
  127|    680|                        {
  128|    680|                            return OpCode::DIV;
  129|    680|                        }
  130|    550|                        break;
  131|       |
  132|  6.26k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 6.26k, False: 478k]
  ------------------
  133|  7.66k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 1.40k, False: 483k]
  ------------------
  134|  7.66k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 7.57k, False: 98]
  ------------------
  135|  7.57k|                        {
  136|  7.57k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 486, False: 7.08k]
  ------------------
  137|    486|                            {
  138|    486|                                return OpCode::EQD;
  139|    486|                            }
  140|  7.08k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 5.66k, False: 1.42k]
  ------------------
  141|  5.66k|                            {
  142|  5.66k|                                return OpCode::EQF;
  143|  5.66k|                            }
  144|  7.57k|                        }
  145|  1.52k|                        break;
  146|       |
  147|  15.2k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 15.2k, False: 469k]
  ------------------
  148|  16.8k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 1.57k, False: 483k]
  ------------------
  149|  16.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 3.25k, False: 13.5k]
  ------------------
  150|  3.25k|                        {
  151|  3.25k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 2.35k, False: 904]
  ------------------
  152|  2.35k|                            {
  153|  2.35k|                                return OpCode::GED;
  154|  2.35k|                            }
  155|    904|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 169, False: 735]
  ------------------
  156|    169|                            {
  157|    169|                                return OpCode::GEF;
  158|    169|                            }
  159|  3.25k|                        }
  160|  13.5k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 13.4k, False: 108]
  ------------------
  161|  13.4k|                        {
  162|  13.4k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 6.02k, False: 7.45k]
  ------------------
  163|  6.02k|                            {
  164|  6.02k|                                return OpCode::GTD;
  165|  6.02k|                            }
  166|  7.45k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 7.09k, False: 353]
  ------------------
  167|  7.09k|                            {
  168|  7.09k|                                return OpCode::GTF;
  169|  7.09k|                            }
  170|  7.45k|                        }
  171|  1.19k|                        break;
  172|       |
  173|  5.73k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 5.73k, False: 479k]
  ------------------
  174|  7.58k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 1.84k, False: 483k]
  ------------------
  175|  7.58k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 7.48k, False: 98]
  |  Branch (175:29): [True: 6.29k, False: 1.28k]
  |  Branch (175:45): [True: 6.29k, False: 1.18k]
  ------------------
  176|  6.29k|                        {
  177|  6.29k|                            return OpCode::JAL;
  178|  6.29k|                        }
  179|  1.28k|                        break;
  180|       |
  181|  26.7k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 26.7k, False: 458k]
  ------------------
  182|  42.8k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 16.1k, False: 468k]
  ------------------
  183|  42.8k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 3.30k, False: 39.5k]
  ------------------
  184|  42.8k|                        {
  185|    754|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 754, False: 42.0k]
  ------------------
  186|  3.85k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 3.10k, False: 39.7k]
  ------------------
  187|  3.85k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 2.05k, False: 1.80k]
  ------------------
  188|  2.05k|                                {
  189|  2.05k|                                    return OpCode::LBU;
  190|  2.05k|                                }
  191|  1.80k|                                break;
  192|       |
  193|  4.50k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 4.50k, False: 38.3k]
  ------------------
  194|  13.7k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 9.27k, False: 33.5k]
  ------------------
  195|  13.7k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 4.67k, False: 9.09k]
  ------------------
  196|  4.67k|                                {
  197|  4.67k|                                    return OpCode::LED;
  198|  4.67k|                                }
  199|  9.09k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 5.05k, False: 4.04k]
  ------------------
  200|  5.05k|                                {
  201|  5.05k|                                    return OpCode::LEF;
  202|  5.05k|                                }
  203|  4.04k|                                break;
  204|       |
  205|  15.8k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 15.8k, False: 27.0k]
  ------------------
  206|  18.4k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 2.61k, False: 40.2k]
  ------------------
  207|  18.4k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 2.49k, False: 15.9k]
  ------------------
  208|  2.49k|                                {
  209|  2.49k|                                    return OpCode::LHI;
  210|  2.49k|                                }
  211|  15.9k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 13.3k, False: 2.56k]
  ------------------
  212|  13.3k|                                {
  213|  13.3k|                                    return OpCode::LHU;
  214|  13.3k|                                }
  215|  2.56k|                                break;
  216|       |
  217|  2.56k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 1.69k, False: 41.1k]
  ------------------
  218|  2.73k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 1.03k, False: 41.8k]
  ------------------
  219|  2.73k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 972, False: 1.75k]
  ------------------
  220|    972|                                {
  221|    972|                                    return OpCode::LTD;
  222|    972|                                }
  223|  1.75k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 722, False: 1.03k]
  ------------------
  224|    722|                                {
  225|    722|                                    return OpCode::LTF;
  226|    722|                                }
  227|  1.03k|                                break;
  228|       |
  229|  1.03k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 570, False: 42.2k]
  ------------------
  230|    763|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 193, False: 42.6k]
  ------------------
  231|    763|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 692, False: 71]
  ------------------
  232|    692|                                {
  233|    692|                                    return OpCode::LWU;
  234|    692|                                }
  235|     71|                                break;
  236|  42.8k|                        }
  237|  12.8k|                        break;
  238|       |
  239|  12.8k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 1.98k, False: 482k]
  ------------------
  240|  3.56k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 1.57k, False: 483k]
  ------------------
  241|  3.56k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 1.33k, False: 2.22k]
  ------------------
  242|  1.33k|                        {
  243|  1.33k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 596, False: 742]
  ------------------
  244|    596|                            {
  245|    596|                                return OpCode::NED;
  246|    596|                            }
  247|    742|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 531, False: 211]
  ------------------
  248|    531|                            {
  249|    531|                                return OpCode::NEF;
  250|    531|                            }
  251|  1.33k|                        }
  252|  2.22k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 1.19k, False: 1.03k]
  |  Branch (252:34): [True: 1.14k, False: 1.08k]
  |  Branch (252:50): [True: 1.14k, False: 52]
  ------------------
  253|  1.14k|                        {
  254|  1.14k|                            return OpCode::NOP;
  255|  1.14k|                        }
  256|       |
  257|  1.29k|                        break;
  258|       |
  259|  1.29k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 295, False: 484k]
  ------------------
  260|  9.23k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 8.94k, False: 476k]
  ------------------
  261|  9.23k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 7.24k, False: 1.99k]
  |  Branch (261:29): [True: 3.64k, False: 5.59k]
  |  Branch (261:45): [True: 3.64k, False: 3.60k]
  ------------------
  262|  3.64k|                        {
  263|  3.64k|                            return OpCode::ORI;
  264|  3.64k|                        }
  265|  5.59k|                        break;
  266|       |
  267|  60.8k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 60.8k, False: 424k]
  ------------------
  268|  63.9k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 3.09k, False: 481k]
  ------------------
  269|  63.9k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 675, False: 63.3k]
  ------------------
  270|  63.9k|                        {
  271|    506|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 506, False: 63.4k]
  ------------------
  272|    636|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 130, False: 63.8k]
  ------------------
  273|    636|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 548, False: 88]
  ------------------
  274|    548|                                {
  275|    548|                                    return OpCode::SBU;
  276|    548|                                }
  277|     88|                                break;
  278|       |
  279|  1.00k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 1.00k, False: 62.9k]
  ------------------
  280|  1.80k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 805, False: 63.1k]
  ------------------
  281|  1.80k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 1.09k, False: 712]
  ------------------
  282|  1.09k|                                {
  283|  1.09k|                                    return OpCode::SEQ;
  284|  1.09k|                                }
  285|    712|                                break;
  286|       |
  287|  8.33k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 8.33k, False: 55.6k]
  ------------------
  288|  15.0k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 6.71k, False: 57.2k]
  ------------------
  289|  15.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 6.05k, False: 8.99k]
  ------------------
  290|  6.05k|                                {
  291|  6.05k|                                    return OpCode::SGE;
  292|  6.05k|                                }
  293|  8.99k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 5.33k, False: 3.65k]
  ------------------
  294|  5.33k|                                {
  295|  5.33k|                                    return OpCode::SGT;
  296|  5.33k|                                }
  297|  3.65k|                                break;
  298|       |
  299|  3.65k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 3.58k, False: 60.4k]
  ------------------
  300|  4.41k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 836, False: 63.1k]
  ------------------
  301|  4.41k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 3.81k, False: 601]
  ------------------
  302|  3.81k|                                {
  303|  3.81k|                                    return OpCode::SHU;
  304|  3.81k|                                }
  305|    601|                                break;
  306|       |
  307|  7.78k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 7.78k, False: 56.2k]
  ------------------
  308|  9.81k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 2.03k, False: 61.9k]
  ------------------
  309|  9.81k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.52k, False: 8.29k]
  ------------------
  310|  9.81k|                                {
  311|  1.04k|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 1.04k, False: 8.77k]
  ------------------
  312|  1.14k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 101, False: 9.71k]
  ------------------
  313|  1.14k|                                        return OpCode::SLA;
  314|       |
  315|  2.15k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 2.15k, False: 7.65k]
  ------------------
  316|  2.42k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 265, False: 9.55k]
  ------------------
  317|  2.42k|                                        return OpCode::SLE;
  318|       |
  319|  3.82k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 3.82k, False: 5.99k]
  ------------------
  320|  3.85k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 33, False: 9.78k]
  ------------------
  321|  3.85k|                                        return OpCode::SLL;
  322|       |
  323|    635|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 635, False: 9.18k]
  ------------------
  324|    874|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 239, False: 9.57k]
  ------------------
  325|    874|                                        return OpCode::SLT;
  326|  9.81k|                                }
  327|  1.52k|                                break;
  328|       |
  329|  12.3k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 12.3k, False: 51.6k]
  ------------------
  330|  12.4k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 68, False: 63.9k]
  ------------------
  331|  12.4k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 12.4k, False: 39]
  ------------------
  332|  12.4k|                                {
  333|  12.4k|                                    return OpCode::SNE;
  334|  12.4k|                                }
  335|     39|                                break;
  336|       |
  337|  9.68k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 9.68k, False: 54.3k]
  ------------------
  338|  9.87k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 196, False: 63.7k]
  ------------------
  339|  9.87k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 359, False: 9.51k]
  ------------------
  340|    359|                                {
  341|    359|                                    return OpCode::SRA;
  342|    359|                                }
  343|  9.51k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 9.44k, False: 74]
  ------------------
  344|  9.44k|                                {
  345|  9.44k|                                    return OpCode::SRL;
  346|  9.44k|                                }
  347|     74|                                break;
  348|       |
  349|  5.75k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 5.75k, False: 58.2k]
  ------------------
  350|  6.08k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 325, False: 63.6k]
  ------------------
  351|  6.08k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 5.81k, False: 271]
  ------------------
  352|  5.81k|                                {
  353|  5.81k|                                    return OpCode::SUB;
  354|  5.81k|                                }
  355|    271|                                break;
  356|       |
  357|  3.03k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 3.03k, False: 60.9k]
  ------------------
  358|  3.17k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 138, False: 63.8k]
  ------------------
  359|  3.17k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 3.05k, False: 119]
  ------------------
  360|  3.05k|                                {
  361|  3.05k|                                    return OpCode::SWU;
  362|  3.05k|                                }
  363|    119|                                break;
  364|  63.9k|                        }
  365|       |
  366|  10.2k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 2.50k, False: 482k]
  ------------------
  367|  11.2k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 968, False: 483k]
  ------------------
  368|  11.2k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 3.34k, False: 7.87k]
  |  Branch (368:29): [True: 2.60k, False: 8.62k]
  |  Branch (368:45): [True: 2.60k, False: 747]
  ------------------
  369|  2.60k|                        {
  370|  2.60k|                            return OpCode::XOR;
  371|  2.60k|                        }
  372|  8.62k|                        break;
  373|   484k|                }
  374|  63.7k|                break;
  375|   484k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   260k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 260k, False: 695k]
  ------------------
  379|   260k|                char c1 = token[0];
  380|   260k|                char c2 = token[1];
  381|   260k|                char c3 = token[2];
  382|   260k|                char c4 = token[3];
  383|       |
  384|   260k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 23.0k, False: 237k]
  ------------------
  385|   260k|                {
  386|  60.1k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 60.1k, False: 200k]
  ------------------
  387|  62.7k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 2.61k, False: 258k]
  ------------------
  388|  62.7k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 351, False: 62.4k]
  ------------------
  389|  62.7k|                        {
  390|  34.3k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 34.3k, False: 28.4k]
  ------------------
  391|  36.9k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 2.58k, False: 60.1k]
  ------------------
  392|  36.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 36.7k, False: 191]
  ------------------
  393|  36.7k|                                {
  394|  36.7k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.47k, False: 35.2k]
  ------------------
  395|  36.7k|                                    {
  396|  4.71k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.71k, False: 31.9k]
  ------------------
  397|  4.79k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 78, False: 36.6k]
  ------------------
  398|  4.79k|                                            return OpCode::ADDD;
  399|       |
  400|  5.13k|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 5.13k, False: 31.5k]
  ------------------
  401|  5.84k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 707, False: 36.0k]
  ------------------
  402|  5.84k|                                            return OpCode::ADDF;
  403|       |
  404|  20.6k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 20.6k, False: 16.0k]
  ------------------
  405|  20.7k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 86, False: 36.6k]
  ------------------
  406|  20.7k|                                            return OpCode::ADDI;
  407|       |
  408|  3.71k|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 3.71k, False: 32.9k]
  ------------------
  409|  3.84k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 134, False: 36.5k]
  ------------------
  410|  3.84k|                                            return OpCode::ADDU;
  411|  36.7k|                                    }
  412|  36.7k|                                }
  413|  1.66k|                                break;
  414|       |
  415|  25.2k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 25.2k, False: 37.5k]
  ------------------
  416|  25.5k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 251, False: 62.5k]
  ------------------
  417|  25.5k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 25.3k, False: 132]
  |  Branch (417:37): [True: 25.2k, False: 289]
  |  Branch (417:53): [True: 25.2k, False: 157]
  ------------------
  418|  25.2k|                                {
  419|  25.2k|                                    return OpCode::ANDI;
  420|  25.2k|                                }
  421|       |
  422|    289|                                break;
  423|  62.7k|                        }
  424|  2.30k|                        break;
  425|       |
  426|  8.56k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 8.56k, False: 252k]
  ------------------
  427|  24.1k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 15.6k, False: 245k]
  ------------------
  428|  24.1k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 2.64k, False: 21.5k]
  ------------------
  429|  24.1k|                        {
  430|    400|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 400, False: 23.7k]
  ------------------
  431|  1.84k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 1.44k, False: 22.7k]
  ------------------
  432|  1.84k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 1.70k, False: 139]
  |  Branch (432:37): [True: 528, False: 1.31k]
  |  Branch (432:53): [True: 528, False: 1.17k]
  ------------------
  433|    528|                                {
  434|    528|                                    return OpCode::BEQZ;
  435|    528|                                }
  436|  1.31k|                                break;
  437|       |
  438|  7.74k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 7.74k, False: 16.4k]
  ------------------
  439|  13.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 5.42k, False: 18.7k]
  ------------------
  440|  13.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 11.2k, False: 1.88k]
  ------------------
  441|  11.2k|                                {
  442|  11.2k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 6.94k, False: 4.34k]
  ------------------
  443|  6.94k|                                    {
  444|  6.94k|                                        return OpCode::BFPF;
  445|  6.94k|                                    }
  446|  4.34k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 2.96k, False: 1.37k]
  ------------------
  447|  2.96k|                                    {
  448|  2.96k|                                        return OpCode::BFPT;
  449|  2.96k|                                    }
  450|  11.2k|                                }
  451|  3.25k|                                break;
  452|       |
  453|  6.39k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 6.39k, False: 17.7k]
  ------------------
  454|  6.52k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 126, False: 24.0k]
  ------------------
  455|  6.52k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 5.79k, False: 722]
  |  Branch (455:37): [True: 3.50k, False: 3.01k]
  |  Branch (455:53): [True: 3.50k, False: 2.29k]
  ------------------
  456|  3.50k|                                {
  457|  3.50k|                                    return OpCode::BNEZ;
  458|  3.50k|                                }
  459|  24.1k|                        }
  460|  10.2k|                        break;
  461|       |
  462|  10.2k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 5.76k, False: 255k]
  ------------------
  463|  21.4k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 15.6k, False: 245k]
  ------------------
  464|  21.4k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 18.6k, False: 2.74k]
  |  Branch (464:29): [True: 14.0k, False: 7.30k]
  |  Branch (464:45): [True: 14.0k, False: 4.56k]
  ------------------
  465|  14.0k|                        {
  466|  14.0k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.51k, False: 10.5k]
  ------------------
  467|  14.0k|                            {
  468|  1.16k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.16k, False: 12.9k]
  ------------------
  469|  1.47k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 313, False: 13.7k]
  ------------------
  470|  1.47k|                                    return OpCode::DIVD;
  471|       |
  472|  3.14k|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 3.14k, False: 10.9k]
  ------------------
  473|  3.79k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 649, False: 13.4k]
  ------------------
  474|  3.79k|                                    return OpCode::DIVF;
  475|       |
  476|    312|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 312, False: 13.7k]
  ------------------
  477|  3.37k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 3.06k, False: 11.0k]
  ------------------
  478|  3.37k|                                    return OpCode::DIVI;
  479|       |
  480|    438|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 438, False: 13.6k]
  ------------------
  481|  1.92k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 1.49k, False: 12.6k]
  ------------------
  482|  1.92k|                                    return OpCode::DIVU;
  483|  14.0k|                            }
  484|  14.0k|                        }
  485|  10.8k|                        break;
  486|       |
  487|  10.8k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 4.78k, False: 256k]
  ------------------
  488|  5.63k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 851, False: 260k]
  ------------------
  489|  5.63k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 5.22k, False: 402]
  |  Branch (489:29): [True: 4.83k, False: 794]
  |  Branch (489:45): [True: 5.08k, False: 141]
  |  Branch (489:61): [True: 4.83k, False: 251]
  ------------------
  490|  4.83k|                        {
  491|  4.83k|                            return OpCode::HALT;
  492|  4.83k|                        }
  493|    794|                        break;
  494|       |
  495|  14.3k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 14.3k, False: 246k]
  ------------------
  496|  23.0k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 8.70k, False: 252k]
  ------------------
  497|  23.0k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 22.4k, False: 618]
  |  Branch (497:29): [True: 14.4k, False: 8.64k]
  |  Branch (497:45): [True: 19.6k, False: 2.78k]
  |  Branch (497:61): [True: 14.4k, False: 5.24k]
  ------------------
  498|  14.4k|                        {
  499|  14.4k|                            return OpCode::JALR;
  500|  14.4k|                        }
  501|  8.64k|                        break;
  502|       |
  503|  10.5k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 10.5k, False: 250k]
  ------------------
  504|  12.3k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 1.76k, False: 259k]
  ------------------
  505|  12.3k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 9.00k, False: 3.33k]
  |  Branch (505:29): [True: 5.89k, False: 6.44k]
  |  Branch (505:45): [True: 5.89k, False: 3.10k]
  ------------------
  506|  5.89k|                        {
  507|  5.89k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 750, False: 5.14k]
  ------------------
  508|    750|                            {
  509|    750|                                return OpCode::MOVD;
  510|    750|                            }
  511|  5.14k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 438, False: 4.70k]
  ------------------
  512|    438|                            {
  513|    438|                                return OpCode::MOVF;
  514|    438|                            }
  515|  5.89k|                        }
  516|  6.44k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 2.36k, False: 4.07k]
  |  Branch (516:34): [True: 1.53k, False: 4.90k]
  |  Branch (516:50): [True: 1.84k, False: 520]
  |  Branch (516:66): [True: 1.53k, False: 308]
  ------------------
  517|  1.53k|                        {
  518|  1.53k|                            return OpCode::MULT;
  519|  1.53k|                        }
  520|  9.61k|                        break;
  521|       |
  522|  71.6k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 71.6k, False: 189k]
  ------------------
  523|  78.4k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 6.81k, False: 254k]
  ------------------
  524|  78.4k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 1.94k, False: 76.5k]
  ------------------
  525|  78.4k|                        {
  526|  6.88k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 6.88k, False: 71.5k]
  ------------------
  527|  8.42k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 1.54k, False: 76.9k]
  ------------------
  528|  8.42k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 7.18k, False: 1.23k]
  ------------------
  529|  7.18k|                                {
  530|  7.18k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 2.85k, False: 4.32k]
  ------------------
  531|  2.85k|                                    {
  532|  2.85k|                                        return OpCode::SEQI;
  533|  2.85k|                                    }
  534|  4.32k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 4.20k, False: 120]
  ------------------
  535|  4.20k|                                    {
  536|  4.20k|                                        return OpCode::SEQU;
  537|  4.20k|                                    }
  538|  7.18k|                                }
  539|  1.35k|                                break;
  540|       |
  541|  14.3k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 14.3k, False: 64.1k]
  ------------------
  542|  17.5k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 3.17k, False: 75.2k]
  ------------------
  543|  17.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 11.1k, False: 6.34k]
  ------------------
  544|  11.1k|                                {
  545|  11.1k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 9.07k, False: 2.08k]
  ------------------
  546|  9.07k|                                    {
  547|  9.07k|                                        return OpCode::SGEI;
  548|  9.07k|                                    }
  549|  2.08k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.03k, False: 1.05k]
  ------------------
  550|  1.03k|                                    {
  551|  1.03k|                                        return OpCode::SGEU;
  552|  1.03k|                                    }
  553|  11.1k|                                }
  554|  6.34k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 5.83k, False: 507]
  ------------------
  555|  5.83k|                                {
  556|  5.83k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 896, False: 4.94k]
  ------------------
  557|    896|                                    {
  558|    896|                                        return OpCode::SGTI;
  559|    896|                                    }
  560|  4.94k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.71k, False: 1.22k]
  ------------------
  561|  3.71k|                                    {
  562|  3.71k|                                        return OpCode::SGTU;
  563|  3.71k|                                    }
  564|  5.83k|                                }
  565|  2.78k|                                break;
  566|       |
  567|  6.21k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 6.21k, False: 72.2k]
  ------------------
  568|  14.1k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 7.93k, False: 70.5k]
  ------------------
  569|  14.1k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.45k, False: 12.6k]
  ------------------
  570|  14.1k|                                {
  571|    786|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 786, False: 13.3k]
  ------------------
  572|  1.09k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 313, False: 13.8k]
  ------------------
  573|  1.09k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 921, False: 178]
  ------------------
  574|    921|                                        {
  575|    921|                                            return OpCode::SLAI;
  576|    921|                                        }
  577|    178|                                        break;
  578|       |
  579|  2.13k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 2.13k, False: 12.0k]
  ------------------
  580|  4.43k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.29k, False: 11.8k]
  ------------------
  581|  4.43k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 2.04k, False: 2.38k]
  ------------------
  582|  2.04k|                                        {
  583|  2.04k|                                            return OpCode::SLEI;
  584|  2.04k|                                        }
  585|  2.38k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 944, False: 1.44k]
  ------------------
  586|    944|                                        {
  587|    944|                                            return OpCode::SLEU;
  588|    944|                                        }
  589|  1.44k|                                        break;
  590|       |
  591|  1.44k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 487, False: 13.6k]
  ------------------
  592|  3.69k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 3.20k, False: 10.9k]
  ------------------
  593|  3.69k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.13k, False: 1.55k]
  ------------------
  594|  2.13k|                                        {
  595|  2.13k|                                            return OpCode::SLLI;
  596|  2.13k|                                        }
  597|  1.55k|                                        break;
  598|       |
  599|  2.69k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 2.69k, False: 11.4k]
  ------------------
  600|  3.46k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 769, False: 13.3k]
  ------------------
  601|  3.46k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 2.72k, False: 736]
  ------------------
  602|  2.72k|                                        {
  603|  2.72k|                                            return OpCode::SLTI;
  604|  2.72k|                                        }
  605|    736|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 522, False: 214]
  ------------------
  606|    522|                                        {
  607|    522|                                            return OpCode::SLTU;
  608|    522|                                        }
  609|    214|                                        break;
  610|  14.1k|                                }
  611|       |
  612|  5.95k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 1.11k, False: 77.3k]
  ------------------
  613|  6.29k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 346, False: 78.1k]
  ------------------
  614|  6.29k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 2.84k, False: 3.45k]
  ------------------
  615|  2.84k|                                {
  616|  2.84k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 775, False: 2.07k]
  ------------------
  617|    775|                                    {
  618|    775|                                        return OpCode::SNEI;
  619|    775|                                    }
  620|  2.07k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 624, False: 1.44k]
  ------------------
  621|    624|                                    {
  622|    624|                                        return OpCode::SNEU;
  623|    624|                                    }
  624|  2.84k|                                }
  625|  4.90k|                                break;
  626|       |
  627|  16.0k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 16.0k, False: 62.4k]
  ------------------
  628|  16.4k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 433, False: 78.0k]
  ------------------
  629|  16.4k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 4.54k, False: 11.8k]
  |  Branch (629:37): [True: 4.12k, False: 12.3k]
  |  Branch (629:53): [True: 4.12k, False: 420]
  ------------------
  630|  4.12k|                                {
  631|  4.12k|                                    return OpCode::SRAI;
  632|  4.12k|                                }
  633|  12.3k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 11.6k, False: 637]
  |  Branch (633:42): [True: 11.5k, False: 746]
  |  Branch (633:58): [True: 11.5k, False: 109]
  ------------------
  634|  11.5k|                                {
  635|  11.5k|                                    return OpCode::SRLI;
  636|  11.5k|                                }
  637|    746|                                break;
  638|       |
  639|  17.4k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 17.4k, False: 60.9k]
  ------------------
  640|  18.5k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 1.05k, False: 77.4k]
  ------------------
  641|  18.5k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 18.2k, False: 304]
  ------------------
  642|  18.2k|                                {
  643|  18.2k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 573, False: 17.6k]
  ------------------
  644|  18.2k|                                    {
  645|  1.79k|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 1.79k, False: 16.4k]
  ------------------
  646|  1.90k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 119, False: 18.1k]
  ------------------
  647|  1.90k|                                            return OpCode::SUBD;
  648|       |
  649|  3.18k|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 3.18k, False: 15.0k]
  ------------------
  650|  3.81k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 634, False: 17.6k]
  ------------------
  651|  3.81k|                                            return OpCode::SUBF;
  652|       |
  653|  2.85k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.85k, False: 15.3k]
  ------------------
  654|  2.99k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 134, False: 18.1k]
  ------------------
  655|  2.99k|                                            return OpCode::SUBI;
  656|       |
  657|  8.17k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 8.17k, False: 10.0k]
  ------------------
  658|  8.95k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 782, False: 17.4k]
  ------------------
  659|  8.95k|                                            return OpCode::SUBU;
  660|  18.2k|                                    }
  661|  18.2k|                                }
  662|    877|                                break;
  663|  78.4k|                        }
  664|  12.6k|                        break;
  665|       |
  666|  12.6k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 1.32k, False: 259k]
  ------------------
  667|  3.34k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 2.02k, False: 258k]
  ------------------
  668|  3.34k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.11k, False: 230]
  |  Branch (668:29): [True: 1.53k, False: 1.81k]
  |  Branch (668:45): [True: 1.74k, False: 1.37k]
  |  Branch (668:61): [True: 1.53k, False: 209]
  ------------------
  669|  1.53k|                        {
  670|  1.53k|                            return OpCode::TRAP;
  671|  1.53k|                        }
  672|  1.81k|                        break;
  673|  2.10k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.10k, False: 258k]
  ------------------
  674|  6.60k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 4.49k, False: 256k]
  ------------------
  675|  6.60k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 4.07k, False: 2.53k]
  |  Branch (675:29): [True: 2.92k, False: 3.67k]
  |  Branch (675:45): [True: 3.37k, False: 698]
  |  Branch (675:61): [True: 2.92k, False: 444]
  ------------------
  676|  2.92k|                        {
  677|  2.92k|                            return OpCode::XORI;
  678|  2.92k|                        }
  679|  3.67k|                        break;
  680|   260k|                }
  681|  83.5k|                break;
  682|   260k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|  83.5k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 43.4k, False: 912k]
  ------------------
  686|  43.4k|                char c1 = token[0];
  687|  43.4k|                char c2 = token[1];
  688|  43.4k|                char c3 = token[2];
  689|  43.4k|                char c4 = token[3];
  690|  43.4k|                char c5 = token[4];
  691|       |
  692|  43.4k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 6.03k, False: 37.4k]
  ------------------
  693|  43.4k|                {
  694|  8.41k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 8.41k, False: 35.0k]
  ------------------
  695|  8.41k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 0, False: 43.4k]
  ------------------
  696|  8.41k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 8.41k, False: 0]
  |  Branch (696:29): [True: 8.41k, False: 0]
  |  Branch (696:45): [True: 8.41k, False: 0]
  |  Branch (696:61): [True: 8.41k, False: 0]
  |  Branch (696:77): [True: 8.41k, False: 0]
  ------------------
  697|  8.41k|                        {
  698|  8.41k|                            return OpCode::ADDUI;
  699|  8.41k|                        }
  700|      0|                        break;
  701|       |
  702|  3.11k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.11k, False: 40.3k]
  ------------------
  703|  3.11k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 0, False: 43.4k]
  ------------------
  704|  3.11k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 3.11k, False: 0]
  |  Branch (704:29): [True: 3.11k, False: 0]
  |  Branch (704:45): [True: 3.11k, False: 0]
  |  Branch (704:61): [True: 3.11k, False: 0]
  |  Branch (704:77): [True: 3.11k, False: 0]
  ------------------
  705|  3.11k|                        {
  706|  3.11k|                            return OpCode::DIVUI;
  707|  3.11k|                        }
  708|      0|                        break;
  709|       |
  710|  14.0k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 14.0k, False: 29.4k]
  ------------------
  711|  14.0k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 0, False: 43.4k]
  ------------------
  712|  14.0k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 14.0k, False: 0]
  |  Branch (712:29): [True: 14.0k, False: 0]
  |  Branch (712:45): [True: 14.0k, False: 0]
  |  Branch (712:61): [True: 14.0k, False: 0]
  ------------------
  713|  14.0k|                        {
  714|  14.0k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 0, False: 14.0k]
  ------------------
  715|  14.0k|                            {
  716|  2.19k|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 2.19k, False: 11.8k]
  ------------------
  717|  2.19k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 0, False: 14.0k]
  ------------------
  718|  2.19k|                                    return OpCode::MULTD;
  719|       |
  720|  4.68k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 4.68k, False: 9.33k]
  ------------------
  721|  4.68k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 0, False: 14.0k]
  ------------------
  722|  4.68k|                                    return OpCode::MULTF;
  723|       |
  724|  4.60k|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 4.60k, False: 9.41k]
  ------------------
  725|  4.60k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 0, False: 14.0k]
  ------------------
  726|  4.60k|                                    return OpCode::MULTI;
  727|       |
  728|  2.53k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 2.53k, False: 11.4k]
  ------------------
  729|  2.53k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 0, False: 14.0k]
  ------------------
  730|  2.53k|                                    return OpCode::MULTU;
  731|  14.0k|                            }
  732|  14.0k|                        }
  733|      0|                        break;
  734|       |
  735|  11.8k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 11.8k, False: 31.5k]
  ------------------
  736|  11.8k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 0, False: 43.4k]
  ------------------
  737|  11.8k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 0, False: 11.8k]
  ------------------
  738|  11.8k|                        {
  739|  4.17k|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 4.17k, False: 7.67k]
  ------------------
  740|  4.17k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 0, False: 11.8k]
  ------------------
  741|  4.17k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 4.17k, False: 0]
  |  Branch (741:37): [True: 4.17k, False: 0]
  |  Branch (741:53): [True: 4.17k, False: 0]
  |  Branch (741:69): [True: 4.17k, False: 0]
  ------------------
  742|  4.17k|                                {
  743|  4.17k|                                    return OpCode::SEQUI;
  744|  4.17k|                                }
  745|      0|                                break;
  746|       |
  747|  3.71k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 3.71k, False: 8.13k]
  ------------------
  748|  3.71k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 0, False: 11.8k]
  ------------------
  749|  3.71k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 2.29k, False: 1.42k]
  |  Branch (749:37): [True: 2.29k, False: 1.42k]
  |  Branch (749:53): [True: 2.29k, False: 0]
  |  Branch (749:69): [True: 2.29k, False: 0]
  ------------------
  750|  2.29k|                                {
  751|  2.29k|                                    return OpCode::SGEUI;
  752|  2.29k|                                }
  753|  1.42k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 1.42k, False: 0]
  |  Branch (753:42): [True: 1.42k, False: 0]
  |  Branch (753:58): [True: 1.42k, False: 0]
  |  Branch (753:74): [True: 1.42k, False: 0]
  ------------------
  754|  1.42k|                                {
  755|  1.42k|                                    return OpCode::SGTUI;
  756|  1.42k|                                }
  757|      0|                                break;
  758|       |
  759|  2.76k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 2.76k, False: 9.08k]
  ------------------
  760|  2.76k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 0, False: 11.8k]
  ------------------
  761|  2.76k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 1.03k, False: 1.73k]
  |  Branch (761:37): [True: 1.03k, False: 1.73k]
  |  Branch (761:53): [True: 1.03k, False: 0]
  |  Branch (761:69): [True: 1.03k, False: 0]
  ------------------
  762|  1.03k|                                {
  763|  1.03k|                                    return OpCode::SLEUI;
  764|  1.03k|                                }
  765|  1.73k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 1.73k, False: 0]
  |  Branch (765:42): [True: 1.73k, False: 0]
  |  Branch (765:58): [True: 1.73k, False: 0]
  |  Branch (765:74): [True: 1.73k, False: 0]
  ------------------
  766|  1.73k|                                {
  767|  1.73k|                                    return OpCode::SLTUI;
  768|  1.73k|                                }
  769|      0|                                break;
  770|       |
  771|    406|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 406, False: 11.4k]
  ------------------
  772|    406|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 0, False: 11.8k]
  ------------------
  773|    406|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 406, False: 0]
  |  Branch (773:37): [True: 406, False: 0]
  |  Branch (773:53): [True: 406, False: 0]
  |  Branch (773:69): [True: 406, False: 0]
  ------------------
  774|    406|                                {
  775|    406|                                    return OpCode::SNEUI;
  776|    406|                                }
  777|      0|                                break;
  778|       |
  779|    784|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 784, False: 11.0k]
  ------------------
  780|    784|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 0, False: 11.8k]
  ------------------
  781|    784|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 784, False: 0]
  |  Branch (781:37): [True: 784, False: 0]
  |  Branch (781:53): [True: 784, False: 0]
  |  Branch (781:69): [True: 784, False: 0]
  ------------------
  782|    784|                                {
  783|    784|                                    return OpCode::SUBUI;
  784|    784|                                }
  785|      0|                                break;
  786|  11.8k|                        }
  787|       |
  788|      0|                        break;
  789|  43.4k|                }
  790|       |
  791|  6.03k|                break;
  792|  43.4k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|  6.03k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 5.53k, False: 950k]
  ------------------
  796|  5.53k|                char c1 = token[0];
  797|  5.53k|                char c2 = token[1];
  798|  5.53k|                char c3 = token[2];
  799|  5.53k|                char c4 = token[3];
  800|  5.53k|                char c5 = token[4];
  801|  5.53k|                char c6 = token[5];
  802|       |
  803|  5.53k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 3.54k, False: 1.99k]
  |  Branch (803:21): [True: 3.54k, False: 1.99k]
  |  Branch (803:37): [True: 3.54k, False: 0]
  |  Branch (803:53): [True: 3.54k, False: 0]
  ------------------
  804|  3.54k|                {
  805|  3.54k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 0, False: 3.54k]
  ------------------
  806|  3.54k|                    {
  807|  1.84k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.84k, False: 1.69k]
  ------------------
  808|  1.84k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 0, False: 3.54k]
  ------------------
  809|  1.84k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 1.84k, False: 0]
  ------------------
  810|  1.84k|                            {
  811|  1.84k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 315, False: 1.53k]
  ------------------
  812|    315|                                {
  813|    315|                                    return OpCode::CVTD2F;
  814|    315|                                }
  815|  1.53k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 1.53k, False: 0]
  ------------------
  816|  1.53k|                                {
  817|  1.53k|                                    return OpCode::CVTD2I;
  818|  1.53k|                                }
  819|  1.84k|                            }
  820|      0|                            break;
  821|       |
  822|    819|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 819, False: 2.72k]
  ------------------
  823|    819|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 0, False: 3.54k]
  ------------------
  824|    819|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 819, False: 0]
  ------------------
  825|    819|                            {
  826|    819|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 570, False: 249]
  ------------------
  827|    570|                                {
  828|    570|                                    return OpCode::CVTF2D;
  829|    570|                                }
  830|    249|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 249, False: 0]
  ------------------
  831|    249|                                {
  832|    249|                                    return OpCode::CVTF2I;
  833|    249|                                }
  834|    819|                            }
  835|      0|                            break;
  836|       |
  837|    873|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 873, False: 2.66k]
  ------------------
  838|    873|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 0, False: 3.54k]
  ------------------
  839|    873|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 873, False: 0]
  ------------------
  840|    873|                            {
  841|    873|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 637, False: 236]
  ------------------
  842|    637|                                {
  843|    637|                                    return OpCode::CVTI2D;
  844|    637|                                }
  845|    236|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 236, False: 0]
  ------------------
  846|    236|                                {
  847|    236|                                    return OpCode::CVTI2F;
  848|    236|                                }
  849|    873|                            }
  850|  3.54k|                    }
  851|  3.54k|                }
  852|  1.99k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 993, False: 1.00k]
  |  Branch (852:26): [True: 993, False: 1.00k]
  |  Branch (852:42): [True: 993, False: 0]
  |  Branch (852:58): [True: 993, False: 0]
  |  Branch (852:74): [True: 993, False: 0]
  ------------------
  853|  1.99k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 993, False: 0]
  |  Branch (853:42): [True: 993, False: 0]
  ------------------
  854|    993|                {
  855|    993|                    return OpCode::MULTUI;
  856|    993|                }
  857|  1.00k|                break;
  858|  5.53k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  7.04k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 7.04k, False: 949k]
  ------------------
  862|  7.04k|                char c1 = token[0];
  863|  7.04k|                char c2 = token[1];
  864|  7.04k|                char c3 = token[2];
  865|  7.04k|                char c4 = token[3];
  866|  7.04k|                char c5 = token[4];
  867|  7.04k|                char c6 = token[5];
  868|  7.04k|                char c7 = token[6];
  869|       |
  870|  7.04k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 5.91k, False: 1.12k]
  |  Branch (870:21): [True: 5.91k, False: 1.12k]
  |  Branch (870:37): [True: 5.91k, False: 0]
  |  Branch (870:53): [True: 5.91k, False: 0]
  ------------------
  871|  5.91k|                {
  872|  5.91k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 4.40k, False: 1.51k]
  |  Branch (872:25): [True: 4.40k, False: 1.51k]
  |  Branch (872:41): [True: 4.40k, False: 0]
  |  Branch (872:54): [True: 4.40k, False: 0]
  |  Branch (872:70): [True: 4.40k, False: 0]
  ------------------
  873|  4.40k|                    {
  874|  4.40k|                        return OpCode::MOVI2FP;
  875|  4.40k|                    }
  876|  1.51k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 1.51k, False: 0]
  |  Branch (876:30): [True: 1.51k, False: 0]
  |  Branch (876:46): [True: 1.51k, False: 0]
  |  Branch (876:62): [True: 1.51k, False: 0]
  |  Branch (876:75): [True: 1.51k, False: 0]
  ------------------
  877|  1.51k|                    {
  878|  1.51k|                        return OpCode::MOVFP2I;
  879|  1.51k|                    }
  880|  5.91k|                }
  881|  1.12k|                break;
  882|  7.04k|            }
  883|       |
  884|  70.4k|            default: {
  ------------------
  |  Branch (884:13): [True: 70.4k, False: 885k]
  ------------------
  885|  70.4k|                break;
  886|  7.04k|            }
  887|   956k|        }
  888|       |
  889|       |        // None found
  890|   271k|        return OpCode::NONE;
  891|   956k|    }
_ZN3dlx3iceEcc:
   17|  1.57M|    {
   18|  1.57M|        constexpr const char diff = 'a' - 'A';
   19|  1.57M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 1.20M, False: 377k]
  |  Branch (19:28): [True: 121k, False: 256k]
  ------------------
   20|  1.57M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  1.05M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  15.8k|    {
  193|  15.8k|        ParseError err;
  194|       |
  195|  15.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  15.8k|        err.m_LineNumber                           = line_number;
  197|  15.8k|        err.m_Column                               = column;
  198|  15.8k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  15.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  15.8k|        return err;
  202|  15.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  15.8k|    {
  207|  15.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  15.8k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  15.8k|                                                         actual_type);
  210|  15.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.49k|    {
  216|  1.49k|        ParseError err;
  217|       |
  218|  1.49k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.49k|        err.m_LineNumber        = line_number;
  220|  1.49k|        err.m_Column            = column;
  221|  1.49k|        err.invalid_number.text = text;
  222|       |
  223|  1.49k|        return err;
  224|  1.49k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.49k|    {
  228|  1.49k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.49k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.49k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     15|    {
  235|     15|        ParseError err;
  236|       |
  237|     15|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     15|        err.m_LineNumber = line_number;
  239|     15|        err.m_Column     = column;
  240|       |
  241|     15|        return err;
  242|     15|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     15|    {
  247|     15|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     15|                                                                     token.GetColumn().unsafe());
  249|     15|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   304k|    {
  255|   304k|        ParseError err;
  256|       |
  257|   304k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   304k|        err.m_LineNumber                   = line_number;
  259|   304k|        err.m_Column                       = column;
  260|   304k|        err.unexpected_token.expected_type = expected_type;
  261|   304k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   304k|        return err;
  264|   304k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   304k|    {
  269|   304k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   304k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   304k|                                                  token.GetType());
  272|   304k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|  8.33k|    {
  277|  8.33k|        ParseError err;
  278|       |
  279|  8.33k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|  8.33k|        err.m_LineNumber                   = line_number;
  281|  8.33k|        err.m_Column                       = column;
  282|  8.33k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|  8.33k|        return err;
  285|  8.33k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  3.15k|    {
  289|  3.15k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  3.15k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  3.15k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   174k|    {
  296|   174k|        ParseError err;
  297|       |
  298|   174k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   174k|        err.m_LineNumber                       = line_number;
  300|   174k|        err.m_Column                           = column;
  301|   174k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   174k|        return err;
  304|   174k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   174k|    {
  309|   174k|        return ConstructInvalidLabelIdentifierParseError(
  310|   174k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   174k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|  16.4k|    {
  317|  16.4k|        ParseError err;
  318|       |
  319|  16.4k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|  16.4k|        err.m_LineNumber                     = line_number;
  321|  16.4k|        err.m_Column                         = column;
  322|  16.4k|        err.label_already_defined.label_name = label_name;
  323|  16.4k|        err.label_already_defined.at_line    = at_line;
  324|  16.4k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|  16.4k|        return err;
  327|  16.4k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|  16.4k|    {
  332|  16.4k|        return ConstructLabelAlreadyDefinedParseError(
  333|  16.4k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|  16.4k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|  16.4k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   436k|    {
  340|   436k|        ParseError err;
  341|       |
  342|   436k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   436k|        err.m_LineNumber = line_number;
  344|   436k|        err.m_Column     = column;
  345|       |
  346|   436k|        return err;
  347|   436k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   436k|    {
  352|   436k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   436k|                                                        token.GetColumn().unsafe());
  354|   436k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  90.4k|    {
  360|  90.4k|        ParseError err;
  361|       |
  362|  90.4k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  90.4k|        err.m_LineNumber               = line_number;
  364|  90.4k|        err.m_Column                   = column;
  365|  90.4k|        err.too_few_arguments.required = required;
  366|  90.4k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  90.4k|        return err;
  369|  90.4k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  90.4k|    {
  374|  90.4k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  90.4k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  90.4k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  4.11k|    {
  381|  4.11k|        ParseError err;
  382|       |
  383|  4.11k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  4.11k|        err.m_LineNumber           = line_number;
  385|  4.11k|        err.m_Column               = column;
  386|  4.11k|        err.empty_label.label_name = label_name;
  387|       |
  388|  4.11k|        return err;
  389|  4.11k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  4.11k|    {
  393|  4.11k|        return ConstructEmptyLabelParseError(
  394|  4.11k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  4.11k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 3.33k, False: 776]
  ------------------
  396|  3.33k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  4.11k|                        token.GetText());
  398|  4.11k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|    448|    {
  403|    448|        ParseError err;
  404|       |
  405|    448|        err.m_Type       = ParseError::Type::TooManyComma;
  406|    448|        err.m_LineNumber = line_number;
  407|    448|        err.m_Column     = column;
  408|       |
  409|    448|        return err;
  410|    448|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|    448|    {
  414|    448|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|    448|                                               token.GetColumn().unsafe());
  416|    448|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  1.05M|    {
   19|  1.05M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  1.05M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  16.0k|    {
  182|  16.0k|        ParsedProgram program;
  183|       |
  184|  16.0k|        program.m_Tokens = tokens;
  185|       |
  186|  16.0k|        phi::boolean line_has_instruction{false};
  187|  16.0k|        phi::usize   label_count{0u};
  188|       |
  189|  2.42M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.40M, False: 16.0k]
  ------------------
  190|  2.40M|        {
  191|  2.40M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.40M|            switch (current_token.GetType())
  196|  2.40M|            {
  197|       |                // Ignore comments
  198|   258k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 258k, False: 2.14M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|   258k|                    break;
  201|       |
  202|  1.06M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.06M, False: 1.34M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.06M|                    line_has_instruction = false;
  205|  1.06M|                    break;
  206|       |
  207|   212k|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 212k, False: 2.19M]
  ------------------
  208|   212k|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 18.8k, False: 194k]
  ------------------
  209|  18.8k|                    {
  210|  18.8k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|  18.8k|                                current_token, Token::Type::NewLine));
  212|  18.8k|                        break;
  213|  18.8k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   194k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 158k, False: 35.3k]
  ------------------
  218|   158k|                    {
  219|   158k|                        program.AddParseError(
  220|   158k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   158k|                        break;
  222|   158k|                    }
  223|       |
  224|  35.3k|                    std::string_view label_name = current_token.GetText();
  225|  35.3k|                    label_name.remove_suffix(1);
  226|       |
  227|  35.3k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 5.18k, False: 30.1k]
  ------------------
  228|  5.18k|                    {
  229|  5.18k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|  5.18k|                                current_token.GetLineNumber().unsafe(),
  231|  5.18k|                                current_token.GetColumn().unsafe(), label_name));
  232|  5.18k|                        break;
  233|  5.18k|                    }
  234|       |
  235|  30.1k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 6.35k, False: 23.7k]
  ------------------
  236|  6.35k|                    {
  237|  6.35k|                        program.AddParseError(
  238|  6.35k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|  6.35k|                        break;
  240|  6.35k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|  23.7k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 16.4k, False: 7.37k]
  ------------------
  244|  16.4k|                    {
  245|       |                        // Find first defintions of label
  246|  16.4k|                        const Token* first_label_definition =
  247|  16.4k|                                tokens.find_first_token_if([&](const Token& t) {
  248|  16.4k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|  16.4k|                                    {
  250|  16.4k|                                        std::string_view token_label_name = t.GetText();
  251|  16.4k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  16.4k|                                        if (token_label_name == label_name)
  254|  16.4k|                                        {
  255|  16.4k|                                            return true;
  256|  16.4k|                                        }
  257|  16.4k|                                    }
  258|       |
  259|  16.4k|                                    return false;
  260|  16.4k|                                });
  261|       |
  262|  16.4k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|  16.4k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|  16.4k|                                current_token, *first_label_definition));
  266|  16.4k|                        break;
  267|  16.4k|                    }
  268|       |
  269|  7.37k|                    program.m_JumpData[label_name] =
  270|  7.37k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  7.37k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  7.37k|                    break;
  277|  23.7k|                }
  278|       |
  279|   643k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 643k, False: 1.76M]
  ------------------
  280|   643k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 436k, False: 207k]
  ------------------
  281|   436k|                    {
  282|   436k|                        program.AddParseError(
  283|   436k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   436k|                        break;
  285|   436k|                    }
  286|       |
  287|   207k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   207k|                    PHI_ASSERT(current_token.HasHint());
  291|   207k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   207k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   207k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   207k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   207k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   207k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   207k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   207k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   207k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   330k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 303k, False: 27.3k]
  ------------------
  313|   303k|                    {
  314|       |                        // Get next token
  315|   303k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 810, False: 302k]
  ------------------
  316|    810|                        {
  317|    810|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    810|                                    current_token, number_of_argument_required.unsafe(),
  319|    810|                                    argument_num.unsafe()));
  320|    810|                            break;
  321|    810|                        }
  322|       |
  323|   302k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   302k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 53.0k, False: 249k]
  ------------------
  327|  53.0k|                        {
  328|  53.0k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 448, False: 52.5k]
  ------------------
  329|    448|                            {
  330|    448|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|    448|                            }
  332|       |
  333|  53.0k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  53.0k|                            continue;
  336|  53.0k|                        }
  337|       |
  338|   249k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 89.6k, False: 159k]
  ------------------
  339|  89.6k|                        {
  340|  89.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  89.6k|                                    token, number_of_argument_required.unsafe(),
  342|  89.6k|                                    argument_num.unsafe()));
  343|  89.6k|                            break;
  344|  89.6k|                        }
  345|       |
  346|   159k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   159k|                                parse_instruction_argument(
  348|   159k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   159k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 89.5k, False: 70.1k]
  ------------------
  350|  89.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  89.5k|                            break;
  353|  89.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  70.1k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  70.1k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  70.1k|                        argument_num++;
  360|  70.1k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  70.1k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   207k|                    program.m_Instructions.emplace_back(instruction);
  368|   207k|                    line_has_instruction = true;
  369|   207k|                    break;
  370|   643k|                }
  371|       |
  372|   226k|                default:
  ------------------
  |  Branch (372:17): [True: 226k, False: 2.18M]
  ------------------
  373|   226k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   226k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 145k, False: 80.4k]
  ------------------
  375|   145k|                    {
  376|   145k|                        expected_token_type = Token::Type::NewLine;
  377|   145k|                    }
  378|       |
  379|   226k|                    program.AddParseError(
  380|   226k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   226k|                    break;
  382|  2.40M|            }
  383|  2.40M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  16.0k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 843, False: 15.1k]
  ------------------
  387|    843|        {
  388|  11.5k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 10.7k, False: 843]
  ------------------
  389|  10.7k|            {
  390|  10.7k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  10.7k|                const Token& token = *it;
  393|  10.7k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 4.11k, False: 6.62k]
  ------------------
  394|  4.11k|                {
  395|  4.11k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  4.11k|                    --label_count;
  397|  4.11k|                }
  398|  10.7k|            }
  399|    843|        }
  400|       |
  401|  16.0k|        return program;
  402|  16.0k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  16.0k|    {
  406|  16.0k|        TokenStream tokens = Tokenize(source);
  407|  16.0k|        return Parse(tokens);
  408|  16.0k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   159k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   159k|        switch (token.GetType())
   38|   159k|        {
   39|  6.70k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 6.70k, False: 152k]
  ------------------
   40|  6.70k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 2.74k, False: 3.95k]
  ------------------
   41|  6.70k|                                          ArgumentType::AddressDisplacement))
   42|  2.74k|                {
   43|  2.74k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  2.74k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  2.74k|                    return {};
   47|  2.74k|                }
   48|       |
   49|       |                // Get address displacement
   50|  3.95k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  3.95k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  3.95k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 15, False: 3.94k]
  ------------------
   55|     15|                {
   56|     15|                    program.AddParseError(
   57|     15|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     15|                    return {};
   59|     15|                }
   60|       |
   61|  3.94k|                auto         it           = tokens.current_position();
   62|  3.94k|                const Token& first_token  = tokens.consume();
   63|  3.94k|                const Token& second_token = tokens.consume();
   64|  3.94k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  3.94k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.94k, False: 0]
  ------------------
   67|  3.94k|                {
   68|  3.94k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.94k|                            first_token, Token::Type::OpenBracket));
   70|  3.94k|                    return {};
   71|  3.94k|                }
   72|       |
   73|       |                // Second token is the register
   74|      0|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 0, False: 0]
  ------------------
   75|      0|                {
   76|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|      0|                            second_token, Token::Type::RegisterInt));
   78|      0|                    return {};
   79|      0|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  37.5k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 37.5k, False: 122k]
  ------------------
   98|  37.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.85k, False: 35.7k]
  ------------------
   99|  1.85k|                {
  100|  1.85k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.85k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.85k|                    return {};
  103|  1.85k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  35.7k|                return ConstructInstructionArgumentRegisterInt(
  109|  35.7k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  37.5k|            }
  111|  27.9k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 27.9k, False: 131k]
  ------------------
  112|  27.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 5.71k, False: 22.2k]
  ------------------
  113|  5.71k|                {
  114|  5.71k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  5.71k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  5.71k|                    return {};
  117|  5.71k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|  22.2k|                return ConstructInstructionArgumentRegisterFloat(
  123|  22.2k|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  27.9k|            }
  125|  3.15k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 3.15k, False: 156k]
  ------------------
  126|  3.15k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  3.15k|                return {};
  129|  27.9k|            }
  130|  14.9k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 14.9k, False: 144k]
  ------------------
  131|       |                // Parse as Label
  132|  14.9k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 2.41k, False: 12.5k]
  ------------------
  133|  2.41k|                {
  134|  2.41k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  2.41k|                            token, expected_argument_type, ArgumentType::Label));
  136|  2.41k|                    return {};
  137|  2.41k|                }
  138|       |
  139|  12.5k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 12.5k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  12.5k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 9.26k, False: 3.30k]
  ------------------
  146|  9.26k|                {
  147|  9.26k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  9.26k|                    return {};
  149|  9.26k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  3.30k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  12.5k|            }
  155|  13.5k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 13.5k, False: 146k]
  ------------------
  156|  13.5k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 3.17k, False: 10.3k]
  ------------------
  157|  3.17k|                {
  158|  3.17k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  3.17k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  3.17k|                    return {};
  161|  3.17k|                }
  162|       |
  163|  10.3k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 8.86k, False: 1.49k]
  ------------------
  164|  8.86k|                {
  165|  8.86k|                    return ConstructInstructionArgumentImmediateValue(
  166|  8.86k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  8.86k|                }
  168|       |
  169|  1.49k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.49k|                return {};
  171|  10.3k|            }
  172|       |
  173|  55.7k|            default:
  ------------------
  |  Branch (173:13): [True: 55.7k, False: 103k]
  ------------------
  174|  55.7k|                program.AddParseError(
  175|  55.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  55.7k|                return {};
  177|   159k|        }
  178|   159k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|   803k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   803k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 86.4k, False: 717k]
  ------------------
  249|  86.4k|                                    {
  250|  86.4k|                                        std::string_view token_label_name = t.GetText();
  251|  86.4k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  86.4k|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 16.4k, False: 70.0k]
  ------------------
  254|  16.4k|                                        {
  255|  16.4k|                                            return true;
  256|  16.4k|                                        }
  257|  86.4k|                                    }
  258|       |
  259|   787k|                                    return false;
  260|   803k|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  5.65M|    {
   70|  5.65M|        PHI_ASSERT(id != IntRegisterID::None);
   71|  5.65M|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  5.65M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  5.65M|        return m_IntRegisters[id_value];
   76|  5.65M|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  6.59M|    {
   81|  6.59M|        PHI_ASSERT(id != IntRegisterID::None);
   82|  6.59M|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  6.59M|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  6.59M|        return m_IntRegisters[id_value];
   87|  6.59M|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|  4.66M|    {
   91|  4.66M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|  4.66M|                                             RegisterAccessType::Signed),
   93|  4.66M|                   "Mismatch for instruction access type");
   94|       |
   95|  4.66M|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|  4.66M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|  4.66M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|  4.66M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 2.88M, False: 1.78M]
  ------------------
  100|  4.66M|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 1.58M, False: 1.29M]
  ------------------
  101|  1.58M|        {
  102|  1.58M|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  1.58M|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|  1.58M|        }
  104|       |
  105|  4.66M|        return GetIntRegister(id).GetSignedValue();
  106|  4.66M|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  1.92M|    {
  110|  1.92M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  1.92M|                                             RegisterAccessType::Unsigned),
  112|  1.92M|                   "Mismatch for instruction access type");
  113|       |
  114|  1.92M|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  1.92M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  1.92M|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  1.92M|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 948k, False: 974k]
  ------------------
  119|  1.92M|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 414k, False: 534k]
  ------------------
  120|   414k|        {
  121|   414k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   414k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|   414k|        }
  123|       |
  124|  1.92M|        return GetIntRegister(id).GetUnsignedValue();
  125|  1.92M|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|  3.92M|    {
  129|  3.92M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|  3.92M|                                             RegisterAccessType::Signed),
  131|  3.92M|                   "Mismatch for instruction access type");
  132|       |
  133|  3.92M|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|  3.92M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 1.08M, False: 2.83M]
  ------------------
  136|  1.08M|        {
  137|  1.08M|            return;
  138|  1.08M|        }
  139|       |
  140|  2.83M|        reg.SetSignedValue(value);
  141|       |
  142|  2.83M|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|  2.83M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|  2.83M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|  2.83M|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  1.72M|    {
  150|  1.72M|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  1.72M|                                             RegisterAccessType::Unsigned),
  152|  1.72M|                   "Mismatch for instruction access type");
  153|       |
  154|  1.72M|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  1.72M|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 442k, False: 1.28M]
  ------------------
  157|   442k|        {
  158|   442k|            return;
  159|   442k|        }
  160|       |
  161|  1.28M|        reg.SetUnsignedValue(value);
  162|       |
  163|  1.28M|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  1.28M|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  1.28M|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  1.28M|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|  2.05M|    {
  171|  2.05M|        PHI_ASSERT(id != FloatRegisterID::None);
  172|  2.05M|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|  2.05M|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|  2.05M|        return m_FloatRegisters[id_value];
  177|  2.05M|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|   647k|    {
  182|   647k|        PHI_ASSERT(id != FloatRegisterID::None);
  183|   647k|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|   647k|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|   647k|        return m_FloatRegisters[id_value];
  188|   647k|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|   647k|    {
  192|   647k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|   647k|                                             RegisterAccessType::Float),
  194|   647k|                   "Mismatch for instruction access type");
  195|       |
  196|   647k|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|   647k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|   647k|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|   647k|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 632k, False: 14.6k]
  ------------------
  201|   647k|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 275k, False: 357k]
  ------------------
  202|   275k|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|   275k|        }
  207|       |
  208|   647k|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|   647k|        return reg.GetValue();
  211|   647k|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|   831k|    {
  215|   831k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|   831k|                                             RegisterAccessType::Double),
  217|   831k|                   "Mismatch for instruction access type");
  218|       |
  219|   831k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 34, False: 831k]
  ------------------
  220|     34|        {
  221|     34|            Raise(Exception::MisalignedRegisterAccess);
  222|     34|            return {0.0};
  223|     34|        }
  224|       |
  225|   831k|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|   831k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|   831k|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|   831k|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 810k, False: 20.8k]
  ------------------
  230|   831k|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 502k, False: 307k]
  ------------------
  231|   502k|        {
  232|   502k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|   502k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|   502k|        }
  234|       |
  235|   831k|        const FloatRegisterValueType register_value_type_high =
  236|   831k|                m_FloatRegistersValueTypes[id_value + 1u];
  237|   831k|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 810k, False: 20.8k]
  ------------------
  238|   831k|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 5.02k, False: 805k]
  ------------------
  239|  5.02k|        {
  240|  5.02k|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|  5.02k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|  5.02k|        }
  242|       |
  243|   831k|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|   831k|        const FloatRegister& second_reg =
  245|   831k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|   831k|        const float first_value  = first_reg.GetValue().unsafe();
  248|   831k|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|   831k|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|   831k|        const std::uint32_t first_value_bits =
  254|   831k|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|   831k|        const std::uint32_t second_value_bits =
  256|   831k|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|   831k|        std::uint64_t final_value_bits =
  259|   831k|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|   831k|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|   831k|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|   831k|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|   186k|    {
  268|   186k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|   186k|                                             RegisterAccessType::Float),
  270|   186k|                   "Mismatch for instruction access type");
  271|       |
  272|   186k|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|   186k|        reg.SetValue(value);
  275|       |
  276|   186k|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|   186k|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|   186k|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|   186k|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|   101k|    {
  284|   101k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|   101k|                                             RegisterAccessType::Double),
  286|   101k|                   "Mismatch for instruction access type");
  287|       |
  288|   101k|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 10, False: 101k]
  ------------------
  289|     10|        {
  290|     10|            Raise(Exception::MisalignedRegisterAccess);
  291|     10|            return;
  292|     10|        }
  293|       |
  294|   101k|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|   101k|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|   101k|        double              value_raw  = value.unsafe();
  298|   101k|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|   101k|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|   101k|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|   101k|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|   101k|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|   101k|        FloatRegister& first_reg = GetFloatRegister(id);
  307|   101k|        FloatRegister& second_reg =
  308|   101k|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|   101k|        first_reg.SetValue(first_value);
  311|   101k|        second_reg.SetValue(second_value);
  312|       |
  313|   101k|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|   101k|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|   101k|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|   101k|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|   101k|    }
_ZN3dlx9Processor7GetFPSREv:
  321|   507k|    {
  322|   507k|        return m_FPSR;
  323|   507k|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|  1.68M|    {
  327|  1.68M|        return m_FPSR;
  328|  1.68M|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|  1.68M|    {
  332|  1.68M|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|  1.68M|        return status_reg.Get();
  335|  1.68M|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|   507k|    {
  339|   507k|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|   507k|        status_reg.SetStatus(value);
  342|   507k|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  8.54M|    {
  346|  8.54M|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  8.54M|        inst.Execute(*this);
  349|  8.54M|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  16.0k|    {
  353|  16.0k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 13.9k, False: 2.10k]
  ------------------
  354|  13.9k|        {
  355|  13.9k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  13.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  13.9k|            return false;
  357|  13.9k|        }
  358|       |
  359|  2.10k|        m_CurrentProgram = &program;
  360|       |
  361|  2.10k|        m_ProgramCounter               = 0u;
  362|  2.10k|        m_Halted                       = false;
  363|  2.10k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  2.10k|        m_LastRaisedException          = Exception::None;
  365|  2.10k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  2.10k|        return true;
  368|  16.0k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  2.23M|    {
  373|  2.23M|        return m_CurrentProgram;
  374|  2.23M|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  8.54M|    {
  378|       |        // No nothing when no program is loaded
  379|  8.54M|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 8.54M]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  8.54M|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 234, False: 8.54M]
  ------------------
  386|    234|        {
  387|    234|            m_Halted                       = true;
  388|    234|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|    234|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  8.54M|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 234, False: 8.54M]
  ------------------
  393|    234|        {
  394|    234|            return;
  395|    234|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  8.54M|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  8.54M|        const auto& current_instruction =
  402|  8.54M|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  8.54M|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  8.54M|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 208, False: 8.53M]
  ------------------
  409|    208|        {
  410|    208|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    208|            return;
  412|    208|        }
  413|       |
  414|  8.53M|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  8.53M|        ++m_CurrentStepCount;
  417|       |
  418|  8.53M|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 1.66k, False: 8.53M]
  |  Branch (418:14): [True: 8.53M, False: 0]
  |  Branch (418:42): [True: 853, False: 8.53M]
  ------------------
  419|  8.53M|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 811, False: 8.53M]
  ------------------
  420|  1.66k|        {
  421|  1.66k|            m_Halted                       = true;
  422|  1.66k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|  1.66k|        }
  424|  8.53M|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  2.10k|    {
  428|       |        // Do nothing when no program is loaded
  429|  2.10k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 2.10k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  2.10k|        m_ProgramCounter               = 0u;
  435|  2.10k|        m_Halted                       = false;
  436|  2.10k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  2.10k|        m_LastRaisedException          = Exception::None;
  438|  2.10k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  8.54M|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 8.54M, False: 2.10k]
  ------------------
  441|  8.54M|        {
  442|  8.54M|            ExecuteStep();
  443|  8.54M|        }
  444|       |
  445|  2.10k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  2.10k|                   "RegisterAccessType was not reset correctly");
  447|  2.10k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  16.0k|    {
  464|  16.0k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 512k, False: 16.0k]
  ------------------
  465|   512k|        {
  466|   512k|            reg.SetSignedValue(0);
  467|   512k|        }
  468|       |
  469|  16.0k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 512k, False: 16.0k]
  ------------------
  470|   512k|        {
  471|   512k|            reg.SetValue(0.0f);
  472|   512k|        }
  473|       |
  474|  16.0k|        m_FPSR.SetStatus(false);
  475|  16.0k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  16.0k|    {
  479|  16.0k|        m_MemoryBlock.Clear();
  480|  16.0k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|  11.2k|    {
  488|  11.2k|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|  11.2k|        m_LastRaisedException = exception;
  491|       |
  492|  11.2k|        switch (exception)
  493|  11.2k|        {
  494|     18|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 18, False: 11.2k]
  ------------------
  495|     18|                m_Halted = true;
  496|     18|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|     18|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|     18|                return;
  498|      5|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 5, False: 11.2k]
  ------------------
  499|      5|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      5|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      5|                return;
  501|  10.9k|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 10.9k, False: 251]
  ------------------
  502|  10.9k|                DLX_WARN("Underflow");
  ------------------
  |  |    8|  10.9k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|  10.9k|                return;
  504|      3|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 3, False: 11.2k]
  ------------------
  505|      3|                m_Halted = true;
  506|      3|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      3|                return;
  508|     14|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 14, False: 11.2k]
  ------------------
  509|     14|                m_Halted = true;
  510|     14|                return;
  511|    105|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 105, False: 11.1k]
  ------------------
  512|    105|                m_Halted = true;
  513|    105|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    105|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    105|                return;
  515|     30|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 30, False: 11.1k]
  ------------------
  516|     30|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|     30|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|     30|                return;
  518|     32|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 32, False: 11.1k]
  ------------------
  519|     32|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|     32|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|     32|                m_Halted = true;
  521|     32|                return;
  522|     44|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 44, False: 11.1k]
  ------------------
  523|     44|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     44|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     44|                m_Halted = true;
  525|     44|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 11.2k]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|  11.2k|#endif
  531|  11.2k|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|     20|    {
  558|     20|        return m_MemoryBlock;
  559|     20|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|   361k|    {
  573|   361k|        return m_NextProgramCounter;
  574|   361k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  2.23M|    {
  578|  2.23M|        m_NextProgramCounter = new_npc;
  579|  2.23M|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  14.0M|    {
   36|  14.0M|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  14.0M|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  14.0M|        switch (expected_access)
   40|  14.0M|        {
   41|  4.85M|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 4.85M, False: 9.15M]
  ------------------
   42|  4.85M|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 14.0M]
  ------------------
   44|      0|                return false;
   45|   107k|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 107k, False: 13.9M]
  ------------------
   46|   107k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 53.5k, False: 53.5k]
  |  Branch (46:63): [True: 53.5k, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 14.0M]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|  16.6k|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 16.6k, False: 13.9M]
  ------------------
   51|  16.6k|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 8.34k, False: 8.34k]
  |  Branch (51:63): [True: 8.34k, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 14.0M]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  9.02M|            default:
  ------------------
  |  Branch (54:13): [True: 9.02M, False: 4.98M]
  ------------------
   55|  9.02M|                return expected_access == access;
   56|  14.0M|        }
   57|  14.0M|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  1.10M|    {
   14|  1.10M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 145k, False: 962k]
  ------------------
   15|   145k|        {
   16|   145k|            char first_char = token[0];
   17|   145k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 81.6k, False: 64.1k]
  |  Branch (17:38): [True: 6.12k, False: 57.9k]
  ------------------
   18|  87.7k|            {
   19|  87.7k|                char second_char = token[1];
   20|  87.7k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 84.7k, False: 3.05k]
  |  Branch (20:43): [True: 84.4k, False: 255]
  ------------------
   21|  84.4k|                {
   22|  84.4k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  84.4k|                }
   24|  87.7k|            }
   25|   145k|        }
   26|   962k|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 543k, False: 419k]
  ------------------
   27|   543k|        {
   28|   543k|            char first_char = token[0];
   29|   543k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 24.2k, False: 518k]
  |  Branch (29:38): [True: 11.9k, False: 506k]
  ------------------
   30|  36.2k|            {
   31|  36.2k|                char second_char = token[1];
   32|  36.2k|                char third_char  = token[2];
   33|       |
   34|  36.2k|                switch (second_char)
   35|  36.2k|                {
   36|  15.7k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 15.7k, False: 20.5k]
  ------------------
   37|  15.7k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 12.4k, False: 3.25k]
  |  Branch (37:50): [True: 10.7k, False: 1.73k]
  ------------------
   38|  10.7k|                        {
   39|  10.7k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  10.7k|                        }
   41|  4.99k|                        break;
   42|  15.7k|                    }
   43|  10.1k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 10.1k, False: 26.1k]
  ------------------
   44|  10.1k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 7.95k, False: 2.19k]
  |  Branch (44:50): [True: 7.66k, False: 288]
  ------------------
   45|  7.66k|                        {
   46|  7.66k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  7.66k|                        }
   48|  2.47k|                        break;
   49|  10.1k|                    }
   50|  5.75k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 5.75k, False: 30.5k]
  ------------------
   51|  5.75k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 3.80k, False: 1.95k]
  |  Branch (51:50): [True: 1.02k, False: 927]
  ------------------
   52|  4.83k|                        {
   53|  4.83k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  4.83k|                        }
   55|    927|                        break;
   56|  5.75k|                    }
   57|  4.63k|                    default: {
  ------------------
  |  Branch (57:21): [True: 4.63k, False: 31.6k]
  ------------------
   58|  4.63k|                        break;
   59|  5.75k|                    }
   60|  36.2k|                }
   61|  36.2k|            }
   62|   543k|        }
   63|       |
   64|  1.00M|        return IntRegisterID::None;
   65|  1.10M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.00M|    {
   69|  1.00M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 61.2k, False: 939k]
  ------------------
   70|  61.2k|        {
   71|  61.2k|            char first_char = token[0];
   72|  61.2k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 9.21k, False: 52.0k]
  |  Branch (72:38): [True: 861, False: 51.2k]
  ------------------
   73|  10.0k|            {
   74|  10.0k|                char second_char = token[1];
   75|  10.0k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 9.64k, False: 430]
  |  Branch (75:43): [True: 9.24k, False: 405]
  ------------------
   76|  9.24k|                {
   77|  9.24k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  9.24k|                }
   79|  10.0k|            }
   80|  61.2k|        }
   81|   939k|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 519k, False: 419k]
  ------------------
   82|   519k|        {
   83|   519k|            char first_char = token[0];
   84|   519k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 37.0k, False: 482k]
  |  Branch (84:38): [True: 4.74k, False: 478k]
  ------------------
   85|  41.7k|            {
   86|  41.7k|                char second_char = token[1];
   87|  41.7k|                char third_char  = token[2];
   88|       |
   89|  41.7k|                switch (second_char)
   90|  41.7k|                {
   91|  7.28k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 7.28k, False: 34.5k]
  ------------------
   92|  7.28k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 4.80k, False: 2.47k]
  |  Branch (92:50): [True: 4.68k, False: 121]
  ------------------
   93|  4.68k|                        {
   94|  4.68k|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|  4.68k|                        }
   96|  2.60k|                        break;
   97|  7.28k|                    }
   98|  31.5k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 31.5k, False: 10.2k]
  ------------------
   99|  31.5k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 30.5k, False: 987]
  |  Branch (99:50): [True: 29.8k, False: 755]
  ------------------
  100|  29.8k|                        {
  101|  29.8k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  29.8k|                        }
  103|  1.74k|                        break;
  104|  31.5k|                    }
  105|  1.74k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 662, False: 41.1k]
  ------------------
  106|    662|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 304, False: 358]
  |  Branch (106:50): [True: 208, False: 150]
  ------------------
  107|    512|                        {
  108|    512|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|    512|                        }
  110|    150|                        break;
  111|    662|                    }
  112|  2.26k|                    default: {
  ------------------
  |  Branch (112:21): [True: 2.26k, False: 39.5k]
  ------------------
  113|  2.26k|                        break;
  114|    662|                    }
  115|  41.7k|                }
  116|  41.7k|            }
  117|   519k|        }
  118|       |
  119|   956k|        return FloatRegisterID::None;
  120|  1.00M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.11M|    {
  124|  1.11M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 273k, False: 842k]
  ------------------
  125|   273k|        {
  126|   273k|            char c1 = token[0];
  127|   273k|            char c2 = token[1];
  128|   273k|            char c3 = token[2];
  129|   273k|            char c4 = token[3];
  130|       |
  131|   273k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 12.8k, False: 260k]
  |  Branch (131:34): [True: 616, False: 259k]
  |  Branch (131:49): [True: 12.6k, False: 876]
  |  Branch (131:62): [True: 497, False: 379]
  ------------------
  132|   273k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 12.4k, False: 645]
  |  Branch (132:34): [True: 246, False: 399]
  |  Branch (132:49): [True: 12.4k, False: 247]
  |  Branch (132:62): [True: 0, False: 247]
  ------------------
  133|   273k|        }
  134|       |
  135|   842k|        return false;
  136|  1.11M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|   523k|    {
   12|   523k|        m_Value = value;
   13|   523k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|  1.68M|    {
   17|  1.68M|        return m_Value;
   18|  1.68M|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  1.84M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   878k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  4.24M|    {
   41|  4.24M|        return m_Type;
   42|  4.24M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  1.27M|    {
   51|  1.27M|        return m_LineNumber;
   52|  1.27M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  1.06M|    {
   56|  1.06M|        return m_Column;
   57|  1.06M|    }
_ZNK3dlx5Token7GetTextEv:
   65|   551k|    {
   66|   551k|        return m_Text;
   67|   551k|    }
_ZNK3dlx5Token7HasHintEv:
   79|   221k|    {
   80|   221k|        return m_HasHint;
   81|   221k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   278k|    {
   85|   278k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   278k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   278k|                   m_Type == Type::ImmediateInteger);
   88|   278k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   278k|        return m_Hint;
   91|   278k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  16.0k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  16.0k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  16.0k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  3.95k|    {
   51|  3.95k|        auto it = m_Iterator;
   52|  15.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 11.8k, False: 3.94k]
  ------------------
   53|  11.8k|        {
   54|  11.8k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 15, False: 11.8k]
  ------------------
   55|     15|            {
   56|     15|                return false;
   57|     15|            }
   58|  11.8k|        }
   59|       |
   60|  3.94k|        return true;
   61|  3.95k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.72M|    {
   65|  2.72M|        return m_Iterator != m_Tokens.end();
   66|  2.72M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.72M|    {
   70|  2.72M|        return m_Iterator == m_Tokens.end();
   71|  2.72M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.72M|    {
   85|  2.72M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.72M|        return *m_Iterator++;
   91|  2.72M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  3.94k|    {
  164|  3.94k|        return m_Iterator;
  165|  3.94k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|    843|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|    843|        return m_Tokens.rbegin();
  224|    843|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  10.7k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  10.7k|        return m_Tokens.rend();
  233|  10.7k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  16.0k|    {
   63|  16.0k|        TokenStream tokens;
   64|       |
   65|  16.0k|        std::string_view current_token;
   66|       |
   67|  16.0k|        phi::u64 current_line_number{1u};
   68|  16.0k|        phi::u64 current_column{1u};
   69|  16.0k|        phi::u64 token_begin{0u};
   70|       |
   71|  16.0k|        phi::boolean parsing_comment{false};
   72|       |
   73|  6.84M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 6.83M, False: 16.0k]
  ------------------
   74|  6.83M|        {
   75|  6.83M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  6.83M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.16M, False: 5.66M]
  ------------------
   78|  1.16M|            {
   79|  1.16M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 675k, False: 490k]
  ------------------
   80|   675k|                {
   81|       |                    // Skip empty lines
   82|   675k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   675k|                                        current_line_number, current_column);
   84|       |
   85|   675k|                    parsing_comment = false;
   86|   675k|                    current_line_number += 1u;
   87|   675k|                    current_column = 1u;
   88|   675k|                    continue;
   89|   675k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   490k|                tokens.emplace_back(
   93|   490k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   490k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   490k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   490k|                                    current_line_number, current_column);
   98|       |
   99|   490k|                current_token   = std::string_view{};
  100|   490k|                parsing_comment = false;
  101|   490k|                current_line_number += 1u;
  102|   490k|                current_column = 0u;
  103|   490k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  5.66M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 5.22k, False: 5.66M]
  |  Branch (105:34): [True: 269k, False: 5.39M]
  ------------------
  106|   275k|            {
  107|   275k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 252k, False: 22.9k]
  ------------------
  108|   252k|                {
  109|   252k|                    token_begin = i;
  110|   252k|                }
  111|  22.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 20.8k, False: 2.10k]
  ------------------
  112|  20.8k|                {
  113|  20.8k|                    tokens.emplace_back(ParseToken(
  114|  20.8k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  20.8k|                            current_line_number, current_column - current_token.length()));
  116|  20.8k|                    token_begin   = i;
  117|  20.8k|                    current_token = std::string_view{};
  118|  20.8k|                }
  119|       |
  120|   275k|                parsing_comment = true;
  121|   275k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   275k|            }
  123|  5.39M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 624k, False: 4.76M]
  ------------------
  124|   624k|            {
  125|       |                // simply append the character
  126|   624k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   624k|            }
  128|  4.76M|            else
  129|  4.76M|            {
  130|       |                // Not parsing a comment
  131|  4.76M|                switch (c)
  132|  4.76M|                {
  133|   693k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 693k, False: 4.07M]
  ------------------
  134|   701k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 7.07k, False: 4.76M]
  ------------------
  135|   714k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 13.4k, False: 4.75M]
  ------------------
  136|   714k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 6.76k, False: 707k]
  ------------------
  137|  6.76k|                        {
  138|  6.76k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|  6.76k|                            continue;
  141|  6.76k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   707k|                        tokens.emplace_back(ParseToken(
  145|   707k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   707k|                                current_line_number, current_column - current_token.length()));
  147|   707k|                        current_token = std::string_view{};
  148|   707k|                        break;
  149|  57.0k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 57.0k, False: 4.71M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  57.0k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 44.5k, False: 12.4k]
  ------------------
  152|  44.5k|                        {
  153|  44.5k|                            current_token =
  154|  44.5k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  44.5k|                            tokens.emplace_back(ParseToken(
  156|  44.5k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  44.5k|                                    current_line_number,
  158|  44.5k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  44.5k|                            current_token = std::string_view{};
  161|  44.5k|                        }
  162|  12.4k|                        else
  163|  12.4k|                        {
  164|       |                            // Orphan colon
  165|  12.4k|                            token_begin = i;
  166|       |
  167|  12.4k|                            tokens.emplace_back(Token::Type::Colon,
  168|  12.4k|                                                source.substr(token_begin.unsafe(), 1),
  169|  12.4k|                                                current_line_number, current_column);
  170|  12.4k|                        }
  171|  57.0k|                        break;
  172|   129k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 129k, False: 4.63M]
  ------------------
  173|   136k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 7.27k, False: 4.76M]
  ------------------
  174|   141k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 4.43k, False: 4.76M]
  ------------------
  175|   141k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 132k, False: 8.72k]
  ------------------
  176|   132k|                        {
  177|   132k|                            tokens.emplace_back(ParseToken(
  178|   132k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   132k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   132k|                            current_token = std::string_view{};
  182|   132k|                        }
  183|       |
  184|   141k|                        Token::Type type;
  185|   141k|                        switch (c)
  186|   141k|                        {
  187|   129k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 129k, False: 11.7k]
  ------------------
  188|   129k|                                type = Token::Type::Comma;
  189|   129k|                                break;
  190|  7.27k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 7.27k, False: 133k]
  ------------------
  191|  7.27k|                                type = Token::Type::OpenBracket;
  192|  7.27k|                                break;
  193|  4.43k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 4.43k, False: 136k]
  ------------------
  194|  4.43k|                                type = Token::Type::ClosingBracket;
  195|  4.43k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 141k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   141k|#endif
  201|   141k|                        }
  202|       |
  203|   141k|                        token_begin = i;
  204|       |
  205|   141k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   141k|                                            current_line_number, current_column);
  207|   141k|                        break;
  208|       |
  209|  3.85M|                    default:
  ------------------
  |  Branch (209:21): [True: 3.85M, False: 912k]
  ------------------
  210|  3.85M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.12M, False: 2.72M]
  ------------------
  211|  1.12M|                        {
  212|  1.12M|                            token_begin = i;
  213|  1.12M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  3.85M|                        current_token =
  217|  3.85M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  4.76M|                }
  219|  4.76M|            }
  220|       |
  221|  6.15M|            current_column += 1u;
  222|  6.15M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  16.0k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 5.95k, False: 10.0k]
  ------------------
  226|  5.95k|        {
  227|  5.95k|            tokens.emplace_back(
  228|  5.95k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  5.95k|                               current_line_number, current_column - current_token.length()));
  230|  5.95k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  16.0k|        tokens.finalize();
  234|       |
  235|  16.0k|        return tokens;
  236|  16.0k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.40M|    {
   11|  1.40M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 22.3k, False: 1.37M]
  |  Branch (11:35): [True: 22.1k, False: 184]
  ------------------
   12|  22.1k|        {
   13|  22.1k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  22.1k|            if (number)
  ------------------
  |  Branch (15:17): [True: 12.8k, False: 9.29k]
  ------------------
   16|  12.8k|            {
   17|  12.8k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  12.8k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  12.8k|            }
   20|       |
   21|  9.29k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  22.1k|        }
   23|       |
   24|  1.37M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 3.67k, False: 1.37M]
  |  Branch (24:35): [True: 269k, False: 1.10M]
  ------------------
   25|   273k|        {
   26|   273k|            return {Token::Type::Comment, token, line_number, column};
   27|   273k|        }
   28|       |
   29|  1.10M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 33.4k, False: 1.07M]
  ------------------
   30|  33.4k|        {
   31|  33.4k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  33.4k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  33.4k|        }
   34|       |
   35|  1.07M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 12.4k, False: 1.06M]
  ------------------
   36|  12.4k|        {
   37|  12.4k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  12.4k|        }
   39|       |
   40|  1.06M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 104k, False: 955k]
  ------------------
   41|   104k|        {
   42|   104k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|   104k|                    static_cast<std::uint32_t>(id)};
   44|   104k|        }
   45|       |
   46|   955k|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 43.5k, False: 911k]
  ------------------
   47|  43.5k|        {
   48|  43.5k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  43.5k|                    static_cast<std::uint32_t>(id)};
   50|  43.5k|        }
   51|       |
   52|   911k|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 683k, False: 228k]
  ------------------
   53|   683k|        {
   54|   683k|            return {Token::Type::OpCode, token, line_number, column,
   55|   683k|                    static_cast<std::uint32_t>(opcode)};
   56|   683k|        }
   57|       |
   58|   228k|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|   911k|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  16.0k|    {
   53|       |        // Constants
   54|  16.0k|        constexpr std::uint8_t number_of_opcodes =
   55|  16.0k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  16.0k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  16.0k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  16.0k|        std::string ret;
   60|       |
   61|  1.99M|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 1.98M, False: 15.8k]
  ------------------
   62|  1.98M|        {
   63|  1.98M|            std::uint8_t current_value = data[index++];
   64|       |
   65|  1.98M|            switch (current_value)
   66|  1.98M|            {
   67|       |                // OpCode
   68|   664k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 664k, False: 1.31M]
  ------------------
   69|       |                    // Has one more value
   70|   664k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 663k, False: 1.26k]
  ------------------
   71|   663k|                    {
   72|   663k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   663k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   663k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 45, False: 663k]
  ------------------
   77|     45|                        {
   78|     45|                            return detail::ErrorString;
   79|     45|                        }
   80|   663k|                    }
   81|   664k|                    break;
   82|   664k|                }
   83|       |
   84|       |                // Int Register
   85|   664k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 109k, False: 1.87M]
  ------------------
   86|       |                    // Has one more value
   87|   109k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 108k, False: 223]
  ------------------
   88|   108k|                    {
   89|   108k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|   108k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|   108k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 8, False: 108k]
  ------------------
   93|      8|                        {
   94|      8|                            return detail::ErrorString;
   95|      8|                        }
   96|   108k|                    }
   97|   109k|                    break;
   98|   109k|                }
   99|       |
  100|       |                // Float register
  101|   109k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 45.8k, False: 1.93M]
  ------------------
  102|       |                    // Has one more value
  103|  45.8k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 45.5k, False: 247]
  ------------------
  104|  45.5k|                    {
  105|  45.5k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  45.5k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  45.5k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 3, False: 45.5k]
  ------------------
  109|      3|                        {
  110|      3|                            return detail::ErrorString;
  111|      3|                        }
  112|  45.5k|                    }
  113|  45.8k|                    break;
  114|  45.8k|                }
  115|       |
  116|       |                // Floating point status register
  117|  45.8k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 13.1k, False: 1.96M]
  ------------------
  118|  13.1k|                    ret += "FPSR";
  119|  13.1k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 9, False: 13.1k]
  ------------------
  120|      9|                    {
  121|      9|                        return detail::ErrorString;
  122|      9|                    }
  123|       |
  124|  13.1k|                    break;
  125|  13.1k|                }
  126|       |
  127|       |                // Immediate integer
  128|  35.9k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 35.9k, False: 1.94M]
  ------------------
  129|  35.9k|                    ret += "#";
  130|  35.9k|                    [[fallthrough]];
  131|  35.9k|                }
  132|       |
  133|       |                // Integer literal
  134|   148k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 112k, False: 1.86M]
  ------------------
  135|   148k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|   148k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 147k, False: 376]
  ------------------
  138|   147k|                    {
  139|   147k|                        std::int16_t value = 0;
  140|       |
  141|   443k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 295k, False: 147k]
  ------------------
  142|   295k|                        {
  143|   295k|                            value <<= 8;
  144|   295k|                            value &= data[index++];
  145|   295k|                        }
  146|       |
  147|   147k|                        ret += std::to_string(value);
  148|   147k|                    }
  149|   148k|                    break;
  150|  35.9k|                }
  151|       |
  152|       |                // Label
  153|  46.6k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 46.6k, False: 1.93M]
  ------------------
  154|  46.6k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  46.6k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 46.6k, False: 30]
  ------------------
  157|  46.6k|                    {
  158|  46.6k|                        std::string label_name = "lbl_";
  159|       |
  160|   278k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 232k, False: 46.6k]
  ------------------
  161|   232k|                        {
  162|   232k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|   232k|                            label_name += c;
  165|   232k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  46.6k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 45.4k, False: 1.12k]
  |  Branch (168:45): [True: 37.5k, False: 7.96k]
  ------------------
  169|  37.5k|                        {
  170|  37.5k|                            label_name += ':';
  171|  37.5k|                            ret += label_name;
  172|  37.5k|                        }
  173|  9.08k|                        else
  174|  9.08k|                        {
  175|  9.08k|                            ret += label_name;
  176|  9.08k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 7, False: 9.08k]
  ------------------
  177|      7|                            {
  178|      7|                                return detail::ErrorString;
  179|      7|                            }
  180|  9.08k|                        }
  181|  46.6k|                    }
  182|  46.6k|                    break;
  183|  46.6k|                }
  184|       |
  185|       |                // Newline
  186|   681k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 681k, False: 1.30M]
  ------------------
  187|   681k|                    ret += '\n';
  188|   681k|                    break;
  189|  46.6k|                }
  190|       |
  191|       |                // Comment
  192|   273k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 273k, False: 1.70M]
  ------------------
  193|   273k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|   273k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 272k, False: 247]
  ------------------
  196|   272k|                    {
  197|   272k|                        std::string comment = "; ";
  198|       |
  199|  1.63M|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 1.35M, False: 272k]
  ------------------
  200|  1.35M|                        {
  201|  1.35M|                            comment += static_cast<char>(data[index++]);
  202|  1.35M|                        }
  203|       |
  204|   272k|                        ret += comment + '\n';
  205|   272k|                    }
  206|   273k|                    break;
  207|  46.6k|                }
  208|       |
  209|       |                // Ignore
  210|     60|                default:
  ------------------
  |  Branch (210:17): [True: 60, False: 1.98M]
  ------------------
  211|     60|                    return detail::ErrorString;
  212|  1.98M|            }
  213|  1.98M|        }
  214|       |
  215|  15.8k|        return ret;
  216|  16.0k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   839k|        {
   20|   839k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 835k, False: 4.67k]
  ------------------
   21|   835k|            {
   22|   835k|                std::uint8_t val = data[index++];
   23|   835k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 705k, False: 130k]
  ------------------
   24|   705k|                {
   25|   705k|                    text += ' ';
   26|   705k|                }
   27|   130k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 130k, False: 72]
  ------------------
   28|   130k|                {
   29|   130k|                    text += ',';
   30|   130k|                }
   31|     72|                else
   32|     72|                {
   33|     72|                    return false;
   34|     72|                }
   35|   835k|            }
   36|       |
   37|   839k|            return true;
   38|   839k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|   232k|        {
   42|   232k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 186k, False: 45.4k]
  ------------------
   43|   186k|            {
   44|   186k|                return '_';
   45|   186k|            }
   46|       |
   47|  45.4k|            return c;
   48|   232k|        }

LLVMFuzzerTestOneInput:
   12|  16.0k|{
   13|  16.0k|    static dlx::Processor processor;
   14|       |
   15|  16.0k|    std::string source = fuzz::ParseAsStrucutedDLXCode(data, size);
   16|       |
   17|       |    // Parse it
   18|  16.0k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   19|       |
   20|       |    // Clear registers and memory
   21|  16.0k|    processor.ClearRegisters();
   22|  16.0k|    processor.ClearMemory();
   23|       |
   24|       |    // Execute
   25|  16.0k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (25:9): [True: 2.10k, False: 13.9k]
  ------------------
   26|  2.10k|    {
   27|  2.10k|        processor.ExecuteCurrentProgram();
   28|  2.10k|    }
   29|       |
   30|  16.0k|    return 0;
   31|  16.0k|}


_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   685k|        {
  169|   685k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   685k|            switch (index.unsafe())
  172|   685k|            {
  173|   307k|                case 0:
  ------------------
  |  Branch (173:17): [True: 307k, False: 377k]
  ------------------
  174|   307k|                    return m_Arg1Type;
  175|       |
  176|   190k|                case 1:
  ------------------
  |  Branch (176:17): [True: 190k, False: 495k]
  ------------------
  177|   190k|                    return m_Arg2Type;
  178|       |
  179|   187k|                case 2:
  ------------------
  |  Branch (179:17): [True: 187k, False: 497k]
  ------------------
  180|   187k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 685k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   685k|#endif
  187|   685k|            }
  188|   685k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   185k|        {
  195|   185k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   185k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 177k, False: 7.94k]
  ------------------
  199|   177k|            {
  200|   177k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   177k|            }
  202|   185k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 117k, False: 67.6k]
  ------------------
  203|   117k|            {
  204|   117k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   117k|            }
  206|   185k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 63.9k, False: 121k]
  ------------------
  207|  63.9k|            {
  208|  63.9k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  63.9k|            }
  210|       |
  211|   185k|            return number_of_argument_required;
  212|   185k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|   120k|        {
  216|   120k|            return m_RegisterAccessType;
  217|   120k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   185k|        {
  221|   185k|            return m_Executor;
  222|   185k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   449k|    {
   38|   449k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   449k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   449k|                                         static_cast<underlying_t>(rhs));
   42|   449k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   449k|    {
   55|   449k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   449k|        return static_cast<underlying_t>(type & test) != 0;
   58|   449k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   218k|    {
  204|   218k|        switch (value)
  205|   218k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   121k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   121k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 121k, False: 97.7k]
  |  |  |  |  ------------------
  |  |  |  |  208|   121k|        return #name;
  |  |  ------------------
  |  |   16|   121k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  11.0k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11.0k, False: 207k]
  |  |  |  |  ------------------
  |  |  |  |  208|  11.0k|        return #name;
  |  |  ------------------
  |  |   17|  11.0k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    601|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 601, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    601|        return #name;
  |  |  ------------------
  |  |   18|  5.56k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  5.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.56k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.56k|        return #name;
  |  |  ------------------
  |  |   19|  5.56k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    574|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 574, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    574|        return #name;
  |  |  ------------------
  |  |   20|  2.98k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.98k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.98k|        return #name;
  |  |  ------------------
  |  |   21|  2.98k|                                                                                                   \
  |  |   22|  2.98k|    /* Sub */                                                                                      \
  |  |   23|  2.98k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.59k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.59k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.59k|        return #name;
  |  |  ------------------
  |  |   24|  4.05k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.05k, False: 214k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.05k|        return #name;
  |  |  ------------------
  |  |   25|  5.65k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.65k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.65k|        return #name;
  |  |  ------------------
  |  |   26|  5.65k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.06k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.06k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.06k|        return #name;
  |  |  ------------------
  |  |   27|  1.84k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.84k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.84k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.84k|        return #name;
  |  |  ------------------
  |  |   28|  1.84k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    797|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 797, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    797|        return #name;
  |  |  ------------------
  |  |   29|    797|                                                                                                   \
  |  |   30|    797|    /* Multiplication */                                                                           \
  |  |   31|    797|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    337|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 337, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    337|        return #name;
  |  |  ------------------
  |  |   32|    337|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 106, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    106|        return #name;
  |  |  ------------------
  |  |   33|  1.75k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.75k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.75k|        return #name;
  |  |  ------------------
  |  |   34|  1.75k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    335|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 335, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    335|        return #name;
  |  |  ------------------
  |  |   35|  1.23k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |   36|  1.23k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    534|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 534, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    534|        return #name;
  |  |  ------------------
  |  |   37|    534|                                                                                                   \
  |  |   38|    534|    /* Division */                                                                                 \
  |  |   39|    534|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     43|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 43, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     43|        return #name;
  |  |  ------------------
  |  |   40|     43|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     37|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 37, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     37|        return #name;
  |  |  ------------------
  |  |   41|    903|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    903|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 903, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    903|        return #name;
  |  |  ------------------
  |  |   42|    903|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|     82|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 82, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     82|        return #name;
  |  |  ------------------
  |  |   43|    201|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    201|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 201, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    201|        return #name;
  |  |  ------------------
  |  |   44|  1.07k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.07k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.07k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.07k|        return #name;
  |  |  ------------------
  |  |   45|  1.07k|                                                                                                   \
  |  |   46|  1.07k|    /* Shift left (logical) */                                                                     \
  |  |   47|  2.96k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.96k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.96k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.96k|        return #name;
  |  |  ------------------
  |  |   48|  2.96k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    252|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 252, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    252|        return #name;
  |  |  ------------------
  |  |   49|    252|                                                                                                   \
  |  |   50|    252|    /* Shift right (logical) */                                                                    \
  |  |   51|    252|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    130|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 130, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    130|        return #name;
  |  |  ------------------
  |  |   52|    171|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    171|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 171, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    171|        return #name;
  |  |  ------------------
  |  |   53|    171|                                                                                                   \
  |  |   54|    171|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    171|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |   56|    861|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    861|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 861, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    861|        return #name;
  |  |  ------------------
  |  |   57|    861|                                                                                                   \
  |  |   58|    861|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    861|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    304|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 304, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    304|        return #name;
  |  |  ------------------
  |  |   60|    731|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    731|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 731, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    731|        return #name;
  |  |  ------------------
  |  |   61|    731|                                                                                                   \
  |  |   62|    731|    /* Logic */                                                                                    \
  |  |   63|    731|                                                                                                   \
  |  |   64|    731|    /* And */                                                                                      \
  |  |   65|  3.48k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  3.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.48k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.48k|        return #name;
  |  |  ------------------
  |  |   66|  3.48k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    516|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 516, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    516|        return #name;
  |  |  ------------------
  |  |   67|    516|                                                                                                   \
  |  |   68|    516|    /* Or */                                                                                       \
  |  |   69|  1.25k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.25k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.25k|        return #name;
  |  |  ------------------
  |  |   70|  1.25k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    286|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 286, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    286|        return #name;
  |  |  ------------------
  |  |   71|    286|                                                                                                   \
  |  |   72|    286|    /* XOR */                                                                                      \
  |  |   73|    286|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |   74|    352|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    352|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 352, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    352|        return #name;
  |  |  ------------------
  |  |   75|    352|                                                                                                   \
  |  |   76|    352|    /* Set conditionals */                                                                         \
  |  |   77|    352|                                                                                                   \
  |  |   78|    352|    /* Less than */                                                                                \
  |  |   79|    673|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    673|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 673, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    673|        return #name;
  |  |  ------------------
  |  |   80|    673|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    260|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 260, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    260|        return #name;
  |  |  ------------------
  |  |   81|    370|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    370|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 370, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    370|        return #name;
  |  |  ------------------
  |  |   82|    825|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    825|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 825, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    825|        return #name;
  |  |  ------------------
  |  |   83|    825|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    656|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 656, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    656|        return #name;
  |  |  ------------------
  |  |   84|  2.30k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.30k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.30k|        return #name;
  |  |  ------------------
  |  |   85|  2.30k|                                                                                                   \
  |  |   86|  2.30k|    /* Greater than */                                                                             \
  |  |   87|  2.30k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    649|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 649, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    649|        return #name;
  |  |  ------------------
  |  |   88|    649|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    634|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 634, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    634|        return #name;
  |  |  ------------------
  |  |   89|    634|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    245|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 245, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    245|        return #name;
  |  |  ------------------
  |  |   90|    245|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    200|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 200, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    200|        return #name;
  |  |  ------------------
  |  |   91|    200|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    169|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 169, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    169|        return #name;
  |  |  ------------------
  |  |   92|  1.64k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.64k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.64k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.64k|        return #name;
  |  |  ------------------
  |  |   93|  1.64k|                                                                                                   \
  |  |   94|  1.64k|    /* Less than or equal */                                                                       \
  |  |   95|  1.64k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    924|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 924, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    924|        return #name;
  |  |  ------------------
  |  |   96|    924|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |   97|    108|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    108|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 108, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    108|        return #name;
  |  |  ------------------
  |  |   98|    753|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    753|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 753, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    753|        return #name;
  |  |  ------------------
  |  |   99|    753|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     36|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 36, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     36|        return #name;
  |  |  ------------------
  |  |  100|  1.22k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.22k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.22k|        return #name;
  |  |  ------------------
  |  |  101|  1.22k|                                                                                                   \
  |  |  102|  1.22k|    /* Greater than or equal */                                                                    \
  |  |  103|  1.22k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     62|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 62, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     62|        return #name;
  |  |  ------------------
  |  |  104|  3.78k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.78k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.78k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.78k|        return #name;
  |  |  ------------------
  |  |  105|  3.78k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.54k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.54k|        return #name;
  |  |  ------------------
  |  |  106|  1.54k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    963|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 963, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    963|        return #name;
  |  |  ------------------
  |  |  107|    963|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     62|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 62, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     62|        return #name;
  |  |  ------------------
  |  |  108|    349|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    349|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 349, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    349|        return #name;
  |  |  ------------------
  |  |  109|    349|                                                                                                   \
  |  |  110|    349|    /* Equal */                                                                                    \
  |  |  111|    862|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    862|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 862, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    862|        return #name;
  |  |  ------------------
  |  |  112|    862|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    729|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 729, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    729|        return #name;
  |  |  ------------------
  |  |  113|    729|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    541|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 541, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    541|        return #name;
  |  |  ------------------
  |  |  114|    541|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    502|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 502, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    502|        return #name;
  |  |  ------------------
  |  |  115|  1.93k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.93k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.93k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.93k|        return #name;
  |  |  ------------------
  |  |  116|  1.93k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    375|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 375, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    375|        return #name;
  |  |  ------------------
  |  |  117|    375|                                                                                                   \
  |  |  118|    375|    /* Not equal */                                                                                \
  |  |  119|    375|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     57|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 57, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     57|        return #name;
  |  |  ------------------
  |  |  120|     57|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     24|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 24, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     24|        return #name;
  |  |  ------------------
  |  |  121|    224|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    224|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 224, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    224|        return #name;
  |  |  ------------------
  |  |  122|    224|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    184|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 184, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    184|        return #name;
  |  |  ------------------
  |  |  123|    958|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    958|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 958, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    958|        return #name;
  |  |  ------------------
  |  |  124|    958|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    103|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 103, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    103|        return #name;
  |  |  ------------------
  |  |  125|    103|                                                                                                   \
  |  |  126|    103|    /* Conditional branching */                                                                    \
  |  |  127|  3.38k|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.38k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.38k|        return #name;
  |  |  ------------------
  |  |  128|  3.38k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    122|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 122, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    122|        return #name;
  |  |  ------------------
  |  |  129|    218|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    218|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 218, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    218|        return #name;
  |  |  ------------------
  |  |  130|    296|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    296|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 296, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    296|        return #name;
  |  |  ------------------
  |  |  131|    296|                                                                                                   \
  |  |  132|    296|    /* Unconditional branching */                                                                  \
  |  |  133|    296|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|     26|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 26, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     26|        return #name;
  |  |  ------------------
  |  |  134|     45|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     45|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 45, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     45|        return #name;
  |  |  ------------------
  |  |  135|    153|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    153|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 153, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    153|        return #name;
  |  |  ------------------
  |  |  136|  3.48k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.48k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.48k|        return #name;
  |  |  ------------------
  |  |  137|  3.48k|                                                                                                   \
  |  |  138|  3.48k|    /* Loading data */                                                                             \
  |  |  139|  3.48k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    862|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 862, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    862|        return #name;
  |  |  ------------------
  |  |  140|    862|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     59|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 59, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     59|        return #name;
  |  |  ------------------
  |  |  141|    935|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    935|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 935, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|    935|        return #name;
  |  |  ------------------
  |  |  142|    935|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 144, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    144|        return #name;
  |  |  ------------------
  |  |  143|    144|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     57|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 57, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     57|        return #name;
  |  |  ------------------
  |  |  144|     57|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      8|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 8, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|      8|        return #name;
  |  |  ------------------
  |  |  145|    147|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 147, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    147|        return #name;
  |  |  ------------------
  |  |  146|    147|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     38|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 38, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     38|        return #name;
  |  |  ------------------
  |  |  147|    176|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    176|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 176, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    176|        return #name;
  |  |  ------------------
  |  |  148|    176|                                                                                                   \
  |  |  149|    176|    /* Storing data */                                                                             \
  |  |  150|    282|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    282|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 282, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    282|        return #name;
  |  |  ------------------
  |  |  151|    282|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    132|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 132, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    132|        return #name;
  |  |  ------------------
  |  |  152|    147|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    147|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 147, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    147|        return #name;
  |  |  ------------------
  |  |  153|    820|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    820|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 820, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    820|        return #name;
  |  |  ------------------
  |  |  154|    820|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     53|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 53, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     53|        return #name;
  |  |  ------------------
  |  |  155|    448|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    448|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 448, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    448|        return #name;
  |  |  ------------------
  |  |  156|    448|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    309|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 309, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    309|        return #name;
  |  |  ------------------
  |  |  157|    309|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    187|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 187, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    187|        return #name;
  |  |  ------------------
  |  |  158|    187|                                                                                                   \
  |  |  159|    187|    /* Moving data */                                                                              \
  |  |  160|    187|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    126|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 126, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    126|        return #name;
  |  |  ------------------
  |  |  161|    237|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    237|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 237, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    237|        return #name;
  |  |  ------------------
  |  |  162|    237|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    109|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 109, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    109|        return #name;
  |  |  ------------------
  |  |  163|  2.77k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  2.77k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.77k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.77k|        return #name;
  |  |  ------------------
  |  |  164|  2.77k|                                                                                                   \
  |  |  165|  2.77k|    /* Converting data */                                                                          \
  |  |  166|  2.77k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     64|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 64, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     64|        return #name;
  |  |  ------------------
  |  |  167|     64|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     33|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 33, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     33|        return #name;
  |  |  ------------------
  |  |  168|    124|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    124|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 124, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    124|        return #name;
  |  |  ------------------
  |  |  169|    202|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    202|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 202, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    202|        return #name;
  |  |  ------------------
  |  |  170|    202|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     21|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 21, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|     21|        return #name;
  |  |  ------------------
  |  |  171|    427|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    427|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 427, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    427|        return #name;
  |  |  ------------------
  |  |  172|    427|                                                                                                   \
  |  |  173|    427|    /* Other */                                                                                    \
  |  |  174|    427|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    320|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 320, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    320|        return #name;
  |  |  ------------------
  |  |  175|    543|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    543|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 543, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    543|        return #name;
  |  |  ------------------
  |  |  176|  1.23k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 218k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   218k|        }
  217|   218k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  1.31M|    {
   32|  1.31M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 22.9k, False: 1.29M]
  ------------------
   33|  22.9k|        {
   34|  22.9k|            return true;
   35|  22.9k|        }
   36|       |
   37|  1.29M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 14.1k, False: 1.27M]
  ------------------
   38|  14.1k|        {
   39|  14.1k|            return true;
   40|  14.1k|        }
   41|       |
   42|  1.27M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 195k, False: 1.08M]
  ------------------
   43|   195k|        {
   44|   195k|            return true;
   45|   195k|        }
   46|       |
   47|  1.08M|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 3.42k, False: 1.07M]
  ------------------
   48|  3.42k|        {
   49|  3.42k|            return true;
   50|  3.42k|        }
   51|       |
   52|  1.07M|        return false;
   53|  1.08M|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|  1.07M|    {
   57|  1.07M|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 1.07M]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|  1.07M|        const char first_char = token.at(0);
   63|       |
   64|  1.07M|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 304k, False: 772k]
  ------------------
   65|   304k|        {
   66|   304k|            return phi::is_alpha(first_char);
   67|   304k|        }
   68|       |
   69|   772k|        phi::boolean just_under_scores = (first_char == '_');
   70|   772k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 298k, False: 474k]
  |  Branch (70:15): [True: 464k, False: 308k]
  |  Branch (70:44): [True: 10.7k, False: 298k]
  ------------------
   71|   298k|        {
   72|   298k|            return false;
   73|   298k|        }
   74|       |
   75|  1.67M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 1.47M, False: 204k]
  ------------------
   76|  1.47M|        {
   77|  1.47M|            const char c{token.at(index)};
   78|       |
   79|  1.47M|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 1.17M, False: 300k]
  ------------------
   80|  1.17M|            {
   81|  1.17M|                just_under_scores = false;
   82|  1.17M|            }
   83|   300k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 30.4k, False: 270k]
  ------------------
   84|  30.4k|            {
   85|  30.4k|                continue;
   86|  30.4k|            }
   87|   270k|            else
   88|   270k|            {
   89|   270k|                return false;
   90|   270k|            }
   91|  1.47M|        }
   92|       |
   93|   204k|        return !just_under_scores;
   94|   474k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  4.19M|    {
  101|  4.19M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 4.19M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  4.19M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 577k, False: 3.61M]
  ------------------
  107|   577k|        {
  108|   577k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 39.2k, False: 538k]
  ------------------
  109|  39.2k|            {
  110|  39.2k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  39.2k|            }
  112|       |
  113|   538k|            return {};
  114|   577k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  3.61M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 23.3k, False: 3.58M]
  ------------------
  118|  23.3k|        {
  119|  23.3k|            return {};
  120|  23.3k|        }
  121|       |
  122|  3.58M|        std::int32_t number{0};
  123|  3.58M|        phi::boolean is_negative{false};
  124|  3.58M|        phi::boolean starts_with_zero{false};
  125|  3.58M|        phi::boolean parsing_binary{false};
  126|  3.58M|        phi::boolean parsing_octal{false};
  127|  3.58M|        phi::boolean parsing_hexadecimal{false};
  128|  3.58M|        phi::boolean parsed_something{false};
  129|  3.58M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  3.94M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 3.92M, False: 25.5k]
  ------------------
  134|  3.92M|        {
  135|  3.92M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  3.92M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 3.58M, False: 332k]
  ------------------
  139|  3.58M|            {
  140|  3.58M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 9.92k, False: 3.57M]
  ------------------
  141|  9.92k|                {
  142|  9.92k|                    continue;
  143|  9.92k|                }
  144|       |
  145|  3.57M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 23.1k, False: 3.55M]
  ------------------
  146|  23.1k|                {
  147|  23.1k|                    is_negative = true;
  148|  23.1k|                    continue;
  149|  23.1k|                }
  150|       |
  151|  3.55M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 56.3k, False: 3.50M]
  ------------------
  152|  56.3k|                {
  153|  56.3k|                    starts_with_zero = true;
  154|  56.3k|                    continue;
  155|  56.3k|                }
  156|       |
  157|  3.50M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 20.0k, False: 3.47M]
  ------------------
  158|  20.0k|                {
  159|  20.0k|                    return {};
  160|  20.0k|                }
  161|  3.50M|            }
  162|       |
  163|       |            // Second character
  164|  3.81M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 146k, False: 3.66M]
  ------------------
  165|   146k|            {
  166|   146k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 56.3k, False: 89.8k]
  ------------------
  167|  56.3k|                {
  168|       |                    // Binary
  169|  56.3k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 3.31k, False: 53.0k]
  |  Branch (169:37): [True: 8.74k, False: 44.3k]
  ------------------
  170|  12.0k|                    {
  171|  12.0k|                        parsing_binary = true;
  172|  12.0k|                        continue;
  173|  12.0k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  44.3k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 7.56k, False: 36.7k]
  |  Branch (176:37): [True: 5.95k, False: 30.8k]
  ------------------
  177|  13.5k|                    {
  178|  13.5k|                        parsing_hexadecimal = true;
  179|  13.5k|                        continue;
  180|  13.5k|                    }
  181|       |
  182|       |                    // Octal
  183|  30.8k|                    parsing_octal = true;
  184|  30.8k|                }
  185|   146k|            }
  186|       |
  187|       |            // Handle seperators
  188|  3.78M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 12.7k, False: 3.77M]
  ------------------
  189|  12.7k|            {
  190|  12.7k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 2.36k, False: 10.4k]
  ------------------
  191|  2.36k|                {
  192|  2.36k|                    return {};
  193|  2.36k|                }
  194|       |
  195|  10.4k|                parsed_separator = true;
  196|  10.4k|                continue;
  197|  12.7k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  3.77M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 58.2k, False: 3.71M]
  |  Branch (200:32): [True: 2.62k, False: 55.5k]
  ------------------
  201|  2.62k|            {
  202|       |                // Would underflow
  203|  2.62k|                return {};
  204|  2.62k|            }
  205|  3.77M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 3.71M, False: 55.5k]
  |  Branch (205:17): [True: 8.78k, False: 3.76M]
  |  Branch (205:33): [True: 8.78k, False: 3.70M]
  ------------------
  206|  8.78k|            {
  207|       |                // Would overflow
  208|  8.78k|                return {};
  209|  8.78k|            }
  210|       |
  211|  3.76M|            parsed_separator = false;
  212|  3.76M|            parsed_something = true;
  213|       |
  214|  3.76M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 18.5k, False: 3.74M]
  ------------------
  215|  18.5k|            {
  216|  18.5k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 7.97k, False: 10.5k]
  ------------------
  217|  7.97k|                {
  218|  7.97k|                    return {};
  219|  7.97k|                }
  220|       |
  221|  10.5k|                number <<= 1;
  222|  10.5k|                number |= (c - '0');
  223|  10.5k|            }
  224|  3.74M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 78.2k, False: 3.66M]
  ------------------
  225|  78.2k|            {
  226|  78.2k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 28.6k, False: 49.6k]
  ------------------
  227|  28.6k|                {
  228|  28.6k|                    return {};
  229|  28.6k|                }
  230|       |
  231|  49.6k|                number <<= 3;
  232|  49.6k|                number |= (c - '0');
  233|  49.6k|            }
  234|  3.66M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 43.2k, False: 3.62M]
  ------------------
  235|  43.2k|            {
  236|  43.2k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 5.67k, False: 37.5k]
  ------------------
  237|  5.67k|                {
  238|  5.67k|                    return {};
  239|  5.67k|                }
  240|       |
  241|  37.5k|                number <<= 4;
  242|  37.5k|                number |= phi::hex_digit_value(c).unsafe();
  243|  37.5k|            }
  244|  3.62M|            else
  245|  3.62M|            {
  246|  3.62M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 3.47M, False: 142k]
  ------------------
  247|  3.47M|                {
  248|  3.47M|                    return {};
  249|  3.47M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   142k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 78.0k, False: 64.7k]
  |  Branch (252:36): [True: 8.04k, False: 70.0k]
  ------------------
  253|  8.04k|                {
  254|  8.04k|                    return {};
  255|  8.04k|                }
  256|       |
  257|   134k|                number *= 10;
  258|   134k|                number += (c - '0');
  259|   134k|            }
  260|  3.76M|        }
  261|       |
  262|  25.5k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 23.2k, False: 2.24k]
  ------------------
  263|  23.2k|        {
  264|       |            // Check for over/underflow
  265|  23.2k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 8.99k, False: 14.2k]
  |  Branch (265:32): [True: 4.19k, False: 4.79k]
  ------------------
  266|  4.19k|            {
  267|       |                // Would underflow
  268|  4.19k|                return {};
  269|  4.19k|            }
  270|  19.0k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 14.2k, False: 4.79k]
  |  Branch (270:17): [True: 2.26k, False: 16.8k]
  |  Branch (270:33): [True: 2.26k, False: 12.0k]
  ------------------
  271|  2.26k|            {
  272|       |                // Would overflow
  273|  2.26k|                return {};
  274|  2.26k|            }
  275|       |
  276|  16.8k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 4.79k, False: 12.0k]
  ------------------
  277|  4.79k|            {
  278|  4.79k|                return static_cast<std::int16_t>(-number);
  279|  4.79k|            }
  280|       |
  281|  12.0k|            return static_cast<std::int16_t>(number);
  282|  16.8k|        }
  283|       |
  284|  2.24k|        return {};
  285|  25.5k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  47.9k|    {
   96|  47.9k|        switch (value)
   97|  47.9k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  13.3k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  13.3k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13.3k, False: 34.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  13.3k|        return #name;
  |  |  ------------------
  |  |   14|  18.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  18.7k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 18.7k, False: 29.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  18.7k|        return #name;
  |  |  ------------------
  |  |   15|  18.7k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     47|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 47, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     47|        return #name;
  |  |  ------------------
  |  |   16|  3.45k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  3.45k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.45k, False: 44.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.45k|        return #name;
  |  |  ------------------
  |  |   17|  3.45k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    505|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 505, False: 47.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|    505|        return #name;
  |  |  ------------------
  |  |   18|    505|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   19|    869|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    869|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 869, False: 47.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|    869|        return #name;
  |  |  ------------------
  |  |   20|    869|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     43|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 43, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     43|        return #name;
  |  |  ------------------
  |  |   21|    207|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    207|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 207, False: 47.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    207|        return #name;
  |  |  ------------------
  |  |   22|    207|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|     83|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 83, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     83|        return #name;
  |  |  ------------------
  |  |   23|    636|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    636|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 636, False: 47.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    636|        return #name;
  |  |  ------------------
  |  |   24|    636|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    190|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 190, False: 47.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    190|        return #name;
  |  |  ------------------
  |  |   25|    190|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|    125|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 125, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    125|        return #name;
  |  |  ------------------
  |  |   26|    172|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    172|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 172, False: 47.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|    172|        return #name;
  |  |  ------------------
  |  |   27|    172|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     49|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 49, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     49|        return #name;
  |  |  ------------------
  |  |   28|     49|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|     26|        return #name;
  |  |  ------------------
  |  |   29|  3.83k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.83k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.83k, False: 44.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.83k|        return #name;
  |  |  ------------------
  |  |   30|  3.83k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    776|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 776, False: 47.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    776|        return #name;
  |  |  ------------------
  |  |   31|    776|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 19, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|     19|        return #name;
  |  |  ------------------
  |  |   32|  1.48k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.48k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.48k, False: 46.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.48k|        return #name;
  |  |  ------------------
  |  |   33|  1.48k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     37|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 37, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     37|        return #name;
  |  |  ------------------
  |  |   34|     37|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|      3|        return #name;
  |  |  ------------------
  |  |   35|    539|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    539|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 539, False: 47.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|    539|        return #name;
  |  |  ------------------
  |  |   36|    539|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|     19|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 19, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|     19|        return #name;
  |  |  ------------------
  |  |   37|     79|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     79|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 79, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     79|        return #name;
  |  |  ------------------
  |  |   38|     79|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     21|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 21, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|     21|        return #name;
  |  |  ------------------
  |  |   39|     78|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     78|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 78, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     78|        return #name;
  |  |  ------------------
  |  |   40|     78|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|     75|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 75, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     75|        return #name;
  |  |  ------------------
  |  |   41|     75|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15, False: 47.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|     15|        return #name;
  |  |  ------------------
  |  |   42|     82|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     82|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 82, False: 47.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|     82|        return #name;
  |  |  ------------------
  |  |   43|  2.06k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.06k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.06k, False: 45.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.06k|        return #name;
  |  |  ------------------
  |  |   44|  2.06k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    232|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 232, False: 47.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|    232|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 47.9k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  47.9k|        }
  109|  47.9k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  5.93k|    {
  131|  5.93k|        switch (value)
  132|  5.93k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.84k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.84k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.84k, False: 2.08k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.84k|        return #name;
  |  |  ------------------
  |  |   48|  3.84k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    155|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 155, False: 5.77k]
  |  |  |  |  ------------------
  |  |  |  |  135|    155|        return #name;
  |  |  ------------------
  |  |   49|    155|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   50|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   52|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     46|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 46, False: 5.88k]
  |  |  |  |  ------------------
  |  |  |  |  135|     46|        return #name;
  |  |  ------------------
  |  |   53|     46|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   54|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   55|     50|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|     50|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 50, False: 5.88k]
  |  |  |  |  ------------------
  |  |  |  |  135|     50|        return #name;
  |  |  ------------------
  |  |   56|     50|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 5.93k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   57|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 5.90k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   58|    568|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|    568|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 568, False: 5.36k]
  |  |  |  |  ------------------
  |  |  |  |  135|    568|        return #name;
  |  |  ------------------
  |  |   59|    568|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   60|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 5.91k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   61|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   62|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   63|    633|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    633|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 633, False: 5.29k]
  |  |  |  |  ------------------
  |  |  |  |  135|    633|        return #name;
  |  |  ------------------
  |  |   64|    633|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   65|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   66|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   67|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 5.91k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   68|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 5.91k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   69|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   70|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   71|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|     12|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 12, False: 5.91k]
  |  |  |  |  ------------------
  |  |  |  |  135|     12|        return #name;
  |  |  ------------------
  |  |   72|     12|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   73|     78|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|     78|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 78, False: 5.85k]
  |  |  |  |  ------------------
  |  |  |  |  135|     78|        return #name;
  |  |  ------------------
  |  |   74|     78|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     16|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 16, False: 5.91k]
  |  |  |  |  ------------------
  |  |  |  |  135|     16|        return #name;
  |  |  ------------------
  |  |   75|     16|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   76|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 5.92k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   77|    133|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|    133|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 133, False: 5.79k]
  |  |  |  |  ------------------
  |  |  |  |  135|    133|        return #name;
  |  |  ------------------
  |  |   78|    269|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    269|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 269, False: 5.66k]
  |  |  |  |  ------------------
  |  |  |  |  135|    269|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 5.93k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  5.93k|        }
  144|  5.93k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   322k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   322k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 7.48M, False: 0]
  ------------------
   64|  7.48M|            {
   65|  7.48M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 322k, False: 7.16M]
  ------------------
   66|   322k|                {
   67|   322k|                    return &token;
   68|   322k|                }
   69|  7.48M|            }
   70|       |
   71|      0|            return nullptr;
   72|   322k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  2.41M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  2.41M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  2.41M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  4.26M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  4.26M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  4.26M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|  1.52M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.52M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.52M|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  3.09M|    {
   11|  3.09M|        m_Value = val;
   12|  3.09M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|    139|    {
   16|    139|        return m_Value;
   17|    139|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   185k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  21.5k|    {
   24|  21.5k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  21.5k|        switch (argument_number.unsafe())
   27|  21.5k|        {
   28|  18.3k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 18.3k, False: 3.23k]
  ------------------
   29|  18.3k|                m_Arg1 = argument;
   30|  18.3k|                break;
   31|  2.42k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 2.42k, False: 19.1k]
  ------------------
   32|  2.42k|                m_Arg2 = argument;
   33|  2.42k|                break;
   34|    809|            case 2u:
  ------------------
  |  Branch (34:13): [True: 809, False: 20.7k]
  ------------------
   35|    809|                m_Arg3 = argument;
   36|    809|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 21.5k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  21.5k|#endif
   41|  21.5k|        }
   42|  21.5k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|   120k|    {
   83|   120k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|   120k|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|   120k|    {
   88|   120k|        return m_Info;
   89|   120k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   578k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|   725k|    {
   27|   725k|        return m_Type;
   28|   725k|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  60.4k|    {
   78|  60.4k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  60.4k|        return register_int;
   81|  60.4k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|    158|    {
   86|    158|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|    158|        return register_float;
   89|    158|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|     55|    {
   94|     55|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|     55|        return immediate_value;
   97|     55|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  60.2k|    {
  110|  60.2k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  60.2k|        return label;
  113|  60.2k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  6.37k|    {
  174|  6.37k|        InstructionArgument arg;
  175|  6.37k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  6.37k|        arg.register_int.register_id = id;
  177|  6.37k|        return arg;
  178|  6.37k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    497|    {
  183|    497|        InstructionArgument arg;
  184|    497|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    497|        arg.register_float.register_id = id;
  186|    497|        return arg;
  187|    497|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  1.12k|    {
  192|  1.12k|        InstructionArgument arg;
  193|  1.12k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  1.12k|        arg.immediate_value.signed_value = value;
  195|  1.12k|        return arg;
  196|  1.12k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  13.5k|    {
  211|  13.5k|        InstructionArgument arg;
  212|  13.5k|        arg.m_Type           = ArgumentType::Label;
  213|  13.5k|        arg.label.label_name = label_name;
  214|  13.5k|        return arg;
  215|  13.5k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|     27|        {
  357|     27|            const auto& dest_reg = arg1.AsRegisterInt();
  358|     27|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|     27|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|     27|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|     27|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|     27|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|     27|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|      2|        {
  370|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  372|      2|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|      2|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|      2|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|      8|        {
  382|      8|            const auto& dest_reg = arg1.AsRegisterInt();
  383|      8|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|      8|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|      8|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|      8|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|      8|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|      8|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|      2|        {
  395|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  397|      2|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|      2|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|      2|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|      1|        {
  407|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|      1|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|      1|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|      1|        {
  422|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|      1|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|      1|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|     13|        {
  437|     13|            const auto& dest_reg = arg1.AsRegisterInt();
  438|     13|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|     13|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|     13|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|     13|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|     13|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|     13|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|      2|        {
  450|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  452|      2|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|      2|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|      2|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|      4|        {
  462|      4|            const auto& dest_reg = arg1.AsRegisterInt();
  463|      4|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|      4|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|      4|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|      4|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|      4|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|      4|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|      2|        {
  475|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  477|      2|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|      2|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|      2|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|      2|        {
  487|      2|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|      2|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|      2|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|      2|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|      2|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|      2|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|      2|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|      2|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|      2|        {
  502|      2|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|      2|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|      2|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|      2|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|      2|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|      2|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|      2|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|      2|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|      3|        {
  517|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  518|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|      3|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|      3|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|      2|        {
  530|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  532|      2|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|      2|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|      2|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|      5|        {
  542|      5|            const auto& dest_reg = arg1.AsRegisterInt();
  543|      5|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|      5|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|      5|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|      5|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|      5|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|      5|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|      2|        {
  555|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  557|      2|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|      2|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|      2|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|      1|        {
  567|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|      1|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|      1|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|      1|        {
  582|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|      1|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|      3|        {
  597|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  598|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|      3|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|      3|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      2|        {
  610|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      2|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      2|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|      3|        {
  622|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  623|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|      3|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|      3|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|      3|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|      3|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      2|        {
  635|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      2|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      2|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      2|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      2|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      2|        {
  668|      2|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      2|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      2|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      2|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      2|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      2|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 2, False: 0]
  ------------------
  676|      2|            {
  677|      2|                processor.Raise(Exception::DivideByZero);
  678|      2|                return;
  679|      2|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|      3|        {
  689|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  690|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|      3|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|      3|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|      2|        {
  702|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  704|      2|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|      2|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|      2|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|      2|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|      2|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|      3|        {
  715|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  716|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|      3|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|      3|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|      2|        {
  728|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  730|      2|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|      2|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|      2|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|      2|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|      2|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|      3|        {
  741|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  742|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|      3|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|      3|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|      2|        {
  754|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  756|      2|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|      2|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|      2|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|      2|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|      2|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|      4|        {
  767|      4|            const auto& dest_reg = arg1.AsRegisterInt();
  768|      4|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|      4|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|      4|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|      4|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|      4|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|      4|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|      2|        {
  780|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  782|      2|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|      2|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|      2|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|      2|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|      2|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|      3|        {
  793|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|      3|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|      3|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|      2|        {
  807|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  809|      2|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|      2|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|      2|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|      2|        {
  820|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  821|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|      2|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|      2|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|      2|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|      2|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|      2|        {
  834|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  836|      2|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|      2|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|      2|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|      3|        {
  847|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  848|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|      3|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|      3|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|      3|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|      3|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|      2|        {
  861|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  863|      2|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|      2|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|      2|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|      2|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|      2|        {
  874|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  875|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|      2|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 0, False: 2]
  ------------------
  882|       |
  883|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|      2|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|      2|        {
  889|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  891|      2|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|      2|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 2]
  ------------------
  896|       |
  897|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|      2|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|      2|        {
  903|      2|            const auto& dest_reg = arg1.AsRegisterInt();
  904|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|      2|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|      2|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|      2|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 0, False: 2]
  ------------------
  911|       |
  912|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|      2|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|      2|        {
  918|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  920|      2|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|      2|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|      2|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 2]
  ------------------
  925|       |
  926|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|      2|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|      3|        {
  932|      3|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|      3|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|      3|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|      3|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|      3|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|      3|            processor.SetFPSRValue(new_value);
  941|      3|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|      5|        {
  946|      5|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|      5|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|      5|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|      5|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|      5|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|      5|            processor.SetFPSRValue(new_value);
  955|      5|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|      3|        {
  960|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  961|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|      3|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 3]
  ------------------
  968|       |
  969|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|      3|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|      2|        {
  975|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|      2|            const auto& src_reg   = arg2.AsRegisterInt();
  977|      2|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|      2|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 0, False: 2]
  ------------------
  982|       |
  983|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|      2|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|      3|        {
  989|      3|            const auto& dest_reg = arg1.AsRegisterInt();
  990|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|      3|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|      3|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|      3|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 3]
  ------------------
  997|       |
  998|      3|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|      3|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|      2|        {
 1004|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|      2|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|      2|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 2]
  ------------------
 1011|       |
 1012|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|      2|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      3|        {
 1018|      3|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      3|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      3|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      3|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      3|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      3|            processor.SetFPSRValue(new_value);
 1027|      3|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      5|        {
 1032|      5|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      5|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      5|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      5|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      5|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      5|            processor.SetFPSRValue(new_value);
 1041|      5|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|      3|        {
 1046|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|      3|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 3, False: 0]
  ------------------
 1054|       |
 1055|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|      3|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|      2|        {
 1061|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|      2|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 2, False: 0]
  ------------------
 1068|       |
 1069|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|      2|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|      3|        {
 1075|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|      3|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|      3|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|      3|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 3, False: 0]
  ------------------
 1083|       |
 1084|      3|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|      3|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|      2|        {
 1090|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|      2|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|      2|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 2, False: 0]
  ------------------
 1097|       |
 1098|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|      2|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|      3|        {
 1104|      3|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|      3|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|      3|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|      3|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|      3|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|      3|            processor.SetFPSRValue(new_value);
 1113|      3|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|      4|        {
 1118|      4|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|      4|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|      4|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|      4|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|      4|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|      4|            processor.SetFPSRValue(new_value);
 1127|      4|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|      2|        {
 1132|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|      2|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 2, False: 0]
  ------------------
 1140|       |
 1141|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|      2|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|      2|        {
 1147|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|      2|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 2, False: 0]
  ------------------
 1154|       |
 1155|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|      2|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|      3|        {
 1161|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|      3|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|      3|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|      3|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 3, False: 0]
  ------------------
 1169|       |
 1170|      3|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|      3|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|      2|        {
 1176|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|      2|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|      2|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 2, False: 0]
  ------------------
 1183|       |
 1184|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|      2|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|      2|        {
 1190|      2|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|      2|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|      2|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|      2|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|      2|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|      2|            processor.SetFPSRValue(new_value);
 1199|      2|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|      4|        {
 1204|      4|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|      4|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|      4|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|      4|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|      4|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|      4|            processor.SetFPSRValue(new_value);
 1213|      4|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|      3|        {
 1218|      3|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|      3|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|      3|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|      3|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|      3|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|      3|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 3, False: 0]
  ------------------
 1226|       |
 1227|      3|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|      3|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|      2|        {
 1233|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|      2|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 2, False: 0]
  ------------------
 1240|       |
 1241|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|      2|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|      4|        {
 1247|      4|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|      4|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|      4|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|      4|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|      4|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|      4|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 4, False: 0]
  ------------------
 1255|       |
 1256|      4|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|      4|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|      2|        {
 1262|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|      2|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|      2|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 2, False: 0]
  ------------------
 1269|       |
 1270|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|      2|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|      2|        {
 1276|      2|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|      2|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|      2|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|      2|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|      2|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|      2|            processor.SetFPSRValue(new_value);
 1285|      2|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|      1|        {
 1290|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|      1|            processor.SetFPSRValue(new_value);
 1299|      1|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|      2|        {
 1304|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|      2|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|      2|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|      2|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 0, False: 2]
  ------------------
 1312|       |
 1313|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|      2|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|      2|        {
 1319|      2|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|      2|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|      2|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|      2|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|      2|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 2]
  ------------------
 1326|       |
 1327|      2|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|      2|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|      2|        {
 1333|      2|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|      2|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|      2|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|      2|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|      2|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|      2|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 0, False: 2]
  ------------------
 1341|       |
 1342|      2|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|      2|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|      1|        {
 1348|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|      1|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 0, False: 1]
  ------------------
 1355|       |
 1356|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|      3|        {
 1362|      3|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|      3|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|      3|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|      3|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|      3|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|      3|            processor.SetFPSRValue(new_value);
 1371|      3|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|      2|        {
 1376|      2|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|      2|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|      2|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|      2|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|      2|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|      2|            processor.SetFPSRValue(new_value);
 1385|      2|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|      1|        {
 1390|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|      1|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|      1|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 1, False: 0]
  ------------------
 1396|      1|            {
 1397|      1|                JumpToLabel(processor, jump_label.label_name);
 1398|      1|            }
 1399|      1|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      1|        {
 1404|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      1|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      1|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 1]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|     69|        {
 1418|     69|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|     69|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|     69|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 69]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|     69|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      5|        {
 1431|      5|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      5|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      5|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 5, False: 0]
  ------------------
 1436|      5|            {
 1437|      5|                JumpToLabel(processor, jump_label.label_name);
 1438|      5|            }
 1439|      5|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  60.1k|        {
 1444|  60.1k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  60.1k|            JumpToLabel(processor, jump_label.label_name);
 1447|  60.1k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  30.0k|        {
 1452|  30.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  30.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  30.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      3|        {
 1460|      3|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      3|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      3|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      3|            JumpToLabel(processor, jump_label.label_name);
 1466|      3|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|  30.0k|        {
 1471|  30.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|  30.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|  30.0k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|  30.0k|            JumpToRegister(processor, jump_register.register_id);
 1477|  30.0k|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      1|        {
 1523|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 1]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      1|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      1|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 1, False: 0]
  ------------------
 1539|      1|            {
 1540|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      1|                return;
 1543|      1|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      1|        {
 1553|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 1]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      1|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      1|            auto optional_value =
 1566|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 1, False: 0]
  ------------------
 1569|      1|            {
 1570|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      1|                return;
 1573|      1|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|      2|        {
 1945|      2|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|      2|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|      2|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|      2|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|      2|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|      3|        {
 1956|      3|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|      3|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|      3|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|      3|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|      3|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|      1|        {
 1967|      1|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|      1|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|      1|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|      1|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|      1|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|      5|        {
 1994|      5|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|      5|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|      5|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|      5|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|      5|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|      3|        {
 2005|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|      3|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|      3|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|      3|            const float        converted_value_float =
 2011|      3|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|      3|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|      3|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|      3|        {
 2019|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|      3|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|      3|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|      3|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|      3|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|      3|        {
 2031|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|      3|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|      3|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|      3|            const float        converted_value_float =
 2037|      3|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|      3|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|      3|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|      3|        {
 2045|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|      3|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|      3|            const std::int32_t converted_value_int =
 2050|      3|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|      3|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|      3|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|      3|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|      3|        {
 2059|      3|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|      3|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|      3|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|      3|            const std::int32_t converted_value_int =
 2064|      3|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|      3|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|      3|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|      3|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      2|        {
 2073|      2|            processor.Raise(Exception::Trap);
 2074|      2|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      5|        {
 2079|      5|            processor.Raise(Exception::Halt);
 2080|      5|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|    459|        {
 2085|       |            /* Do nothing */
 2086|    459|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|     29|    {
  175|     29|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|     29|        SafeWriteInteger(processor, dest_reg, res);
  178|     29|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|     49|    {
  130|     49|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|     49|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|     49|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 49]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|     49|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 49]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|     49|        PHI_ASSERT(value >= min);
  149|     49|        PHI_ASSERT(value <= max);
  150|       |
  151|     49|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|     49|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|     10|    {
  183|     10|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|     10|        SafeWriteInteger(processor, dest_reg, res);
  186|     10|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|     23|    {
  157|     23|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|     23|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 23]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|     23|        PHI_ASSERT(value <= max);
  168|       |
  169|     23|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|     23|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|     15|    {
  191|     15|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|     15|        SafeWriteInteger(processor, dest_reg, res);
  194|     15|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|      6|    {
  199|      6|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|      6|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 0, False: 6]
  ------------------
  202|      0|        {
  203|      0|            processor.Raise(Exception::Underflow);
  204|       |
  205|      0|            phi::u64 res = max - rhs + lhs + 1u;
  206|      0|            SafeWriteInteger(processor, dest_reg, res);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      6|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|      6|        SafeWriteInteger(processor, dest_reg, res);
  213|      6|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|      5|    {
  218|      5|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|      5|        SafeWriteInteger(processor, dest_reg, res);
  221|      5|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|      7|    {
  226|      7|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|      7|        SafeWriteInteger(processor, dest_reg, res);
  229|      7|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|      5|    {
  234|      5|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 5, False: 0]
  ------------------
  235|      5|        {
  236|      5|            processor.Raise(Exception::DivideByZero);
  237|      5|            return;
  238|      5|        }
  239|       |
  240|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|      0|        SafeWriteInteger(processor, dest_reg, res);
  243|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|      5|    {
  248|      5|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 5, False: 0]
  ------------------
  249|      5|        {
  250|      5|            processor.Raise(Exception::DivideByZero);
  251|      5|            return;
  252|      5|        }
  253|       |
  254|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|      0|        SafeWriteInteger(processor, dest_reg, res);
  257|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|     10|    {
  331|     10|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 10]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|     10|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 0, False: 10]
  ------------------
  342|      0|        {
  343|      0|            processor.Raise(Exception::BadShift);
  344|      0|            return;
  345|      0|        }
  346|       |
  347|     10|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|     10|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|     10|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|      5|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|      5|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 5]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|      5|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 5, False: 0]
  ------------------
  274|      5|        {
  275|      5|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|      5|            return;
  277|      5|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|      0|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 0, False: 0]
  ------------------
  281|      0|        {
  282|      0|            processor.Raise(Exception::BadShift);
  283|      0|            return;
  284|      0|        }
  285|       |
  286|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|      6|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|      6|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 6]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|      6|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 0, False: 6]
  ------------------
  317|      0|        {
  318|      0|            processor.Raise(Exception::BadShift);
  319|      0|            return;
  320|      0|        }
  321|       |
  322|      6|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|      6|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|      6|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  60.1k|    {
   39|       |        // Lookup the label
   40|  60.1k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  60.1k|        PHI_ASSERT(program != nullptr);
   42|  60.1k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  60.1k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 146, False: 60.0k]
  ------------------
   45|    146|        {
   46|    146|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|    146|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|    146|            processor.Raise(Exception::UnknownLabel);
   48|    146|            return;
   49|    146|        }
   50|       |
   51|  60.0k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  60.0k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  60.0k|        processor.SetNextProgramCounter(jump_point);
   56|  60.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  60.0k|    {
   60|  60.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  60.0k|        phi::u32 max_address =
   63|  60.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  60.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 60.0k]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|  60.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  60.0k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      2|    {
  101|      2|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 2, False: 0]
  ------------------
  102|      2|        {
  103|      2|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      2|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 2]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      2|            return imm_value.signed_value;
  111|      2|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|   120k|    {
   12|   120k|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|   120k|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|   120k|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|   120k|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|   120k|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|   120k|                   "Unexpected argument type for arg1");
   22|   120k|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|   120k|                   "Unexpected argument type for arg2");
   24|   120k|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|   120k|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|   120k|        m_Executor(processor, arg1, arg2, arg3);
   29|   120k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   185k|    {
  453|   185k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   185k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  3.09M|    {
   17|  3.09M|        m_ValueSigned = val;
   18|  3.09M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  30.0k|    {
   22|  30.0k|        m_ValueUnsigned = val;
   23|  30.0k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|    200|    {
   27|    200|        return m_ValueSigned;
   28|    200|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  60.0k|    {
   32|  60.0k|        return m_ValueUnsigned;
   33|  60.0k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  30.1k|    {
   37|  30.1k|        return m_IsReadOnly;
   38|  30.1k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      2|    {
  244|      2|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 2]
  ------------------
  245|      2|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      2|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  96.6k|    {
  256|  96.6k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 96.6M, False: 96.6k]
  ------------------
  257|  96.6M|        {
  258|  96.6M|            val.signed_value = 0;
  259|  96.6M|        }
  260|  96.6k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  5.31M|    {
   24|  5.31M|        switch (token.length())
   25|  5.31M|        {
   26|       |            // 1 character OpCodes
   27|   852k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 852k, False: 4.45M]
  ------------------
   28|   852k|                char c1 = token[0];
   29|   852k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 102k, False: 750k]
  ------------------
   30|   102k|                {
   31|   102k|                    return OpCode::J;
   32|   102k|                }
   33|   750k|                break;
   34|   852k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   919k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 919k, False: 4.39M]
  ------------------
   38|   919k|                char c1 = token[0];
   39|   919k|                char c2 = token[1];
   40|       |
   41|   919k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 653k, False: 266k]
  ------------------
   42|   919k|                {
   43|  44.4k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 44.4k, False: 874k]
  ------------------
   44|  51.5k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 7.07k, False: 912k]
  ------------------
   45|  51.5k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 6.14k, False: 45.4k]
  ------------------
   46|  6.14k|                        {
   47|  6.14k|                            return OpCode::JR;
   48|  6.14k|                        }
   49|  45.4k|                        break;
   50|       |
   51|  45.4k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 21.7k, False: 897k]
  ------------------
   52|  68.3k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 46.5k, False: 872k]
  ------------------
   53|  68.3k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 16.0k, False: 52.2k]
  ------------------
   54|  68.3k|                        {
   55|  2.23k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 2.23k, False: 66.0k]
  ------------------
   56|  8.43k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 6.20k, False: 62.1k]
  ------------------
   57|  8.43k|                                return OpCode::LB;
   58|  6.34k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 6.34k, False: 61.9k]
  ------------------
   59|  9.66k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 3.31k, False: 64.9k]
  ------------------
   60|  9.66k|                                return OpCode::LD;
   61|    934|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 934, False: 67.3k]
  ------------------
   62|  4.13k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 3.20k, False: 65.1k]
  ------------------
   63|  4.13k|                                return OpCode::LF;
   64|  2.61k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 2.61k, False: 65.6k]
  ------------------
   65|  19.4k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 16.8k, False: 51.4k]
  ------------------
   66|  19.4k|                                return OpCode::LH;
   67|  8.13k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 8.13k, False: 60.1k]
  ------------------
   68|  10.5k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.41k, False: 65.8k]
  ------------------
   69|  10.5k|                                return OpCode::LW;
   70|  68.3k|                        }
   71|  16.0k|                        break;
   72|  16.0k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 6.29k, False: 912k]
  ------------------
   73|  46.0k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 39.7k, False: 879k]
  ------------------
   74|  46.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 6.46k, False: 39.5k]
  ------------------
   75|  6.46k|                        {
   76|  6.46k|                            return OpCode::OR;
   77|  6.46k|                        }
   78|  39.5k|                        break;
   79|  71.7k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 71.7k, False: 847k]
  ------------------
   80|   100k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 28.4k, False: 890k]
  ------------------
   81|   100k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 51.1k, False: 49.1k]
  ------------------
   82|   100k|                        {
   83|  1.62k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.62k, False: 98.6k]
  ------------------
   84|  5.34k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 3.72k, False: 96.5k]
  ------------------
   85|  5.34k|                                return OpCode::SB;
   86|  7.58k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 7.58k, False: 92.6k]
  ------------------
   87|  17.1k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 9.59k, False: 90.6k]
  ------------------
   88|  17.1k|                                return OpCode::SD;
   89|    539|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 539, False: 99.7k]
  ------------------
   90|  6.85k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 6.31k, False: 93.9k]
  ------------------
   91|  6.85k|                                return OpCode::SF;
   92|  2.40k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.40k, False: 97.8k]
  ------------------
   93|  12.5k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 10.1k, False: 90.0k]
  ------------------
   94|  12.5k|                                return OpCode::SH;
   95|  3.99k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 3.99k, False: 96.2k]
  ------------------
   96|  7.18k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 3.19k, False: 97.0k]
  ------------------
   97|  7.18k|                                return OpCode::SW;
   98|   100k|                        }
   99|  51.1k|                        break;
  100|   919k|                }
  101|   805k|                break;
  102|   919k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|  1.01M|            case 3: {
  ------------------
  |  Branch (105:13): [True: 1.01M, False: 4.29M]
  ------------------
  106|  1.01M|                char c1 = token[0];
  107|  1.01M|                char c2 = token[1];
  108|  1.01M|                char c3 = token[2];
  109|       |
  110|  1.01M|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 417k, False: 601k]
  ------------------
  111|  1.01M|                {
  112|   130k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 130k, False: 888k]
  ------------------
  113|   150k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 19.8k, False: 999k]
  ------------------
  114|   150k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 120k, False: 29.5k]
  |  Branch (114:29): [True: 111k, False: 38.5k]
  |  Branch (114:45): [True: 111k, False: 9.03k]
  ------------------
  115|   111k|                        {
  116|   111k|                            return OpCode::ADD;
  117|   111k|                        }
  118|  38.5k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 12.9k, False: 25.6k]
  |  Branch (118:34): [True: 5.33k, False: 33.2k]
  |  Branch (118:50): [True: 5.33k, False: 7.60k]
  ------------------
  119|  5.33k|                        {
  120|  5.33k|                            return OpCode::AND;
  121|  5.33k|                        }
  122|  33.2k|                        break;
  123|       |
  124|  33.2k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 2.62k, False: 1.01M]
  ------------------
  125|  24.3k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 21.7k, False: 997k]
  ------------------
  126|  24.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 14.6k, False: 9.75k]
  |  Branch (126:29): [True: 3.85k, False: 20.4k]
  |  Branch (126:45): [True: 3.85k, False: 10.7k]
  ------------------
  127|  3.85k|                        {
  128|  3.85k|                            return OpCode::DIV;
  129|  3.85k|                        }
  130|  20.4k|                        break;
  131|       |
  132|  20.4k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 2.82k, False: 1.01M]
  ------------------
  133|  12.5k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 9.68k, False: 1.00M]
  ------------------
  134|  12.5k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 9.45k, False: 3.05k]
  ------------------
  135|  9.45k|                        {
  136|  9.45k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 1.20k, False: 8.24k]
  ------------------
  137|  1.20k|                            {
  138|  1.20k|                                return OpCode::EQD;
  139|  1.20k|                            }
  140|  8.24k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 4.57k, False: 3.67k]
  ------------------
  141|  4.57k|                            {
  142|  4.57k|                                return OpCode::EQF;
  143|  4.57k|                            }
  144|  9.45k|                        }
  145|  6.72k|                        break;
  146|       |
  147|  11.3k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 11.3k, False: 1.00M]
  ------------------
  148|  42.1k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 30.7k, False: 988k]
  ------------------
  149|  42.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 9.05k, False: 33.0k]
  ------------------
  150|  9.05k|                        {
  151|  9.05k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 3.01k, False: 6.03k]
  ------------------
  152|  3.01k|                            {
  153|  3.01k|                                return OpCode::GED;
  154|  3.01k|                            }
  155|  6.03k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.32k, False: 3.71k]
  ------------------
  156|  2.32k|                            {
  157|  2.32k|                                return OpCode::GEF;
  158|  2.32k|                            }
  159|  9.05k|                        }
  160|  33.0k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 26.1k, False: 6.92k]
  ------------------
  161|  26.1k|                        {
  162|  26.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 13.0k, False: 13.1k]
  ------------------
  163|  13.0k|                            {
  164|  13.0k|                                return OpCode::GTD;
  165|  13.0k|                            }
  166|  13.1k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 4.90k, False: 8.26k]
  ------------------
  167|  4.90k|                            {
  168|  4.90k|                                return OpCode::GTF;
  169|  4.90k|                            }
  170|  13.1k|                        }
  171|  18.9k|                        break;
  172|       |
  173|  29.7k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 29.7k, False: 989k]
  ------------------
  174|  33.8k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 4.09k, False: 1.01M]
  ------------------
  175|  33.8k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 6.29k, False: 27.5k]
  |  Branch (175:29): [True: 2.68k, False: 31.1k]
  |  Branch (175:45): [True: 2.68k, False: 3.61k]
  ------------------
  176|  2.68k|                        {
  177|  2.68k|                            return OpCode::JAL;
  178|  2.68k|                        }
  179|  31.1k|                        break;
  180|       |
  181|  31.1k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 16.8k, False: 1.00M]
  ------------------
  182|   116k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 99.5k, False: 919k]
  ------------------
  183|   116k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 12.0k, False: 104k]
  ------------------
  184|   116k|                        {
  185|  4.48k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 4.48k, False: 111k]
  ------------------
  186|  9.54k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 5.05k, False: 111k]
  ------------------
  187|  9.54k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 5.11k, False: 4.42k]
  ------------------
  188|  5.11k|                                {
  189|  5.11k|                                    return OpCode::LBU;
  190|  5.11k|                                }
  191|  4.42k|                                break;
  192|       |
  193|  4.42k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.23k, False: 115k]
  ------------------
  194|  19.6k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 18.4k, False: 98.0k]
  ------------------
  195|  19.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 12.2k, False: 7.40k]
  ------------------
  196|  12.2k|                                {
  197|  12.2k|                                    return OpCode::LED;
  198|  12.2k|                                }
  199|  7.40k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.85k, False: 4.55k]
  ------------------
  200|  2.85k|                                {
  201|  2.85k|                                    return OpCode::LEF;
  202|  2.85k|                                }
  203|  4.55k|                                break;
  204|       |
  205|  4.55k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 4.35k, False: 112k]
  ------------------
  206|  48.2k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 43.8k, False: 72.5k]
  ------------------
  207|  48.2k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 18.6k, False: 29.5k]
  ------------------
  208|  18.6k|                                {
  209|  18.6k|                                    return OpCode::LHI;
  210|  18.6k|                                }
  211|  29.5k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 7.75k, False: 21.8k]
  ------------------
  212|  7.75k|                                {
  213|  7.75k|                                    return OpCode::LHU;
  214|  7.75k|                                }
  215|  21.8k|                                break;
  216|       |
  217|  21.8k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 7.17k, False: 109k]
  ------------------
  218|  11.0k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 3.83k, False: 112k]
  ------------------
  219|  11.0k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 5.24k, False: 5.76k]
  ------------------
  220|  5.24k|                                {
  221|  5.24k|                                    return OpCode::LTD;
  222|  5.24k|                                }
  223|  5.76k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 3.80k, False: 1.96k]
  ------------------
  224|  3.80k|                                {
  225|  3.80k|                                    return OpCode::LTF;
  226|  3.80k|                                }
  227|  1.96k|                                break;
  228|       |
  229|  5.83k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 5.83k, False: 110k]
  ------------------
  230|  16.0k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 10.1k, False: 106k]
  ------------------
  231|  16.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 10.1k, False: 5.89k]
  ------------------
  232|  10.1k|                                {
  233|  10.1k|                                    return OpCode::LWU;
  234|  10.1k|                                }
  235|  5.89k|                                break;
  236|   116k|                        }
  237|  50.6k|                        break;
  238|       |
  239|  50.6k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 10.1k, False: 1.00M]
  ------------------
  240|  22.8k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 12.6k, False: 1.00M]
  ------------------
  241|  22.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 11.3k, False: 11.5k]
  ------------------
  242|  11.3k|                        {
  243|  11.3k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 2.80k, False: 8.57k]
  ------------------
  244|  2.80k|                            {
  245|  2.80k|                                return OpCode::NED;
  246|  2.80k|                            }
  247|  8.57k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.36k, False: 6.21k]
  ------------------
  248|  2.36k|                            {
  249|  2.36k|                                return OpCode::NEF;
  250|  2.36k|                            }
  251|  11.3k|                        }
  252|  11.5k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 7.72k, False: 3.78k]
  |  Branch (252:34): [True: 4.48k, False: 7.01k]
  |  Branch (252:50): [True: 4.48k, False: 3.23k]
  ------------------
  253|  4.48k|                        {
  254|  4.48k|                            return OpCode::NOP;
  255|  4.48k|                        }
  256|       |
  257|  13.2k|                        break;
  258|       |
  259|  13.2k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 11.0k, False: 1.00M]
  ------------------
  260|  31.2k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 20.2k, False: 998k]
  ------------------
  261|  31.2k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 11.9k, False: 19.3k]
  |  Branch (261:29): [True: 2.71k, False: 28.5k]
  |  Branch (261:45): [True: 2.71k, False: 9.22k]
  ------------------
  262|  2.71k|                        {
  263|  2.71k|                            return OpCode::ORI;
  264|  2.71k|                        }
  265|  28.5k|                        break;
  266|       |
  267|  87.9k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 87.9k, False: 931k]
  ------------------
  268|   148k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 60.8k, False: 958k]
  ------------------
  269|   148k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 32.7k, False: 116k]
  ------------------
  270|   148k|                        {
  271|  3.99k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 3.99k, False: 144k]
  ------------------
  272|  8.56k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 4.57k, False: 144k]
  ------------------
  273|  8.56k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 3.00k, False: 5.56k]
  ------------------
  274|  3.00k|                                {
  275|  3.00k|                                    return OpCode::SBU;
  276|  3.00k|                                }
  277|  5.56k|                                break;
  278|       |
  279|  5.56k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 2.30k, False: 146k]
  ------------------
  280|  15.7k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 13.4k, False: 135k]
  ------------------
  281|  15.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 3.89k, False: 11.8k]
  ------------------
  282|  3.89k|                                {
  283|  3.89k|                                    return OpCode::SEQ;
  284|  3.89k|                                }
  285|  11.8k|                                break;
  286|       |
  287|  11.8k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 4.29k, False: 144k]
  ------------------
  288|  14.0k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 9.78k, False: 139k]
  ------------------
  289|  14.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.82k, False: 9.26k]
  ------------------
  290|  4.82k|                                {
  291|  4.82k|                                    return OpCode::SGE;
  292|  4.82k|                                }
  293|  9.26k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 4.30k, False: 4.95k]
  ------------------
  294|  4.30k|                                {
  295|  4.30k|                                    return OpCode::SGT;
  296|  4.30k|                                }
  297|  4.95k|                                break;
  298|       |
  299|  4.95k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 3.92k, False: 144k]
  ------------------
  300|  7.17k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 3.25k, False: 145k]
  ------------------
  301|  7.17k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 4.06k, False: 3.11k]
  ------------------
  302|  4.06k|                                {
  303|  4.06k|                                    return OpCode::SHU;
  304|  4.06k|                                }
  305|  3.11k|                                break;
  306|       |
  307|  6.30k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 6.30k, False: 142k]
  ------------------
  308|  22.0k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 15.7k, False: 133k]
  ------------------
  309|  22.0k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 3.92k, False: 18.0k]
  ------------------
  310|  22.0k|                                {
  311|    153|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 153, False: 21.8k]
  ------------------
  312|  2.81k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 2.65k, False: 19.3k]
  ------------------
  313|  2.81k|                                        return OpCode::SLA;
  314|       |
  315|    848|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 848, False: 21.1k]
  ------------------
  316|  4.76k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 3.91k, False: 18.0k]
  ------------------
  317|  4.76k|                                        return OpCode::SLE;
  318|       |
  319|  2.92k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 2.92k, False: 19.0k]
  ------------------
  320|  5.36k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 2.43k, False: 19.5k]
  ------------------
  321|  5.36k|                                        return OpCode::SLL;
  322|       |
  323|    635|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 635, False: 21.3k]
  ------------------
  324|  5.14k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 4.51k, False: 17.5k]
  ------------------
  325|  5.14k|                                        return OpCode::SLT;
  326|  22.0k|                                }
  327|  3.92k|                                break;
  328|       |
  329|  3.92k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 2.31k, False: 146k]
  ------------------
  330|  10.7k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 8.45k, False: 140k]
  ------------------
  331|  10.7k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 8.64k, False: 2.12k]
  ------------------
  332|  8.64k|                                {
  333|  8.64k|                                    return OpCode::SNE;
  334|  8.64k|                                }
  335|  2.12k|                                break;
  336|       |
  337|  2.12k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.94k, False: 146k]
  ------------------
  338|  13.3k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 11.4k, False: 137k]
  ------------------
  339|  13.3k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 5.86k, False: 7.50k]
  ------------------
  340|  5.86k|                                {
  341|  5.86k|                                    return OpCode::SRA;
  342|  5.86k|                                }
  343|  7.50k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.93k, False: 4.56k]
  ------------------
  344|  2.93k|                                {
  345|  2.93k|                                    return OpCode::SRL;
  346|  2.93k|                                }
  347|  4.56k|                                break;
  348|       |
  349|  4.56k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.33k, False: 147k]
  ------------------
  350|  13.3k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 11.9k, False: 136k]
  ------------------
  351|  13.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 7.02k, False: 6.28k]
  ------------------
  352|  7.02k|                                {
  353|  7.02k|                                    return OpCode::SUB;
  354|  7.02k|                                }
  355|  6.28k|                                break;
  356|       |
  357|  6.28k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 855, False: 147k]
  ------------------
  358|  11.0k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 10.2k, False: 138k]
  ------------------
  359|  11.0k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 5.89k, False: 5.17k]
  ------------------
  360|  5.89k|                                {
  361|  5.89k|                                    return OpCode::SWU;
  362|  5.89k|                                }
  363|  5.17k|                                break;
  364|   148k|                        }
  365|       |
  366|  81.6k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.39k, False: 1.01M]
  ------------------
  367|  99.4k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 17.7k, False: 1.00M]
  ------------------
  368|  99.4k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 19.4k, False: 79.9k]
  |  Branch (368:29): [True: 5.46k, False: 93.9k]
  |  Branch (368:45): [True: 5.46k, False: 14.0k]
  ------------------
  369|  5.46k|                        {
  370|  5.46k|                            return OpCode::XOR;
  371|  5.46k|                        }
  372|  93.9k|                        break;
  373|  1.01M|                }
  374|   714k|                break;
  375|  1.01M|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   802k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 802k, False: 4.50M]
  ------------------
  379|   802k|                char c1 = token[0];
  380|   802k|                char c2 = token[1];
  381|   802k|                char c3 = token[2];
  382|   802k|                char c4 = token[3];
  383|       |
  384|   802k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 300k, False: 501k]
  ------------------
  385|   802k|                {
  386|  49.5k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 49.5k, False: 752k]
  ------------------
  387|  84.5k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 34.9k, False: 767k]
  ------------------
  388|  84.5k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 23.8k, False: 60.6k]
  ------------------
  389|  84.5k|                        {
  390|  15.0k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 15.0k, False: 69.4k]
  ------------------
  391|  41.5k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 26.4k, False: 58.0k]
  ------------------
  392|  41.5k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 34.8k, False: 6.65k]
  ------------------
  393|  34.8k|                                {
  394|  34.8k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 2.63k, False: 32.2k]
  ------------------
  395|  34.8k|                                    {
  396|  2.70k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.70k, False: 32.1k]
  ------------------
  397|  8.99k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 6.28k, False: 28.5k]
  ------------------
  398|  8.99k|                                            return OpCode::ADDD;
  399|       |
  400|    405|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 405, False: 34.4k]
  ------------------
  401|  5.25k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 4.84k, False: 30.0k]
  ------------------
  402|  5.25k|                                            return OpCode::ADDF;
  403|       |
  404|  9.91k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 9.91k, False: 24.9k]
  ------------------
  405|  14.7k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 4.83k, False: 30.0k]
  ------------------
  406|  14.7k|                                            return OpCode::ADDI;
  407|       |
  408|    692|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 692, False: 34.1k]
  ------------------
  409|  3.21k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 2.52k, False: 32.3k]
  ------------------
  410|  3.21k|                                            return OpCode::ADDU;
  411|  34.8k|                                    }
  412|  34.8k|                                }
  413|  9.29k|                                break;
  414|       |
  415|  9.29k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 366, False: 84.1k]
  ------------------
  416|  19.1k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 18.8k, False: 65.6k]
  ------------------
  417|  19.1k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 6.76k, False: 12.4k]
  |  Branch (417:37): [True: 3.88k, False: 15.3k]
  |  Branch (417:53): [True: 3.88k, False: 2.87k]
  ------------------
  418|  3.88k|                                {
  419|  3.88k|                                    return OpCode::ANDI;
  420|  3.88k|                                }
  421|       |
  422|  15.3k|                                break;
  423|  84.5k|                        }
  424|  48.4k|                        break;
  425|       |
  426|  48.4k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 24.0k, False: 778k]
  ------------------
  427|  43.1k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 19.0k, False: 782k]
  ------------------
  428|  43.1k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 5.60k, False: 37.5k]
  ------------------
  429|  43.1k|                        {
  430|  4.55k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 4.55k, False: 38.5k]
  ------------------
  431|  12.4k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 7.84k, False: 35.2k]
  ------------------
  432|  12.4k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 9.14k, False: 3.25k]
  |  Branch (432:37): [True: 5.72k, False: 6.67k]
  |  Branch (432:53): [True: 5.72k, False: 3.42k]
  ------------------
  433|  5.72k|                                {
  434|  5.72k|                                    return OpCode::BEQZ;
  435|  5.72k|                                }
  436|  6.67k|                                break;
  437|       |
  438|  6.67k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 2.78k, False: 40.3k]
  ------------------
  439|  16.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 13.3k, False: 29.8k]
  ------------------
  440|  16.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 13.7k, False: 2.31k]
  ------------------
  441|  13.7k|                                {
  442|  13.7k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 8.55k, False: 5.24k]
  ------------------
  443|  8.55k|                                    {
  444|  8.55k|                                        return OpCode::BFPF;
  445|  8.55k|                                    }
  446|  5.24k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 3.18k, False: 2.05k]
  ------------------
  447|  3.18k|                                    {
  448|  3.18k|                                        return OpCode::BFPT;
  449|  3.18k|                                    }
  450|  13.7k|                                }
  451|  4.37k|                                break;
  452|       |
  453|  4.37k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 2.02k, False: 41.1k]
  ------------------
  454|  9.01k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 6.99k, False: 36.1k]
  ------------------
  455|  9.01k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.55k, False: 2.46k]
  |  Branch (455:37): [True: 2.40k, False: 6.61k]
  |  Branch (455:53): [True: 2.40k, False: 4.14k]
  ------------------
  456|  2.40k|                                {
  457|  2.40k|                                    return OpCode::BNEZ;
  458|  2.40k|                                }
  459|  43.1k|                        }
  460|  23.2k|                        break;
  461|       |
  462|  23.2k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.97k, False: 799k]
  ------------------
  463|  41.8k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 38.9k, False: 763k]
  ------------------
  464|  41.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 35.3k, False: 6.56k]
  |  Branch (464:29): [True: 30.7k, False: 11.1k]
  |  Branch (464:45): [True: 30.7k, False: 4.59k]
  ------------------
  465|  30.7k|                        {
  466|  30.7k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.72k, False: 26.9k]
  ------------------
  467|  30.7k|                            {
  468|  1.06k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.06k, False: 29.6k]
  ------------------
  469|  10.9k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 9.88k, False: 20.8k]
  ------------------
  470|  10.9k|                                    return OpCode::DIVD;
  471|       |
  472|     67|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 67, False: 30.6k]
  ------------------
  473|  4.93k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 4.86k, False: 25.8k]
  ------------------
  474|  4.93k|                                    return OpCode::DIVF;
  475|       |
  476|     51|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 51, False: 30.6k]
  ------------------
  477|  8.24k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 8.19k, False: 22.5k]
  ------------------
  478|  8.24k|                                    return OpCode::DIVI;
  479|       |
  480|    852|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 852, False: 29.8k]
  ------------------
  481|  2.87k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 2.02k, False: 28.7k]
  ------------------
  482|  2.87k|                                    return OpCode::DIVU;
  483|  30.7k|                            }
  484|  30.7k|                        }
  485|  14.8k|                        break;
  486|       |
  487|  19.2k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 19.2k, False: 782k]
  ------------------
  488|  31.9k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 12.7k, False: 789k]
  ------------------
  489|  31.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 13.9k, False: 18.0k]
  |  Branch (489:29): [True: 5.19k, False: 26.7k]
  |  Branch (489:45): [True: 8.17k, False: 5.76k]
  |  Branch (489:61): [True: 5.19k, False: 2.98k]
  ------------------
  490|  5.19k|                        {
  491|  5.19k|                            return OpCode::HALT;
  492|  5.19k|                        }
  493|  26.7k|                        break;
  494|       |
  495|  26.7k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 21.1k, False: 780k]
  ------------------
  496|  27.9k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 6.87k, False: 795k]
  ------------------
  497|  27.9k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 9.54k, False: 18.4k]
  |  Branch (497:29): [True: 4.60k, False: 23.3k]
  |  Branch (497:45): [True: 7.75k, False: 1.79k]
  |  Branch (497:61): [True: 4.60k, False: 3.15k]
  ------------------
  498|  4.60k|                        {
  499|  4.60k|                            return OpCode::JALR;
  500|  4.60k|                        }
  501|  23.3k|                        break;
  502|       |
  503|  23.3k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 17.5k, False: 784k]
  ------------------
  504|  35.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 18.3k, False: 783k]
  ------------------
  505|  35.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 12.4k, False: 23.4k]
  |  Branch (505:29): [True: 9.83k, False: 26.0k]
  |  Branch (505:45): [True: 9.83k, False: 2.59k]
  ------------------
  506|  9.83k|                        {
  507|  9.83k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 3.35k, False: 6.48k]
  ------------------
  508|  3.35k|                            {
  509|  3.35k|                                return OpCode::MOVD;
  510|  3.35k|                            }
  511|  6.48k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 2.45k, False: 4.03k]
  ------------------
  512|  2.45k|                            {
  513|  2.45k|                                return OpCode::MOVF;
  514|  2.45k|                            }
  515|  9.83k|                        }
  516|  26.0k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 18.2k, False: 7.79k]
  |  Branch (516:34): [True: 4.09k, False: 21.9k]
  |  Branch (516:50): [True: 8.73k, False: 9.48k]
  |  Branch (516:66): [True: 4.09k, False: 4.63k]
  ------------------
  517|  4.09k|                        {
  518|  4.09k|                            return OpCode::MULT;
  519|  4.09k|                        }
  520|  25.9k|                        break;
  521|       |
  522|   122k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 122k, False: 679k]
  ------------------
  523|   196k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 74.3k, False: 727k]
  ------------------
  524|   196k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 21.6k, False: 174k]
  ------------------
  525|   196k|                        {
  526|  1.55k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.55k, False: 195k]
  ------------------
  527|  18.7k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 17.1k, False: 179k]
  ------------------
  528|  18.7k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 12.9k, False: 5.79k]
  ------------------
  529|  12.9k|                                {
  530|  12.9k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 4.26k, False: 8.63k]
  ------------------
  531|  4.26k|                                    {
  532|  4.26k|                                        return OpCode::SEQI;
  533|  4.26k|                                    }
  534|  8.63k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.77k, False: 6.86k]
  ------------------
  535|  1.77k|                                    {
  536|  1.77k|                                        return OpCode::SEQU;
  537|  1.77k|                                    }
  538|  12.9k|                                }
  539|  12.6k|                                break;
  540|       |
  541|  15.0k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 15.0k, False: 181k]
  ------------------
  542|  34.0k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 18.9k, False: 177k]
  ------------------
  543|  34.0k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 15.3k, False: 18.6k]
  ------------------
  544|  15.3k|                                {
  545|  15.3k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 6.27k, False: 9.05k]
  ------------------
  546|  6.27k|                                    {
  547|  6.27k|                                        return OpCode::SGEI;
  548|  6.27k|                                    }
  549|  9.05k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 3.49k, False: 5.55k]
  ------------------
  550|  3.49k|                                    {
  551|  3.49k|                                        return OpCode::SGEU;
  552|  3.49k|                                    }
  553|  15.3k|                                }
  554|  18.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 9.98k, False: 8.71k]
  ------------------
  555|  9.98k|                                {
  556|  9.98k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 2.95k, False: 7.02k]
  ------------------
  557|  2.95k|                                    {
  558|  2.95k|                                        return OpCode::SGTI;
  559|  2.95k|                                    }
  560|  7.02k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.85k, False: 3.17k]
  ------------------
  561|  3.85k|                                    {
  562|  3.85k|                                        return OpCode::SGTU;
  563|  3.85k|                                    }
  564|  9.98k|                                }
  565|  17.4k|                                break;
  566|       |
  567|  17.4k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 6.29k, False: 190k]
  ------------------
  568|  52.2k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 45.9k, False: 150k]
  ------------------
  569|  52.2k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 6.21k, False: 45.9k]
  ------------------
  570|  52.2k|                                {
  571|  2.37k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 2.37k, False: 49.8k]
  ------------------
  572|  6.62k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 4.24k, False: 47.9k]
  ------------------
  573|  6.62k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 3.39k, False: 3.22k]
  ------------------
  574|  3.39k|                                        {
  575|  3.39k|                                            return OpCode::SLAI;
  576|  3.39k|                                        }
  577|  3.22k|                                        break;
  578|       |
  579|  3.22k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 2.66k, False: 49.5k]
  ------------------
  580|  10.2k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 7.60k, False: 44.5k]
  ------------------
  581|  10.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 2.57k, False: 7.68k]
  ------------------
  582|  2.57k|                                        {
  583|  2.57k|                                            return OpCode::SLEI;
  584|  2.57k|                                        }
  585|  7.68k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 4.35k, False: 3.33k]
  ------------------
  586|  4.35k|                                        {
  587|  4.35k|                                            return OpCode::SLEU;
  588|  4.35k|                                        }
  589|  3.33k|                                        break;
  590|       |
  591|  3.33k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 1.88k, False: 50.3k]
  ------------------
  592|  7.83k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 5.94k, False: 46.2k]
  ------------------
  593|  7.83k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 1.97k, False: 5.85k]
  ------------------
  594|  1.97k|                                        {
  595|  1.97k|                                            return OpCode::SLLI;
  596|  1.97k|                                        }
  597|  5.85k|                                        break;
  598|       |
  599|  5.85k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 492, False: 51.7k]
  ------------------
  600|  21.2k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 20.7k, False: 31.4k]
  ------------------
  601|  21.2k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 4.93k, False: 16.3k]
  ------------------
  602|  4.93k|                                        {
  603|  4.93k|                                            return OpCode::SLTI;
  604|  4.93k|                                        }
  605|  16.3k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 10.4k, False: 5.89k]
  ------------------
  606|  10.4k|                                        {
  607|  10.4k|                                            return OpCode::SLTU;
  608|  10.4k|                                        }
  609|  5.89k|                                        break;
  610|  52.2k|                                }
  611|       |
  612|  27.1k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 2.61k, False: 193k]
  ------------------
  613|  40.1k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 13.0k, False: 183k]
  ------------------
  614|  40.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 16.0k, False: 24.0k]
  ------------------
  615|  16.0k|                                {
  616|  16.0k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 4.55k, False: 11.5k]
  ------------------
  617|  4.55k|                                    {
  618|  4.55k|                                        return OpCode::SNEI;
  619|  4.55k|                                    }
  620|  11.5k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.23k, False: 7.26k]
  ------------------
  621|  4.23k|                                    {
  622|  4.23k|                                        return OpCode::SNEU;
  623|  4.23k|                                    }
  624|  16.0k|                                }
  625|  31.3k|                                break;
  626|       |
  627|  31.3k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 2.14k, False: 194k]
  ------------------
  628|  17.7k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 15.5k, False: 181k]
  ------------------
  629|  17.7k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 9.99k, False: 7.72k]
  |  Branch (629:37): [True: 4.51k, False: 13.2k]
  |  Branch (629:53): [True: 4.51k, False: 5.47k]
  ------------------
  630|  4.51k|                                {
  631|  4.51k|                                    return OpCode::SRAI;
  632|  4.51k|                                }
  633|  13.2k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 5.46k, False: 7.73k]
  |  Branch (633:42): [True: 2.00k, False: 11.1k]
  |  Branch (633:58): [True: 2.00k, False: 3.45k]
  ------------------
  634|  2.00k|                                {
  635|  2.00k|                                    return OpCode::SRLI;
  636|  2.00k|                                }
  637|  11.1k|                                break;
  638|       |
  639|  12.6k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 12.6k, False: 183k]
  ------------------
  640|  36.6k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 24.0k, False: 172k]
  ------------------
  641|  36.6k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 29.1k, False: 7.42k]
  ------------------
  642|  29.1k|                                {
  643|  29.1k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 6.07k, False: 23.1k]
  ------------------
  644|  29.1k|                                    {
  645|    338|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 338, False: 28.8k]
  ------------------
  646|  4.08k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 3.74k, False: 25.4k]
  ------------------
  647|  4.08k|                                            return OpCode::SUBD;
  648|       |
  649|    936|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 936, False: 28.2k]
  ------------------
  650|  2.77k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 1.83k, False: 27.3k]
  ------------------
  651|  2.77k|                                            return OpCode::SUBF;
  652|       |
  653|  3.96k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 3.96k, False: 25.2k]
  ------------------
  654|  6.26k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 2.30k, False: 26.8k]
  ------------------
  655|  6.26k|                                            return OpCode::SUBI;
  656|       |
  657|  5.44k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 5.44k, False: 23.7k]
  ------------------
  658|  10.0k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 4.56k, False: 24.6k]
  ------------------
  659|  10.0k|                                            return OpCode::SUBU;
  660|  29.1k|                                    }
  661|  29.1k|                                }
  662|  13.4k|                                break;
  663|   196k|                        }
  664|   107k|                        break;
  665|       |
  666|   107k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 4.38k, False: 797k]
  ------------------
  667|  18.4k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 14.0k, False: 787k]
  ------------------
  668|  18.4k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 8.55k, False: 9.89k]
  |  Branch (668:29): [True: 494, False: 17.9k]
  |  Branch (668:45): [True: 5.89k, False: 2.66k]
  |  Branch (668:61): [True: 494, False: 5.40k]
  ------------------
  669|    494|                        {
  670|    494|                            return OpCode::TRAP;
  671|    494|                        }
  672|  17.9k|                        break;
  673|  17.9k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 2.01k, False: 800k]
  ------------------
  674|  20.7k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 18.6k, False: 783k]
  ------------------
  675|  20.7k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 11.5k, False: 9.18k]
  |  Branch (675:29): [True: 1.87k, False: 18.8k]
  |  Branch (675:45): [True: 6.83k, False: 4.67k]
  |  Branch (675:61): [True: 1.87k, False: 4.96k]
  ------------------
  676|  1.87k|                        {
  677|  1.87k|                            return OpCode::XORI;
  678|  1.87k|                        }
  679|  18.8k|                        break;
  680|   802k|                }
  681|   608k|                break;
  682|   802k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   608k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 492k, False: 4.81M]
  ------------------
  686|   492k|                char c1 = token[0];
  687|   492k|                char c2 = token[1];
  688|   492k|                char c3 = token[2];
  689|   492k|                char c4 = token[3];
  690|   492k|                char c5 = token[4];
  691|       |
  692|   492k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 235k, False: 256k]
  ------------------
  693|   492k|                {
  694|  26.8k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 26.8k, False: 465k]
  ------------------
  695|  47.9k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 21.1k, False: 471k]
  ------------------
  696|  47.9k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 28.3k, False: 19.5k]
  |  Branch (696:29): [True: 7.99k, False: 39.9k]
  |  Branch (696:45): [True: 21.4k, False: 6.93k]
  |  Branch (696:61): [True: 11.0k, False: 10.3k]
  |  Branch (696:77): [True: 7.99k, False: 3.07k]
  ------------------
  697|  7.99k|                        {
  698|  7.99k|                            return OpCode::ADDUI;
  699|  7.99k|                        }
  700|  39.9k|                        break;
  701|       |
  702|  39.9k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 3.12k, False: 489k]
  ------------------
  703|  37.8k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 34.7k, False: 457k]
  ------------------
  704|  37.8k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 32.3k, False: 5.44k]
  |  Branch (704:29): [True: 1.59k, False: 36.2k]
  |  Branch (704:45): [True: 26.5k, False: 5.81k]
  |  Branch (704:61): [True: 5.68k, False: 20.8k]
  |  Branch (704:77): [True: 1.59k, False: 4.09k]
  ------------------
  705|  1.59k|                        {
  706|  1.59k|                            return OpCode::DIVUI;
  707|  1.59k|                        }
  708|  36.2k|                        break;
  709|       |
  710|  36.2k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 18.7k, False: 473k]
  ------------------
  711|  46.3k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 27.6k, False: 464k]
  ------------------
  712|  46.3k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 32.4k, False: 13.9k]
  |  Branch (712:29): [True: 16.7k, False: 29.6k]
  |  Branch (712:45): [True: 20.7k, False: 11.7k]
  |  Branch (712:61): [True: 16.7k, False: 4.00k]
  ------------------
  713|  16.7k|                        {
  714|  16.7k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 4.24k, False: 12.4k]
  ------------------
  715|  16.7k|                            {
  716|    503|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 503, False: 16.2k]
  ------------------
  717|  3.21k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 2.71k, False: 14.0k]
  ------------------
  718|  3.21k|                                    return OpCode::MULTD;
  719|       |
  720|    984|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 984, False: 15.7k]
  ------------------
  721|  2.74k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 1.76k, False: 14.9k]
  ------------------
  722|  2.74k|                                    return OpCode::MULTF;
  723|       |
  724|    101|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 101, False: 16.6k]
  ------------------
  725|  3.50k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 3.40k, False: 13.3k]
  ------------------
  726|  3.50k|                                    return OpCode::MULTI;
  727|       |
  728|  1.31k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.31k, False: 15.4k]
  ------------------
  729|  3.02k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.71k, False: 15.0k]
  ------------------
  730|  3.02k|                                    return OpCode::MULTU;
  731|  16.7k|                            }
  732|  16.7k|                        }
  733|  33.9k|                        break;
  734|       |
  735|  70.9k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 70.9k, False: 421k]
  ------------------
  736|   124k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 53.5k, False: 438k]
  ------------------
  737|   124k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 24.7k, False: 99.8k]
  ------------------
  738|   124k|                        {
  739|    991|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 991, False: 123k]
  ------------------
  740|  10.7k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 9.74k, False: 114k]
  ------------------
  741|  10.7k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 6.57k, False: 4.16k]
  |  Branch (741:37): [True: 2.51k, False: 8.22k]
  |  Branch (741:53): [True: 4.60k, False: 1.97k]
  |  Branch (741:69): [True: 2.51k, False: 2.09k]
  ------------------
  742|  2.51k|                                {
  743|  2.51k|                                    return OpCode::SEQUI;
  744|  2.51k|                                }
  745|  8.22k|                                break;
  746|       |
  747|  8.22k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 8.19k, False: 116k]
  ------------------
  748|  24.4k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 16.2k, False: 108k]
  ------------------
  749|  24.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 13.2k, False: 11.2k]
  |  Branch (749:37): [True: 3.87k, False: 20.5k]
  |  Branch (749:53): [True: 10.1k, False: 3.07k]
  |  Branch (749:69): [True: 3.87k, False: 6.25k]
  ------------------
  750|  3.87k|                                {
  751|  3.87k|                                    return OpCode::SGEUI;
  752|  3.87k|                                }
  753|  20.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 8.54k, False: 12.0k]
  |  Branch (753:42): [True: 2.49k, False: 18.0k]
  |  Branch (753:58): [True: 5.01k, False: 3.53k]
  |  Branch (753:74): [True: 2.49k, False: 2.51k]
  ------------------
  754|  2.49k|                                {
  755|  2.49k|                                    return OpCode::SGTUI;
  756|  2.49k|                                }
  757|  18.0k|                                break;
  758|       |
  759|  18.0k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 4.51k, False: 120k]
  ------------------
  760|  28.4k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 23.9k, False: 100k]
  ------------------
  761|  28.4k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 6.39k, False: 22.0k]
  |  Branch (761:37): [True: 1.86k, False: 26.5k]
  |  Branch (761:53): [True: 4.59k, False: 1.79k]
  |  Branch (761:69): [True: 1.86k, False: 2.72k]
  ------------------
  762|  1.86k|                                {
  763|  1.86k|                                    return OpCode::SLEUI;
  764|  1.86k|                                }
  765|  26.5k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 15.9k, False: 10.5k]
  |  Branch (765:42): [True: 2.77k, False: 23.8k]
  |  Branch (765:58): [True: 11.2k, False: 4.76k]
  |  Branch (765:74): [True: 2.77k, False: 8.45k]
  ------------------
  766|  2.77k|                                {
  767|  2.77k|                                    return OpCode::SLTUI;
  768|  2.77k|                                }
  769|  23.8k|                                break;
  770|       |
  771|  23.8k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 1.45k, False: 123k]
  ------------------
  772|  21.1k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 19.6k, False: 104k]
  ------------------
  773|  21.1k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 17.4k, False: 3.70k]
  |  Branch (773:37): [True: 5.17k, False: 15.9k]
  |  Branch (773:53): [True: 11.0k, False: 6.39k]
  |  Branch (773:69): [True: 5.17k, False: 5.86k]
  ------------------
  774|  5.17k|                                {
  775|  5.17k|                                    return OpCode::SNEUI;
  776|  5.17k|                                }
  777|  15.9k|                                break;
  778|       |
  779|  15.9k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 1.24k, False: 123k]
  ------------------
  780|  15.0k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 13.8k, False: 110k]
  ------------------
  781|  15.0k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 13.3k, False: 1.70k]
  |  Branch (781:37): [True: 2.69k, False: 12.3k]
  |  Branch (781:53): [True: 7.34k, False: 6.01k]
  |  Branch (781:69): [True: 2.69k, False: 4.65k]
  ------------------
  782|  2.69k|                                {
  783|  2.69k|                                    return OpCode::SUBUI;
  784|  2.69k|                                }
  785|  12.3k|                                break;
  786|   124k|                        }
  787|       |
  788|   103k|                        break;
  789|   492k|                }
  790|       |
  791|   448k|                break;
  792|   492k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   448k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 292k, False: 5.01M]
  ------------------
  796|   292k|                char c1 = token[0];
  797|   292k|                char c2 = token[1];
  798|   292k|                char c3 = token[2];
  799|   292k|                char c4 = token[3];
  800|   292k|                char c5 = token[4];
  801|   292k|                char c6 = token[5];
  802|       |
  803|   292k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 41.6k, False: 250k]
  |  Branch (803:21): [True: 30.0k, False: 262k]
  |  Branch (803:37): [True: 31.3k, False: 10.2k]
  |  Branch (803:53): [True: 30.0k, False: 1.35k]
  ------------------
  804|  30.0k|                {
  805|  30.0k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 3.08k, False: 26.9k]
  ------------------
  806|  30.0k|                    {
  807|  1.88k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.88k, False: 28.1k]
  ------------------
  808|  9.27k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 7.38k, False: 22.6k]
  ------------------
  809|  9.27k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 5.35k, False: 3.91k]
  ------------------
  810|  5.35k|                            {
  811|  5.35k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 105, False: 5.25k]
  ------------------
  812|    105|                                {
  813|    105|                                    return OpCode::CVTD2F;
  814|    105|                                }
  815|  5.25k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 2.64k, False: 2.60k]
  ------------------
  816|  2.64k|                                {
  817|  2.64k|                                    return OpCode::CVTD2I;
  818|  2.64k|                                }
  819|  5.35k|                            }
  820|  6.52k|                            break;
  821|       |
  822|  6.52k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 3.18k, False: 26.8k]
  ------------------
  823|  8.95k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 5.77k, False: 24.2k]
  ------------------
  824|  8.95k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 6.70k, False: 2.24k]
  ------------------
  825|  6.70k|                            {
  826|  6.70k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 2.84k, False: 3.86k]
  ------------------
  827|  2.84k|                                {
  828|  2.84k|                                    return OpCode::CVTF2D;
  829|  2.84k|                                }
  830|  3.86k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.91k, False: 1.94k]
  ------------------
  831|  1.91k|                                {
  832|  1.91k|                                    return OpCode::CVTF2I;
  833|  1.91k|                                }
  834|  6.70k|                            }
  835|  4.19k|                            break;
  836|       |
  837|  4.19k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 952, False: 29.0k]
  ------------------
  838|  8.73k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 7.78k, False: 22.2k]
  ------------------
  839|  8.73k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 5.92k, False: 2.80k]
  ------------------
  840|  5.92k|                            {
  841|  5.92k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 2.09k, False: 3.83k]
  ------------------
  842|  2.09k|                                {
  843|  2.09k|                                    return OpCode::CVTI2D;
  844|  2.09k|                                }
  845|  3.83k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 2.19k, False: 1.64k]
  ------------------
  846|  2.19k|                                {
  847|  2.19k|                                    return OpCode::CVTI2F;
  848|  2.19k|                                }
  849|  5.92k|                            }
  850|  30.0k|                    }
  851|  30.0k|                }
  852|   262k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 34.5k, False: 227k]
  |  Branch (852:26): [True: 1.15k, False: 261k]
  |  Branch (852:42): [True: 22.8k, False: 11.6k]
  |  Branch (852:58): [True: 13.1k, False: 9.69k]
  |  Branch (852:74): [True: 11.0k, False: 2.15k]
  ------------------
  853|   262k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 4.48k, False: 6.56k]
  |  Branch (853:42): [True: 1.15k, False: 3.32k]
  ------------------
  854|  1.15k|                {
  855|  1.15k|                    return OpCode::MULTUI;
  856|  1.15k|                }
  857|   279k|                break;
  858|   292k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   279k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 208k, False: 5.10M]
  ------------------
  862|   208k|                char c1 = token[0];
  863|   208k|                char c2 = token[1];
  864|   208k|                char c3 = token[2];
  865|   208k|                char c4 = token[3];
  866|   208k|                char c5 = token[4];
  867|   208k|                char c6 = token[5];
  868|   208k|                char c7 = token[6];
  869|       |
  870|   208k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 30.7k, False: 178k]
  |  Branch (870:21): [True: 20.4k, False: 188k]
  |  Branch (870:37): [True: 22.0k, False: 8.71k]
  |  Branch (870:53): [True: 20.4k, False: 1.64k]
  ------------------
  871|  20.4k|                {
  872|  20.4k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 10.0k, False: 10.3k]
  |  Branch (872:25): [True: 2.96k, False: 17.4k]
  |  Branch (872:41): [True: 7.34k, False: 2.73k]
  |  Branch (872:54): [True: 5.21k, False: 2.13k]
  |  Branch (872:70): [True: 2.96k, False: 2.25k]
  ------------------
  873|  2.96k|                    {
  874|  2.96k|                        return OpCode::MOVI2FP;
  875|  2.96k|                    }
  876|  17.4k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 9.67k, False: 7.76k]
  |  Branch (876:30): [True: 1.96k, False: 15.4k]
  |  Branch (876:46): [True: 7.07k, False: 2.60k]
  |  Branch (876:62): [True: 3.75k, False: 3.31k]
  |  Branch (876:75): [True: 1.96k, False: 1.79k]
  ------------------
  877|  1.96k|                    {
  878|  1.96k|                        return OpCode::MOVFP2I;
  879|  1.96k|                    }
  880|  20.4k|                }
  881|   203k|                break;
  882|   208k|            }
  883|       |
  884|   725k|            default: {
  ------------------
  |  Branch (884:13): [True: 725k, False: 4.58M]
  ------------------
  885|   725k|                break;
  886|   208k|            }
  887|  5.31M|        }
  888|       |
  889|       |        // None found
  890|  4.53M|        return OpCode::NONE;
  891|  5.31M|    }
_ZN3dlx3iceEcc:
   17|  4.51M|    {
   18|  4.51M|        constexpr const char diff = 'a' - 'A';
   19|  4.51M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 696k, False: 3.82M]
  |  Branch (19:28): [True: 1.09M, False: 2.72M]
  ------------------
   20|  4.51M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  6.44M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  32.7k|    {
  193|  32.7k|        ParseError err;
  194|       |
  195|  32.7k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  32.7k|        err.m_LineNumber                           = line_number;
  197|  32.7k|        err.m_Column                               = column;
  198|  32.7k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  32.7k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  32.7k|        return err;
  202|  32.7k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  32.7k|    {
  207|  32.7k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  32.7k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  32.7k|                                                         actual_type);
  210|  32.7k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  2.15k|    {
  216|  2.15k|        ParseError err;
  217|       |
  218|  2.15k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  2.15k|        err.m_LineNumber        = line_number;
  220|  2.15k|        err.m_Column            = column;
  221|  2.15k|        err.invalid_number.text = text;
  222|       |
  223|  2.15k|        return err;
  224|  2.15k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  2.15k|    {
  228|  2.15k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  2.15k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  2.15k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|     11|    {
  235|     11|        ParseError err;
  236|       |
  237|     11|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|     11|        err.m_LineNumber = line_number;
  239|     11|        err.m_Column     = column;
  240|       |
  241|     11|        return err;
  242|     11|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|     11|    {
  247|     11|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|     11|                                                                     token.GetColumn().unsafe());
  249|     11|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  3.21M|    {
  255|  3.21M|        ParseError err;
  256|       |
  257|  3.21M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  3.21M|        err.m_LineNumber                   = line_number;
  259|  3.21M|        err.m_Column                       = column;
  260|  3.21M|        err.unexpected_token.expected_type = expected_type;
  261|  3.21M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  3.21M|        return err;
  264|  3.21M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  3.21M|    {
  269|  3.21M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  3.21M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  3.21M|                                                  token.GetType());
  272|  3.21M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   241k|    {
  277|   241k|        ParseError err;
  278|       |
  279|   241k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   241k|        err.m_LineNumber                   = line_number;
  281|   241k|        err.m_Column                       = column;
  282|   241k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   241k|        return err;
  285|   241k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  5.18k|    {
  289|  5.18k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  5.18k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  5.18k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  2.08M|    {
  296|  2.08M|        ParseError err;
  297|       |
  298|  2.08M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  2.08M|        err.m_LineNumber                       = line_number;
  300|  2.08M|        err.m_Column                           = column;
  301|  2.08M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  2.08M|        return err;
  304|  2.08M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  2.08M|    {
  309|  2.08M|        return ConstructInvalidLabelIdentifierParseError(
  310|  2.08M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  2.08M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   322k|    {
  317|   322k|        ParseError err;
  318|       |
  319|   322k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   322k|        err.m_LineNumber                     = line_number;
  321|   322k|        err.m_Column                         = column;
  322|   322k|        err.label_already_defined.label_name = label_name;
  323|   322k|        err.label_already_defined.at_line    = at_line;
  324|   322k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   322k|        return err;
  327|   322k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   322k|    {
  332|   322k|        return ConstructLabelAlreadyDefinedParseError(
  333|   322k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   322k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   322k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   383k|    {
  340|   383k|        ParseError err;
  341|       |
  342|   383k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   383k|        err.m_LineNumber = line_number;
  344|   383k|        err.m_Column     = column;
  345|       |
  346|   383k|        return err;
  347|   383k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   383k|    {
  352|   383k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   383k|                                                        token.GetColumn().unsafe());
  354|   383k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  55.9k|    {
  360|  55.9k|        ParseError err;
  361|       |
  362|  55.9k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  55.9k|        err.m_LineNumber               = line_number;
  364|  55.9k|        err.m_Column                   = column;
  365|  55.9k|        err.too_few_arguments.required = required;
  366|  55.9k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  55.9k|        return err;
  369|  55.9k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  55.9k|    {
  374|  55.9k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  55.9k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  55.9k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  69.1k|    {
  381|  69.1k|        ParseError err;
  382|       |
  383|  69.1k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  69.1k|        err.m_LineNumber           = line_number;
  385|  69.1k|        err.m_Column               = column;
  386|  69.1k|        err.empty_label.label_name = label_name;
  387|       |
  388|  69.1k|        return err;
  389|  69.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  69.1k|    {
  393|  69.1k|        return ConstructEmptyLabelParseError(
  394|  69.1k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  69.1k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 47.8k, False: 21.3k]
  ------------------
  396|  47.8k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  69.1k|                        token.GetText());
  398|  69.1k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  38.2k|    {
  403|  38.2k|        ParseError err;
  404|       |
  405|  38.2k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  38.2k|        err.m_LineNumber = line_number;
  407|  38.2k|        err.m_Column     = column;
  408|       |
  409|  38.2k|        return err;
  410|  38.2k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  38.2k|    {
  414|  38.2k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  38.2k|                                               token.GetColumn().unsafe());
  416|  38.2k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  6.44M|    {
   19|  6.44M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  6.44M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  96.6k|    {
  182|  96.6k|        ParsedProgram program;
  183|       |
  184|  96.6k|        program.m_Tokens = tokens;
  185|       |
  186|  96.6k|        phi::boolean line_has_instruction{false};
  187|  96.6k|        phi::usize   label_count{0u};
  188|       |
  189|  8.05M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 7.96M, False: 96.6k]
  ------------------
  190|  7.96M|        {
  191|  7.96M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  7.96M|            switch (current_token.GetType())
  196|  7.96M|            {
  197|       |                // Ignore comments
  198|  75.5k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 75.5k, False: 7.88M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  75.5k|                    break;
  201|       |
  202|  1.44M|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 1.44M, False: 6.51M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|  1.44M|                    line_has_instruction = false;
  205|  1.44M|                    break;
  206|       |
  207|  3.38M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 3.38M, False: 4.57M]
  ------------------
  208|  3.38M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 687k, False: 2.69M]
  ------------------
  209|   687k|                    {
  210|   687k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   687k|                                current_token, Token::Type::NewLine));
  212|   687k|                        break;
  213|   687k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  2.69M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 1.42M, False: 1.27M]
  ------------------
  218|  1.42M|                    {
  219|  1.42M|                        program.AddParseError(
  220|  1.42M|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|  1.42M|                        break;
  222|  1.42M|                    }
  223|       |
  224|  1.27M|                    std::string_view label_name = current_token.GetText();
  225|  1.27M|                    label_name.remove_suffix(1);
  226|       |
  227|  1.27M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 236k, False: 1.03M]
  ------------------
  228|   236k|                    {
  229|   236k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   236k|                                current_token.GetLineNumber().unsafe(),
  231|   236k|                                current_token.GetColumn().unsafe(), label_name));
  232|   236k|                        break;
  233|   236k|                    }
  234|       |
  235|  1.03M|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 634k, False: 403k]
  ------------------
  236|   634k|                    {
  237|   634k|                        program.AddParseError(
  238|   634k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   634k|                        break;
  240|   634k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   403k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 322k, False: 81.5k]
  ------------------
  244|   322k|                    {
  245|       |                        // Find first defintions of label
  246|   322k|                        const Token* first_label_definition =
  247|   322k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   322k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   322k|                                    {
  250|   322k|                                        std::string_view token_label_name = t.GetText();
  251|   322k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   322k|                                        if (token_label_name == label_name)
  254|   322k|                                        {
  255|   322k|                                            return true;
  256|   322k|                                        }
  257|   322k|                                    }
  258|       |
  259|   322k|                                    return false;
  260|   322k|                                });
  261|       |
  262|   322k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   322k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   322k|                                current_token, *first_label_definition));
  266|   322k|                        break;
  267|   322k|                    }
  268|       |
  269|  81.5k|                    program.m_JumpData[label_name] =
  270|  81.5k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  81.5k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  81.5k|                    break;
  277|   403k|                }
  278|       |
  279|   569k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 569k, False: 7.39M]
  ------------------
  280|   569k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 383k, False: 185k]
  ------------------
  281|   383k|                    {
  282|   383k|                        program.AddParseError(
  283|   383k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   383k|                        break;
  285|   383k|                    }
  286|       |
  287|   185k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   185k|                    PHI_ASSERT(current_token.HasHint());
  291|   185k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   185k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   185k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   185k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   185k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   185k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   185k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   185k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   185k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   261k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 239k, False: 22.6k]
  ------------------
  313|   239k|                    {
  314|       |                        // Get next token
  315|   239k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 1.31k, False: 237k]
  ------------------
  316|  1.31k|                        {
  317|  1.31k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|  1.31k|                                    current_token, number_of_argument_required.unsafe(),
  319|  1.31k|                                    argument_num.unsafe()));
  320|  1.31k|                            break;
  321|  1.31k|                        }
  322|       |
  323|   237k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   237k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 54.6k, False: 183k]
  ------------------
  327|  54.6k|                        {
  328|  54.6k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 38.2k, False: 16.4k]
  ------------------
  329|  38.2k|                            {
  330|  38.2k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  38.2k|                            }
  332|       |
  333|  54.6k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  54.6k|                            continue;
  336|  54.6k|                        }
  337|       |
  338|   183k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 54.6k, False: 128k]
  ------------------
  339|  54.6k|                        {
  340|  54.6k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  54.6k|                                    token, number_of_argument_required.unsafe(),
  342|  54.6k|                                    argument_num.unsafe()));
  343|  54.6k|                            break;
  344|  54.6k|                        }
  345|       |
  346|   128k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   128k|                                parse_instruction_argument(
  348|   128k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   128k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 106k, False: 21.5k]
  ------------------
  350|   106k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|   106k|                            break;
  353|   106k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  21.5k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  21.5k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  21.5k|                        argument_num++;
  360|  21.5k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  21.5k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   185k|                    program.m_Instructions.emplace_back(instruction);
  368|   185k|                    line_has_instruction = true;
  369|   185k|                    break;
  370|   569k|                }
  371|       |
  372|  2.48M|                default:
  ------------------
  |  Branch (372:17): [True: 2.48M, False: 5.47M]
  ------------------
  373|  2.48M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  2.48M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 896k, False: 1.59M]
  ------------------
  375|   896k|                    {
  376|   896k|                        expected_token_type = Token::Type::NewLine;
  377|   896k|                    }
  378|       |
  379|  2.48M|                    program.AddParseError(
  380|  2.48M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  2.48M|                    break;
  382|  7.96M|            }
  383|  7.96M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  96.6k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 13.5k, False: 83.1k]
  ------------------
  387|  13.5k|        {
  388|   145k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 131k, False: 13.5k]
  ------------------
  389|   131k|            {
  390|   131k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|   131k|                const Token& token = *it;
  393|   131k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 69.1k, False: 62.4k]
  ------------------
  394|  69.1k|                {
  395|  69.1k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  69.1k|                    --label_count;
  397|  69.1k|                }
  398|   131k|            }
  399|  13.5k|        }
  400|       |
  401|  96.6k|        return program;
  402|  96.6k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  96.6k|    {
  406|  96.6k|        TokenStream tokens = Tokenize(source);
  407|  96.6k|        return Parse(tokens);
  408|  96.6k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   128k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   128k|        switch (token.GetType())
   38|   128k|        {
   39|  6.26k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 6.26k, False: 122k]
  ------------------
   40|  6.26k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 1.49k, False: 4.76k]
  ------------------
   41|  6.26k|                                          ArgumentType::AddressDisplacement))
   42|  1.49k|                {
   43|  1.49k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  1.49k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  1.49k|                    return {};
   47|  1.49k|                }
   48|       |
   49|       |                // Get address displacement
   50|  4.76k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  4.76k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  4.76k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 11, False: 4.75k]
  ------------------
   55|     11|                {
   56|     11|                    program.AddParseError(
   57|     11|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|     11|                    return {};
   59|     11|                }
   60|       |
   61|  4.75k|                auto         it           = tokens.current_position();
   62|  4.75k|                const Token& first_token  = tokens.consume();
   63|  4.75k|                const Token& second_token = tokens.consume();
   64|  4.75k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  4.75k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 3.06k, False: 1.68k]
  ------------------
   67|  3.06k|                {
   68|  3.06k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  3.06k|                            first_token, Token::Type::OpenBracket));
   70|  3.06k|                    return {};
   71|  3.06k|                }
   72|       |
   73|       |                // Second token is the register
   74|  1.68k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.68k, False: 0]
  ------------------
   75|  1.68k|                {
   76|  1.68k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.68k|                            second_token, Token::Type::RegisterInt));
   78|  1.68k|                    return {};
   79|  1.68k|                }
   80|       |
   81|      0|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 0, False: 0]
  ------------------
   82|      0|                {
   83|      0|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|      0|                            third_token, Token::Type::ClosingBracket));
   85|      0|                    return {};
   86|      0|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|      0|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|      0|                return ConstructInstructionArgumentAddressDisplacement(
   95|      0|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|      0|            }
   97|  7.47k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 7.47k, False: 121k]
  ------------------
   98|  7.47k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.09k, False: 6.37k]
  ------------------
   99|  1.09k|                {
  100|  1.09k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.09k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.09k|                    return {};
  103|  1.09k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  6.37k|                return ConstructInstructionArgumentRegisterInt(
  109|  6.37k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  7.47k|            }
  111|  3.05k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 3.05k, False: 125k]
  ------------------
  112|  3.05k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.55k, False: 497]
  ------------------
  113|  2.55k|                {
  114|  2.55k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.55k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.55k|                    return {};
  117|  2.55k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    497|                return ConstructInstructionArgumentRegisterFloat(
  123|    497|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  3.05k|            }
  125|  5.18k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 5.18k, False: 123k]
  ------------------
  126|  5.18k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  5.18k|                return {};
  129|  3.05k|            }
  130|  66.0k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 66.0k, False: 62.5k]
  ------------------
  131|       |                // Parse as Label
  132|  66.0k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 26.5k, False: 39.4k]
  ------------------
  133|  26.5k|                {
  134|  26.5k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  26.5k|                            token, expected_argument_type, ArgumentType::Label));
  136|  26.5k|                    return {};
  137|  26.5k|                }
  138|       |
  139|  39.4k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 39.4k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  39.4k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 25.8k, False: 13.5k]
  ------------------
  146|  25.8k|                {
  147|  25.8k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  25.8k|                    return {};
  149|  25.8k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  13.5k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  39.4k|            }
  155|  4.30k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 4.30k, False: 124k]
  ------------------
  156|  4.30k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.02k, False: 3.27k]
  ------------------
  157|  1.02k|                {
  158|  1.02k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.02k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.02k|                    return {};
  161|  1.02k|                }
  162|       |
  163|  3.27k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 1.12k, False: 2.15k]
  ------------------
  164|  1.12k|                {
  165|  1.12k|                    return ConstructInstructionArgumentImmediateValue(
  166|  1.12k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  1.12k|                }
  168|       |
  169|  2.15k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  2.15k|                return {};
  171|  3.27k|            }
  172|       |
  173|  36.2k|            default:
  ------------------
  |  Branch (173:13): [True: 36.2k, False: 92.3k]
  ------------------
  174|  36.2k|                program.AddParseError(
  175|  36.2k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  36.2k|                return {};
  177|   128k|        }
  178|   128k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  7.48M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  7.48M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 4.36M, False: 3.11M]
  ------------------
  249|  4.36M|                                    {
  250|  4.36M|                                        std::string_view token_label_name = t.GetText();
  251|  4.36M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  4.36M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 322k, False: 4.04M]
  ------------------
  254|   322k|                                        {
  255|   322k|                                            return true;
  256|   322k|                                        }
  257|  4.36M|                                    }
  258|       |
  259|  7.16M|                                    return false;
  260|  7.48M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  30.1k|    {
   70|  30.1k|        PHI_ASSERT(id != IntRegisterID::None);
   71|  30.1k|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  30.1k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  30.1k|        return m_IntRegisters[id_value];
   76|  30.1k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  60.2k|    {
   81|  60.2k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  60.2k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  60.2k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  60.2k|        return m_IntRegisters[id_value];
   87|  60.2k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|    200|    {
   91|    200|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|    200|                                             RegisterAccessType::Signed),
   93|    200|                   "Mismatch for instruction access type");
   94|       |
   95|    200|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|    200|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|    200|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|    200|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 32, False: 168]
  ------------------
  100|    200|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 11, False: 21]
  ------------------
  101|     11|        {
  102|     11|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     11|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|     11|        }
  104|       |
  105|    200|        return GetIntRegister(id).GetSignedValue();
  106|    200|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  60.0k|    {
  110|  60.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  60.0k|                                             RegisterAccessType::Unsigned),
  112|  60.0k|                   "Mismatch for instruction access type");
  113|       |
  114|  60.0k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  60.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  60.0k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  60.0k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 10.0k, False: 50.0k]
  ------------------
  119|  60.0k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 10, False: 10.0k]
  ------------------
  120|     10|        {
  121|     10|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     10|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|     10|        }
  123|       |
  124|  60.0k|        return GetIntRegister(id).GetUnsignedValue();
  125|  60.0k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|    112|    {
  129|    112|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|    112|                                             RegisterAccessType::Signed),
  131|    112|                   "Mismatch for instruction access type");
  132|       |
  133|    112|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|    112|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 63, False: 49]
  ------------------
  136|     63|        {
  137|     63|            return;
  138|     63|        }
  139|       |
  140|     49|        reg.SetSignedValue(value);
  141|       |
  142|     49|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|     49|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|     49|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|     49|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  30.0k|    {
  150|  30.0k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  30.0k|                                             RegisterAccessType::Unsigned),
  152|  30.0k|                   "Mismatch for instruction access type");
  153|       |
  154|  30.0k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  30.0k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 24, False: 30.0k]
  ------------------
  157|     24|        {
  158|     24|            return;
  159|     24|        }
  160|       |
  161|  30.0k|        reg.SetUnsignedValue(value);
  162|       |
  163|  30.0k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  30.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  30.0k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  30.0k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|    110|    {
  171|    110|        PHI_ASSERT(id != FloatRegisterID::None);
  172|    110|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|    110|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|    110|        return m_FloatRegisters[id_value];
  177|    110|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|     59|    {
  182|     59|        PHI_ASSERT(id != FloatRegisterID::None);
  183|     59|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|     59|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|     59|        return m_FloatRegisters[id_value];
  188|     59|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|     59|    {
  192|     59|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|     59|                                             RegisterAccessType::Float),
  194|     59|                   "Mismatch for instruction access type");
  195|       |
  196|     59|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|     59|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|     59|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|     59|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 23, False: 36]
  ------------------
  201|     59|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 3, False: 20]
  ------------------
  202|      3|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|      3|        }
  207|       |
  208|     59|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|     59|        return reg.GetValue();
  211|     59|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|     63|    {
  215|     63|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|     63|                                             RegisterAccessType::Double),
  217|     63|                   "Mismatch for instruction access type");
  218|       |
  219|     63|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 23, False: 40]
  ------------------
  220|     23|        {
  221|     23|            Raise(Exception::MisalignedRegisterAccess);
  222|     23|            return {0.0};
  223|     23|        }
  224|       |
  225|     40|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|     40|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|     40|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|     40|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 14, False: 26]
  ------------------
  230|     40|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 9, False: 5]
  ------------------
  231|      9|        {
  232|      9|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      9|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      9|        }
  234|       |
  235|     40|        const FloatRegisterValueType register_value_type_high =
  236|     40|                m_FloatRegistersValueTypes[id_value + 1u];
  237|     40|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 17, False: 23]
  ------------------
  238|     40|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 12, False: 5]
  ------------------
  239|     12|        {
  240|     12|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     12|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|     12|        }
  242|       |
  243|     40|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|     40|        const FloatRegister& second_reg =
  245|     40|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|     40|        const float first_value  = first_reg.GetValue().unsafe();
  248|     40|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|     40|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|     40|        const std::uint32_t first_value_bits =
  254|     40|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|     40|        const std::uint32_t second_value_bits =
  256|     40|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|     40|        std::uint64_t final_value_bits =
  259|     40|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|     40|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|     63|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|     63|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|     18|    {
  268|     18|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|     18|                                             RegisterAccessType::Float),
  270|     18|                   "Mismatch for instruction access type");
  271|       |
  272|     18|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|     18|        reg.SetValue(value);
  275|       |
  276|     18|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|     18|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|     18|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|     18|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|     15|    {
  284|     15|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|     15|                                             RegisterAccessType::Double),
  286|     15|                   "Mismatch for instruction access type");
  287|       |
  288|     15|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 9, False: 6]
  ------------------
  289|      9|        {
  290|      9|            Raise(Exception::MisalignedRegisterAccess);
  291|      9|            return;
  292|      9|        }
  293|       |
  294|      6|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|      6|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|      6|        double              value_raw  = value.unsafe();
  298|      6|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|      6|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|      6|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|      6|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|      6|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|      6|        FloatRegister& first_reg = GetFloatRegister(id);
  307|      6|        FloatRegister& second_reg =
  308|      6|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|      6|        first_reg.SetValue(first_value);
  311|      6|        second_reg.SetValue(second_value);
  312|       |
  313|      6|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|      6|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|      6|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|      6|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|      6|    }
_ZN3dlx9Processor7GetFPSREv:
  321|     37|    {
  322|     37|        return m_FPSR;
  323|     37|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|     74|    {
  327|     74|        return m_FPSR;
  328|     74|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|     74|    {
  332|     74|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|     74|        return status_reg.Get();
  335|     74|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|     37|    {
  339|     37|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|     37|        status_reg.SetStatus(value);
  342|     37|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|   120k|    {
  346|   120k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|   120k|        inst.Execute(*this);
  349|   120k|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  96.6k|    {
  353|  96.6k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 51.7k, False: 44.8k]
  ------------------
  354|  51.7k|        {
  355|  51.7k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  51.7k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  51.7k|            return false;
  357|  51.7k|        }
  358|       |
  359|  44.8k|        m_CurrentProgram = &program;
  360|       |
  361|  44.8k|        m_ProgramCounter               = 0u;
  362|  44.8k|        m_Halted                       = false;
  363|  44.8k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  44.8k|        m_LastRaisedException          = Exception::None;
  365|  44.8k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  44.8k|        return true;
  368|  96.6k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|   120k|    {
  373|   120k|        return m_CurrentProgram;
  374|   120k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|   165k|    {
  378|       |        // No nothing when no program is loaded
  379|   165k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 165k]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|   165k|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 44.4k, False: 120k]
  ------------------
  386|  44.4k|        {
  387|  44.4k|            m_Halted                       = true;
  388|  44.4k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|  44.4k|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|   165k|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 44.4k, False: 120k]
  ------------------
  393|  44.4k|        {
  394|  44.4k|            return;
  395|  44.4k|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|   120k|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|   120k|        const auto& current_instruction =
  402|   120k|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|   120k|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|   120k|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 193, False: 120k]
  ------------------
  409|    193|        {
  410|    193|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    193|            return;
  412|    193|        }
  413|       |
  414|   120k|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|   120k|        ++m_CurrentStepCount;
  417|       |
  418|   120k|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 269, False: 120k]
  |  Branch (418:14): [True: 120k, False: 0]
  |  Branch (418:42): [True: 12, False: 120k]
  ------------------
  419|   120k|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 257, False: 120k]
  ------------------
  420|    269|        {
  421|    269|            m_Halted                       = true;
  422|    269|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    269|        }
  424|   120k|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  44.8k|    {
  428|       |        // Do nothing when no program is loaded
  429|  44.8k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 44.8k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  44.8k|        m_ProgramCounter               = 0u;
  435|  44.8k|        m_Halted                       = false;
  436|  44.8k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  44.8k|        m_LastRaisedException          = Exception::None;
  438|  44.8k|        m_CurrentStepCount             = 0u;
  439|       |
  440|   210k|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 165k, False: 44.8k]
  ------------------
  441|   165k|        {
  442|   165k|            ExecuteStep();
  443|   165k|        }
  444|       |
  445|  44.8k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  44.8k|                   "RegisterAccessType was not reset correctly");
  447|  44.8k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  96.6k|    {
  464|  96.6k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 3.09M, False: 96.6k]
  ------------------
  465|  3.09M|        {
  466|  3.09M|            reg.SetSignedValue(0);
  467|  3.09M|        }
  468|       |
  469|  96.6k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 3.09M, False: 96.6k]
  ------------------
  470|  3.09M|        {
  471|  3.09M|            reg.SetValue(0.0f);
  472|  3.09M|        }
  473|       |
  474|  96.6k|        m_FPSR.SetStatus(false);
  475|  96.6k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  96.6k|    {
  479|  96.6k|        m_MemoryBlock.Clear();
  480|  96.6k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    201|    {
  488|    201|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    201|        m_LastRaisedException = exception;
  491|       |
  492|    201|        switch (exception)
  493|    201|        {
  494|     13|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 13, False: 188]
  ------------------
  495|     13|                m_Halted = true;
  496|     13|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|     13|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|     13|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 201]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 201]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      2|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 2, False: 199]
  ------------------
  505|      2|                m_Halted = true;
  506|      2|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      2|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      2|                return;
  508|      5|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 5, False: 196]
  ------------------
  509|      5|                m_Halted = true;
  510|      5|                return;
  511|    146|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 146, False: 55]
  ------------------
  512|    146|                m_Halted = true;
  513|    146|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|    146|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|    146|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 201]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      3|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 3, False: 198]
  ------------------
  519|      3|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      3|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      3|                m_Halted = true;
  521|      3|                return;
  522|     32|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 32, False: 169]
  ------------------
  523|     32|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     32|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     32|                m_Halted = true;
  525|     32|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 201]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    201|#endif
  531|    201|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      2|    {
  558|      2|        return m_MemoryBlock;
  559|      2|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|  30.0k|    {
  573|  30.0k|        return m_NextProgramCounter;
  574|  30.0k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|   120k|    {
  578|   120k|        m_NextProgramCounter = new_npc;
  579|   120k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  90.6k|    {
   36|  90.6k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  90.6k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  90.6k|        switch (expected_access)
   40|  90.6k|        {
   41|     93|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 93, False: 90.5k]
  ------------------
   42|     93|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 90.6k]
  ------------------
   44|      0|                return false;
   45|     28|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 28, False: 90.5k]
  ------------------
   46|     28|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 14, False: 14]
  |  Branch (46:63): [True: 14, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 90.6k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      2|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 2, False: 90.6k]
  ------------------
   51|      2|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 1, False: 1]
  |  Branch (51:63): [True: 1, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 90.6k]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  90.4k|            default:
  ------------------
  |  Branch (54:13): [True: 90.4k, False: 123]
  ------------------
   55|  90.4k|                return expected_access == access;
   56|  90.6k|        }
   57|  90.6k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  5.41M|    {
   14|  5.41M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 1.00M, False: 4.40M]
  ------------------
   15|  1.00M|        {
   16|  1.00M|            char first_char = token[0];
   17|  1.00M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 72.1k, False: 928k]
  |  Branch (17:38): [True: 10.4k, False: 918k]
  ------------------
   18|  82.6k|            {
   19|  82.6k|                char second_char = token[1];
   20|  82.6k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 74.6k, False: 8.00k]
  |  Branch (20:43): [True: 68.9k, False: 5.71k]
  ------------------
   21|  68.9k|                {
   22|  68.9k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  68.9k|                }
   24|  82.6k|            }
   25|  1.00M|        }
   26|  4.40M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 1.03M, False: 3.37M]
  ------------------
   27|  1.03M|        {
   28|  1.03M|            char first_char = token[0];
   29|  1.03M|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 49.9k, False: 986k]
  |  Branch (29:38): [True: 5.62k, False: 980k]
  ------------------
   30|  55.5k|            {
   31|  55.5k|                char second_char = token[1];
   32|  55.5k|                char third_char  = token[2];
   33|       |
   34|  55.5k|                switch (second_char)
   35|  55.5k|                {
   36|  13.2k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 13.2k, False: 42.3k]
  ------------------
   37|  13.2k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 10.7k, False: 2.43k]
  |  Branch (37:50): [True: 4.67k, False: 6.10k]
  ------------------
   38|  4.67k|                        {
   39|  4.67k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  4.67k|                        }
   41|  8.53k|                        break;
   42|  13.2k|                    }
   43|  8.53k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 8.15k, False: 47.4k]
  ------------------
   44|  8.15k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 4.37k, False: 3.78k]
  |  Branch (44:50): [True: 820, False: 3.55k]
  ------------------
   45|    820|                        {
   46|    820|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    820|                        }
   48|  7.33k|                        break;
   49|  8.15k|                    }
   50|  13.3k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 13.3k, False: 42.2k]
  ------------------
   51|  13.3k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 1.95k, False: 11.3k]
  |  Branch (51:50): [True: 155, False: 11.1k]
  ------------------
   52|  2.10k|                        {
   53|  2.10k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.10k|                        }
   55|  11.1k|                        break;
   56|  13.3k|                    }
   57|  20.8k|                    default: {
  ------------------
  |  Branch (57:21): [True: 20.8k, False: 34.6k]
  ------------------
   58|  20.8k|                        break;
   59|  13.3k|                    }
   60|  55.5k|                }
   61|  55.5k|            }
   62|  1.03M|        }
   63|       |
   64|  5.33M|        return IntRegisterID::None;
   65|  5.41M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  5.33M|    {
   69|  5.33M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 931k, False: 4.40M]
  ------------------
   70|   931k|        {
   71|   931k|            char first_char = token[0];
   72|   931k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 14.8k, False: 916k]
  |  Branch (72:38): [True: 30.7k, False: 886k]
  ------------------
   73|  45.5k|            {
   74|  45.5k|                char second_char = token[1];
   75|  45.5k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 37.9k, False: 7.62k]
  |  Branch (75:43): [True: 12.5k, False: 25.4k]
  ------------------
   76|  12.5k|                {
   77|  12.5k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  12.5k|                }
   79|  45.5k|            }
   80|   931k|        }
   81|  4.40M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 1.02M, False: 3.37M]
  ------------------
   82|  1.02M|        {
   83|  1.02M|            char first_char = token[0];
   84|  1.02M|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 13.7k, False: 1.01M]
  |  Branch (84:38): [True: 34.1k, False: 980k]
  ------------------
   85|  47.9k|            {
   86|  47.9k|                char second_char = token[1];
   87|  47.9k|                char third_char  = token[2];
   88|       |
   89|  47.9k|                switch (second_char)
   90|  47.9k|                {
   91|  4.51k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.51k, False: 43.4k]
  ------------------
   92|  4.51k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 3.38k, False: 1.13k]
  |  Branch (92:50): [True: 867, False: 2.51k]
  ------------------
   93|    867|                        {
   94|    867|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    867|                        }
   96|  3.64k|                        break;
   97|  4.51k|                    }
   98|  8.33k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 8.33k, False: 39.6k]
  ------------------
   99|  8.33k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 6.01k, False: 2.32k]
  |  Branch (99:50): [True: 2.29k, False: 3.71k]
  ------------------
  100|  2.29k|                        {
  101|  2.29k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  2.29k|                        }
  103|  6.04k|                        break;
  104|  8.33k|                    }
  105|  9.77k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 9.77k, False: 38.2k]
  ------------------
  106|  9.77k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 5.88k, False: 3.88k]
  |  Branch (106:50): [True: 266, False: 3.62k]
  ------------------
  107|  6.14k|                        {
  108|  6.14k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  6.14k|                        }
  110|  3.62k|                        break;
  111|  9.77k|                    }
  112|  25.3k|                    default: {
  ------------------
  |  Branch (112:21): [True: 25.3k, False: 22.6k]
  ------------------
  113|  25.3k|                        break;
  114|  9.77k|                    }
  115|  47.9k|                }
  116|  47.9k|            }
  117|  1.02M|        }
  118|       |
  119|  5.31M|        return FloatRegisterID::None;
  120|  5.33M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  5.20M|    {
  124|  5.20M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 751k, False: 4.45M]
  ------------------
  125|   751k|        {
  126|   751k|            char c1 = token[0];
  127|   751k|            char c2 = token[1];
  128|   751k|            char c3 = token[2];
  129|   751k|            char c4 = token[3];
  130|       |
  131|   751k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 35.0k, False: 716k]
  |  Branch (131:34): [True: 28.5k, False: 688k]
  |  Branch (131:49): [True: 25.8k, False: 37.7k]
  |  Branch (131:62): [True: 15.9k, False: 21.8k]
  ------------------
  132|   751k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 32.7k, False: 9.03k]
  |  Branch (132:34): [True: 3.03k, False: 6.00k]
  |  Branch (132:49): [True: 27.1k, False: 8.63k]
  |  Branch (132:62): [True: 2.07k, False: 6.55k]
  ------------------
  133|   751k|        }
  134|       |
  135|  4.45M|        return false;
  136|  5.20M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  96.6k|    {
   12|  96.6k|        m_Value = value;
   13|  96.6k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|     74|    {
   17|     74|        return m_Value;
   18|     74|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  7.51M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   697k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  19.3M|    {
   41|  19.3M|        return m_Type;
   42|  19.3M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  6.95M|    {
   51|  6.95M|        return m_LineNumber;
   52|  6.95M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  6.76M|    {
   56|  6.76M|        return m_Column;
   57|  6.76M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  11.0M|    {
   66|  11.0M|        return m_Text;
   67|  11.0M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   193k|    {
   80|   193k|        return m_HasHint;
   81|   193k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   198k|    {
   85|   198k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   198k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   198k|                   m_Type == Type::ImmediateInteger);
   88|   198k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   198k|        return m_Hint;
   91|   198k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  96.6k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  96.6k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  96.6k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  4.76k|    {
   51|  4.76k|        auto it = m_Iterator;
   52|  19.0k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 14.2k, False: 4.75k]
  ------------------
   53|  14.2k|        {
   54|  14.2k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 11, False: 14.2k]
  ------------------
   55|     11|            {
   56|     11|                return false;
   57|     11|            }
   58|  14.2k|        }
   59|       |
   60|  4.75k|        return true;
   61|  4.76k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  8.29M|    {
   65|  8.29M|        return m_Iterator != m_Tokens.end();
   66|  8.29M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  8.21M|    {
   70|  8.21M|        return m_Iterator == m_Tokens.end();
   71|  8.21M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  8.21M|    {
   85|  8.21M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  8.21M|        return *m_Iterator++;
   91|  8.21M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  4.75k|    {
  164|  4.75k|        return m_Iterator;
  165|  4.75k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  13.5k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  13.5k|        return m_Tokens.rbegin();
  224|  13.5k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|   131k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|   131k|        return m_Tokens.rend();
  233|   131k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  96.6k|    {
   63|  96.6k|        TokenStream tokens;
   64|       |
   65|  96.6k|        std::string_view current_token;
   66|       |
   67|  96.6k|        phi::u64 current_line_number{1u};
   68|  96.6k|        phi::u64 current_column{1u};
   69|  96.6k|        phi::u64 token_begin{0u};
   70|       |
   71|  96.6k|        phi::boolean parsing_comment{false};
   72|       |
   73|  28.3M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 28.2M, False: 96.6k]
  ------------------
   74|  28.2M|        {
   75|  28.2M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  28.2M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 1.50M, False: 26.7M]
  ------------------
   78|  1.50M|            {
   79|  1.50M|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 689k, False: 814k]
  ------------------
   80|   689k|                {
   81|       |                    // Skip empty lines
   82|   689k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   689k|                                        current_line_number, current_column);
   84|       |
   85|   689k|                    parsing_comment = false;
   86|   689k|                    current_line_number += 1u;
   87|   689k|                    current_column = 1u;
   88|   689k|                    continue;
   89|   689k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   814k|                tokens.emplace_back(
   93|   814k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   814k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   814k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   814k|                                    current_line_number, current_column);
   98|       |
   99|   814k|                current_token   = std::string_view{};
  100|   814k|                parsing_comment = false;
  101|   814k|                current_line_number += 1u;
  102|   814k|                current_column = 0u;
  103|   814k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  26.7M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 39.6k, False: 26.7M]
  |  Branch (105:34): [True: 66.7k, False: 26.6M]
  ------------------
  106|   106k|            {
  107|   106k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 25.5k, False: 80.9k]
  ------------------
  108|  25.5k|                {
  109|  25.5k|                    token_begin = i;
  110|  25.5k|                }
  111|  80.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 52.9k, False: 27.9k]
  ------------------
  112|  52.9k|                {
  113|  52.9k|                    tokens.emplace_back(ParseToken(
  114|  52.9k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  52.9k|                            current_line_number, current_column - current_token.length()));
  116|  52.9k|                    token_begin   = i;
  117|  52.9k|                    current_token = std::string_view{};
  118|  52.9k|                }
  119|       |
  120|   106k|                parsing_comment = true;
  121|   106k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|   106k|            }
  123|  26.6M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 664k, False: 25.9M]
  ------------------
  124|   664k|            {
  125|       |                // simply append the character
  126|   664k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   664k|            }
  128|  25.9M|            else
  129|  25.9M|            {
  130|       |                // Not parsing a comment
  131|  25.9M|                switch (c)
  132|  25.9M|                {
  133|  1.06M|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 1.06M, False: 24.9M]
  ------------------
  134|  1.59M|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 536k, False: 25.4M]
  ------------------
  135|  1.96M|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 369k, False: 25.6M]
  ------------------
  136|  1.96M|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 733k, False: 1.23M]
  ------------------
  137|   733k|                        {
  138|   733k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   733k|                            continue;
  141|   733k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|  1.23M|                        tokens.emplace_back(ParseToken(
  145|  1.23M|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|  1.23M|                                current_line_number, current_column - current_token.length()));
  147|  1.23M|                        current_token = std::string_view{};
  148|  1.23M|                        break;
  149|  2.30M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 2.30M, False: 23.6M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  2.30M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 1.38M, False: 916k]
  ------------------
  152|  1.38M|                        {
  153|  1.38M|                            current_token =
  154|  1.38M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  1.38M|                            tokens.emplace_back(ParseToken(
  156|  1.38M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  1.38M|                                    current_line_number,
  158|  1.38M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  1.38M|                            current_token = std::string_view{};
  161|  1.38M|                        }
  162|   916k|                        else
  163|   916k|                        {
  164|       |                            // Orphan colon
  165|   916k|                            token_begin = i;
  166|       |
  167|   916k|                            tokens.emplace_back(Token::Type::Colon,
  168|   916k|                                                source.substr(token_begin.unsafe(), 1),
  169|   916k|                                                current_line_number, current_column);
  170|   916k|                        }
  171|  2.30M|                        break;
  172|   366k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 366k, False: 25.6M]
  ------------------
  173|  1.19M|                    case '(':
  ------------------
  |  Branch (173:21): [True: 832k, False: 25.1M]
  ------------------
  174|  1.52M|                    case ')':
  ------------------
  |  Branch (174:21): [True: 327k, False: 25.6M]
  ------------------
  175|  1.52M|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 742k, False: 783k]
  ------------------
  176|   742k|                        {
  177|   742k|                            tokens.emplace_back(ParseToken(
  178|   742k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   742k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   742k|                            current_token = std::string_view{};
  182|   742k|                        }
  183|       |
  184|  1.52M|                        Token::Type type;
  185|  1.52M|                        switch (c)
  186|  1.52M|                        {
  187|   366k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 366k, False: 1.15M]
  ------------------
  188|   366k|                                type = Token::Type::Comma;
  189|   366k|                                break;
  190|   832k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 832k, False: 693k]
  ------------------
  191|   832k|                                type = Token::Type::OpenBracket;
  192|   832k|                                break;
  193|   327k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 327k, False: 1.19M]
  ------------------
  194|   327k|                                type = Token::Type::ClosingBracket;
  195|   327k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 1.52M]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|  1.52M|#endif
  201|  1.52M|                        }
  202|       |
  203|  1.52M|                        token_begin = i;
  204|       |
  205|  1.52M|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|  1.52M|                                            current_line_number, current_column);
  207|  1.52M|                        break;
  208|       |
  209|  20.1M|                    default:
  ------------------
  |  Branch (209:21): [True: 20.1M, False: 5.79M]
  ------------------
  210|  20.1M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 4.19M, False: 15.9M]
  ------------------
  211|  4.19M|                        {
  212|  4.19M|                            token_begin = i;
  213|  4.19M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  20.1M|                        current_token =
  217|  20.1M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  25.9M|                }
  219|  25.9M|            }
  220|       |
  221|  26.8M|            current_column += 1u;
  222|  26.8M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  96.6k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 39.6k, False: 57.0k]
  ------------------
  226|  39.6k|        {
  227|  39.6k|            tokens.emplace_back(
  228|  39.6k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  39.6k|                               current_line_number, current_column - current_token.length()));
  230|  39.6k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  96.6k|        tokens.finalize();
  234|       |
  235|  96.6k|        return tokens;
  236|  96.6k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  4.26M|    {
   11|  4.26M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 32.1k, False: 4.23M]
  |  Branch (11:35): [True: 17.4k, False: 14.6k]
  ------------------
   12|  17.4k|        {
   13|  17.4k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  17.4k|            if (number)
  ------------------
  |  Branch (15:17): [True: 5.22k, False: 12.2k]
  ------------------
   16|  5.22k|            {
   17|  5.22k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  5.22k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  5.22k|            }
   20|       |
   21|  12.2k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  17.4k|        }
   23|       |
   24|  4.25M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 29.5k, False: 4.22M]
  |  Branch (24:35): [True: 49.0k, False: 4.17M]
  ------------------
   25|  78.5k|        {
   26|  78.5k|            return {Token::Type::Comment, token, line_number, column};
   27|  78.5k|        }
   28|       |
   29|  4.17M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 50.8k, False: 4.12M]
  ------------------
   30|  50.8k|        {
   31|  50.8k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  50.8k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  50.8k|        }
   34|       |
   35|  4.12M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 25.8k, False: 4.09M]
  ------------------
   36|  25.8k|        {
   37|  25.8k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  25.8k|        }
   39|       |
   40|  4.09M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 53.6k, False: 4.04M]
  ------------------
   41|  53.6k|        {
   42|  53.6k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  53.6k|                    static_cast<std::uint32_t>(id)};
   44|  53.6k|        }
   45|       |
   46|  4.04M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 7.65k, False: 4.03M]
  ------------------
   47|  7.65k|        {
   48|  7.65k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  7.65k|                    static_cast<std::uint32_t>(id)};
   50|  7.65k|        }
   51|       |
   52|  4.03M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 580k, False: 3.45M]
  ------------------
   53|   580k|        {
   54|   580k|            return {Token::Type::OpCode, token, line_number, column,
   55|   580k|                    static_cast<std::uint32_t>(opcode)};
   56|   580k|        }
   57|       |
   58|  3.45M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  4.03M|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  48.3k|    {
   53|       |        // Constants
   54|  48.3k|        constexpr std::uint8_t number_of_opcodes =
   55|  48.3k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  48.3k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  48.3k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  48.3k|        std::string ret;
   60|       |
   61|   369k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 365k, False: 4.06k]
  ------------------
   62|   365k|        {
   63|   365k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   365k|            switch (current_value)
   66|   365k|            {
   67|       |                // OpCode
   68|   219k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 219k, False: 145k]
  ------------------
   69|       |                    // Has one more value
   70|   219k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 218k, False: 609]
  ------------------
   71|   218k|                    {
   72|   218k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   218k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   218k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 7.23k, False: 211k]
  ------------------
   77|  7.23k|                        {
   78|  7.23k|                            return detail::ErrorString;
   79|  7.23k|                        }
   80|   218k|                    }
   81|   212k|                    break;
   82|   219k|                }
   83|       |
   84|       |                // Int Register
   85|   212k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 48.0k, False: 317k]
  ------------------
   86|       |                    // Has one more value
   87|  48.0k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 47.9k, False: 143]
  ------------------
   88|  47.9k|                    {
   89|  47.9k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  47.9k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  47.9k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 899, False: 47.0k]
  ------------------
   93|    899|                        {
   94|    899|                            return detail::ErrorString;
   95|    899|                        }
   96|  47.9k|                    }
   97|  47.1k|                    break;
   98|  48.0k|                }
   99|       |
  100|       |                // Float register
  101|  47.1k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 5.93k, False: 359k]
  ------------------
  102|       |                    // Has one more value
  103|  5.93k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 5.93k, False: 6]
  ------------------
  104|  5.93k|                    {
  105|  5.93k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  5.93k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  5.93k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 159, False: 5.77k]
  ------------------
  109|    159|                        {
  110|    159|                            return detail::ErrorString;
  111|    159|                        }
  112|  5.93k|                    }
  113|  5.77k|                    break;
  114|  5.93k|                }
  115|       |
  116|       |                // Floating point status register
  117|  30.0k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 30.0k, False: 335k]
  ------------------
  118|  30.0k|                    ret += "FPSR";
  119|  30.0k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 54, False: 30.0k]
  ------------------
  120|     54|                    {
  121|     54|                        return detail::ErrorString;
  122|     54|                    }
  123|       |
  124|  30.0k|                    break;
  125|  30.0k|                }
  126|       |
  127|       |                // Immediate integer
  128|  30.0k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 1.50k, False: 363k]
  ------------------
  129|  1.50k|                    ret += "#";
  130|  1.50k|                    [[fallthrough]];
  131|  1.50k|                }
  132|       |
  133|       |                // Integer literal
  134|  2.30k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 804, False: 364k]
  ------------------
  135|  2.30k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  2.30k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 2.28k, False: 25]
  ------------------
  138|  2.28k|                    {
  139|  2.28k|                        std::int16_t value = 0;
  140|       |
  141|  6.74k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 4.46k, False: 2.28k]
  ------------------
  142|  4.46k|                        {
  143|  4.46k|                            value <<= 8;
  144|  4.46k|                            value &= data[index++];
  145|  4.46k|                        }
  146|       |
  147|  2.28k|                        ret += std::to_string(value);
  148|  2.28k|                    }
  149|  2.30k|                    break;
  150|  1.50k|                }
  151|       |
  152|       |                // Label
  153|  7.21k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 7.21k, False: 357k]
  ------------------
  154|  7.21k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  7.21k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 7.20k, False: 7]
  ------------------
  157|  7.20k|                    {
  158|  7.20k|                        std::string label_name = "lbl_";
  159|       |
  160|  42.8k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 35.6k, False: 7.20k]
  ------------------
  161|  35.6k|                        {
  162|  35.6k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  35.6k|                            label_name += c;
  165|  35.6k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  7.20k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 7.03k, False: 176]
  |  Branch (168:45): [True: 2.94k, False: 4.08k]
  ------------------
  169|  2.94k|                        {
  170|  2.94k|                            label_name += ':';
  171|  2.94k|                            ret += label_name;
  172|  2.94k|                        }
  173|  4.26k|                        else
  174|  4.26k|                        {
  175|  4.26k|                            ret += label_name;
  176|  4.26k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 678, False: 3.58k]
  ------------------
  177|    678|                            {
  178|    678|                                return detail::ErrorString;
  179|    678|                            }
  180|  4.26k|                        }
  181|  7.20k|                    }
  182|  6.53k|                    break;
  183|  7.21k|                }
  184|       |
  185|       |                // Newline
  186|  6.53k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 2.79k, False: 362k]
  ------------------
  187|  2.79k|                    ret += '\n';
  188|  2.79k|                    break;
  189|  7.21k|                }
  190|       |
  191|       |                // Comment
  192|  13.9k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 13.9k, False: 351k]
  ------------------
  193|  13.9k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  13.9k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 13.9k, False: 5]
  ------------------
  196|  13.9k|                    {
  197|  13.9k|                        std::string comment = "; ";
  198|       |
  199|  83.6k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 69.6k, False: 13.9k]
  ------------------
  200|  69.6k|                        {
  201|  69.6k|                            comment += static_cast<char>(data[index++]);
  202|  69.6k|                        }
  203|       |
  204|  13.9k|                        ret += comment + '\n';
  205|  13.9k|                    }
  206|  13.9k|                    break;
  207|  7.21k|                }
  208|       |
  209|       |                // Ignore
  210|  35.2k|                default:
  ------------------
  |  Branch (210:17): [True: 35.2k, False: 329k]
  ------------------
  211|  35.2k|                    return detail::ErrorString;
  212|   365k|            }
  213|   365k|        }
  214|       |
  215|  4.06k|        return ret;
  216|  48.3k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   307k|        {
   20|   307k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 305k, False: 1.98k]
  ------------------
   21|   305k|            {
   22|   305k|                std::uint8_t val = data[index++];
   23|   305k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 243k, False: 61.4k]
  ------------------
   24|   243k|                {
   25|   243k|                    text += ' ';
   26|   243k|                }
   27|  61.4k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 52.3k, False: 9.02k]
  ------------------
   28|  52.3k|                {
   29|  52.3k|                    text += ',';
   30|  52.3k|                }
   31|  9.02k|                else
   32|  9.02k|                {
   33|  9.02k|                    return false;
   34|  9.02k|                }
   35|   305k|            }
   36|       |
   37|   298k|            return true;
   38|   307k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  35.6k|        {
   42|  35.6k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 31.4k, False: 4.24k]
  ------------------
   43|  31.4k|            {
   44|  31.4k|                return '_';
   45|  31.4k|            }
   46|       |
   47|  4.24k|            return c;
   48|  35.6k|        }

LLVMFuzzerTestOneInput:
   13|  48.3k|{
   14|  48.3k|    static dlx::Processor processor;
   15|       |
   16|  48.3k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   17|       |
   18|       |    // Parse it
   19|  48.3k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   20|       |
   21|       |    // Clear registers and memory
   22|  48.3k|    processor.ClearRegisters();
   23|  48.3k|    processor.ClearMemory();
   24|       |
   25|       |    // Run it
   26|  48.3k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (26:9): [True: 300, False: 48.0k]
  ------------------
   27|    300|    {
   28|    300|        processor.ExecuteCurrentProgram();
   29|    300|    }
   30|       |
   31|  48.3k|    std::string source_structured = fuzz::ParseAsStrucutedDLXCode(data, size);
   32|       |
   33|  48.3k|    program = dlx::Parser::Parse(source_structured);
   34|       |
   35|  48.3k|    processor.ClearRegisters();
   36|  48.3k|    processor.ClearMemory();
   37|       |
   38|  48.3k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (38:9): [True: 44.5k, False: 3.75k]
  ------------------
   39|  44.5k|    {
   40|  44.5k|        processor.ExecuteCurrentProgram();
   41|  44.5k|    }
   42|       |
   43|  48.3k|    return 0;
   44|  48.3k|}


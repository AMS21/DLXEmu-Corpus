_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   334k|        {
  169|   334k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   334k|            switch (index.unsafe())
  172|   334k|            {
  173|   149k|                case 0:
  ------------------
  |  Branch (173:17): [True: 149k, False: 185k]
  ------------------
  174|   149k|                    return m_Arg1Type;
  175|       |
  176|  93.9k|                case 1:
  ------------------
  |  Branch (176:17): [True: 93.9k, False: 241k]
  ------------------
  177|  93.9k|                    return m_Arg2Type;
  178|       |
  179|  91.6k|                case 2:
  ------------------
  |  Branch (179:17): [True: 91.6k, False: 243k]
  ------------------
  180|  91.6k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 334k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   334k|#endif
  187|   334k|            }
  188|   334k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|  90.1k|        {
  195|  90.1k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|  90.1k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 86.4k, False: 3.73k]
  ------------------
  199|  86.4k|            {
  200|  86.4k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|  86.4k|            }
  202|  90.1k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 57.2k, False: 32.8k]
  ------------------
  203|  57.2k|            {
  204|  57.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|  57.2k|            }
  206|  90.1k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 32.2k, False: 57.8k]
  ------------------
  207|  32.2k|            {
  208|  32.2k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  32.2k|            }
  210|       |
  211|  90.1k|            return number_of_argument_required;
  212|  90.1k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  51.2k|        {
  216|  51.2k|            return m_RegisterAccessType;
  217|  51.2k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|  90.1k|        {
  221|  90.1k|            return m_Executor;
  222|  90.1k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   202k|    {
   38|   202k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   202k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   202k|                                         static_cast<underlying_t>(rhs));
   42|   202k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   202k|    {
   55|   202k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   202k|        return static_cast<underlying_t>(type & test) != 0;
   58|   202k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   109k|    {
  204|   109k|        switch (value)
  205|   109k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|  49.4k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  49.4k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 49.4k, False: 59.6k]
  |  |  |  |  ------------------
  |  |  |  |  208|  49.4k|        return #name;
  |  |  ------------------
  |  |   16|  49.4k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  6.69k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 6.69k, False: 102k]
  |  |  |  |  ------------------
  |  |  |  |  208|  6.69k|        return #name;
  |  |  ------------------
  |  |   17|  6.69k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    338|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 338, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    338|        return #name;
  |  |  ------------------
  |  |   18|  3.72k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  3.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.72k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.72k|        return #name;
  |  |  ------------------
  |  |   19|  3.72k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    209|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 209, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    209|        return #name;
  |  |  ------------------
  |  |   20|  2.97k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.97k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.97k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.97k|        return #name;
  |  |  ------------------
  |  |   21|  2.97k|                                                                                                   \
  |  |   22|  2.97k|    /* Sub */                                                                                      \
  |  |   23|  2.97k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    686|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 686, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    686|        return #name;
  |  |  ------------------
  |  |   24|  1.00k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.00k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.00k|        return #name;
  |  |  ------------------
  |  |   25|  3.41k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  3.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 3.41k, False: 105k]
  |  |  |  |  ------------------
  |  |  |  |  208|  3.41k|        return #name;
  |  |  ------------------
  |  |   26|  3.41k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    479|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 479, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    479|        return #name;
  |  |  ------------------
  |  |   27|    613|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    613|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 613, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    613|        return #name;
  |  |  ------------------
  |  |   28|    613|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    288|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 288, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    288|        return #name;
  |  |  ------------------
  |  |   29|    288|                                                                                                   \
  |  |   30|    288|    /* Multiplication */                                                                           \
  |  |   31|    288|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    143|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 143, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    143|        return #name;
  |  |  ------------------
  |  |   32|    143|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|     73|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 73, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     73|        return #name;
  |  |  ------------------
  |  |   33|    576|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    576|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 576, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    576|        return #name;
  |  |  ------------------
  |  |   34|    576|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    259|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 259, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    259|        return #name;
  |  |  ------------------
  |  |   35|    605|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    605|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 605, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    605|        return #name;
  |  |  ------------------
  |  |   36|    605|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    400|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 400, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    400|        return #name;
  |  |  ------------------
  |  |   37|    400|                                                                                                   \
  |  |   38|    400|    /* Division */                                                                                 \
  |  |   39|    400|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     11|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     11|        return #name;
  |  |  ------------------
  |  |   40|     19|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     19|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     19|        return #name;
  |  |  ------------------
  |  |   41|    234|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    234|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 234, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    234|        return #name;
  |  |  ------------------
  |  |   42|    326|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    326|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 326, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    326|        return #name;
  |  |  ------------------
  |  |   43|    326|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |   44|  1.02k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.02k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.02k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.02k|        return #name;
  |  |  ------------------
  |  |   45|  1.02k|                                                                                                   \
  |  |   46|  1.02k|    /* Shift left (logical) */                                                                     \
  |  |   47|  1.83k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.83k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.83k|        return #name;
  |  |  ------------------
  |  |   48|  1.83k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    191|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 191, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    191|        return #name;
  |  |  ------------------
  |  |   49|    191|                                                                                                   \
  |  |   50|    191|    /* Shift right (logical) */                                                                    \
  |  |   51|    448|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    448|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 448, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    448|        return #name;
  |  |  ------------------
  |  |   52|    448|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 77, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     77|        return #name;
  |  |  ------------------
  |  |   53|     77|                                                                                                   \
  |  |   54|     77|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|     83|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     83|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 83, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     83|        return #name;
  |  |  ------------------
  |  |   56|    283|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    283|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 283, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    283|        return #name;
  |  |  ------------------
  |  |   57|    283|                                                                                                   \
  |  |   58|    283|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    283|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     80|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 80, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     80|        return #name;
  |  |  ------------------
  |  |   60|    284|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    284|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 284, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    284|        return #name;
  |  |  ------------------
  |  |   61|    284|                                                                                                   \
  |  |   62|    284|    /* Logic */                                                                                    \
  |  |   63|    284|                                                                                                   \
  |  |   64|    284|    /* And */                                                                                      \
  |  |   65|  2.65k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.65k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.65k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.65k|        return #name;
  |  |  ------------------
  |  |   66|  2.65k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    632|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 632, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    632|        return #name;
  |  |  ------------------
  |  |   67|    632|                                                                                                   \
  |  |   68|    632|    /* Or */                                                                                       \
  |  |   69|    632|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    481|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 481, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    481|        return #name;
  |  |  ------------------
  |  |   70|    481|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    284|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 284, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    284|        return #name;
  |  |  ------------------
  |  |   71|    284|                                                                                                   \
  |  |   72|    284|    /* XOR */                                                                                      \
  |  |   73|    284|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     30|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 30, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     30|        return #name;
  |  |  ------------------
  |  |   74|    479|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    479|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 479, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    479|        return #name;
  |  |  ------------------
  |  |   75|    479|                                                                                                   \
  |  |   76|    479|    /* Set conditionals */                                                                         \
  |  |   77|    479|                                                                                                   \
  |  |   78|    479|    /* Less than */                                                                                \
  |  |   79|    479|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    445|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 445, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    445|        return #name;
  |  |  ------------------
  |  |   80|    445|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    372|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 372, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    372|        return #name;
  |  |  ------------------
  |  |   81|    372|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 210, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    210|        return #name;
  |  |  ------------------
  |  |   82|    620|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    620|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 620, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    620|        return #name;
  |  |  ------------------
  |  |   83|    620|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    236|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 236, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    236|        return #name;
  |  |  ------------------
  |  |   84|  2.01k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.01k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.01k|        return #name;
  |  |  ------------------
  |  |   85|  2.01k|                                                                                                   \
  |  |   86|  2.01k|    /* Greater than */                                                                             \
  |  |   87|  2.01k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    457|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 457, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    457|        return #name;
  |  |  ------------------
  |  |   88|    457|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    364|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 364, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    364|        return #name;
  |  |  ------------------
  |  |   89|    364|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    107|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 107, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    107|        return #name;
  |  |  ------------------
  |  |   90|    137|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    137|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 137, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    137|        return #name;
  |  |  ------------------
  |  |   91|    137|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    106|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 106, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    106|        return #name;
  |  |  ------------------
  |  |   92|  1.04k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |   93|  1.04k|                                                                                                   \
  |  |   94|  1.04k|    /* Less than or equal */                                                                       \
  |  |   95|  1.04k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    725|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 725, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    725|        return #name;
  |  |  ------------------
  |  |   96|    725|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     45|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 45, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     45|        return #name;
  |  |  ------------------
  |  |   97|    133|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    133|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 133, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    133|        return #name;
  |  |  ------------------
  |  |   98|    427|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    427|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 427, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    427|        return #name;
  |  |  ------------------
  |  |   99|    427|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     66|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 66, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     66|        return #name;
  |  |  ------------------
  |  |  100|  1.48k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.48k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.48k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.48k|        return #name;
  |  |  ------------------
  |  |  101|  1.48k|                                                                                                   \
  |  |  102|  1.48k|    /* Greater than or equal */                                                                    \
  |  |  103|  1.48k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     12|        return #name;
  |  |  ------------------
  |  |  104|  1.04k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |  105|  1.04k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    406|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 406, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    406|        return #name;
  |  |  ------------------
  |  |  106|  1.37k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.37k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.37k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.37k|        return #name;
  |  |  ------------------
  |  |  107|  1.37k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     37|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 37, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     37|        return #name;
  |  |  ------------------
  |  |  108|    688|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    688|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 688, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    688|        return #name;
  |  |  ------------------
  |  |  109|    688|                                                                                                   \
  |  |  110|    688|    /* Equal */                                                                                    \
  |  |  111|    688|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    349|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 349, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    349|        return #name;
  |  |  ------------------
  |  |  112|    429|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    429|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 429, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    429|        return #name;
  |  |  ------------------
  |  |  113|    429|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    220|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 220, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    220|        return #name;
  |  |  ------------------
  |  |  114|    345|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    345|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 345, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    345|        return #name;
  |  |  ------------------
  |  |  115|    539|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    539|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 539, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    539|        return #name;
  |  |  ------------------
  |  |  116|    539|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    114|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 114, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    114|        return #name;
  |  |  ------------------
  |  |  117|    114|                                                                                                   \
  |  |  118|    114|    /* Not equal */                                                                                \
  |  |  119|    114|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     11|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     11|        return #name;
  |  |  ------------------
  |  |  120|     11|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     11|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     11|        return #name;
  |  |  ------------------
  |  |  121|     74|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     74|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 74, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     74|        return #name;
  |  |  ------------------
  |  |  122|    102|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 102, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    102|        return #name;
  |  |  ------------------
  |  |  123|    364|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    364|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 364, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    364|        return #name;
  |  |  ------------------
  |  |  124|    364|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  125|     67|                                                                                                   \
  |  |  126|     67|    /* Conditional branching */                                                                    \
  |  |  127|  1.15k|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.15k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.15k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.15k|        return #name;
  |  |  ------------------
  |  |  128|  1.15k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     91|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 91, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     91|        return #name;
  |  |  ------------------
  |  |  129|     94|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     94|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 94, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     94|        return #name;
  |  |  ------------------
  |  |  130|    174|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    174|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 174, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    174|        return #name;
  |  |  ------------------
  |  |  131|    174|                                                                                                   \
  |  |  132|    174|    /* Unconditional branching */                                                                  \
  |  |  133|    174|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|      1|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|      1|        return #name;
  |  |  ------------------
  |  |  134|     29|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     29|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 29, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     29|        return #name;
  |  |  ------------------
  |  |  135|    194|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    194|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 194, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    194|        return #name;
  |  |  ------------------
  |  |  136|  1.98k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.98k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.98k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.98k|        return #name;
  |  |  ------------------
  |  |  137|  1.98k|                                                                                                   \
  |  |  138|  1.98k|    /* Loading data */                                                                             \
  |  |  139|  1.98k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    358|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 358, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    358|        return #name;
  |  |  ------------------
  |  |  140|    358|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      7|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|      7|        return #name;
  |  |  ------------------
  |  |  141|    442|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    442|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 442, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    442|        return #name;
  |  |  ------------------
  |  |  142|    442|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     21|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 21, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     21|        return #name;
  |  |  ------------------
  |  |  143|     21|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     19|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     19|        return #name;
  |  |  ------------------
  |  |  144|     19|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      2|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|      2|        return #name;
  |  |  ------------------
  |  |  145|     17|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     17|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 17, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     17|        return #name;
  |  |  ------------------
  |  |  146|     17|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      1|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|      1|        return #name;
  |  |  ------------------
  |  |  147|     72|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     72|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 72, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     72|        return #name;
  |  |  ------------------
  |  |  148|     72|                                                                                                   \
  |  |  149|     72|    /* Storing data */                                                                             \
  |  |  150|    198|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    198|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 198, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    198|        return #name;
  |  |  ------------------
  |  |  151|    198|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     77|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 77, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     77|        return #name;
  |  |  ------------------
  |  |  152|     77|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     18|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 18, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     18|        return #name;
  |  |  ------------------
  |  |  153|  1.72k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.72k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.72k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.72k|        return #name;
  |  |  ------------------
  |  |  154|  1.72k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     16|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 16, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     16|        return #name;
  |  |  ------------------
  |  |  155|  1.13k|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.13k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.13k, False: 107k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.13k|        return #name;
  |  |  ------------------
  |  |  156|  1.13k|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    246|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 246, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    246|        return #name;
  |  |  ------------------
  |  |  157|    246|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     20|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 20, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     20|        return #name;
  |  |  ------------------
  |  |  158|     20|                                                                                                   \
  |  |  159|     20|    /* Moving data */                                                                              \
  |  |  160|    102|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 102, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    102|        return #name;
  |  |  ------------------
  |  |  161|    102|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 92, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     92|        return #name;
  |  |  ------------------
  |  |  162|    242|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    242|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 242, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    242|        return #name;
  |  |  ------------------
  |  |  163|  2.56k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  2.56k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.56k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.56k|        return #name;
  |  |  ------------------
  |  |  164|  2.56k|                                                                                                   \
  |  |  165|  2.56k|    /* Converting data */                                                                          \
  |  |  166|  2.56k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     31|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 31, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     31|        return #name;
  |  |  ------------------
  |  |  167|     31|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     25|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 25, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     25|        return #name;
  |  |  ------------------
  |  |  168|     70|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     70|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 70, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     70|        return #name;
  |  |  ------------------
  |  |  169|     70|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     42|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 42, False: 109k]
  |  |  |  |  ------------------
  |  |  |  |  208|     42|        return #name;
  |  |  ------------------
  |  |  170|     67|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  171|    205|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    205|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 205, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    205|        return #name;
  |  |  ------------------
  |  |  172|    205|                                                                                                   \
  |  |  173|    205|    /* Other */                                                                                    \
  |  |  174|    205|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    145|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 145, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    145|        return #name;
  |  |  ------------------
  |  |  175|    244|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    244|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 244, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    244|        return #name;
  |  |  ------------------
  |  |  176|    460|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|    460|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 460, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  208|    460|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 109k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   109k|        }
  217|   109k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|   530k|    {
   32|   530k|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 5.40k, False: 524k]
  ------------------
   33|  5.40k|        {
   34|  5.40k|            return true;
   35|  5.40k|        }
   36|       |
   37|   524k|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 6.63k, False: 518k]
  ------------------
   38|  6.63k|        {
   39|  6.63k|            return true;
   40|  6.63k|        }
   41|       |
   42|   518k|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 108k, False: 409k]
  ------------------
   43|   108k|        {
   44|   108k|            return true;
   45|   108k|        }
   46|       |
   47|   409k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 1.43k, False: 408k]
  ------------------
   48|  1.43k|        {
   49|  1.43k|            return true;
   50|  1.43k|        }
   51|       |
   52|   408k|        return false;
   53|   409k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   408k|    {
   57|   408k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 408k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   408k|        const char first_char = token.at(0);
   63|       |
   64|   408k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 112k, False: 295k]
  ------------------
   65|   112k|        {
   66|   112k|            return phi::is_alpha(first_char);
   67|   112k|        }
   68|       |
   69|   295k|        phi::boolean just_under_scores = (first_char == '_');
   70|   295k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 94.0k, False: 201k]
  |  Branch (70:15): [True: 196k, False: 98.8k]
  |  Branch (70:44): [True: 4.73k, False: 94.0k]
  ------------------
   71|  94.0k|        {
   72|  94.0k|            return false;
   73|  94.0k|        }
   74|       |
   75|   604k|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 512k, False: 92.0k]
  ------------------
   76|   512k|        {
   77|   512k|            const char c{token.at(index)};
   78|       |
   79|   512k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 392k, False: 119k]
  ------------------
   80|   392k|            {
   81|   392k|                just_under_scores = false;
   82|   392k|            }
   83|   119k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 10.1k, False: 109k]
  ------------------
   84|  10.1k|            {
   85|  10.1k|                continue;
   86|  10.1k|            }
   87|   109k|            else
   88|   109k|            {
   89|   109k|                return false;
   90|   109k|            }
   91|   512k|        }
   92|       |
   93|  92.0k|        return !just_under_scores;
   94|   201k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  1.52M|    {
  101|  1.52M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 1.52M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  1.52M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 189k, False: 1.33M]
  ------------------
  107|   189k|        {
  108|   189k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 15.1k, False: 174k]
  ------------------
  109|  15.1k|            {
  110|  15.1k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  15.1k|            }
  112|       |
  113|   174k|            return {};
  114|   189k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  1.33M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 9.39k, False: 1.32M]
  ------------------
  118|  9.39k|        {
  119|  9.39k|            return {};
  120|  9.39k|        }
  121|       |
  122|  1.32M|        std::int32_t number{0};
  123|  1.32M|        phi::boolean is_negative{false};
  124|  1.32M|        phi::boolean starts_with_zero{false};
  125|  1.32M|        phi::boolean parsing_binary{false};
  126|  1.32M|        phi::boolean parsing_octal{false};
  127|  1.32M|        phi::boolean parsing_hexadecimal{false};
  128|  1.32M|        phi::boolean parsed_something{false};
  129|  1.32M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  1.43M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 1.42M, False: 11.4k]
  ------------------
  134|  1.42M|        {
  135|  1.42M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  1.42M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 1.32M, False: 103k]
  ------------------
  139|  1.32M|            {
  140|  1.32M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 2.95k, False: 1.32M]
  ------------------
  141|  2.95k|                {
  142|  2.95k|                    continue;
  143|  2.95k|                }
  144|       |
  145|  1.32M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 8.25k, False: 1.31M]
  ------------------
  146|  8.25k|                {
  147|  8.25k|                    is_negative = true;
  148|  8.25k|                    continue;
  149|  8.25k|                }
  150|       |
  151|  1.31M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 18.1k, False: 1.29M]
  ------------------
  152|  18.1k|                {
  153|  18.1k|                    starts_with_zero = true;
  154|  18.1k|                    continue;
  155|  18.1k|                }
  156|       |
  157|  1.29M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 7.57k, False: 1.28M]
  ------------------
  158|  7.57k|                {
  159|  7.57k|                    return {};
  160|  7.57k|                }
  161|  1.29M|            }
  162|       |
  163|       |            // Second character
  164|  1.38M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 49.8k, False: 1.33M]
  ------------------
  165|  49.8k|            {
  166|  49.8k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 18.1k, False: 31.7k]
  ------------------
  167|  18.1k|                {
  168|       |                    // Binary
  169|  18.1k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 1.07k, False: 17.0k]
  |  Branch (169:37): [True: 2.87k, False: 14.1k]
  ------------------
  170|  3.94k|                    {
  171|  3.94k|                        parsing_binary = true;
  172|  3.94k|                        continue;
  173|  3.94k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  14.1k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 1.81k, False: 12.3k]
  |  Branch (176:37): [True: 3.70k, False: 8.67k]
  ------------------
  177|  5.52k|                    {
  178|  5.52k|                        parsing_hexadecimal = true;
  179|  5.52k|                        continue;
  180|  5.52k|                    }
  181|       |
  182|       |                    // Octal
  183|  8.67k|                    parsing_octal = true;
  184|  8.67k|                }
  185|  49.8k|            }
  186|       |
  187|       |            // Handle seperators
  188|  1.38M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 4.84k, False: 1.37M]
  ------------------
  189|  4.84k|            {
  190|  4.84k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 978, False: 3.86k]
  ------------------
  191|    978|                {
  192|    978|                    return {};
  193|    978|                }
  194|       |
  195|  3.86k|                parsed_separator = true;
  196|  3.86k|                continue;
  197|  4.84k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  1.37M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 30.2k, False: 1.34M]
  |  Branch (200:32): [True: 2.17k, False: 28.1k]
  ------------------
  201|  2.17k|            {
  202|       |                // Would underflow
  203|  2.17k|                return {};
  204|  2.17k|            }
  205|  1.37M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 1.34M, False: 28.1k]
  |  Branch (205:17): [True: 1.76k, False: 1.37M]
  |  Branch (205:33): [True: 1.76k, False: 1.34M]
  ------------------
  206|  1.76k|            {
  207|       |                // Would overflow
  208|  1.76k|                return {};
  209|  1.76k|            }
  210|       |
  211|  1.37M|            parsed_separator = false;
  212|  1.37M|            parsed_something = true;
  213|       |
  214|  1.37M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 2.92k, False: 1.36M]
  ------------------
  215|  2.92k|            {
  216|  2.92k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 1.55k, False: 1.37k]
  ------------------
  217|  1.55k|                {
  218|  1.55k|                    return {};
  219|  1.55k|                }
  220|       |
  221|  1.37k|                number <<= 1;
  222|  1.37k|                number |= (c - '0');
  223|  1.37k|            }
  224|  1.36M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 11.9k, False: 1.35M]
  ------------------
  225|  11.9k|            {
  226|  11.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 8.36k, False: 3.63k]
  ------------------
  227|  8.36k|                {
  228|  8.36k|                    return {};
  229|  8.36k|                }
  230|       |
  231|  3.63k|                number <<= 3;
  232|  3.63k|                number |= (c - '0');
  233|  3.63k|            }
  234|  1.35M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 12.5k, False: 1.34M]
  ------------------
  235|  12.5k|            {
  236|  12.5k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 3.60k, False: 8.92k]
  ------------------
  237|  3.60k|                {
  238|  3.60k|                    return {};
  239|  3.60k|                }
  240|       |
  241|  8.92k|                number <<= 4;
  242|  8.92k|                number |= phi::hex_digit_value(c).unsafe();
  243|  8.92k|            }
  244|  1.34M|            else
  245|  1.34M|            {
  246|  1.34M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 1.28M, False: 59.6k]
  ------------------
  247|  1.28M|                {
  248|  1.28M|                    return {};
  249|  1.28M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|  59.6k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 29.2k, False: 30.3k]
  |  Branch (252:36): [True: 1.60k, False: 27.6k]
  ------------------
  253|  1.60k|                {
  254|  1.60k|                    return {};
  255|  1.60k|                }
  256|       |
  257|  58.0k|                number *= 10;
  258|  58.0k|                number += (c - '0');
  259|  58.0k|            }
  260|  1.37M|        }
  261|       |
  262|  11.4k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 9.82k, False: 1.66k]
  ------------------
  263|  9.82k|        {
  264|       |            // Check for over/underflow
  265|  9.82k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 3.60k, False: 6.21k]
  |  Branch (265:32): [True: 1.69k, False: 1.91k]
  ------------------
  266|  1.69k|            {
  267|       |                // Would underflow
  268|  1.69k|                return {};
  269|  1.69k|            }
  270|  8.13k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 6.21k, False: 1.91k]
  |  Branch (270:17): [True: 1.25k, False: 6.87k]
  |  Branch (270:33): [True: 1.25k, False: 4.96k]
  ------------------
  271|  1.25k|            {
  272|       |                // Would overflow
  273|  1.25k|                return {};
  274|  1.25k|            }
  275|       |
  276|  6.87k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 1.91k, False: 4.96k]
  ------------------
  277|  1.91k|            {
  278|  1.91k|                return static_cast<std::int16_t>(-number);
  279|  1.91k|            }
  280|       |
  281|  4.96k|            return static_cast<std::int16_t>(number);
  282|  6.87k|        }
  283|       |
  284|  1.66k|        return {};
  285|  11.4k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  20.4k|    {
   96|  20.4k|        switch (value)
   97|  20.4k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  6.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  6.71k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 6.71k, False: 13.7k]
  |  |  |  |  ------------------
  |  |  |  |  100|  6.71k|        return #name;
  |  |  ------------------
  |  |   14|  6.71k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  4.52k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.52k, False: 15.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.52k|        return #name;
  |  |  ------------------
  |  |   15|  4.52k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     17|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 17, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     17|        return #name;
  |  |  ------------------
  |  |   16|  2.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  2.58k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.58k, False: 17.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.58k|        return #name;
  |  |  ------------------
  |  |   17|  2.58k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    159|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 159, False: 20.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    159|        return #name;
  |  |  ------------------
  |  |   18|    159|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     11|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     11|        return #name;
  |  |  ------------------
  |  |   19|    239|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    239|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 239, False: 20.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|    239|        return #name;
  |  |  ------------------
  |  |   20|    239|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     37|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 37, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     37|        return #name;
  |  |  ------------------
  |  |   21|     73|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|     73|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 73, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     73|        return #name;
  |  |  ------------------
  |  |   22|     73|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|     36|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 36, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     36|        return #name;
  |  |  ------------------
  |  |   23|    249|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    249|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 249, False: 20.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    249|        return #name;
  |  |  ------------------
  |  |   24|    249|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|     89|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 89, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     89|        return #name;
  |  |  ------------------
  |  |   25|     89|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     43|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 43, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     43|        return #name;
  |  |  ------------------
  |  |   26|     45|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   27|     45|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     12|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 12, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     12|        return #name;
  |  |  ------------------
  |  |   28|     12|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|      2|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      2|        return #name;
  |  |  ------------------
  |  |   29|  1.81k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.81k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.81k, False: 18.6k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.81k|        return #name;
  |  |  ------------------
  |  |   30|  1.81k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    303|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 303, False: 20.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    303|        return #name;
  |  |  ------------------
  |  |   31|    303|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   32|  1.55k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.55k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.55k, False: 18.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.55k|        return #name;
  |  |  ------------------
  |  |   33|  1.55k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   34|      7|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|      7|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 7, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      7|        return #name;
  |  |  ------------------
  |  |   35|    589|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|    589|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 589, False: 19.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    589|        return #name;
  |  |  ------------------
  |  |   36|    589|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   37|      9|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   38|     14|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     14|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 14, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     14|        return #name;
  |  |  ------------------
  |  |   39|     84|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|     84|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 84, False: 20.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|     84|        return #name;
  |  |  ------------------
  |  |   40|     84|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|     24|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 24, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|     24|        return #name;
  |  |  ------------------
  |  |   41|     24|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|      9|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      9|        return #name;
  |  |  ------------------
  |  |   42|      9|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|      8|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 8, False: 20.4k]
  |  |  |  |  ------------------
  |  |  |  |  100|      8|        return #name;
  |  |  ------------------
  |  |   43|    872|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|    872|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 872, False: 19.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|    872|        return #name;
  |  |  ------------------
  |  |   44|    872|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    324|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 324, False: 20.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    324|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 20.4k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  20.4k|        }
  109|  20.4k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  4.16k|    {
  131|  4.16k|        switch (value)
  132|  4.16k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  3.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  3.13k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3.13k, False: 1.03k]
  |  |  |  |  ------------------
  |  |  |  |  135|  3.13k|        return #name;
  |  |  ------------------
  |  |   48|  3.13k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    104|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 104, False: 4.05k]
  |  |  |  |  ------------------
  |  |  |  |  135|    104|        return #name;
  |  |  ------------------
  |  |   49|    104|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   50|      7|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   52|     68|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|     68|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 68, False: 4.09k]
  |  |  |  |  ------------------
  |  |  |  |  135|     68|        return #name;
  |  |  ------------------
  |  |   53|     68|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   54|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   55|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|     42|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 42, False: 4.11k]
  |  |  |  |  ------------------
  |  |  |  |  135|     42|        return #name;
  |  |  ------------------
  |  |   56|     42|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 4.14k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   57|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 4.13k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   58|    200|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|    200|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 200, False: 3.96k]
  |  |  |  |  ------------------
  |  |  |  |  135|    200|        return #name;
  |  |  ------------------
  |  |   59|    200|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   60|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   61|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   62|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   63|    174|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    174|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 174, False: 3.98k]
  |  |  |  |  ------------------
  |  |  |  |  135|    174|        return #name;
  |  |  ------------------
  |  |   64|    174|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   67|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   68|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      4|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 4, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      4|        return #name;
  |  |  ------------------
  |  |   69|      4|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   70|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   71|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 4.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|     36|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 36, False: 4.12k]
  |  |  |  |  ------------------
  |  |  |  |  135|     36|        return #name;
  |  |  ------------------
  |  |   74|     36|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|     18|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 18, False: 4.14k]
  |  |  |  |  ------------------
  |  |  |  |  135|     18|        return #name;
  |  |  ------------------
  |  |   75|     18|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|      9|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 9, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      9|        return #name;
  |  |  ------------------
  |  |   76|      9|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 4.15k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   77|     22|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|     22|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 22, False: 4.13k]
  |  |  |  |  ------------------
  |  |  |  |  135|     22|        return #name;
  |  |  ------------------
  |  |   78|    278|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    278|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 278, False: 3.88k]
  |  |  |  |  ------------------
  |  |  |  |  135|    278|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 4.16k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  4.16k|        }
  144|  4.16k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   122k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   122k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 3.15M, False: 0]
  ------------------
   64|  3.15M|            {
   65|  3.15M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 122k, False: 3.02M]
  ------------------
   66|   122k|                {
   67|   122k|                    return &token;
   68|   122k|                }
   69|  3.15M|            }
   70|       |
   71|      0|            return nullptr;
   72|   122k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|   627k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   627k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   627k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  1.54M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.54M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.54M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   414k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   414k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   414k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|   833k|    {
   11|   833k|        m_Value = val;
   12|   833k|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|     58|    {
   16|     58|        return m_Value;
   17|     58|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|  90.1k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  15.9k|    {
   24|  15.9k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  15.9k|        switch (argument_number.unsafe())
   27|  15.9k|        {
   28|  13.9k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 13.9k, False: 2.00k]
  ------------------
   29|  13.9k|                m_Arg1 = argument;
   30|  13.9k|                break;
   31|  1.53k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 1.53k, False: 14.3k]
  ------------------
   32|  1.53k|                m_Arg2 = argument;
   33|  1.53k|                break;
   34|    465|            case 2u:
  ------------------
  |  Branch (34:13): [True: 465, False: 15.4k]
  ------------------
   35|    465|                m_Arg3 = argument;
   36|    465|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 15.9k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  15.9k|#endif
   41|  15.9k|        }
   42|  15.9k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  51.2k|    {
   83|  51.2k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  51.2k|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  51.2k|    {
   88|  51.2k|        return m_Info;
   89|  51.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   286k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|   307k|    {
   27|   307k|        return m_Type;
   28|   307k|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  20.5k|    {
   78|  20.5k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  20.5k|        return register_int;
   81|  20.5k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|     66|    {
   86|     66|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|     66|        return register_float;
   89|     66|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|     34|    {
   94|     34|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|     34|        return immediate_value;
   97|     34|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  30.6k|    {
  110|  30.6k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  30.6k|        return label;
  113|  30.6k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  3.86k|    {
  174|  3.86k|        InstructionArgument arg;
  175|  3.86k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  3.86k|        arg.register_int.register_id = id;
  177|  3.86k|        return arg;
  178|  3.86k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    231|    {
  183|    231|        InstructionArgument arg;
  184|    231|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    231|        arg.register_float.register_id = id;
  186|    231|        return arg;
  187|    231|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|    836|    {
  192|    836|        InstructionArgument arg;
  193|    836|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|    836|        arg.immediate_value.signed_value = value;
  195|    836|        return arg;
  196|    836|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  1.00k|    {
  201|  1.00k|        InstructionArgument arg;
  202|  1.00k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  1.00k|        arg.address_displacement.register_id  = id;
  204|  1.00k|        arg.address_displacement.displacement = displacement;
  205|  1.00k|        return arg;
  206|  1.00k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  9.99k|    {
  211|  9.99k|        InstructionArgument arg;
  212|  9.99k|        arg.m_Type           = ArgumentType::Label;
  213|  9.99k|        arg.label.label_name = label_name;
  214|  9.99k|        return arg;
  215|  9.99k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|     22|        {
  357|     22|            const auto& dest_reg = arg1.AsRegisterInt();
  358|     22|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|     22|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|     22|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|     22|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|     22|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|     22|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|      1|        {
  370|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  372|      1|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|      1|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|     40|        {
  382|     40|            const auto& dest_reg = arg1.AsRegisterInt();
  383|     40|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|     40|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|     40|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|     40|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|     40|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|     40|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|      1|        {
  395|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  397|      1|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|      1|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|      1|        {
  407|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|      1|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|      1|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|      1|        {
  422|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|      1|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|      1|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|     11|        {
  437|     11|            const auto& dest_reg = arg1.AsRegisterInt();
  438|     11|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|     11|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|     11|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|     11|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|     11|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|     11|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|      1|        {
  450|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  452|      1|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|      1|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|      1|        {
  462|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  463|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|      1|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|      1|        {
  475|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  477|      1|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|      1|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|      1|        {
  487|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|      1|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|      1|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|      1|        {
  502|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|      1|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|      1|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|      1|        {
  517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  518|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|      1|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|      1|        {
  530|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  532|      1|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|      1|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|     23|        {
  542|     23|            const auto& dest_reg = arg1.AsRegisterInt();
  543|     23|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|     23|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|     23|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|     23|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|     23|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|     23|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|      1|        {
  555|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  557|      1|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|      1|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|      1|        {
  567|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|      1|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|      1|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|      1|        {
  582|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|      1|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|      1|        {
  597|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  598|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|      1|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      1|        {
  610|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      1|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|      1|        {
  622|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  623|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|      1|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      1|        {
  635|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      1|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      1|        {
  668|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 1, False: 0]
  ------------------
  676|      1|            {
  677|      1|                processor.Raise(Exception::DivideByZero);
  678|      1|                return;
  679|      1|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|      1|        {
  689|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  690|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|      1|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|      1|        {
  702|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  704|      1|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|      1|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|      1|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|      1|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|      1|        {
  715|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  716|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|      1|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|      1|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|      1|        {
  728|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  730|      1|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|      1|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|      1|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|      1|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|      1|        {
  741|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  742|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|      1|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|      1|        {
  754|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  756|      1|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|      1|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|      1|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|      1|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|      1|        {
  767|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  768|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|      1|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|      1|        {
  780|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  782|      1|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|      1|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|      1|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|      1|        {
  793|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|      1|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|      1|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|      1|        {
  807|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  809|      1|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|      1|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|      1|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|      1|        {
  820|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  821|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|      1|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|      1|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|      1|        {
  834|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  836|      1|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|      1|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|      1|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|      1|        {
  847|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  848|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|      1|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|      1|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|      1|        {
  861|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  863|      1|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|      1|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|      1|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|      1|        {
  874|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  875|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|      1|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 0, False: 1]
  ------------------
  882|       |
  883|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|      1|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|      1|        {
  889|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  891|      1|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|      1|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 1]
  ------------------
  896|       |
  897|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|      1|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|      1|        {
  903|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  904|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|      1|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 0, False: 1]
  ------------------
  911|       |
  912|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|      1|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|      1|        {
  918|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  920|      1|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|      1|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 1]
  ------------------
  925|       |
  926|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|      1|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|      1|        {
  932|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|      1|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|      1|            processor.SetFPSRValue(new_value);
  941|      1|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|      1|        {
  946|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|      1|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|      1|            processor.SetFPSRValue(new_value);
  955|      1|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|     12|        {
  960|     12|            const auto& dest_reg = arg1.AsRegisterInt();
  961|     12|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|     12|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|     12|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|     12|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|     12|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 12]
  ------------------
  968|       |
  969|     12|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|     12|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|      1|        {
  975|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  977|      1|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|      1|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 0, False: 1]
  ------------------
  982|       |
  983|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|      1|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|      1|        {
  989|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  990|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|      1|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 1]
  ------------------
  997|       |
  998|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|      1|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|      1|        {
 1004|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|      1|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 1]
  ------------------
 1011|       |
 1012|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|      1|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      1|        {
 1018|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      1|            processor.SetFPSRValue(new_value);
 1027|      1|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      1|        {
 1032|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      1|            processor.SetFPSRValue(new_value);
 1041|      1|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|      1|        {
 1046|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|      1|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 1, False: 0]
  ------------------
 1054|       |
 1055|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|      1|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|      1|        {
 1061|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|      1|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 1, False: 0]
  ------------------
 1068|       |
 1069|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|      1|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|     21|        {
 1075|     21|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|     21|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|     21|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|     21|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|     21|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|     21|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 21, False: 0]
  ------------------
 1083|       |
 1084|     21|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|     21|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|      1|        {
 1090|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|      1|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 1, False: 0]
  ------------------
 1097|       |
 1098|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|      1|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|      1|        {
 1104|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|      1|            processor.SetFPSRValue(new_value);
 1113|      1|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|      1|        {
 1118|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|      1|            processor.SetFPSRValue(new_value);
 1127|      1|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|      1|        {
 1132|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|      1|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 1, False: 0]
  ------------------
 1140|       |
 1141|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|      1|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|      1|        {
 1147|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|      1|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 1, False: 0]
  ------------------
 1154|       |
 1155|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|      1|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|     25|        {
 1161|     25|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|     25|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|     25|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|     25|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|     25|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|     25|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 25, False: 0]
  ------------------
 1169|       |
 1170|     25|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|     25|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|      1|        {
 1176|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|      1|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 1, False: 0]
  ------------------
 1183|       |
 1184|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|      1|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|      1|        {
 1190|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|      1|            processor.SetFPSRValue(new_value);
 1199|      1|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|      1|        {
 1204|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|      1|            processor.SetFPSRValue(new_value);
 1213|      1|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|      1|        {
 1218|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|      1|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 1, False: 0]
  ------------------
 1226|       |
 1227|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|      1|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|      1|        {
 1233|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|      1|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 1, False: 0]
  ------------------
 1240|       |
 1241|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|      1|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|      1|        {
 1247|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|      1|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 1, False: 0]
  ------------------
 1255|       |
 1256|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|      1|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|      1|        {
 1262|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|      1|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 1, False: 0]
  ------------------
 1269|       |
 1270|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|      1|        {
 1276|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|      1|            processor.SetFPSRValue(new_value);
 1285|      1|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|      1|        {
 1290|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|      1|            processor.SetFPSRValue(new_value);
 1299|      1|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|      1|        {
 1304|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|      1|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 0, False: 1]
  ------------------
 1312|       |
 1313|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|      1|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|      1|        {
 1319|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|      1|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 1]
  ------------------
 1326|       |
 1327|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|      1|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|      1|        {
 1333|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|      1|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 0, False: 1]
  ------------------
 1341|       |
 1342|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|      1|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|      1|        {
 1348|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|      1|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 0, False: 1]
  ------------------
 1355|       |
 1356|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|      1|        {
 1362|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|      1|            processor.SetFPSRValue(new_value);
 1371|      1|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|      1|        {
 1376|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|      1|            processor.SetFPSRValue(new_value);
 1385|      1|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|      1|        {
 1390|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|      1|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|      1|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 1, False: 0]
  ------------------
 1396|      1|            {
 1397|      1|                JumpToLabel(processor, jump_label.label_name);
 1398|      1|            }
 1399|      1|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      1|        {
 1404|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      1|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      1|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 1]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|    575|        {
 1418|    575|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|    575|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|    575|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 575]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|    575|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      2|        {
 1431|      2|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      2|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      2|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 2, False: 0]
  ------------------
 1436|      2|            {
 1437|      2|                JumpToLabel(processor, jump_label.label_name);
 1438|      2|            }
 1439|      2|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  30.0k|        {
 1444|  30.0k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  30.0k|            JumpToLabel(processor, jump_label.label_name);
 1447|  30.0k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  10.0k|        {
 1452|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  10.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      1|        {
 1460|      1|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      1|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      1|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      1|            JumpToLabel(processor, jump_label.label_name);
 1466|      1|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|  10.0k|        {
 1471|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|  10.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|  10.0k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1477|  10.0k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1481|      1|        {
 1482|      1|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1483|      1|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1484|       |
 1485|      1|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1486|       |
 1487|      1|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1488|      1|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1492|      1|        {
 1493|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1494|       |
 1495|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1496|       |
 1497|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1497:17): [True: 0, False: 1]
  ------------------
 1498|      0|            {
 1499|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1500|      0|                return;
 1501|      0|            }
 1502|       |
 1503|      1|            phi::i32 address = optional_address.value();
 1504|       |
 1505|      1|            auto optional_value =
 1506|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1507|       |
 1508|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1508:17): [True: 1, False: 0]
  ------------------
 1509|      1|            {
 1510|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1511|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1512|      1|                return;
 1513|      1|            }
 1514|       |
 1515|      0|            phi::i32 value = optional_value.value();
 1516|       |
 1517|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1518|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      1|        {
 1523|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 1]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      1|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      1|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 1, False: 0]
  ------------------
 1539|      1|            {
 1540|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      1|                return;
 1543|      1|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      1|        {
 1553|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 1]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      1|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      1|            auto optional_value =
 1566|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 1, False: 0]
  ------------------
 1569|      1|            {
 1570|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      1|                return;
 1573|      1|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1582|      1|        {
 1583|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1584|       |
 1585|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1586|       |
 1587|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1587:17): [True: 0, False: 1]
  ------------------
 1588|      0|            {
 1589|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1590|      0|                return;
 1591|      0|            }
 1592|       |
 1593|      1|            phi::i32 address = optional_address.value();
 1594|       |
 1595|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1596|      1|                    static_cast<std::size_t>(address.unsafe()));
 1597|       |
 1598|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1598:17): [True: 1, False: 0]
  ------------------
 1599|      1|            {
 1600|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1602|      1|                return;
 1603|      1|            }
 1604|       |
 1605|      0|            phi::u32 value = optional_value.value();
 1606|       |
 1607|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1608|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1612|      1|        {
 1613|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1614|       |
 1615|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1616|       |
 1617|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1617:17): [True: 0, False: 1]
  ------------------
 1618|      0|            {
 1619|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1620|      0|                return;
 1621|      0|            }
 1622|       |
 1623|      1|            phi::i32 address = optional_address.value();
 1624|       |
 1625|      1|            auto optional_value =
 1626|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1627|       |
 1628|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1628:17): [True: 1, False: 0]
  ------------------
 1629|      1|            {
 1630|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1631|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1632|      1|                return;
 1633|      1|            }
 1634|       |
 1635|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1636|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1640|      1|        {
 1641|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1642|       |
 1643|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1644|       |
 1645|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1645:17): [True: 0, False: 1]
  ------------------
 1646|      0|            {
 1647|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1648|      0|                return;
 1649|      0|            }
 1650|       |
 1651|      1|            phi::i32 address = optional_address.value();
 1652|       |
 1653|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1654|      1|                    static_cast<std::size_t>(address.unsafe()));
 1655|       |
 1656|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1656:17): [True: 1, False: 0]
  ------------------
 1657|      1|            {
 1658|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1659|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1660|      1|                return;
 1661|      1|            }
 1662|       |
 1663|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1664|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|      1|        {
 1945|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|      1|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|      1|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|      1|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|      1|        {
 1956|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|      1|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|      1|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|      1|        {
 1967|      1|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|      1|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|      1|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|      1|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|      1|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1979|      1|        {
 1980|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1981|      1|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1982|       |
 1983|      1|            const std::int32_t source_value =
 1984|      1|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1985|       |
 1986|      1|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1987|       |
 1988|      1|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1989|      1|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|      1|        {
 1994|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|      1|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|      1|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|      1|        {
 2005|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|      1|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|      1|            const float        converted_value_float =
 2011|      1|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|      1|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|      1|        {
 2019|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|      1|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|      1|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|      1|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|      1|        {
 2031|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|      1|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|      1|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|      1|            const float        converted_value_float =
 2037|      1|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|      1|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|      1|        {
 2045|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|      1|            const std::int32_t converted_value_int =
 2050|      1|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|      1|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|      1|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|      1|        {
 2059|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|      1|            const std::int32_t converted_value_int =
 2064|      1|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|      1|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|      1|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      1|        {
 2073|      1|            processor.Raise(Exception::Trap);
 2074|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      3|        {
 2079|      3|            processor.Raise(Exception::Halt);
 2080|      3|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|    336|        {
 2085|       |            /* Do nothing */
 2086|    336|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|     23|    {
  175|     23|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|     23|        SafeWriteInteger(processor, dest_reg, res);
  178|     23|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|     37|    {
  130|     37|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|     37|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|     37|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 37]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|     37|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 37]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|     37|        PHI_ASSERT(value >= min);
  149|     37|        PHI_ASSERT(value <= max);
  150|       |
  151|     37|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|     37|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|     41|    {
  183|     41|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|     41|        SafeWriteInteger(processor, dest_reg, res);
  186|     41|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|     67|    {
  157|     67|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|     67|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 67]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|     67|        PHI_ASSERT(value <= max);
  168|       |
  169|     67|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|     67|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|     12|    {
  191|     12|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|     12|        SafeWriteInteger(processor, dest_reg, res);
  194|     12|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|      2|    {
  199|      2|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|      2|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 0, False: 2]
  ------------------
  202|      0|        {
  203|      0|            processor.Raise(Exception::Underflow);
  204|       |
  205|      0|            phi::u64 res = max - rhs + lhs + 1u;
  206|      0|            SafeWriteInteger(processor, dest_reg, res);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      2|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|      2|        SafeWriteInteger(processor, dest_reg, res);
  213|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|      2|    {
  218|      2|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|      2|        SafeWriteInteger(processor, dest_reg, res);
  221|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|     24|    {
  226|     24|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|     24|        SafeWriteInteger(processor, dest_reg, res);
  229|     24|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|      2|    {
  234|      2|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 2, False: 0]
  ------------------
  235|      2|        {
  236|      2|            processor.Raise(Exception::DivideByZero);
  237|      2|            return;
  238|      2|        }
  239|       |
  240|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|      0|        SafeWriteInteger(processor, dest_reg, res);
  243|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|      2|    {
  248|      2|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 2, False: 0]
  ------------------
  249|      2|        {
  250|      2|            processor.Raise(Exception::DivideByZero);
  251|      2|            return;
  252|      2|        }
  253|       |
  254|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|      0|        SafeWriteInteger(processor, dest_reg, res);
  257|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|      4|    {
  331|      4|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 4]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|      4|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 0, False: 4]
  ------------------
  342|      0|        {
  343|      0|            processor.Raise(Exception::BadShift);
  344|      0|            return;
  345|      0|        }
  346|       |
  347|      4|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|      4|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|      4|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|      2|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|      2|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 2]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|      2|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 2, False: 0]
  ------------------
  274|      2|        {
  275|      2|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|      2|            return;
  277|      2|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|      0|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 0, False: 0]
  ------------------
  281|      0|        {
  282|      0|            processor.Raise(Exception::BadShift);
  283|      0|            return;
  284|      0|        }
  285|       |
  286|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|      2|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|      2|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 2]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|      2|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 0, False: 2]
  ------------------
  317|      0|        {
  318|      0|            processor.Raise(Exception::BadShift);
  319|      0|            return;
  320|      0|        }
  321|       |
  322|      2|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|      2|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|      2|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  30.0k|    {
   39|       |        // Lookup the label
   40|  30.0k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  30.0k|        PHI_ASSERT(program != nullptr);
   42|  30.0k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  30.0k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 67, False: 30.0k]
  ------------------
   45|     67|        {
   46|     67|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     67|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     67|            processor.Raise(Exception::UnknownLabel);
   48|     67|            return;
   49|     67|        }
   50|       |
   51|  30.0k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  30.0k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  30.0k|        processor.SetNextProgramCounter(jump_point);
   56|  30.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  20.0k|    {
   60|  20.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  20.0k|        phi::u32 max_address =
   63|  20.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  20.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 20.0k]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|  20.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  20.0k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      6|    {
  101|      6|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 6, False: 0]
  ------------------
  102|      6|        {
  103|      6|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      6|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 6]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      6|            return imm_value.signed_value;
  111|      6|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  51.2k|    {
   12|  51.2k|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  51.2k|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  51.2k|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  51.2k|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  51.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  51.2k|                   "Unexpected argument type for arg1");
   22|  51.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  51.2k|                   "Unexpected argument type for arg2");
   24|  51.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  51.2k|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  51.2k|        m_Executor(processor, arg1, arg2, arg3);
   29|  51.2k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|  90.1k|    {
  453|  90.1k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|  90.1k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|   833k|    {
   17|   833k|        m_ValueSigned = val;
   18|   833k|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  10.0k|    {
   22|  10.0k|        m_ValueUnsigned = val;
   23|  10.0k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|    138|    {
   27|    138|        return m_ValueSigned;
   28|    138|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  20.2k|    {
   32|  20.2k|        return m_ValueUnsigned;
   33|  20.2k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  10.2k|    {
   37|  10.2k|        return m_IsReadOnly;
   38|  10.2k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      1|    {
   20|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 1, False: 0]
  ------------------
   21|      1|        {
   22|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      1|            return {};
   24|      1|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      1|    {
   61|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 1, False: 0]
  ------------------
   62|      1|        {
   63|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      1|            return {};
   65|      1|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      1|    {
   78|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 1, False: 0]
  ------------------
   79|      1|        {
   80|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      1|            return {};
   82|      1|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      1|    {
   95|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 1, False: 0]
  ------------------
   96|      1|        {
   97|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      1|            return {};
   99|      1|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      6|    {
  244|      6|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 6]
  ------------------
  245|      6|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      6|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  26.0k|    {
  256|  26.0k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 26.0M, False: 26.0k]
  ------------------
  257|  26.0M|        {
  258|  26.0M|            val.signed_value = 0;
  259|  26.0M|        }
  260|  26.0k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  1.96M|    {
   24|  1.96M|        switch (token.length())
   25|  1.96M|        {
   26|       |            // 1 character OpCodes
   27|   288k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 288k, False: 1.67M]
  ------------------
   28|   288k|                char c1 = token[0];
   29|   288k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 38.8k, False: 249k]
  ------------------
   30|  38.8k|                {
   31|  38.8k|                    return OpCode::J;
   32|  38.8k|                }
   33|   249k|                break;
   34|   288k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   352k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 352k, False: 1.61M]
  ------------------
   38|   352k|                char c1 = token[0];
   39|   352k|                char c2 = token[1];
   40|       |
   41|   352k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 233k, False: 119k]
  ------------------
   42|   352k|                {
   43|  13.3k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 13.3k, False: 338k]
  ------------------
   44|  15.9k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 2.62k, False: 349k]
  ------------------
   45|  15.9k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 3.26k, False: 12.7k]
  ------------------
   46|  3.26k|                        {
   47|  3.26k|                            return OpCode::JR;
   48|  3.26k|                        }
   49|  12.7k|                        break;
   50|       |
   51|  12.7k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 11.0k, False: 341k]
  ------------------
   52|  31.2k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 20.2k, False: 332k]
  ------------------
   53|  31.2k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 4.45k, False: 26.8k]
  ------------------
   54|  31.2k|                        {
   55|  1.67k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 1.67k, False: 29.6k]
  ------------------
   56|  4.87k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 3.20k, False: 28.0k]
  ------------------
   57|  4.87k|                                return OpCode::LB;
   58|  4.87k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 4.87k, False: 26.4k]
  ------------------
   59|  6.00k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 1.12k, False: 30.1k]
  ------------------
   60|  6.00k|                                return OpCode::LD;
   61|    626|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 626, False: 30.6k]
  ------------------
   62|  2.23k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 1.60k, False: 29.6k]
  ------------------
   63|  2.23k|                                return OpCode::LF;
   64|    966|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 966, False: 30.3k]
  ------------------
   65|  8.56k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 7.59k, False: 23.7k]
  ------------------
   66|  8.56k|                                return OpCode::LH;
   67|  2.62k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 2.62k, False: 28.6k]
  ------------------
   68|  5.16k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 2.54k, False: 28.7k]
  ------------------
   69|  5.16k|                                return OpCode::LW;
   70|  31.2k|                        }
   71|  4.45k|                        break;
   72|  4.45k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 2.48k, False: 349k]
  ------------------
   73|  23.5k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 21.0k, False: 331k]
  ------------------
   74|  23.5k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 2.45k, False: 21.0k]
  ------------------
   75|  2.45k|                        {
   76|  2.45k|                            return OpCode::OR;
   77|  2.45k|                        }
   78|  21.0k|                        break;
   79|  33.6k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 33.6k, False: 318k]
  ------------------
   80|  48.3k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 14.6k, False: 337k]
  ------------------
   81|  48.3k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 18.6k, False: 29.6k]
  ------------------
   82|  48.3k|                        {
   83|  1.43k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 1.43k, False: 46.8k]
  ------------------
   84|  4.43k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 3.00k, False: 45.3k]
  ------------------
   85|  4.43k|                                return OpCode::SB;
   86|  4.27k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 4.27k, False: 44.0k]
  ------------------
   87|  9.02k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 4.75k, False: 43.5k]
  ------------------
   88|  9.02k|                                return OpCode::SD;
   89|  4.69k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 4.69k, False: 43.6k]
  ------------------
   90|  6.66k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 1.96k, False: 46.3k]
  ------------------
   91|  6.66k|                                return OpCode::SF;
   92|  1.04k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 1.04k, False: 47.2k]
  ------------------
   93|  3.86k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 2.82k, False: 45.4k]
  ------------------
   94|  3.86k|                                return OpCode::SH;
   95|  3.64k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 3.64k, False: 44.6k]
  ------------------
   96|  5.69k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 2.05k, False: 46.2k]
  ------------------
   97|  5.69k|                                return OpCode::SW;
   98|  48.3k|                        }
   99|  18.6k|                        break;
  100|   352k|                }
  101|   290k|                break;
  102|   352k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   438k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 438k, False: 1.52M]
  ------------------
  106|   438k|                char c1 = token[0];
  107|   438k|                char c2 = token[1];
  108|   438k|                char c3 = token[2];
  109|       |
  110|   438k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 153k, False: 285k]
  ------------------
  111|   438k|                {
  112|  58.8k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 58.8k, False: 379k]
  ------------------
  113|  66.2k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 7.39k, False: 431k]
  ------------------
  114|  66.2k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 52.3k, False: 13.8k]
  |  Branch (114:29): [True: 49.3k, False: 16.9k]
  |  Branch (114:45): [True: 49.3k, False: 3.06k]
  ------------------
  115|  49.3k|                        {
  116|  49.3k|                            return OpCode::ADD;
  117|  49.3k|                        }
  118|  16.9k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 7.53k, False: 9.39k]
  |  Branch (118:34): [True: 4.83k, False: 12.1k]
  |  Branch (118:50): [True: 4.83k, False: 2.70k]
  ------------------
  119|  4.83k|                        {
  120|  4.83k|                            return OpCode::AND;
  121|  4.83k|                        }
  122|  12.1k|                        break;
  123|       |
  124|  12.1k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 192, False: 438k]
  ------------------
  125|  13.5k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 13.3k, False: 425k]
  ------------------
  126|  13.5k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 10.5k, False: 3.07k]
  |  Branch (126:29): [True: 4.36k, False: 9.21k]
  |  Branch (126:45): [True: 4.36k, False: 6.14k]
  ------------------
  127|  4.36k|                        {
  128|  4.36k|                            return OpCode::DIV;
  129|  4.36k|                        }
  130|  9.21k|                        break;
  131|       |
  132|  9.21k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 693, False: 438k]
  ------------------
  133|  6.63k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 5.94k, False: 432k]
  ------------------
  134|  6.63k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 5.47k, False: 1.16k]
  ------------------
  135|  5.47k|                        {
  136|  5.47k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 599, False: 4.87k]
  ------------------
  137|    599|                            {
  138|    599|                                return OpCode::EQD;
  139|    599|                            }
  140|  4.87k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 2.97k, False: 1.90k]
  ------------------
  141|  2.97k|                            {
  142|  2.97k|                                return OpCode::EQF;
  143|  2.97k|                            }
  144|  5.47k|                        }
  145|  3.06k|                        break;
  146|       |
  147|  5.65k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 5.65k, False: 433k]
  ------------------
  148|  18.2k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 12.6k, False: 426k]
  ------------------
  149|  18.2k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 8.66k, False: 9.60k]
  ------------------
  150|  8.66k|                        {
  151|  8.66k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 3.85k, False: 4.80k]
  ------------------
  152|  3.85k|                            {
  153|  3.85k|                                return OpCode::GED;
  154|  3.85k|                            }
  155|  4.80k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 2.53k, False: 2.27k]
  ------------------
  156|  2.53k|                            {
  157|  2.53k|                                return OpCode::GEF;
  158|  2.53k|                            }
  159|  8.66k|                        }
  160|  9.60k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 6.72k, False: 2.88k]
  ------------------
  161|  6.72k|                        {
  162|  6.72k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 2.68k, False: 4.03k]
  ------------------
  163|  2.68k|                            {
  164|  2.68k|                                return OpCode::GTD;
  165|  2.68k|                            }
  166|  4.03k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 1.94k, False: 2.08k]
  ------------------
  167|  1.94k|                            {
  168|  1.94k|                                return OpCode::GTF;
  169|  1.94k|                            }
  170|  4.03k|                        }
  171|  7.24k|                        break;
  172|       |
  173|  10.4k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 10.4k, False: 428k]
  ------------------
  174|  13.0k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 2.55k, False: 436k]
  ------------------
  175|  13.0k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 3.49k, False: 9.51k]
  |  Branch (175:29): [True: 1.66k, False: 11.3k]
  |  Branch (175:45): [True: 1.66k, False: 1.82k]
  ------------------
  176|  1.66k|                        {
  177|  1.66k|                            return OpCode::JAL;
  178|  1.66k|                        }
  179|  11.3k|                        break;
  180|       |
  181|  11.3k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 11.1k, False: 427k]
  ------------------
  182|  51.8k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 40.7k, False: 398k]
  ------------------
  183|  51.8k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 6.84k, False: 45.0k]
  ------------------
  184|  51.8k|                        {
  185|  3.02k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 3.02k, False: 48.8k]
  ------------------
  186|  5.78k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 2.75k, False: 49.0k]
  ------------------
  187|  5.78k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 2.51k, False: 3.26k]
  ------------------
  188|  2.51k|                                {
  189|  2.51k|                                    return OpCode::LBU;
  190|  2.51k|                                }
  191|  3.26k|                                break;
  192|       |
  193|  3.26k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 1.61k, False: 50.2k]
  ------------------
  194|  7.90k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 6.29k, False: 45.5k]
  ------------------
  195|  7.90k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 3.97k, False: 3.92k]
  ------------------
  196|  3.97k|                                {
  197|  3.97k|                                    return OpCode::LED;
  198|  3.97k|                                }
  199|  3.92k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 1.06k, False: 2.86k]
  ------------------
  200|  1.06k|                                {
  201|  1.06k|                                    return OpCode::LEF;
  202|  1.06k|                                }
  203|  2.86k|                                break;
  204|       |
  205|  2.86k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 1.70k, False: 50.1k]
  ------------------
  206|  16.5k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 14.8k, False: 37.0k]
  ------------------
  207|  16.5k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 4.56k, False: 11.9k]
  ------------------
  208|  4.56k|                                {
  209|  4.56k|                                    return OpCode::LHI;
  210|  4.56k|                                }
  211|  11.9k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 2.68k, False: 9.29k]
  ------------------
  212|  2.68k|                                {
  213|  2.68k|                                    return OpCode::LHU;
  214|  2.68k|                                }
  215|  9.29k|                                break;
  216|       |
  217|  9.29k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 3.51k, False: 48.3k]
  ------------------
  218|  6.19k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 2.67k, False: 49.1k]
  ------------------
  219|  6.19k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 3.71k, False: 2.47k]
  ------------------
  220|  3.71k|                                {
  221|  3.71k|                                    return OpCode::LTD;
  222|  3.71k|                                }
  223|  2.47k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 1.19k, False: 1.28k]
  ------------------
  224|  1.19k|                                {
  225|  1.19k|                                    return OpCode::LTF;
  226|  1.19k|                                }
  227|  1.28k|                                break;
  228|       |
  229|  1.28k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 1.24k, False: 50.6k]
  ------------------
  230|  8.58k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 7.34k, False: 44.5k]
  ------------------
  231|  8.58k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 5.58k, False: 3.00k]
  ------------------
  232|  5.58k|                                {
  233|  5.58k|                                    return OpCode::LWU;
  234|  5.58k|                                }
  235|  3.00k|                                break;
  236|  51.8k|                        }
  237|  26.5k|                        break;
  238|       |
  239|  26.5k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 5.47k, False: 433k]
  ------------------
  240|  10.1k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 4.66k, False: 434k]
  ------------------
  241|  10.1k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 4.54k, False: 5.59k]
  ------------------
  242|  4.54k|                        {
  243|  4.54k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 1.10k, False: 3.43k]
  ------------------
  244|  1.10k|                            {
  245|  1.10k|                                return OpCode::NED;
  246|  1.10k|                            }
  247|  3.43k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 785, False: 2.65k]
  ------------------
  248|    785|                            {
  249|    785|                                return OpCode::NEF;
  250|    785|                            }
  251|  4.54k|                        }
  252|  5.59k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 2.72k, False: 2.87k]
  |  Branch (252:34): [True: 1.71k, False: 3.88k]
  |  Branch (252:50): [True: 1.71k, False: 1.01k]
  ------------------
  253|  1.71k|                        {
  254|  1.71k|                            return OpCode::NOP;
  255|  1.71k|                        }
  256|       |
  257|  6.53k|                        break;
  258|       |
  259|  6.53k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 3.68k, False: 435k]
  ------------------
  260|  12.5k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 8.89k, False: 429k]
  ------------------
  261|  12.5k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 3.93k, False: 8.64k]
  |  Branch (261:29): [True: 1.19k, False: 11.3k]
  |  Branch (261:45): [True: 1.19k, False: 2.73k]
  ------------------
  262|  1.19k|                        {
  263|  1.19k|                            return OpCode::ORI;
  264|  1.19k|                        }
  265|  11.3k|                        break;
  266|       |
  267|  60.4k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 60.4k, False: 378k]
  ------------------
  268|  86.5k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 26.0k, False: 412k]
  ------------------
  269|  86.5k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 11.9k, False: 74.5k]
  ------------------
  270|  86.5k|                        {
  271|  2.36k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 2.36k, False: 84.1k]
  ------------------
  272|  4.54k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 2.17k, False: 84.3k]
  ------------------
  273|  4.54k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 1.27k, False: 3.26k]
  ------------------
  274|  1.27k|                                {
  275|  1.27k|                                    return OpCode::SBU;
  276|  1.27k|                                }
  277|  3.26k|                                break;
  278|       |
  279|  3.26k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 2.57k, False: 83.9k]
  ------------------
  280|  7.83k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 5.26k, False: 81.2k]
  ------------------
  281|  7.83k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 3.63k, False: 4.20k]
  ------------------
  282|  3.63k|                                {
  283|  3.63k|                                    return OpCode::SEQ;
  284|  3.63k|                                }
  285|  4.20k|                                break;
  286|       |
  287|  4.20k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 1.95k, False: 84.5k]
  ------------------
  288|  7.32k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 5.37k, False: 81.1k]
  ------------------
  289|  7.32k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 2.66k, False: 4.66k]
  ------------------
  290|  2.66k|                                {
  291|  2.66k|                                    return OpCode::SGE;
  292|  2.66k|                                }
  293|  4.66k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 2.91k, False: 1.75k]
  ------------------
  294|  2.91k|                                {
  295|  2.91k|                                    return OpCode::SGT;
  296|  2.91k|                                }
  297|  1.75k|                                break;
  298|       |
  299|  2.22k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 2.22k, False: 84.2k]
  ------------------
  300|  5.88k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 3.66k, False: 82.8k]
  ------------------
  301|  5.88k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 3.64k, False: 2.24k]
  ------------------
  302|  3.64k|                                {
  303|  3.64k|                                    return OpCode::SHU;
  304|  3.64k|                                }
  305|  2.24k|                                break;
  306|       |
  307|  3.58k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 3.58k, False: 82.9k]
  ------------------
  308|  13.4k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 9.81k, False: 76.6k]
  ------------------
  309|  13.4k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 1.44k, False: 11.9k]
  ------------------
  310|  13.4k|                                {
  311|    124|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 124, False: 13.2k]
  ------------------
  312|  1.25k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.13k, False: 12.2k]
  ------------------
  313|  1.25k|                                        return OpCode::SLA;
  314|       |
  315|    741|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 741, False: 12.6k]
  ------------------
  316|  4.68k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 3.94k, False: 9.46k]
  ------------------
  317|  4.68k|                                        return OpCode::SLE;
  318|       |
  319|  1.84k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 1.84k, False: 11.5k]
  ------------------
  320|  3.25k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 1.41k, False: 11.9k]
  ------------------
  321|  3.25k|                                        return OpCode::SLL;
  322|       |
  323|    419|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 419, False: 12.9k]
  ------------------
  324|  2.76k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 2.34k, False: 11.0k]
  ------------------
  325|  2.76k|                                        return OpCode::SLT;
  326|  13.4k|                                }
  327|  1.44k|                                break;
  328|       |
  329|  1.79k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 1.79k, False: 84.7k]
  ------------------
  330|  7.82k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 6.03k, False: 80.4k]
  ------------------
  331|  7.82k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 5.61k, False: 2.21k]
  ------------------
  332|  5.61k|                                {
  333|  5.61k|                                    return OpCode::SNE;
  334|  5.61k|                                }
  335|  2.21k|                                break;
  336|       |
  337|  2.21k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 535, False: 85.9k]
  ------------------
  338|  8.55k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 8.02k, False: 78.4k]
  ------------------
  339|  8.55k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 3.81k, False: 4.73k]
  ------------------
  340|  3.81k|                                {
  341|  3.81k|                                    return OpCode::SRA;
  342|  3.81k|                                }
  343|  4.73k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 2.79k, False: 1.94k]
  ------------------
  344|  2.79k|                                {
  345|  2.79k|                                    return OpCode::SRL;
  346|  2.79k|                                }
  347|  1.94k|                                break;
  348|       |
  349|  1.94k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 826, False: 85.6k]
  ------------------
  350|  6.25k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 5.42k, False: 81.0k]
  ------------------
  351|  6.25k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 4.05k, False: 2.19k]
  ------------------
  352|  4.05k|                                {
  353|  4.05k|                                    return OpCode::SUB;
  354|  4.05k|                                }
  355|  2.19k|                                break;
  356|       |
  357|  2.19k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 1.15k, False: 85.3k]
  ------------------
  358|  12.9k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 11.8k, False: 74.6k]
  ------------------
  359|  12.9k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 7.61k, False: 5.35k]
  ------------------
  360|  7.61k|                                {
  361|  7.61k|                                    return OpCode::SWU;
  362|  7.61k|                                }
  363|  5.35k|                                break;
  364|  86.5k|                        }
  365|       |
  366|  37.9k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.46k, False: 437k]
  ------------------
  367|  43.4k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 5.46k, False: 433k]
  ------------------
  368|  43.4k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 8.43k, False: 35.0k]
  |  Branch (368:29): [True: 2.64k, False: 40.8k]
  |  Branch (368:45): [True: 2.64k, False: 5.79k]
  ------------------
  369|  2.64k|                        {
  370|  2.64k|                            return OpCode::XOR;
  371|  2.64k|                        }
  372|  40.8k|                        break;
  373|   438k|                }
  374|   281k|                break;
  375|   438k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   340k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 340k, False: 1.62M]
  ------------------
  379|   340k|                char c1 = token[0];
  380|   340k|                char c2 = token[1];
  381|   340k|                char c3 = token[2];
  382|   340k|                char c4 = token[3];
  383|       |
  384|   340k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 106k, False: 234k]
  ------------------
  385|   340k|                {
  386|  24.3k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 24.3k, False: 315k]
  ------------------
  387|  36.3k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 11.9k, False: 328k]
  ------------------
  388|  36.3k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 7.08k, False: 29.2k]
  ------------------
  389|  36.3k|                        {
  390|  9.71k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 9.71k, False: 26.5k]
  ------------------
  391|  20.2k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 10.5k, False: 25.7k]
  ------------------
  392|  20.2k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 18.7k, False: 1.45k]
  ------------------
  393|  18.7k|                                {
  394|  18.7k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 1.55k, False: 17.2k]
  ------------------
  395|  18.7k|                                    {
  396|  2.91k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 2.91k, False: 15.8k]
  ------------------
  397|  5.14k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 2.23k, False: 16.5k]
  ------------------
  398|  5.14k|                                            return OpCode::ADDD;
  399|       |
  400|    183|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 183, False: 18.6k]
  ------------------
  401|  1.67k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 1.49k, False: 17.3k]
  ------------------
  402|  1.67k|                                            return OpCode::ADDF;
  403|       |
  404|  6.27k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 6.27k, False: 12.5k]
  ------------------
  405|  8.91k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 2.64k, False: 16.1k]
  ------------------
  406|  8.91k|                                            return OpCode::ADDI;
  407|       |
  408|    331|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 331, False: 18.4k]
  ------------------
  409|  1.51k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 1.18k, False: 17.6k]
  ------------------
  410|  1.51k|                                            return OpCode::ADDU;
  411|  18.7k|                                    }
  412|  18.7k|                                }
  413|  3.01k|                                break;
  414|       |
  415|  3.01k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 612, False: 35.6k]
  ------------------
  416|  8.96k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 8.35k, False: 27.9k]
  ------------------
  417|  8.96k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 5.07k, False: 3.88k]
  |  Branch (417:37): [True: 2.19k, False: 6.76k]
  |  Branch (417:53): [True: 2.19k, False: 2.88k]
  ------------------
  418|  2.19k|                                {
  419|  2.19k|                                    return OpCode::ANDI;
  420|  2.19k|                                }
  421|       |
  422|  6.76k|                                break;
  423|  36.3k|                        }
  424|  16.8k|                        break;
  425|       |
  426|  16.8k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 9.57k, False: 330k]
  ------------------
  427|  22.2k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 12.7k, False: 327k]
  ------------------
  428|  22.2k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 3.00k, False: 19.2k]
  ------------------
  429|  22.2k|                        {
  430|  1.12k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 1.12k, False: 21.1k]
  ------------------
  431|  4.00k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 2.88k, False: 19.4k]
  ------------------
  432|  4.00k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 2.54k, False: 1.45k]
  |  Branch (432:37): [True: 1.94k, False: 2.05k]
  |  Branch (432:53): [True: 1.94k, False: 600]
  ------------------
  433|  1.94k|                                {
  434|  1.94k|                                    return OpCode::BEQZ;
  435|  1.94k|                                }
  436|  2.05k|                                break;
  437|       |
  438|  2.05k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 1.53k, False: 20.7k]
  ------------------
  439|  7.51k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 5.97k, False: 16.3k]
  ------------------
  440|  7.51k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 6.46k, False: 1.05k]
  ------------------
  441|  6.46k|                                {
  442|  6.46k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 2.76k, False: 3.69k]
  ------------------
  443|  2.76k|                                    {
  444|  2.76k|                                        return OpCode::BFPF;
  445|  2.76k|                                    }
  446|  3.69k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 2.58k, False: 1.11k]
  ------------------
  447|  2.58k|                                    {
  448|  2.58k|                                        return OpCode::BFPT;
  449|  2.58k|                                    }
  450|  6.46k|                                }
  451|  2.16k|                                break;
  452|       |
  453|  4.51k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 4.51k, False: 17.7k]
  ------------------
  454|  7.76k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 3.25k, False: 19.0k]
  ------------------
  455|  7.76k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 3.33k, False: 4.43k]
  |  Branch (455:37): [True: 858, False: 6.90k]
  |  Branch (455:53): [True: 858, False: 2.47k]
  ------------------
  456|    858|                                {
  457|    858|                                    return OpCode::BNEZ;
  458|    858|                                }
  459|  22.2k|                        }
  460|  14.1k|                        break;
  461|       |
  462|  14.1k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 1.35k, False: 338k]
  ------------------
  463|  21.6k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 20.3k, False: 319k]
  ------------------
  464|  21.6k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 18.8k, False: 2.79k]
  |  Branch (464:29): [True: 14.0k, False: 7.66k]
  |  Branch (464:45): [True: 14.0k, False: 4.86k]
  ------------------
  465|  14.0k|                        {
  466|  14.0k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.14k, False: 10.8k]
  ------------------
  467|  14.0k|                            {
  468|    981|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 981, False: 13.0k]
  ------------------
  469|  3.48k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 2.50k, False: 11.4k]
  ------------------
  470|  3.48k|                                    return OpCode::DIVD;
  471|       |
  472|     83|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 83, False: 13.9k]
  ------------------
  473|  3.29k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 3.21k, False: 10.7k]
  ------------------
  474|  3.29k|                                    return OpCode::DIVF;
  475|       |
  476|     19|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 19, False: 13.9k]
  ------------------
  477|  1.15k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 1.13k, False: 12.8k]
  ------------------
  478|  1.15k|                                    return OpCode::DIVI;
  479|       |
  480|    230|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 230, False: 13.7k]
  ------------------
  481|  2.92k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 2.69k, False: 11.3k]
  ------------------
  482|  2.92k|                                    return OpCode::DIVU;
  483|  14.0k|                            }
  484|  14.0k|                        }
  485|  10.8k|                        break;
  486|       |
  487|  10.8k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 8.19k, False: 332k]
  ------------------
  488|  12.5k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 4.32k, False: 335k]
  ------------------
  489|  12.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 7.12k, False: 5.40k]
  |  Branch (489:29): [True: 2.77k, False: 9.74k]
  |  Branch (489:45): [True: 6.32k, False: 802]
  |  Branch (489:61): [True: 2.77k, False: 3.54k]
  ------------------
  490|  2.77k|                        {
  491|  2.77k|                            return OpCode::HALT;
  492|  2.77k|                        }
  493|  9.74k|                        break;
  494|       |
  495|  9.74k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 7.97k, False: 332k]
  ------------------
  496|  10.3k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 2.35k, False: 337k]
  ------------------
  497|  10.3k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 5.17k, False: 5.15k]
  |  Branch (497:29): [True: 2.79k, False: 7.52k]
  |  Branch (497:45): [True: 3.89k, False: 1.28k]
  |  Branch (497:61): [True: 2.79k, False: 1.09k]
  ------------------
  498|  2.79k|                        {
  499|  2.79k|                            return OpCode::JALR;
  500|  2.79k|                        }
  501|  7.52k|                        break;
  502|       |
  503|  7.52k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 4.82k, False: 335k]
  ------------------
  504|  11.8k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 6.98k, False: 333k]
  ------------------
  505|  11.8k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 3.88k, False: 7.92k]
  |  Branch (505:29): [True: 2.90k, False: 8.90k]
  |  Branch (505:45): [True: 2.90k, False: 981]
  ------------------
  506|  2.90k|                        {
  507|  2.90k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 1.10k, False: 1.80k]
  ------------------
  508|  1.10k|                            {
  509|  1.10k|                                return OpCode::MOVD;
  510|  1.10k|                            }
  511|  1.80k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 1.21k, False: 586]
  ------------------
  512|  1.21k|                            {
  513|  1.21k|                                return OpCode::MOVF;
  514|  1.21k|                            }
  515|  2.90k|                        }
  516|  8.90k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 5.95k, False: 2.94k]
  |  Branch (516:34): [True: 1.73k, False: 7.16k]
  |  Branch (516:50): [True: 3.19k, False: 2.75k]
  |  Branch (516:66): [True: 1.73k, False: 1.45k]
  ------------------
  517|  1.73k|                        {
  518|  1.73k|                            return OpCode::MULT;
  519|  1.73k|                        }
  520|  7.75k|                        break;
  521|       |
  522|  68.3k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 68.3k, False: 271k]
  ------------------
  523|   103k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 34.7k, False: 305k]
  ------------------
  524|   103k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 13.7k, False: 89.3k]
  ------------------
  525|   103k|                        {
  526|    913|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 913, False: 102k]
  ------------------
  527|  10.8k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 9.89k, False: 93.2k]
  ------------------
  528|  10.8k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 5.59k, False: 5.20k]
  ------------------
  529|  5.59k|                                {
  530|  5.59k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 1.70k, False: 3.89k]
  ------------------
  531|  1.70k|                                    {
  532|  1.70k|                                        return OpCode::SEQI;
  533|  1.70k|                                    }
  534|  3.89k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 1.46k, False: 2.42k]
  ------------------
  535|  1.46k|                                    {
  536|  1.46k|                                        return OpCode::SEQU;
  537|  1.46k|                                    }
  538|  5.59k|                                }
  539|  7.63k|                                break;
  540|       |
  541|  7.63k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 4.99k, False: 98.0k]
  ------------------
  542|  14.9k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 9.91k, False: 93.1k]
  ------------------
  543|  14.9k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 7.40k, False: 7.50k]
  ------------------
  544|  7.40k|                                {
  545|  7.40k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 2.53k, False: 4.87k]
  ------------------
  546|  2.53k|                                    {
  547|  2.53k|                                        return OpCode::SGEI;
  548|  2.53k|                                    }
  549|  4.87k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 1.41k, False: 3.46k]
  ------------------
  550|  1.41k|                                    {
  551|  1.41k|                                        return OpCode::SGEU;
  552|  1.41k|                                    }
  553|  7.40k|                                }
  554|  7.50k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 4.97k, False: 2.53k]
  ------------------
  555|  4.97k|                                {
  556|  4.97k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 1.29k, False: 3.67k]
  ------------------
  557|  1.29k|                                    {
  558|  1.29k|                                        return OpCode::SGTI;
  559|  1.29k|                                    }
  560|  3.67k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 1.38k, False: 2.29k]
  ------------------
  561|  1.38k|                                    {
  562|  1.38k|                                        return OpCode::SGTU;
  563|  1.38k|                                    }
  564|  4.97k|                                }
  565|  8.29k|                                break;
  566|       |
  567|  8.29k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 2.41k, False: 100k]
  ------------------
  568|  23.4k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 21.0k, False: 82.0k]
  ------------------
  569|  23.4k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 1.54k, False: 21.9k]
  ------------------
  570|  23.4k|                                {
  571|  2.07k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 2.07k, False: 21.4k]
  ------------------
  572|  4.62k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 2.54k, False: 20.9k]
  ------------------
  573|  4.62k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 1.84k, False: 2.77k]
  ------------------
  574|  1.84k|                                        {
  575|  1.84k|                                            return OpCode::SLAI;
  576|  1.84k|                                        }
  577|  2.77k|                                        break;
  578|       |
  579|  2.77k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 1.51k, False: 21.9k]
  ------------------
  580|  4.30k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 2.78k, False: 20.7k]
  ------------------
  581|  4.30k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 310, False: 3.99k]
  ------------------
  582|    310|                                        {
  583|    310|                                            return OpCode::SLEI;
  584|    310|                                        }
  585|  3.99k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 1.40k, False: 2.58k]
  ------------------
  586|  1.40k|                                        {
  587|  1.40k|                                            return OpCode::SLEU;
  588|  1.40k|                                        }
  589|  2.58k|                                        break;
  590|       |
  591|  2.58k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 285, False: 23.2k]
  ------------------
  592|  6.03k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 5.74k, False: 17.7k]
  ------------------
  593|  6.03k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 2.96k, False: 3.06k]
  ------------------
  594|  2.96k|                                        {
  595|  2.96k|                                            return OpCode::SLLI;
  596|  2.96k|                                        }
  597|  3.06k|                                        break;
  598|       |
  599|  3.06k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 525, False: 22.9k]
  ------------------
  600|  7.00k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 6.47k, False: 17.0k]
  ------------------
  601|  7.00k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 1.48k, False: 5.51k]
  ------------------
  602|  1.48k|                                        {
  603|  1.48k|                                            return OpCode::SLTI;
  604|  1.48k|                                        }
  605|  5.51k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 3.11k, False: 2.39k]
  ------------------
  606|  3.11k|                                        {
  607|  3.11k|                                            return OpCode::SLTU;
  608|  3.11k|                                        }
  609|  2.39k|                                        break;
  610|  23.4k|                                }
  611|       |
  612|  12.4k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 89, False: 103k]
  ------------------
  613|  22.6k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 10.1k, False: 92.9k]
  ------------------
  614|  22.6k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 12.6k, False: 9.94k]
  ------------------
  615|  12.6k|                                {
  616|  12.6k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 3.04k, False: 9.62k]
  ------------------
  617|  3.04k|                                    {
  618|  3.04k|                                        return OpCode::SNEI;
  619|  3.04k|                                    }
  620|  9.62k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 4.23k, False: 5.38k]
  ------------------
  621|  4.23k|                                    {
  622|  4.23k|                                        return OpCode::SNEU;
  623|  4.23k|                                    }
  624|  12.6k|                                }
  625|  15.3k|                                break;
  626|       |
  627|  15.3k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 254, False: 102k]
  ------------------
  628|  10.5k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 10.3k, False: 92.7k]
  ------------------
  629|  10.5k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 5.41k, False: 5.13k]
  |  Branch (629:37): [True: 774, False: 9.78k]
  |  Branch (629:53): [True: 774, False: 4.64k]
  ------------------
  630|    774|                                {
  631|    774|                                    return OpCode::SRAI;
  632|    774|                                }
  633|  9.78k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 5.08k, False: 4.69k]
  |  Branch (633:42): [True: 2.38k, False: 7.39k]
  |  Branch (633:58): [True: 2.38k, False: 2.70k]
  ------------------
  634|  2.38k|                                {
  635|  2.38k|                                    return OpCode::SRLI;
  636|  2.38k|                                }
  637|  7.39k|                                break;
  638|       |
  639|  7.39k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 6.56k, False: 96.5k]
  ------------------
  640|  19.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 12.7k, False: 90.3k]
  ------------------
  641|  19.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 15.5k, False: 3.74k]
  ------------------
  642|  15.5k|                                {
  643|  15.5k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 2.87k, False: 12.7k]
  ------------------
  644|  15.5k|                                    {
  645|    176|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 176, False: 15.4k]
  ------------------
  646|  2.33k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 2.15k, False: 13.4k]
  ------------------
  647|  2.33k|                                            return OpCode::SUBD;
  648|       |
  649|    403|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 403, False: 15.1k]
  ------------------
  650|  2.00k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 1.59k, False: 13.9k]
  ------------------
  651|  2.00k|                                            return OpCode::SUBF;
  652|       |
  653|    961|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 961, False: 14.6k]
  ------------------
  654|  2.85k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 1.89k, False: 13.6k]
  ------------------
  655|  2.85k|                                            return OpCode::SUBI;
  656|       |
  657|  3.39k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 3.39k, False: 12.1k]
  ------------------
  658|  5.51k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 2.12k, False: 13.4k]
  ------------------
  659|  5.51k|                                            return OpCode::SUBU;
  660|  15.5k|                                    }
  661|  15.5k|                                }
  662|  6.61k|                                break;
  663|   103k|                        }
  664|  59.0k|                        break;
  665|       |
  666|  59.0k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 2.17k, False: 338k]
  ------------------
  667|  7.88k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 5.70k, False: 334k]
  ------------------
  668|  7.88k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 3.30k, False: 4.57k]
  |  Branch (668:29): [True: 1.27k, False: 6.60k]
  |  Branch (668:45): [True: 1.88k, False: 1.42k]
  |  Branch (668:61): [True: 1.27k, False: 603]
  ------------------
  669|  1.27k|                        {
  670|  1.27k|                            return OpCode::TRAP;
  671|  1.27k|                        }
  672|  6.60k|                        break;
  673|  6.60k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 1.46k, False: 338k]
  ------------------
  674|  8.11k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 6.64k, False: 333k]
  ------------------
  675|  8.11k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 5.71k, False: 2.40k]
  |  Branch (675:29): [True: 1.43k, False: 6.68k]
  |  Branch (675:45): [True: 3.26k, False: 2.45k]
  |  Branch (675:61): [True: 1.43k, False: 1.82k]
  ------------------
  676|  1.43k|                        {
  677|  1.43k|                            return OpCode::XORI;
  678|  1.43k|                        }
  679|  6.68k|                        break;
  680|   340k|                }
  681|   245k|                break;
  682|   340k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   245k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 196k, False: 1.76M]
  ------------------
  686|   196k|                char c1 = token[0];
  687|   196k|                char c2 = token[1];
  688|   196k|                char c3 = token[2];
  689|   196k|                char c4 = token[3];
  690|   196k|                char c5 = token[4];
  691|       |
  692|   196k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 84.0k, False: 112k]
  ------------------
  693|   196k|                {
  694|  11.1k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 11.1k, False: 185k]
  ------------------
  695|  17.2k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 6.08k, False: 190k]
  ------------------
  696|  17.2k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 11.9k, False: 5.28k]
  |  Branch (696:29): [True: 4.95k, False: 12.3k]
  |  Branch (696:45): [True: 10.3k, False: 1.61k]
  |  Branch (696:61): [True: 6.29k, False: 4.09k]
  |  Branch (696:77): [True: 4.95k, False: 1.33k]
  ------------------
  697|  4.95k|                        {
  698|  4.95k|                            return OpCode::ADDUI;
  699|  4.95k|                        }
  700|  12.3k|                        break;
  701|       |
  702|  12.3k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 1.12k, False: 195k]
  ------------------
  703|  17.3k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 16.2k, False: 180k]
  ------------------
  704|  17.3k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 15.9k, False: 1.47k]
  |  Branch (704:29): [True: 1.92k, False: 15.4k]
  |  Branch (704:45): [True: 13.3k, False: 2.58k]
  |  Branch (704:61): [True: 6.43k, False: 6.89k]
  |  Branch (704:77): [True: 1.92k, False: 4.50k]
  ------------------
  705|  1.92k|                        {
  706|  1.92k|                            return OpCode::DIVUI;
  707|  1.92k|                        }
  708|  15.4k|                        break;
  709|       |
  710|  15.4k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 7.95k, False: 188k]
  ------------------
  711|  19.2k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 11.2k, False: 185k]
  ------------------
  712|  19.2k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 15.1k, False: 4.11k]
  |  Branch (712:29): [True: 8.68k, False: 10.5k]
  |  Branch (712:45): [True: 9.69k, False: 5.41k]
  |  Branch (712:61): [True: 8.68k, False: 1.01k]
  ------------------
  713|  8.68k|                        {
  714|  8.68k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 2.92k, False: 5.75k]
  ------------------
  715|  8.68k|                            {
  716|    374|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 374, False: 8.30k]
  ------------------
  717|  1.01k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 644, False: 8.03k]
  ------------------
  718|  1.01k|                                    return OpCode::MULTD;
  719|       |
  720|    587|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 587, False: 8.09k]
  ------------------
  721|  2.14k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 1.56k, False: 7.12k]
  ------------------
  722|  2.14k|                                    return OpCode::MULTF;
  723|       |
  724|     71|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 71, False: 8.61k]
  ------------------
  725|  1.39k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 1.32k, False: 7.35k]
  ------------------
  726|  1.39k|                                    return OpCode::MULTI;
  727|       |
  728|    514|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 514, False: 8.16k]
  ------------------
  729|  1.18k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 675, False: 8.00k]
  ------------------
  730|  1.18k|                                    return OpCode::MULTU;
  731|  8.68k|                            }
  732|  8.68k|                        }
  733|  13.4k|                        break;
  734|       |
  735|  29.9k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 29.9k, False: 166k]
  ------------------
  736|  58.4k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 28.5k, False: 167k]
  ------------------
  737|  58.4k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 11.9k, False: 46.4k]
  ------------------
  738|  58.4k|                        {
  739|    334|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 334, False: 58.0k]
  ------------------
  740|  7.75k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 7.42k, False: 50.9k]
  ------------------
  741|  7.75k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 5.59k, False: 2.16k]
  |  Branch (741:37): [True: 1.54k, False: 6.21k]
  |  Branch (741:53): [True: 2.81k, False: 2.77k]
  |  Branch (741:69): [True: 1.54k, False: 1.26k]
  ------------------
  742|  1.54k|                                {
  743|  1.54k|                                    return OpCode::SEQUI;
  744|  1.54k|                                }
  745|  6.21k|                                break;
  746|       |
  747|  6.21k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 1.90k, False: 56.5k]
  ------------------
  748|  9.06k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 7.16k, False: 51.2k]
  ------------------
  749|  9.06k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 4.51k, False: 4.55k]
  |  Branch (749:37): [True: 2.13k, False: 6.93k]
  |  Branch (749:53): [True: 3.16k, False: 1.35k]
  |  Branch (749:69): [True: 2.13k, False: 1.02k]
  ------------------
  750|  2.13k|                                {
  751|  2.13k|                                    return OpCode::SGEUI;
  752|  2.13k|                                }
  753|  6.93k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 4.04k, False: 2.88k]
  |  Branch (753:42): [True: 1.17k, False: 5.76k]
  |  Branch (753:58): [True: 2.80k, False: 1.24k]
  |  Branch (753:74): [True: 1.17k, False: 1.63k]
  ------------------
  754|  1.17k|                                {
  755|  1.17k|                                    return OpCode::SGTUI;
  756|  1.17k|                                }
  757|  5.76k|                                break;
  758|       |
  759|  5.76k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 1.91k, False: 56.5k]
  ------------------
  760|  13.0k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 11.1k, False: 47.2k]
  ------------------
  761|  13.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 4.05k, False: 8.97k]
  |  Branch (761:37): [True: 1.42k, False: 11.6k]
  |  Branch (761:53): [True: 2.71k, False: 1.33k]
  |  Branch (761:69): [True: 1.42k, False: 1.29k]
  ------------------
  762|  1.42k|                                {
  763|  1.42k|                                    return OpCode::SLEUI;
  764|  1.42k|                                }
  765|  11.6k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 6.98k, False: 4.61k]
  |  Branch (765:42): [True: 1.89k, False: 9.70k]
  |  Branch (765:58): [True: 5.14k, False: 1.83k]
  |  Branch (765:74): [True: 1.89k, False: 3.24k]
  ------------------
  766|  1.89k|                                {
  767|  1.89k|                                    return OpCode::SLTUI;
  768|  1.89k|                                }
  769|  9.70k|                                break;
  770|       |
  771|  9.70k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 114, False: 58.2k]
  ------------------
  772|  9.19k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 9.08k, False: 49.3k]
  ------------------
  773|  9.19k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 8.22k, False: 977]
  |  Branch (773:37): [True: 2.25k, False: 6.94k]
  |  Branch (773:53): [True: 6.64k, False: 1.57k]
  |  Branch (773:69): [True: 2.25k, False: 4.38k]
  ------------------
  774|  2.25k|                                {
  775|  2.25k|                                    return OpCode::SNEUI;
  776|  2.25k|                                }
  777|  6.94k|                                break;
  778|       |
  779|  6.94k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 569, False: 57.8k]
  ------------------
  780|  7.38k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 6.81k, False: 51.6k]
  ------------------
  781|  7.38k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 6.29k, False: 1.08k]
  |  Branch (781:37): [True: 2.28k, False: 5.09k]
  |  Branch (781:53): [True: 4.41k, False: 1.87k]
  |  Branch (781:69): [True: 2.28k, False: 2.13k]
  ------------------
  782|  2.28k|                                {
  783|  2.28k|                                    return OpCode::SUBUI;
  784|  2.28k|                                }
  785|  5.09k|                                break;
  786|  58.4k|                        }
  787|       |
  788|  45.7k|                        break;
  789|   196k|                }
  790|       |
  791|   171k|                break;
  792|   196k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   171k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 105k, False: 1.85M]
  ------------------
  796|   105k|                char c1 = token[0];
  797|   105k|                char c2 = token[1];
  798|   105k|                char c3 = token[2];
  799|   105k|                char c4 = token[3];
  800|   105k|                char c5 = token[4];
  801|   105k|                char c6 = token[5];
  802|       |
  803|   105k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 20.1k, False: 85.5k]
  |  Branch (803:21): [True: 16.2k, False: 89.4k]
  |  Branch (803:37): [True: 17.3k, False: 2.78k]
  |  Branch (803:53): [True: 16.2k, False: 1.11k]
  ------------------
  804|  16.2k|                {
  805|  16.2k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.38k, False: 14.8k]
  ------------------
  806|  16.2k|                    {
  807|  1.54k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.54k, False: 14.6k]
  ------------------
  808|  4.24k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 2.70k, False: 13.5k]
  ------------------
  809|  4.24k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 2.30k, False: 1.93k]
  ------------------
  810|  2.30k|                            {
  811|  2.30k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 947, False: 1.36k]
  ------------------
  812|    947|                                {
  813|    947|                                    return OpCode::CVTD2F;
  814|    947|                                }
  815|  1.36k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 654, False: 707]
  ------------------
  816|    654|                                {
  817|    654|                                    return OpCode::CVTD2I;
  818|    654|                                }
  819|  2.30k|                            }
  820|  2.64k|                            break;
  821|       |
  822|  2.72k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.72k, False: 13.4k]
  ------------------
  823|  7.07k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 4.34k, False: 11.8k]
  ------------------
  824|  7.07k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 4.97k, False: 2.10k]
  ------------------
  825|  4.97k|                            {
  826|  4.97k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 922, False: 4.04k]
  ------------------
  827|    922|                                {
  828|    922|                                    return OpCode::CVTF2D;
  829|    922|                                }
  830|  4.04k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.15k, False: 2.89k]
  ------------------
  831|  1.15k|                                {
  832|  1.15k|                                    return OpCode::CVTF2I;
  833|  1.15k|                                }
  834|  4.97k|                            }
  835|  5.00k|                            break;
  836|       |
  837|  5.00k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 267, False: 15.9k]
  ------------------
  838|  3.50k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 3.23k, False: 12.9k]
  ------------------
  839|  3.50k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 2.82k, False: 680]
  ------------------
  840|  2.82k|                            {
  841|  2.82k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 1.02k, False: 1.80k]
  ------------------
  842|  1.02k|                                {
  843|  1.02k|                                    return OpCode::CVTI2D;
  844|  1.02k|                                }
  845|  1.80k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.14k, False: 659]
  ------------------
  846|  1.14k|                                {
  847|  1.14k|                                    return OpCode::CVTI2F;
  848|  1.14k|                                }
  849|  2.82k|                            }
  850|  16.2k|                    }
  851|  16.2k|                }
  852|  89.4k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 13.5k, False: 75.9k]
  |  Branch (852:26): [True: 1.20k, False: 88.2k]
  |  Branch (852:42): [True: 9.10k, False: 4.39k]
  |  Branch (852:58): [True: 6.06k, False: 3.04k]
  |  Branch (852:74): [True: 4.87k, False: 1.19k]
  ------------------
  853|  89.4k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 1.71k, False: 3.16k]
  |  Branch (853:42): [True: 1.20k, False: 510]
  ------------------
  854|  1.20k|                {
  855|  1.20k|                    return OpCode::MULTUI;
  856|  1.20k|                }
  857|  98.5k|                break;
  858|   105k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|  98.5k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 73.8k, False: 1.89M]
  ------------------
  862|  73.8k|                char c1 = token[0];
  863|  73.8k|                char c2 = token[1];
  864|  73.8k|                char c3 = token[2];
  865|  73.8k|                char c4 = token[3];
  866|  73.8k|                char c5 = token[4];
  867|  73.8k|                char c6 = token[5];
  868|  73.8k|                char c7 = token[6];
  869|       |
  870|  73.8k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 15.6k, False: 58.2k]
  |  Branch (870:21): [True: 11.3k, False: 62.5k]
  |  Branch (870:37): [True: 12.7k, False: 2.89k]
  |  Branch (870:53): [True: 11.3k, False: 1.41k]
  ------------------
  871|  11.3k|                {
  872|  11.3k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 6.28k, False: 5.03k]
  |  Branch (872:25): [True: 3.49k, False: 7.82k]
  |  Branch (872:41): [True: 5.08k, False: 1.19k]
  |  Branch (872:54): [True: 4.28k, False: 809]
  |  Branch (872:70): [True: 3.49k, False: 785]
  ------------------
  873|  3.49k|                    {
  874|  3.49k|                        return OpCode::MOVI2FP;
  875|  3.49k|                    }
  876|  7.82k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 4.97k, False: 2.84k]
  |  Branch (876:30): [True: 2.15k, False: 5.66k]
  |  Branch (876:46): [True: 3.82k, False: 1.15k]
  |  Branch (876:62): [True: 2.65k, False: 1.17k]
  |  Branch (876:75): [True: 2.15k, False: 493]
  ------------------
  877|  2.15k|                    {
  878|  2.15k|                        return OpCode::MOVFP2I;
  879|  2.15k|                    }
  880|  11.3k|                }
  881|  68.1k|                break;
  882|  73.8k|            }
  883|       |
  884|   169k|            default: {
  ------------------
  |  Branch (884:13): [True: 169k, False: 1.79M]
  ------------------
  885|   169k|                break;
  886|  73.8k|            }
  887|  1.96M|        }
  888|       |
  889|       |        // None found
  890|  1.57M|        return OpCode::NONE;
  891|  1.96M|    }
_ZN3dlx3iceEcc:
   17|  1.92M|    {
   18|  1.92M|        constexpr const char diff = 'a' - 'A';
   19|  1.92M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 338k, False: 1.58M]
  |  Branch (19:28): [True: 543k, False: 1.04M]
  ------------------
   20|  1.92M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  2.07M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  14.7k|    {
  193|  14.7k|        ParseError err;
  194|       |
  195|  14.7k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  14.7k|        err.m_LineNumber                           = line_number;
  197|  14.7k|        err.m_Column                               = column;
  198|  14.7k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  14.7k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  14.7k|        return err;
  202|  14.7k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  14.7k|    {
  207|  14.7k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  14.7k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  14.7k|                                                         actual_type);
  210|  14.7k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|    952|    {
  216|    952|        ParseError err;
  217|       |
  218|    952|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|    952|        err.m_LineNumber        = line_number;
  220|    952|        err.m_Column            = column;
  221|    952|        err.invalid_number.text = text;
  222|       |
  223|    952|        return err;
  224|    952|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|    952|    {
  228|    952|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|    952|                                                token.GetColumn().unsafe(), token.GetText());
  230|    952|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      3|    {
  235|      3|        ParseError err;
  236|       |
  237|      3|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      3|        err.m_LineNumber = line_number;
  239|      3|        err.m_Column     = column;
  240|       |
  241|      3|        return err;
  242|      3|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      3|    {
  247|      3|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      3|                                                                     token.GetColumn().unsafe());
  249|      3|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|   914k|    {
  255|   914k|        ParseError err;
  256|       |
  257|   914k|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|   914k|        err.m_LineNumber                   = line_number;
  259|   914k|        err.m_Column                       = column;
  260|   914k|        err.unexpected_token.expected_type = expected_type;
  261|   914k|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|   914k|        return err;
  264|   914k|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|   914k|    {
  269|   914k|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|   914k|                                                  token.GetColumn().unsafe(), expected_type,
  271|   914k|                                                  token.GetType());
  272|   914k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   124k|    {
  277|   124k|        ParseError err;
  278|       |
  279|   124k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   124k|        err.m_LineNumber                   = line_number;
  281|   124k|        err.m_Column                       = column;
  282|   124k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   124k|        return err;
  285|   124k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  2.88k|    {
  289|  2.88k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  2.88k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  2.88k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|   646k|    {
  296|   646k|        ParseError err;
  297|       |
  298|   646k|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|   646k|        err.m_LineNumber                       = line_number;
  300|   646k|        err.m_Column                           = column;
  301|   646k|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|   646k|        return err;
  304|   646k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|   646k|    {
  309|   646k|        return ConstructInvalidLabelIdentifierParseError(
  310|   646k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|   646k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   122k|    {
  317|   122k|        ParseError err;
  318|       |
  319|   122k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   122k|        err.m_LineNumber                     = line_number;
  321|   122k|        err.m_Column                         = column;
  322|   122k|        err.label_already_defined.label_name = label_name;
  323|   122k|        err.label_already_defined.at_line    = at_line;
  324|   122k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   122k|        return err;
  327|   122k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   122k|    {
  332|   122k|        return ConstructLabelAlreadyDefinedParseError(
  333|   122k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   122k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   122k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   187k|    {
  340|   187k|        ParseError err;
  341|       |
  342|   187k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   187k|        err.m_LineNumber = line_number;
  344|   187k|        err.m_Column     = column;
  345|       |
  346|   187k|        return err;
  347|   187k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   187k|    {
  352|   187k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   187k|                                                        token.GetColumn().unsafe());
  354|   187k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  27.1k|    {
  360|  27.1k|        ParseError err;
  361|       |
  362|  27.1k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  27.1k|        err.m_LineNumber               = line_number;
  364|  27.1k|        err.m_Column                   = column;
  365|  27.1k|        err.too_few_arguments.required = required;
  366|  27.1k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  27.1k|        return err;
  369|  27.1k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  27.1k|    {
  374|  27.1k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  27.1k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  27.1k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  28.3k|    {
  381|  28.3k|        ParseError err;
  382|       |
  383|  28.3k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  28.3k|        err.m_LineNumber           = line_number;
  385|  28.3k|        err.m_Column               = column;
  386|  28.3k|        err.empty_label.label_name = label_name;
  387|       |
  388|  28.3k|        return err;
  389|  28.3k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  28.3k|    {
  393|  28.3k|        return ConstructEmptyLabelParseError(
  394|  28.3k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  28.3k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 22.2k, False: 6.09k]
  ------------------
  396|  22.2k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  28.3k|                        token.GetText());
  398|  28.3k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  9.41k|    {
  403|  9.41k|        ParseError err;
  404|       |
  405|  9.41k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  9.41k|        err.m_LineNumber = line_number;
  407|  9.41k|        err.m_Column     = column;
  408|       |
  409|  9.41k|        return err;
  410|  9.41k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  9.41k|    {
  414|  9.41k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  9.41k|                                               token.GetColumn().unsafe());
  416|  9.41k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  2.07M|    {
   19|  2.07M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  2.07M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  26.0k|    {
  182|  26.0k|        ParsedProgram program;
  183|       |
  184|  26.0k|        program.m_Tokens = tokens;
  185|       |
  186|  26.0k|        phi::boolean line_has_instruction{false};
  187|  26.0k|        phi::usize   label_count{0u};
  188|       |
  189|  2.49M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 2.47M, False: 26.0k]
  ------------------
  190|  2.47M|        {
  191|  2.47M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  2.47M|            switch (current_token.GetType())
  196|  2.47M|            {
  197|       |                // Ignore comments
  198|  26.3k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 26.3k, False: 2.44M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  26.3k|                    break;
  201|       |
  202|   360k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 360k, False: 2.11M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   360k|                    line_has_instruction = false;
  205|   360k|                    break;
  206|       |
  207|  1.12M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 1.12M, False: 1.34M]
  ------------------
  208|  1.12M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 220k, False: 909k]
  ------------------
  209|   220k|                    {
  210|   220k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   220k|                                current_token, Token::Type::NewLine));
  212|   220k|                        break;
  213|   220k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|   909k|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 402k, False: 506k]
  ------------------
  218|   402k|                    {
  219|   402k|                        program.AddParseError(
  220|   402k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   402k|                        break;
  222|   402k|                    }
  223|       |
  224|   506k|                    std::string_view label_name = current_token.GetText();
  225|   506k|                    label_name.remove_suffix(1);
  226|       |
  227|   506k|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 121k, False: 384k]
  ------------------
  228|   121k|                    {
  229|   121k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   121k|                                current_token.GetLineNumber().unsafe(),
  231|   121k|                                current_token.GetColumn().unsafe(), label_name));
  232|   121k|                        break;
  233|   121k|                    }
  234|       |
  235|   384k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 231k, False: 153k]
  ------------------
  236|   231k|                    {
  237|   231k|                        program.AddParseError(
  238|   231k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   231k|                        break;
  240|   231k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   153k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 122k, False: 30.8k]
  ------------------
  244|   122k|                    {
  245|       |                        // Find first defintions of label
  246|   122k|                        const Token* first_label_definition =
  247|   122k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   122k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   122k|                                    {
  250|   122k|                                        std::string_view token_label_name = t.GetText();
  251|   122k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   122k|                                        if (token_label_name == label_name)
  254|   122k|                                        {
  255|   122k|                                            return true;
  256|   122k|                                        }
  257|   122k|                                    }
  258|       |
  259|   122k|                                    return false;
  260|   122k|                                });
  261|       |
  262|   122k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   122k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   122k|                                current_token, *first_label_definition));
  266|   122k|                        break;
  267|   122k|                    }
  268|       |
  269|  30.8k|                    program.m_JumpData[label_name] =
  270|  30.8k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  30.8k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  30.8k|                    break;
  277|   153k|                }
  278|       |
  279|   277k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 277k, False: 2.19M]
  ------------------
  280|   277k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 187k, False: 90.1k]
  ------------------
  281|   187k|                    {
  282|   187k|                        program.AddParseError(
  283|   187k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   187k|                        break;
  285|   187k|                    }
  286|       |
  287|  90.1k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|  90.1k|                    PHI_ASSERT(current_token.HasHint());
  291|  90.1k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|  90.1k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|  90.1k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|  90.1k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|  90.1k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|  90.1k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|  90.1k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|  90.1k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|  90.1k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   121k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 106k, False: 14.3k]
  ------------------
  313|   106k|                    {
  314|       |                        // Get next token
  315|   106k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 618, False: 106k]
  ------------------
  316|    618|                        {
  317|    618|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    618|                                    current_token, number_of_argument_required.unsafe(),
  319|    618|                                    argument_num.unsafe()));
  320|    618|                            break;
  321|    618|                        }
  322|       |
  323|   106k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   106k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 15.1k, False: 91.0k]
  ------------------
  327|  15.1k|                        {
  328|  15.1k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 9.41k, False: 5.73k]
  ------------------
  329|  9.41k|                            {
  330|  9.41k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  9.41k|                            }
  332|       |
  333|  15.1k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  15.1k|                            continue;
  336|  15.1k|                        }
  337|       |
  338|  91.0k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 26.5k, False: 64.5k]
  ------------------
  339|  26.5k|                        {
  340|  26.5k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  26.5k|                                    token, number_of_argument_required.unsafe(),
  342|  26.5k|                                    argument_num.unsafe()));
  343|  26.5k|                            break;
  344|  26.5k|                        }
  345|       |
  346|  64.5k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|  64.5k|                                parse_instruction_argument(
  348|  64.5k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|  64.5k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 48.5k, False: 15.9k]
  ------------------
  350|  48.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  48.5k|                            break;
  353|  48.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  15.9k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  15.9k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  15.9k|                        argument_num++;
  360|  15.9k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  15.9k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|  90.1k|                    program.m_Instructions.emplace_back(instruction);
  368|  90.1k|                    line_has_instruction = true;
  369|  90.1k|                    break;
  370|   277k|                }
  371|       |
  372|   677k|                default:
  ------------------
  |  Branch (372:17): [True: 677k, False: 1.79M]
  ------------------
  373|   677k|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|   677k|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 244k, False: 433k]
  ------------------
  375|   244k|                    {
  376|   244k|                        expected_token_type = Token::Type::NewLine;
  377|   244k|                    }
  378|       |
  379|   677k|                    program.AddParseError(
  380|   677k|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|   677k|                    break;
  382|  2.47M|            }
  383|  2.47M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  26.0k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 3.86k, False: 22.1k]
  ------------------
  387|  3.86k|        {
  388|  45.3k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 41.4k, False: 3.86k]
  ------------------
  389|  41.4k|            {
  390|  41.4k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  41.4k|                const Token& token = *it;
  393|  41.4k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 28.3k, False: 13.1k]
  ------------------
  394|  28.3k|                {
  395|  28.3k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  28.3k|                    --label_count;
  397|  28.3k|                }
  398|  41.4k|            }
  399|  3.86k|        }
  400|       |
  401|  26.0k|        return program;
  402|  26.0k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  26.0k|    {
  406|  26.0k|        TokenStream tokens = Tokenize(source);
  407|  26.0k|        return Parse(tokens);
  408|  26.0k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|  64.5k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|  64.5k|        switch (token.GetType())
   38|  64.5k|        {
   39|  5.85k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 5.85k, False: 58.6k]
  ------------------
   40|  5.85k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 761, False: 5.09k]
  ------------------
   41|  5.85k|                                          ArgumentType::AddressDisplacement))
   42|    761|                {
   43|    761|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|    761|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|    761|                    return {};
   47|    761|                }
   48|       |
   49|       |                // Get address displacement
   50|  5.09k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  5.09k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  5.09k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 3, False: 5.09k]
  ------------------
   55|      3|                {
   56|      3|                    program.AddParseError(
   57|      3|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      3|                    return {};
   59|      3|                }
   60|       |
   61|  5.09k|                auto         it           = tokens.current_position();
   62|  5.09k|                const Token& first_token  = tokens.consume();
   63|  5.09k|                const Token& second_token = tokens.consume();
   64|  5.09k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  5.09k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 697, False: 4.39k]
  ------------------
   67|    697|                {
   68|    697|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|    697|                            first_token, Token::Type::OpenBracket));
   70|    697|                    return {};
   71|    697|                }
   72|       |
   73|       |                // Second token is the register
   74|  4.39k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 765, False: 3.62k]
  ------------------
   75|    765|                {
   76|    765|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|    765|                            second_token, Token::Type::RegisterInt));
   78|    765|                    return {};
   79|    765|                }
   80|       |
   81|  3.62k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.62k, False: 1.00k]
  ------------------
   82|  2.62k|                {
   83|  2.62k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.62k|                            third_token, Token::Type::ClosingBracket));
   85|  2.62k|                    return {};
   86|  2.62k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  1.00k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  1.00k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  1.00k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  3.62k|            }
   97|  4.90k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 4.90k, False: 59.6k]
  ------------------
   98|  4.90k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 1.03k, False: 3.86k]
  ------------------
   99|  1.03k|                {
  100|  1.03k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  1.03k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  1.03k|                    return {};
  103|  1.03k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  3.86k|                return ConstructInstructionArgumentRegisterInt(
  109|  3.86k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  4.90k|            }
  111|  1.70k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 1.70k, False: 62.8k]
  ------------------
  112|  1.70k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 1.47k, False: 231]
  ------------------
  113|  1.47k|                {
  114|  1.47k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  1.47k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  1.47k|                    return {};
  117|  1.47k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    231|                return ConstructInstructionArgumentRegisterFloat(
  123|    231|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  1.70k|            }
  125|  2.88k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 2.88k, False: 61.6k]
  ------------------
  126|  2.88k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  2.88k|                return {};
  129|  1.70k|            }
  130|  33.4k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 33.4k, False: 31.0k]
  ------------------
  131|       |                // Parse as Label
  132|  33.4k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 10.2k, False: 23.2k]
  ------------------
  133|  10.2k|                {
  134|  10.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  10.2k|                            token, expected_argument_type, ArgumentType::Label));
  136|  10.2k|                    return {};
  137|  10.2k|                }
  138|       |
  139|  23.2k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 23.2k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  23.2k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 13.2k, False: 9.99k]
  ------------------
  146|  13.2k|                {
  147|  13.2k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  13.2k|                    return {};
  149|  13.2k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  9.99k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  23.2k|            }
  155|  3.00k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 3.00k, False: 61.5k]
  ------------------
  156|  3.00k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.21k, False: 1.78k]
  ------------------
  157|  1.21k|                {
  158|  1.21k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.21k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.21k|                    return {};
  161|  1.21k|                }
  162|       |
  163|  1.78k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 836, False: 952]
  ------------------
  164|    836|                {
  165|    836|                    return ConstructInstructionArgumentImmediateValue(
  166|    836|                            static_cast<std::int16_t>(token.GetHint()));
  167|    836|                }
  168|       |
  169|    952|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|    952|                return {};
  171|  1.78k|            }
  172|       |
  173|  12.7k|            default:
  ------------------
  |  Branch (173:13): [True: 12.7k, False: 51.8k]
  ------------------
  174|  12.7k|                program.AddParseError(
  175|  12.7k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  12.7k|                return {};
  177|  64.5k|        }
  178|  64.5k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  3.15M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  3.15M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 1.95M, False: 1.19M]
  ------------------
  249|  1.95M|                                    {
  250|  1.95M|                                        std::string_view token_label_name = t.GetText();
  251|  1.95M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  1.95M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 122k, False: 1.83M]
  ------------------
  254|   122k|                                        {
  255|   122k|                                            return true;
  256|   122k|                                        }
  257|  1.95M|                                    }
  258|       |
  259|  3.02M|                                    return false;
  260|  3.15M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  10.2k|    {
   70|  10.2k|        PHI_ASSERT(id != IntRegisterID::None);
   71|  10.2k|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  10.2k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  10.2k|        return m_IntRegisters[id_value];
   76|  10.2k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  20.3k|    {
   81|  20.3k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  20.3k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  20.3k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  20.3k|        return m_IntRegisters[id_value];
   87|  20.3k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|    138|    {
   91|    138|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|    138|                                             RegisterAccessType::Signed),
   93|    138|                   "Mismatch for instruction access type");
   94|       |
   95|    138|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|    138|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|    138|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|    138|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 22, False: 116]
  ------------------
  100|    138|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 19, False: 3]
  ------------------
  101|     19|        {
  102|     19|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     19|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|     19|        }
  104|       |
  105|    138|        return GetIntRegister(id).GetSignedValue();
  106|    138|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  20.2k|    {
  110|  20.2k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  20.2k|                                             RegisterAccessType::Unsigned),
  112|  20.2k|                   "Mismatch for instruction access type");
  113|       |
  114|  20.2k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  20.2k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  20.2k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  20.2k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 28, False: 20.2k]
  ------------------
  119|  20.2k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 16, False: 12]
  ------------------
  120|     16|        {
  121|     16|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     16|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|     16|        }
  123|       |
  124|  20.2k|        return GetIntRegister(id).GetUnsignedValue();
  125|  20.2k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|     76|    {
  129|     76|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|     76|                                             RegisterAccessType::Signed),
  131|     76|                   "Mismatch for instruction access type");
  132|       |
  133|     76|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|     76|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 45, False: 31]
  ------------------
  136|     45|        {
  137|     45|            return;
  138|     45|        }
  139|       |
  140|     31|        reg.SetSignedValue(value);
  141|       |
  142|     31|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|     31|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|     31|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|     31|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  10.1k|    {
  150|  10.1k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  10.1k|                                             RegisterAccessType::Unsigned),
  152|  10.1k|                   "Mismatch for instruction access type");
  153|       |
  154|  10.1k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  10.1k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 103, False: 10.0k]
  ------------------
  157|    103|        {
  158|    103|            return;
  159|    103|        }
  160|       |
  161|  10.0k|        reg.SetUnsignedValue(value);
  162|       |
  163|  10.0k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  10.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  10.0k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  10.0k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|     45|    {
  171|     45|        PHI_ASSERT(id != FloatRegisterID::None);
  172|     45|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|     45|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|     45|        return m_FloatRegisters[id_value];
  177|     45|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|     26|    {
  182|     26|        PHI_ASSERT(id != FloatRegisterID::None);
  183|     26|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|     26|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|     26|        return m_FloatRegisters[id_value];
  188|     26|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|     26|    {
  192|     26|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|     26|                                             RegisterAccessType::Float),
  194|     26|                   "Mismatch for instruction access type");
  195|       |
  196|     26|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|     26|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|     26|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|     26|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 4, False: 22]
  ------------------
  201|     26|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 1, False: 3]
  ------------------
  202|      1|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|      1|        }
  207|       |
  208|     26|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|     26|        return reg.GetValue();
  211|     26|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|     23|    {
  215|     23|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|     23|                                             RegisterAccessType::Double),
  217|     23|                   "Mismatch for instruction access type");
  218|       |
  219|     23|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 7, False: 16]
  ------------------
  220|      7|        {
  221|      7|            Raise(Exception::MisalignedRegisterAccess);
  222|      7|            return {0.0};
  223|      7|        }
  224|       |
  225|     16|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|     16|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|     16|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|     16|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 3, False: 13]
  ------------------
  230|     16|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 2, False: 1]
  ------------------
  231|      2|        {
  232|      2|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      2|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      2|        }
  234|       |
  235|     16|        const FloatRegisterValueType register_value_type_high =
  236|     16|                m_FloatRegistersValueTypes[id_value + 1u];
  237|     16|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 6, False: 10]
  ------------------
  238|     16|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 5, False: 1]
  ------------------
  239|      5|        {
  240|      5|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      5|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      5|        }
  242|       |
  243|     16|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|     16|        const FloatRegister& second_reg =
  245|     16|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|     16|        const float first_value  = first_reg.GetValue().unsafe();
  248|     16|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|     16|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|     16|        const std::uint32_t first_value_bits =
  254|     16|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|     16|        const std::uint32_t second_value_bits =
  256|     16|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|     16|        std::uint64_t final_value_bits =
  259|     16|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|     16|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|     23|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|     23|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|      9|    {
  268|      9|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|      9|                                             RegisterAccessType::Float),
  270|      9|                   "Mismatch for instruction access type");
  271|       |
  272|      9|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|      9|        reg.SetValue(value);
  275|       |
  276|      9|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|      9|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|      9|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|      9|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|      6|    {
  284|      6|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|      6|                                             RegisterAccessType::Double),
  286|      6|                   "Mismatch for instruction access type");
  287|       |
  288|      6|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 4, False: 2]
  ------------------
  289|      4|        {
  290|      4|            Raise(Exception::MisalignedRegisterAccess);
  291|      4|            return;
  292|      4|        }
  293|       |
  294|      2|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|      2|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|      2|        double              value_raw  = value.unsafe();
  298|      2|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|      2|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|      2|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|      2|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|      2|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|      2|        FloatRegister& first_reg = GetFloatRegister(id);
  307|      2|        FloatRegister& second_reg =
  308|      2|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|      2|        first_reg.SetValue(first_value);
  311|      2|        second_reg.SetValue(second_value);
  312|       |
  313|      2|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|      2|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|      2|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|      2|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|      2|    }
_ZN3dlx9Processor7GetFPSREv:
  321|     12|    {
  322|     12|        return m_FPSR;
  323|     12|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|    577|    {
  327|    577|        return m_FPSR;
  328|    577|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|    577|    {
  332|    577|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|    577|        return status_reg.Get();
  335|    577|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|     12|    {
  339|     12|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|     12|        status_reg.SetStatus(value);
  342|     12|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  51.2k|    {
  346|  51.2k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  51.2k|        inst.Execute(*this);
  349|  51.2k|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  26.0k|    {
  353|  26.0k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 14.5k, False: 11.5k]
  ------------------
  354|  14.5k|        {
  355|  14.5k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  14.5k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  14.5k|            return false;
  357|  14.5k|        }
  358|       |
  359|  11.5k|        m_CurrentProgram = &program;
  360|       |
  361|  11.5k|        m_ProgramCounter               = 0u;
  362|  11.5k|        m_Halted                       = false;
  363|  11.5k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  11.5k|        m_LastRaisedException          = Exception::None;
  365|  11.5k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  11.5k|        return true;
  368|  26.0k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  50.0k|    {
  373|  50.0k|        return m_CurrentProgram;
  374|  50.0k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  62.5k|    {
  378|       |        // No nothing when no program is loaded
  379|  62.5k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 62.5k]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  62.5k|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 11.2k, False: 51.2k]
  ------------------
  386|  11.2k|        {
  387|  11.2k|            m_Halted                       = true;
  388|  11.2k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|  11.2k|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  62.5k|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 11.2k, False: 51.2k]
  ------------------
  393|  11.2k|        {
  394|  11.2k|            return;
  395|  11.2k|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  51.2k|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  51.2k|        const auto& current_instruction =
  402|  51.2k|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  51.2k|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  51.2k|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 92, False: 51.1k]
  ------------------
  409|     92|        {
  410|     92|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|     92|            return;
  412|     92|        }
  413|       |
  414|  51.1k|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  51.1k|        ++m_CurrentStepCount;
  417|       |
  418|  51.1k|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 167, False: 50.9k]
  |  Branch (418:14): [True: 51.1k, False: 0]
  |  Branch (418:42): [True: 5, False: 51.1k]
  ------------------
  419|  51.1k|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 162, False: 50.9k]
  ------------------
  420|    167|        {
  421|    167|            m_Halted                       = true;
  422|    167|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    167|        }
  424|  51.1k|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  11.5k|    {
  428|       |        // Do nothing when no program is loaded
  429|  11.5k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 11.5k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  11.5k|        m_ProgramCounter               = 0u;
  435|  11.5k|        m_Halted                       = false;
  436|  11.5k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  11.5k|        m_LastRaisedException          = Exception::None;
  438|  11.5k|        m_CurrentStepCount             = 0u;
  439|       |
  440|  74.0k|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 62.5k, False: 11.5k]
  ------------------
  441|  62.5k|        {
  442|  62.5k|            ExecuteStep();
  443|  62.5k|        }
  444|       |
  445|  11.5k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  11.5k|                   "RegisterAccessType was not reset correctly");
  447|  11.5k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  26.0k|    {
  464|  26.0k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 833k, False: 26.0k]
  ------------------
  465|   833k|        {
  466|   833k|            reg.SetSignedValue(0);
  467|   833k|        }
  468|       |
  469|  26.0k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 833k, False: 26.0k]
  ------------------
  470|   833k|        {
  471|   833k|            reg.SetValue(0.0f);
  472|   833k|        }
  473|       |
  474|  26.0k|        m_FPSR.SetStatus(false);
  475|  26.0k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  26.0k|    {
  479|  26.0k|        m_MemoryBlock.Clear();
  480|  26.0k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|     95|    {
  488|     95|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|     95|        m_LastRaisedException = exception;
  491|       |
  492|     95|        switch (exception)
  493|     95|        {
  494|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 6, False: 89]
  ------------------
  495|      6|                m_Halted = true;
  496|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      6|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 95]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 95]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      1|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 1, False: 94]
  ------------------
  505|      1|                m_Halted = true;
  506|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      1|                return;
  508|      3|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 3, False: 92]
  ------------------
  509|      3|                m_Halted = true;
  510|      3|                return;
  511|     67|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 67, False: 28]
  ------------------
  512|     67|                m_Halted = true;
  513|     67|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     67|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     67|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 95]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      7|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 7, False: 88]
  ------------------
  519|      7|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      7|                m_Halted = true;
  521|      7|                return;
  522|     11|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 11, False: 84]
  ------------------
  523|     11|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     11|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     11|                m_Halted = true;
  525|     11|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 95]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|     95|#endif
  531|     95|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      6|    {
  558|      6|        return m_MemoryBlock;
  559|      6|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|  10.0k|    {
  573|  10.0k|        return m_NextProgramCounter;
  574|  10.0k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  50.0k|    {
  578|  50.0k|        m_NextProgramCounter = new_npc;
  579|  50.0k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  30.6k|    {
   36|  30.6k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  30.6k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  30.6k|        switch (expected_access)
   40|  30.6k|        {
   41|     37|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 37, False: 30.6k]
  ------------------
   42|     37|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 30.6k]
  ------------------
   44|      0|                return false;
   45|      8|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 8, False: 30.6k]
  ------------------
   46|      8|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 4, False: 4]
  |  Branch (46:63): [True: 4, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 30.6k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      4|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 4, False: 30.6k]
  ------------------
   51|      4|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 2, False: 2]
  |  Branch (51:63): [True: 2, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 30.6k]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  30.5k|            default:
  ------------------
  |  Branch (54:13): [True: 30.5k, False: 49]
  ------------------
   55|  30.5k|                return expected_access == access;
   56|  30.6k|        }
   57|  30.6k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  2.00M|    {
   14|  2.00M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 386k, False: 1.62M]
  ------------------
   15|   386k|        {
   16|   386k|            char first_char = token[0];
   17|   386k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 34.1k, False: 352k]
  |  Branch (17:38): [True: 5.17k, False: 347k]
  ------------------
   18|  39.3k|            {
   19|  39.3k|                char second_char = token[1];
   20|  39.3k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 36.0k, False: 3.24k]
  |  Branch (20:43): [True: 25.3k, False: 10.7k]
  ------------------
   21|  25.3k|                {
   22|  25.3k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  25.3k|                }
   24|  39.3k|            }
   25|   386k|        }
   26|  1.62M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 447k, False: 1.17M]
  ------------------
   27|   447k|        {
   28|   447k|            char first_char = token[0];
   29|   447k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 19.5k, False: 427k]
  |  Branch (29:38): [True: 2.59k, False: 424k]
  ------------------
   30|  22.1k|            {
   31|  22.1k|                char second_char = token[1];
   32|  22.1k|                char third_char  = token[2];
   33|       |
   34|  22.1k|                switch (second_char)
   35|  22.1k|                {
   36|  7.66k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 7.66k, False: 14.4k]
  ------------------
   37|  7.66k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 6.49k, False: 1.16k]
  |  Branch (37:50): [True: 3.38k, False: 3.11k]
  ------------------
   38|  3.38k|                        {
   39|  3.38k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  3.38k|                        }
   41|  4.28k|                        break;
   42|  7.66k|                    }
   43|  5.25k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 5.25k, False: 16.9k]
  ------------------
   44|  5.25k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 2.95k, False: 2.29k]
  |  Branch (44:50): [True: 654, False: 2.30k]
  ------------------
   45|    654|                        {
   46|    654|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|    654|                        }
   48|  4.59k|                        break;
   49|  5.25k|                    }
   50|  4.59k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 3.23k, False: 18.9k]
  ------------------
   51|  3.23k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 870, False: 2.36k]
  |  Branch (51:50): [True: 292, False: 2.06k]
  ------------------
   52|  1.16k|                        {
   53|  1.16k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  1.16k|                        }
   55|  2.06k|                        break;
   56|  3.23k|                    }
   57|  6.00k|                    default: {
  ------------------
  |  Branch (57:21): [True: 6.00k, False: 16.1k]
  ------------------
   58|  6.00k|                        break;
   59|  3.23k|                    }
   60|  22.1k|                }
   61|  22.1k|            }
   62|   447k|        }
   63|       |
   64|  1.97M|        return IntRegisterID::None;
   65|  2.00M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  1.97M|    {
   69|  1.97M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 361k, False: 1.61M]
  ------------------
   70|   361k|        {
   71|   361k|            char first_char = token[0];
   72|   361k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 5.95k, False: 355k]
  |  Branch (72:38): [True: 15.9k, False: 339k]
  ------------------
   73|  21.9k|            {
   74|  21.9k|                char second_char = token[1];
   75|  21.9k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 18.6k, False: 3.26k]
  |  Branch (75:43): [True: 8.88k, False: 9.76k]
  ------------------
   76|  8.88k|                {
   77|  8.88k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  8.88k|                }
   79|  21.9k|            }
   80|   361k|        }
   81|  1.61M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 441k, False: 1.17M]
  ------------------
   82|   441k|        {
   83|   441k|            char first_char = token[0];
   84|   441k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 3.33k, False: 438k]
  |  Branch (84:38): [True: 20.4k, False: 418k]
  ------------------
   85|  23.8k|            {
   86|  23.8k|                char second_char = token[1];
   87|  23.8k|                char third_char  = token[2];
   88|       |
   89|  23.8k|                switch (second_char)
   90|  23.8k|                {
   91|  2.68k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 2.68k, False: 21.1k]
  ------------------
   92|  2.68k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 1.22k, False: 1.45k]
  |  Branch (92:50): [True: 357, False: 870]
  ------------------
   93|    357|                        {
   94|    357|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    357|                        }
   96|  2.32k|                        break;
   97|  2.68k|                    }
   98|  6.31k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 6.31k, False: 17.5k]
  ------------------
   99|  6.31k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 4.82k, False: 1.48k]
  |  Branch (99:50): [True: 1.31k, False: 3.51k]
  ------------------
  100|  1.31k|                        {
  101|  1.31k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  1.31k|                        }
  103|  5.00k|                        break;
  104|  6.31k|                    }
  105|  5.00k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 2.66k, False: 21.1k]
  ------------------
  106|  2.66k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 1.18k, False: 1.47k]
  |  Branch (106:50): [True: 277, False: 1.19k]
  ------------------
  107|  1.46k|                        {
  108|  1.46k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  1.46k|                        }
  110|  1.19k|                        break;
  111|  2.66k|                    }
  112|  12.1k|                    default: {
  ------------------
  |  Branch (112:21): [True: 12.1k, False: 11.6k]
  ------------------
  113|  12.1k|                        break;
  114|  2.66k|                    }
  115|  23.8k|                }
  116|  23.8k|            }
  117|   441k|        }
  118|       |
  119|  1.96M|        return FloatRegisterID::None;
  120|  1.97M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  1.90M|    {
  124|  1.90M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 320k, False: 1.58M]
  ------------------
  125|   320k|        {
  126|   320k|            char c1 = token[0];
  127|   320k|            char c2 = token[1];
  128|   320k|            char c3 = token[2];
  129|   320k|            char c4 = token[3];
  130|       |
  131|   320k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 17.1k, False: 302k]
  |  Branch (131:34): [True: 14.0k, False: 288k]
  |  Branch (131:49): [True: 15.9k, False: 15.3k]
  |  Branch (131:62): [True: 10.3k, False: 5.00k]
  ------------------
  132|   320k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 18.3k, False: 7.85k]
  |  Branch (132:34): [True: 2.36k, False: 5.49k]
  |  Branch (132:49): [True: 16.5k, False: 4.16k]
  |  Branch (132:62): [True: 792, False: 3.37k]
  ------------------
  133|   320k|        }
  134|       |
  135|  1.58M|        return false;
  136|  1.90M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  26.0k|    {
   12|  26.0k|        m_Value = value;
   13|  26.0k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|    577|    {
   17|    577|        return m_Value;
   18|    577|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  2.25M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   335k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  6.85M|    {
   41|  6.85M|        return m_Type;
   42|  6.85M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  2.28M|    {
   51|  2.28M|        return m_LineNumber;
   52|  2.28M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  2.19M|    {
   56|  2.19M|        return m_Column;
   57|  2.19M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  4.28M|    {
   66|  4.28M|        return m_Text;
   67|  4.28M|    }
_ZNK3dlx5Token7HasHintEv:
   79|  97.0k|    {
   80|  97.0k|        return m_HasHint;
   81|  97.0k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   101k|    {
   85|   101k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   101k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   101k|                   m_Type == Type::ImmediateInteger);
   88|   101k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   101k|        return m_Hint;
   91|   101k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  26.0k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  26.0k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  26.0k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  5.09k|    {
   51|  5.09k|        auto it = m_Iterator;
   52|  20.3k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 15.2k, False: 5.09k]
  ------------------
   53|  15.2k|        {
   54|  15.2k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 3, False: 15.2k]
  ------------------
   55|      3|            {
   56|      3|                return false;
   57|      3|            }
   58|  15.2k|        }
   59|       |
   60|  5.09k|        return true;
   61|  5.09k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  2.60M|    {
   65|  2.60M|        return m_Iterator != m_Tokens.end();
   66|  2.60M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  2.59M|    {
   70|  2.59M|        return m_Iterator == m_Tokens.end();
   71|  2.59M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  2.59M|    {
   85|  2.59M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  2.59M|        return *m_Iterator++;
   91|  2.59M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  5.09k|    {
  164|  5.09k|        return m_Iterator;
  165|  5.09k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  1.00k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  1.00k|        m_Iterator = it;
  179|  1.00k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  3.86k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  3.86k|        return m_Tokens.rbegin();
  224|  3.86k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  41.4k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  41.4k|        return m_Tokens.rend();
  233|  41.4k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  26.0k|    {
   63|  26.0k|        TokenStream tokens;
   64|       |
   65|  26.0k|        std::string_view current_token;
   66|       |
   67|  26.0k|        phi::u64 current_line_number{1u};
   68|  26.0k|        phi::u64 current_column{1u};
   69|  26.0k|        phi::u64 token_begin{0u};
   70|       |
   71|  26.0k|        phi::boolean parsing_comment{false};
   72|       |
   73|  8.47M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 8.44M, False: 26.0k]
  ------------------
   74|  8.44M|        {
   75|  8.44M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  8.44M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 387k, False: 8.06M]
  ------------------
   78|   387k|            {
   79|   387k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 129k, False: 258k]
  ------------------
   80|   129k|                {
   81|       |                    // Skip empty lines
   82|   129k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   129k|                                        current_line_number, current_column);
   84|       |
   85|   129k|                    parsing_comment = false;
   86|   129k|                    current_line_number += 1u;
   87|   129k|                    current_column = 1u;
   88|   129k|                    continue;
   89|   129k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   258k|                tokens.emplace_back(
   93|   258k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   258k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   258k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   258k|                                    current_line_number, current_column);
   98|       |
   99|   258k|                current_token   = std::string_view{};
  100|   258k|                parsing_comment = false;
  101|   258k|                current_line_number += 1u;
  102|   258k|                current_column = 0u;
  103|   258k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  8.06M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 10.4k, False: 8.05M]
  |  Branch (105:34): [True: 47.3k, False: 8.00M]
  ------------------
  106|  57.7k|            {
  107|  57.7k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 13.7k, False: 43.9k]
  ------------------
  108|  13.7k|                {
  109|  13.7k|                    token_begin = i;
  110|  13.7k|                }
  111|  43.9k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 14.0k, False: 29.8k]
  ------------------
  112|  14.0k|                {
  113|  14.0k|                    tokens.emplace_back(ParseToken(
  114|  14.0k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  14.0k|                            current_line_number, current_column - current_token.length()));
  116|  14.0k|                    token_begin   = i;
  117|  14.0k|                    current_token = std::string_view{};
  118|  14.0k|                }
  119|       |
  120|  57.7k|                parsing_comment = true;
  121|  57.7k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  57.7k|            }
  123|  8.00M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 162k, False: 7.84M]
  ------------------
  124|   162k|            {
  125|       |                // simply append the character
  126|   162k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   162k|            }
  128|  7.84M|            else
  129|  7.84M|            {
  130|       |                // Not parsing a comment
  131|  7.84M|                switch (c)
  132|  7.84M|                {
  133|   358k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 358k, False: 7.48M]
  ------------------
  134|   517k|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 158k, False: 7.68M]
  ------------------
  135|   653k|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 135k, False: 7.70M]
  ------------------
  136|   653k|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 179k, False: 473k]
  ------------------
  137|   179k|                        {
  138|   179k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   179k|                            continue;
  141|   179k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   473k|                        tokens.emplace_back(ParseToken(
  145|   473k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   473k|                                current_line_number, current_column - current_token.length()));
  147|   473k|                        current_token = std::string_view{};
  148|   473k|                        break;
  149|   784k|                    case ':':
  ------------------
  |  Branch (149:21): [True: 784k, False: 7.05M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|   784k|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 544k, False: 240k]
  ------------------
  152|   544k|                        {
  153|   544k|                            current_token =
  154|   544k|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|   544k|                            tokens.emplace_back(ParseToken(
  156|   544k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|   544k|                                    current_line_number,
  158|   544k|                                    current_column + 1u - current_token.length()));
  159|       |
  160|   544k|                            current_token = std::string_view{};
  161|   544k|                        }
  162|   240k|                        else
  163|   240k|                        {
  164|       |                            // Orphan colon
  165|   240k|                            token_begin = i;
  166|       |
  167|   240k|                            tokens.emplace_back(Token::Type::Colon,
  168|   240k|                                                source.substr(token_begin.unsafe(), 1),
  169|   240k|                                                current_line_number, current_column);
  170|   240k|                        }
  171|   784k|                        break;
  172|   121k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 121k, False: 7.72M]
  ------------------
  173|   306k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 185k, False: 7.65M]
  ------------------
  174|   414k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 107k, False: 7.73M]
  ------------------
  175|   414k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 248k, False: 166k]
  ------------------
  176|   248k|                        {
  177|   248k|                            tokens.emplace_back(ParseToken(
  178|   248k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   248k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   248k|                            current_token = std::string_view{};
  182|   248k|                        }
  183|       |
  184|   414k|                        Token::Type type;
  185|   414k|                        switch (c)
  186|   414k|                        {
  187|   121k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 121k, False: 293k]
  ------------------
  188|   121k|                                type = Token::Type::Comma;
  189|   121k|                                break;
  190|   185k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 185k, False: 228k]
  ------------------
  191|   185k|                                type = Token::Type::OpenBracket;
  192|   185k|                                break;
  193|   107k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 107k, False: 306k]
  ------------------
  194|   107k|                                type = Token::Type::ClosingBracket;
  195|   107k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 414k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   414k|#endif
  201|   414k|                        }
  202|       |
  203|   414k|                        token_begin = i;
  204|       |
  205|   414k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   414k|                                            current_line_number, current_column);
  207|   414k|                        break;
  208|       |
  209|  5.98M|                    default:
  ------------------
  |  Branch (209:21): [True: 5.98M, False: 1.85M]
  ------------------
  210|  5.98M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 1.52M, False: 4.46M]
  ------------------
  211|  1.52M|                        {
  212|  1.52M|                            token_begin = i;
  213|  1.52M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  5.98M|                        current_token =
  217|  5.98M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  7.84M|                }
  219|  7.84M|            }
  220|       |
  221|  8.14M|            current_column += 1u;
  222|  8.14M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  26.0k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 10.9k, False: 15.1k]
  ------------------
  226|  10.9k|        {
  227|  10.9k|            tokens.emplace_back(
  228|  10.9k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  10.9k|                               current_line_number, current_column - current_token.length()));
  230|  10.9k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  26.0k|        tokens.finalize();
  234|       |
  235|  26.0k|        return tokens;
  236|  26.0k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  1.54M|    {
   11|  1.54M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 18.2k, False: 1.53M]
  |  Branch (11:35): [True: 8.80k, False: 9.43k]
  ------------------
   12|  8.80k|        {
   13|  8.80k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  8.80k|            if (number)
  ------------------
  |  Branch (15:17): [True: 2.67k, False: 6.12k]
  ------------------
   16|  2.67k|            {
   17|  2.67k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  2.67k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  2.67k|            }
   20|       |
   21|  6.12k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  8.80k|        }
   23|       |
   24|  1.54M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 9.78k, False: 1.53M]
  |  Branch (24:35): [True: 18.0k, False: 1.51M]
  ------------------
   25|  27.8k|        {
   26|  27.8k|            return {Token::Type::Comment, token, line_number, column};
   27|  27.8k|        }
   28|       |
   29|  1.51M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 19.3k, False: 1.49M]
  ------------------
   30|  19.3k|        {
   31|  19.3k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  19.3k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  19.3k|        }
   34|       |
   35|  1.49M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 15.9k, False: 1.47M]
  ------------------
   36|  15.9k|        {
   37|  15.9k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  15.9k|        }
   39|       |
   40|  1.47M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 25.1k, False: 1.45M]
  ------------------
   41|  25.1k|        {
   42|  25.1k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  25.1k|                    static_cast<std::uint32_t>(id)};
   44|  25.1k|        }
   45|       |
   46|  1.45M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 5.37k, False: 1.44M]
  ------------------
   47|  5.37k|        {
   48|  5.37k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  5.37k|                    static_cast<std::uint32_t>(id)};
   50|  5.37k|        }
   51|       |
   52|  1.44M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 283k, False: 1.16M]
  ------------------
   53|   283k|        {
   54|   283k|            return {Token::Type::OpCode, token, line_number, column,
   55|   283k|                    static_cast<std::uint32_t>(opcode)};
   56|   283k|        }
   57|       |
   58|  1.16M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  1.44M|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  13.0k|    {
   53|       |        // Constants
   54|  13.0k|        constexpr std::uint8_t number_of_opcodes =
   55|  13.0k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  13.0k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  13.0k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  13.0k|        std::string ret;
   60|       |
   61|   175k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 173k, False: 1.81k]
  ------------------
   62|   173k|        {
   63|   173k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   173k|            switch (current_value)
   66|   173k|            {
   67|       |                // OpCode
   68|   109k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 109k, False: 64.3k]
  ------------------
   69|       |                    // Has one more value
   70|   109k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 109k, False: 184]
  ------------------
   71|   109k|                    {
   72|   109k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   109k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   109k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 1.43k, False: 107k]
  ------------------
   77|  1.43k|                        {
   78|  1.43k|                            return detail::ErrorString;
   79|  1.43k|                        }
   80|   109k|                    }
   81|   107k|                    break;
   82|   109k|                }
   83|       |
   84|       |                // Int Register
   85|   107k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 20.4k, False: 153k]
  ------------------
   86|       |                    // Has one more value
   87|  20.4k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 20.4k, False: 43]
  ------------------
   88|  20.4k|                    {
   89|  20.4k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  20.4k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  20.4k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 316, False: 20.1k]
  ------------------
   93|    316|                        {
   94|    316|                            return detail::ErrorString;
   95|    316|                        }
   96|  20.4k|                    }
   97|  20.1k|                    break;
   98|  20.4k|                }
   99|       |
  100|       |                // Float register
  101|  20.1k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 4.16k, False: 169k]
  ------------------
  102|       |                    // Has one more value
  103|  4.16k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 4.16k, False: 1]
  ------------------
  104|  4.16k|                    {
  105|  4.16k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  4.16k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  4.16k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 30, False: 4.13k]
  ------------------
  109|     30|                        {
  110|     30|                            return detail::ErrorString;
  111|     30|                        }
  112|  4.16k|                    }
  113|  4.13k|                    break;
  114|  4.16k|                }
  115|       |
  116|       |                // Floating point status register
  117|  16.9k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 16.9k, False: 156k]
  ------------------
  118|  16.9k|                    ret += "FPSR";
  119|  16.9k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 27, False: 16.9k]
  ------------------
  120|     27|                    {
  121|     27|                        return detail::ErrorString;
  122|     27|                    }
  123|       |
  124|  16.9k|                    break;
  125|  16.9k|                }
  126|       |
  127|       |                // Immediate integer
  128|  16.9k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 516, False: 173k]
  ------------------
  129|    516|                    ret += "#";
  130|    516|                    [[fallthrough]];
  131|    516|                }
  132|       |
  133|       |                // Integer literal
  134|    765|                case 5: {
  ------------------
  |  Branch (134:17): [True: 249, False: 173k]
  ------------------
  135|    765|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|    765|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 751, False: 14]
  ------------------
  138|    751|                    {
  139|    751|                        std::int16_t value = 0;
  140|       |
  141|  2.20k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 1.45k, False: 751]
  ------------------
  142|  1.45k|                        {
  143|  1.45k|                            value <<= 8;
  144|  1.45k|                            value &= data[index++];
  145|  1.45k|                        }
  146|       |
  147|    751|                        ret += std::to_string(value);
  148|    751|                    }
  149|    765|                    break;
  150|    516|                }
  151|       |
  152|       |                // Label
  153|  3.05k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 3.05k, False: 170k]
  ------------------
  154|  3.05k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  3.05k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 3.05k, False: 1]
  ------------------
  157|  3.05k|                    {
  158|  3.05k|                        std::string label_name = "lbl_";
  159|       |
  160|  18.1k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 15.1k, False: 3.05k]
  ------------------
  161|  15.1k|                        {
  162|  15.1k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  15.1k|                            label_name += c;
  165|  15.1k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  3.05k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 2.98k, False: 63]
  |  Branch (168:45): [True: 1.36k, False: 1.62k]
  ------------------
  169|  1.36k|                        {
  170|  1.36k|                            label_name += ':';
  171|  1.36k|                            ret += label_name;
  172|  1.36k|                        }
  173|  1.68k|                        else
  174|  1.68k|                        {
  175|  1.68k|                            ret += label_name;
  176|  1.68k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 164, False: 1.52k]
  ------------------
  177|    164|                            {
  178|    164|                                return detail::ErrorString;
  179|    164|                            }
  180|  1.68k|                        }
  181|  3.05k|                    }
  182|  2.88k|                    break;
  183|  3.05k|                }
  184|       |
  185|       |                // Newline
  186|  2.88k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 1.72k, False: 171k]
  ------------------
  187|  1.72k|                    ret += '\n';
  188|  1.72k|                    break;
  189|  3.05k|                }
  190|       |
  191|       |                // Comment
  192|  7.91k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 7.91k, False: 165k]
  ------------------
  193|  7.91k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  7.91k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 7.91k, False: 3]
  ------------------
  196|  7.91k|                    {
  197|  7.91k|                        std::string comment = "; ";
  198|       |
  199|  47.2k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 39.3k, False: 7.91k]
  ------------------
  200|  39.3k|                        {
  201|  39.3k|                            comment += static_cast<char>(data[index++]);
  202|  39.3k|                        }
  203|       |
  204|  7.91k|                        ret += comment + '\n';
  205|  7.91k|                    }
  206|  7.91k|                    break;
  207|  3.05k|                }
  208|       |
  209|       |                // Ignore
  210|  9.23k|                default:
  ------------------
  |  Branch (210:17): [True: 9.23k, False: 164k]
  ------------------
  211|  9.23k|                    return detail::ErrorString;
  212|   173k|            }
  213|   173k|        }
  214|       |
  215|  1.81k|        return ret;
  216|  13.0k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   152k|        {
   20|   152k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 151k, False: 1.04k]
  ------------------
   21|   151k|            {
   22|   151k|                std::uint8_t val = data[index++];
   23|   151k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 126k, False: 25.2k]
  ------------------
   24|   126k|                {
   25|   126k|                    text += ' ';
   26|   126k|                }
   27|  25.2k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 23.3k, False: 1.97k]
  ------------------
   28|  23.3k|                {
   29|  23.3k|                    text += ',';
   30|  23.3k|                }
   31|  1.97k|                else
   32|  1.97k|                {
   33|  1.97k|                    return false;
   34|  1.97k|                }
   35|   151k|            }
   36|       |
   37|   150k|            return true;
   38|   152k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  15.1k|        {
   42|  15.1k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 12.9k, False: 2.15k]
  ------------------
   43|  12.9k|            {
   44|  12.9k|                return '_';
   45|  12.9k|            }
   46|       |
   47|  2.15k|            return c;
   48|  15.1k|        }

LLVMFuzzerTestOneInput:
   13|  13.0k|{
   14|  13.0k|    static dlx::Processor processor;
   15|       |
   16|  13.0k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   17|       |
   18|       |    // Parse it
   19|  13.0k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   20|       |
   21|       |    // Clear registers and memory
   22|  13.0k|    processor.ClearRegisters();
   23|  13.0k|    processor.ClearMemory();
   24|       |
   25|       |    // Run it
   26|  13.0k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (26:9): [True: 159, False: 12.8k]
  ------------------
   27|    159|    {
   28|    159|        processor.ExecuteCurrentProgram();
   29|    159|    }
   30|       |
   31|  13.0k|    std::string source_structured = fuzz::ParseAsStrucutedDLXCode(data, size);
   32|       |
   33|  13.0k|    program = dlx::Parser::Parse(source_structured);
   34|       |
   35|  13.0k|    processor.ClearRegisters();
   36|  13.0k|    processor.ClearMemory();
   37|       |
   38|  13.0k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (38:9): [True: 11.3k, False: 1.64k]
  ------------------
   39|  11.3k|    {
   40|  11.3k|        processor.ExecuteCurrentProgram();
   41|  11.3k|    }
   42|       |
   43|  13.0k|    return 0;
   44|  13.0k|}


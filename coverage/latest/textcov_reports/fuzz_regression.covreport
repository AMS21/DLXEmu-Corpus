_ZNK3dlx15InstructionInfo15GetArgumentTypeEN3phi7integerIhEE:
  168|   600k|        {
  169|   600k|            PHI_ASSERT(index < 3u);
  170|       |
  171|   600k|            switch (index.unsafe())
  172|   600k|            {
  173|   267k|                case 0:
  ------------------
  |  Branch (173:17): [True: 267k, False: 332k]
  ------------------
  174|   267k|                    return m_Arg1Type;
  175|       |
  176|   169k|                case 1:
  ------------------
  |  Branch (176:17): [True: 169k, False: 431k]
  ------------------
  177|   169k|                    return m_Arg2Type;
  178|       |
  179|   163k|                case 2:
  ------------------
  |  Branch (179:17): [True: 163k, False: 436k]
  ------------------
  180|   163k|                    return m_Arg3Type;
  181|       |
  182|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  183|      0|                default:
  ------------------
  |  Branch (183:17): [True: 0, False: 600k]
  ------------------
  184|      0|                    PHI_ASSERT_NOT_REACHED();
  185|      0|                    return m_Arg1Type;
  186|   600k|#endif
  187|   600k|            }
  188|   600k|        }
_ZNK3dlx15InstructionInfo28GetNumberOfRequiredArgumentsEv:
  194|   161k|        {
  195|   161k|            phi::u8 number_of_argument_required = static_cast<std::uint8_t>(0u);
  196|       |
  197|       |            // Count the number of argument we need
  198|   161k|            if (m_Arg1Type != ArgumentType::None)
  ------------------
  |  Branch (198:17): [True: 153k, False: 8.12k]
  ------------------
  199|   153k|            {
  200|   153k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  201|   153k|            }
  202|   161k|            if (m_Arg2Type != ArgumentType::None)
  ------------------
  |  Branch (202:17): [True: 106k, False: 54.7k]
  ------------------
  203|   106k|            {
  204|   106k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  205|   106k|            }
  206|   161k|            if (m_Arg3Type != ArgumentType::None)
  ------------------
  |  Branch (206:17): [True: 59.7k, False: 102k]
  ------------------
  207|  59.7k|            {
  208|  59.7k|                number_of_argument_required += static_cast<std::uint8_t>(1u);
  209|  59.7k|            }
  210|       |
  211|   161k|            return number_of_argument_required;
  212|   161k|        }
_ZNK3dlx15InstructionInfo21GetRegisterAccessTypeEv:
  215|  52.2k|        {
  216|  52.2k|            return m_RegisterAccessType;
  217|  52.2k|        }
_ZNK3dlx15InstructionInfo11GetExecutorEv:
  220|   161k|        {
  221|   161k|            return m_Executor;
  222|   161k|        }
_ZN3dlxanENS_12ArgumentTypeES0_:
   37|   243k|    {
   38|   243k|        using underlying_t = phi::underlying_type_t<ArgumentType>;
   39|       |
   40|   243k|        return static_cast<ArgumentType>(static_cast<underlying_t>(lhs) &
   41|   243k|                                         static_cast<underlying_t>(rhs));
   42|   243k|    }
_ZN3dlx20ArgumentTypeIncludesENS_12ArgumentTypeES0_:
   54|   243k|    {
   55|   243k|        using underlying_t = std::underlying_type_t<ArgumentType>;
   56|       |
   57|   243k|        return static_cast<underlying_t>(type & test) != 0;
   58|   243k|    }

_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.00k|            {}

_ZN3dlx9enum_nameINS_6OpCodeEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  203|   219k|    {
  204|   219k|        switch (value)
  205|   219k|        {
  206|      0|#define DLX_ENUM_OPCODE_IMPL(name)                                                                 \
  207|      0|    case OpCode::name:                                                                             \
  208|      0|        return #name;
  209|       |
  210|      0|            DLX_ENUM_OPCODE
  ------------------
  |  |   15|   105k|    DLX_ENUM_OPCODE_IMPL(ADD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|   105k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 105k, False: 113k]
  |  |  |  |  ------------------
  |  |  |  |  208|   105k|        return #name;
  |  |  ------------------
  |  |   16|   105k|    DLX_ENUM_OPCODE_IMPL(ADDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  14.8k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 14.8k, False: 204k]
  |  |  |  |  ------------------
  |  |  |  |  208|  14.8k|        return #name;
  |  |  ------------------
  |  |   17|  14.8k|    DLX_ENUM_OPCODE_IMPL(ADDU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    521|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 521, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    521|        return #name;
  |  |  ------------------
  |  |   18|  4.63k|    DLX_ENUM_OPCODE_IMPL(ADDUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  4.63k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.63k, False: 214k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.63k|        return #name;
  |  |  ------------------
  |  |   19|  4.63k|    DLX_ENUM_OPCODE_IMPL(ADDF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    371|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 371, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    371|        return #name;
  |  |  ------------------
  |  |   20|  5.11k|    DLX_ENUM_OPCODE_IMPL(ADDD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  5.11k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.11k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.11k|        return #name;
  |  |  ------------------
  |  |   21|  5.11k|                                                                                                   \
  |  |   22|  5.11k|    /* Sub */                                                                                      \
  |  |   23|  5.11k|    DLX_ENUM_OPCODE_IMPL(SUB)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.36k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.36k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.36k|        return #name;
  |  |  ------------------
  |  |   24|  2.94k|    DLX_ENUM_OPCODE_IMPL(SUBI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.94k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.94k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.94k|        return #name;
  |  |  ------------------
  |  |   25|  7.75k|    DLX_ENUM_OPCODE_IMPL(SUBU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  7.75k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 7.75k, False: 211k]
  |  |  |  |  ------------------
  |  |  |  |  208|  7.75k|        return #name;
  |  |  ------------------
  |  |   26|  7.75k|    DLX_ENUM_OPCODE_IMPL(SUBUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    833|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 833, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    833|        return #name;
  |  |  ------------------
  |  |   27|  1.26k|    DLX_ENUM_OPCODE_IMPL(SUBF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.26k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.26k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.26k|        return #name;
  |  |  ------------------
  |  |   28|  1.26k|    DLX_ENUM_OPCODE_IMPL(SUBD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    467|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 467, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    467|        return #name;
  |  |  ------------------
  |  |   29|    467|                                                                                                   \
  |  |   30|    467|    /* Multiplication */                                                                           \
  |  |   31|    519|    DLX_ENUM_OPCODE_IMPL(MULT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    519|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 519, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    519|        return #name;
  |  |  ------------------
  |  |   32|    519|    DLX_ENUM_OPCODE_IMPL(MULTI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 144, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    144|        return #name;
  |  |  ------------------
  |  |   33|  1.46k|    DLX_ENUM_OPCODE_IMPL(MULTU)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.46k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.46k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.46k|        return #name;
  |  |  ------------------
  |  |   34|  1.46k|    DLX_ENUM_OPCODE_IMPL(MULTUI)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    328|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 328, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    328|        return #name;
  |  |  ------------------
  |  |   35|  1.23k|    DLX_ENUM_OPCODE_IMPL(MULTF)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.23k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.23k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.23k|        return #name;
  |  |  ------------------
  |  |   36|  1.23k|    DLX_ENUM_OPCODE_IMPL(MULTD)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    631|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 631, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    631|        return #name;
  |  |  ------------------
  |  |   37|    631|                                                                                                   \
  |  |   38|    631|    /* Division */                                                                                 \
  |  |   39|    631|    DLX_ENUM_OPCODE_IMPL(DIV)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     11|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     11|        return #name;
  |  |  ------------------
  |  |   40|     19|    DLX_ENUM_OPCODE_IMPL(DIVI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     19|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     19|        return #name;
  |  |  ------------------
  |  |   41|    301|    DLX_ENUM_OPCODE_IMPL(DIVU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    301|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 301, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    301|        return #name;
  |  |  ------------------
  |  |   42|    430|    DLX_ENUM_OPCODE_IMPL(DIVUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    430|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 430, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    430|        return #name;
  |  |  ------------------
  |  |   43|    430|    DLX_ENUM_OPCODE_IMPL(DIVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    185|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 185, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    185|        return #name;
  |  |  ------------------
  |  |   44|  1.61k|    DLX_ENUM_OPCODE_IMPL(DIVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.61k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.61k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.61k|        return #name;
  |  |  ------------------
  |  |   45|  1.61k|                                                                                                   \
  |  |   46|  1.61k|    /* Shift left (logical) */                                                                     \
  |  |   47|  2.01k|    DLX_ENUM_OPCODE_IMPL(SLL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.01k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.01k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.01k|        return #name;
  |  |  ------------------
  |  |   48|  2.01k|    DLX_ENUM_OPCODE_IMPL(SLLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    246|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 246, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    246|        return #name;
  |  |  ------------------
  |  |   49|    246|                                                                                                   \
  |  |   50|    246|    /* Shift right (logical) */                                                                    \
  |  |   51|  1.16k|    DLX_ENUM_OPCODE_IMPL(SRL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.16k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.16k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.16k|        return #name;
  |  |  ------------------
  |  |   52|  1.16k|    DLX_ENUM_OPCODE_IMPL(SRLI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    127|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 127, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    127|        return #name;
  |  |  ------------------
  |  |   53|    127|                                                                                                   \
  |  |   54|    127|    /* Shift left (arithmetic) */                                                                  \
  |  |   55|    127|    DLX_ENUM_OPCODE_IMPL(SLA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     96|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 96, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     96|        return #name;
  |  |  ------------------
  |  |   56|    639|    DLX_ENUM_OPCODE_IMPL(SLAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    639|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 639, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    639|        return #name;
  |  |  ------------------
  |  |   57|    639|                                                                                                   \
  |  |   58|    639|    /* Shift right (arithmetic) */                                                                 \
  |  |   59|    639|    DLX_ENUM_OPCODE_IMPL(SRA)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    117|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 117, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    117|        return #name;
  |  |  ------------------
  |  |   60|    713|    DLX_ENUM_OPCODE_IMPL(SRAI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    713|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 713, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    713|        return #name;
  |  |  ------------------
  |  |   61|    713|                                                                                                   \
  |  |   62|    713|    /* Logic */                                                                                    \
  |  |   63|    713|                                                                                                   \
  |  |   64|    713|    /* And */                                                                                      \
  |  |   65|  5.83k|    DLX_ENUM_OPCODE_IMPL(AND)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  5.83k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.83k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.83k|        return #name;
  |  |  ------------------
  |  |   66|  5.83k|    DLX_ENUM_OPCODE_IMPL(ANDI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    588|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 588, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    588|        return #name;
  |  |  ------------------
  |  |   67|    588|                                                                                                   \
  |  |   68|    588|    /* Or */                                                                                       \
  |  |   69|  1.10k|    DLX_ENUM_OPCODE_IMPL(OR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|  1.10k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.10k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.10k|        return #name;
  |  |  ------------------
  |  |   70|  1.10k|    DLX_ENUM_OPCODE_IMPL(ORI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    502|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 502, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    502|        return #name;
  |  |  ------------------
  |  |   71|    502|                                                                                                   \
  |  |   72|    502|    /* XOR */                                                                                      \
  |  |   73|    502|    DLX_ENUM_OPCODE_IMPL(XOR)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     47|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 47, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     47|        return #name;
  |  |  ------------------
  |  |   74|  1.08k|    DLX_ENUM_OPCODE_IMPL(XORI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.08k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.08k|        return #name;
  |  |  ------------------
  |  |   75|  1.08k|                                                                                                   \
  |  |   76|  1.08k|    /* Set conditionals */                                                                         \
  |  |   77|  1.08k|                                                                                                   \
  |  |   78|  1.08k|    /* Less than */                                                                                \
  |  |   79|  1.08k|    DLX_ENUM_OPCODE_IMPL(SLT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    879|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 879, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    879|        return #name;
  |  |  ------------------
  |  |   80|    879|    DLX_ENUM_OPCODE_IMPL(SLTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    593|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 593, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    593|        return #name;
  |  |  ------------------
  |  |   81|    617|    DLX_ENUM_OPCODE_IMPL(SLTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    617|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 617, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    617|        return #name;
  |  |  ------------------
  |  |   82|  1.45k|    DLX_ENUM_OPCODE_IMPL(SLTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  1.45k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.45k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.45k|        return #name;
  |  |  ------------------
  |  |   83|  1.45k|    DLX_ENUM_OPCODE_IMPL(LTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    411|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 411, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    411|        return #name;
  |  |  ------------------
  |  |   84|  4.58k|    DLX_ENUM_OPCODE_IMPL(LTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  4.58k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.58k, False: 214k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.58k|        return #name;
  |  |  ------------------
  |  |   85|  4.58k|                                                                                                   \
  |  |   86|  4.58k|    /* Greater than */                                                                             \
  |  |   87|  4.58k|    DLX_ENUM_OPCODE_IMPL(SGT)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.00k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.00k|        return #name;
  |  |  ------------------
  |  |   88|  1.00k|    DLX_ENUM_OPCODE_IMPL(SGTI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    734|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 734, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    734|        return #name;
  |  |  ------------------
  |  |   89|    734|    DLX_ENUM_OPCODE_IMPL(SGTU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    189|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 189, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    189|        return #name;
  |  |  ------------------
  |  |   90|    361|    DLX_ENUM_OPCODE_IMPL(SGTUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    361|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 361, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    361|        return #name;
  |  |  ------------------
  |  |   91|    361|    DLX_ENUM_OPCODE_IMPL(GTF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    169|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 169, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    169|        return #name;
  |  |  ------------------
  |  |   92|  1.22k|    DLX_ENUM_OPCODE_IMPL(GTD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.22k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.22k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.22k|        return #name;
  |  |  ------------------
  |  |   93|  1.22k|                                                                                                   \
  |  |   94|  1.22k|    /* Less than or equal */                                                                       \
  |  |   95|  1.30k|    DLX_ENUM_OPCODE_IMPL(SLE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.30k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.30k|        return #name;
  |  |  ------------------
  |  |   96|  1.30k|    DLX_ENUM_OPCODE_IMPL(SLEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     38|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 38, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     38|        return #name;
  |  |  ------------------
  |  |   97|    164|    DLX_ENUM_OPCODE_IMPL(SLEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    164|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 164, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    164|        return #name;
  |  |  ------------------
  |  |   98|    726|    DLX_ENUM_OPCODE_IMPL(SLEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    726|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 726, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    726|        return #name;
  |  |  ------------------
  |  |   99|    726|    DLX_ENUM_OPCODE_IMPL(LEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     33|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 33, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     33|        return #name;
  |  |  ------------------
  |  |  100|  2.54k|    DLX_ENUM_OPCODE_IMPL(LED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  2.54k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.54k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.54k|        return #name;
  |  |  ------------------
  |  |  101|  2.54k|                                                                                                   \
  |  |  102|  2.54k|    /* Greater than or equal */                                                                    \
  |  |  103|  2.54k|    DLX_ENUM_OPCODE_IMPL(SGE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     19|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 19, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     19|        return #name;
  |  |  ------------------
  |  |  104|  2.62k|    DLX_ENUM_OPCODE_IMPL(SGEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.62k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.62k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.62k|        return #name;
  |  |  ------------------
  |  |  105|  2.62k|    DLX_ENUM_OPCODE_IMPL(SGEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  1.00k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.00k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.00k|        return #name;
  |  |  ------------------
  |  |  106|  2.25k|    DLX_ENUM_OPCODE_IMPL(SGEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|  2.25k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.25k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.25k|        return #name;
  |  |  ------------------
  |  |  107|  2.25k|    DLX_ENUM_OPCODE_IMPL(GEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     35|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 35, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     35|        return #name;
  |  |  ------------------
  |  |  108|  1.41k|    DLX_ENUM_OPCODE_IMPL(GED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.41k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.41k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.41k|        return #name;
  |  |  ------------------
  |  |  109|  1.41k|                                                                                                   \
  |  |  110|  1.41k|    /* Equal */                                                                                    \
  |  |  111|  1.41k|    DLX_ENUM_OPCODE_IMPL(SEQ)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    859|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 859, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    859|        return #name;
  |  |  ------------------
  |  |  112|    859|    DLX_ENUM_OPCODE_IMPL(SEQI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    720|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 720, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    720|        return #name;
  |  |  ------------------
  |  |  113|    720|    DLX_ENUM_OPCODE_IMPL(SEQU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    566|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 566, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    566|        return #name;
  |  |  ------------------
  |  |  114|    566|    DLX_ENUM_OPCODE_IMPL(SEQUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    536|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 536, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    536|        return #name;
  |  |  ------------------
  |  |  115|  1.30k|    DLX_ENUM_OPCODE_IMPL(EQF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.30k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.30k, False: 217k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.30k|        return #name;
  |  |  ------------------
  |  |  116|  1.30k|    DLX_ENUM_OPCODE_IMPL(EQD)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    210|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 210, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    210|        return #name;
  |  |  ------------------
  |  |  117|    210|                                                                                                   \
  |  |  118|    210|    /* Not equal */                                                                                \
  |  |  119|    210|    DLX_ENUM_OPCODE_IMPL(SNE)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     15|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 15, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     15|        return #name;
  |  |  ------------------
  |  |  120|     15|    DLX_ENUM_OPCODE_IMPL(SNEI)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     11|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 11, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     11|        return #name;
  |  |  ------------------
  |  |  121|    144|    DLX_ENUM_OPCODE_IMPL(SNEU)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    144|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 144, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    144|        return #name;
  |  |  ------------------
  |  |  122|    157|    DLX_ENUM_OPCODE_IMPL(SNEUI)                                                                    \
  |  |  ------------------
  |  |  |  |  207|    157|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 157, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    157|        return #name;
  |  |  ------------------
  |  |  123|  1.05k|    DLX_ENUM_OPCODE_IMPL(NEF)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.05k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.05k|        return #name;
  |  |  ------------------
  |  |  124|  1.05k|    DLX_ENUM_OPCODE_IMPL(NED)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     93|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 93, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     93|        return #name;
  |  |  ------------------
  |  |  125|     93|                                                                                                   \
  |  |  126|     93|    /* Conditional branching */                                                                    \
  |  |  127|  2.38k|    DLX_ENUM_OPCODE_IMPL(BEQZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  2.38k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2.38k, False: 216k]
  |  |  |  |  ------------------
  |  |  |  |  208|  2.38k|        return #name;
  |  |  ------------------
  |  |  128|  2.38k|    DLX_ENUM_OPCODE_IMPL(BNEZ)                                                                     \
  |  |  ------------------
  |  |  |  |  207|     79|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 79, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     79|        return #name;
  |  |  ------------------
  |  |  129|    110|    DLX_ENUM_OPCODE_IMPL(BFPT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    110|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 110, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    110|        return #name;
  |  |  ------------------
  |  |  130|    632|    DLX_ENUM_OPCODE_IMPL(BFPF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    632|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 632, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    632|        return #name;
  |  |  ------------------
  |  |  131|    632|                                                                                                   \
  |  |  132|    632|    /* Unconditional branching */                                                                  \
  |  |  133|    632|    DLX_ENUM_OPCODE_IMPL(J)                                                                        \
  |  |  ------------------
  |  |  |  |  207|      1|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|      1|        return #name;
  |  |  ------------------
  |  |  134|     40|    DLX_ENUM_OPCODE_IMPL(JR)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     40|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 40, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     40|        return #name;
  |  |  ------------------
  |  |  135|    255|    DLX_ENUM_OPCODE_IMPL(JAL)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    255|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 255, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    255|        return #name;
  |  |  ------------------
  |  |  136|  4.40k|    DLX_ENUM_OPCODE_IMPL(JALR)                                                                     \
  |  |  ------------------
  |  |  |  |  207|  4.40k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 4.40k, False: 214k]
  |  |  |  |  ------------------
  |  |  |  |  208|  4.40k|        return #name;
  |  |  ------------------
  |  |  137|  4.40k|                                                                                                   \
  |  |  138|  4.40k|    /* Loading data */                                                                             \
  |  |  139|  4.40k|    DLX_ENUM_OPCODE_IMPL(LHI)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    885|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 885, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    885|        return #name;
  |  |  ------------------
  |  |  140|    885|    DLX_ENUM_OPCODE_IMPL(LB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     12|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 12, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     12|        return #name;
  |  |  ------------------
  |  |  141|  1.04k|    DLX_ENUM_OPCODE_IMPL(LBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.04k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.04k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.04k|        return #name;
  |  |  ------------------
  |  |  142|  1.04k|    DLX_ENUM_OPCODE_IMPL(LH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     60|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 60, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     60|        return #name;
  |  |  ------------------
  |  |  143|     60|    DLX_ENUM_OPCODE_IMPL(LHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     25|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 25, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     25|        return #name;
  |  |  ------------------
  |  |  144|     25|    DLX_ENUM_OPCODE_IMPL(LW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      2|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 2, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|      2|        return #name;
  |  |  ------------------
  |  |  145|     75|    DLX_ENUM_OPCODE_IMPL(LWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     75|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 75, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     75|        return #name;
  |  |  ------------------
  |  |  146|     75|    DLX_ENUM_OPCODE_IMPL(LF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|      1|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|      1|        return #name;
  |  |  ------------------
  |  |  147|    150|    DLX_ENUM_OPCODE_IMPL(LD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    150|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 150, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    150|        return #name;
  |  |  ------------------
  |  |  148|    150|                                                                                                   \
  |  |  149|    150|    /* Storing data */                                                                             \
  |  |  150|    507|    DLX_ENUM_OPCODE_IMPL(SB)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    507|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 507, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    507|        return #name;
  |  |  ------------------
  |  |  151|    507|    DLX_ENUM_OPCODE_IMPL(SBU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|     92|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 92, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     92|        return #name;
  |  |  ------------------
  |  |  152|     92|    DLX_ENUM_OPCODE_IMPL(SH)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     17|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 17, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     17|        return #name;
  |  |  ------------------
  |  |  153|  1.05k|    DLX_ENUM_OPCODE_IMPL(SHU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|  1.05k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.05k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.05k|        return #name;
  |  |  ------------------
  |  |  154|  1.05k|    DLX_ENUM_OPCODE_IMPL(SW)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     45|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 45, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     45|        return #name;
  |  |  ------------------
  |  |  155|    603|    DLX_ENUM_OPCODE_IMPL(SWU)                                                                      \
  |  |  ------------------
  |  |  |  |  207|    603|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 603, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    603|        return #name;
  |  |  ------------------
  |  |  156|    603|    DLX_ENUM_OPCODE_IMPL(SF)                                                                       \
  |  |  ------------------
  |  |  |  |  207|    421|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 421, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    421|        return #name;
  |  |  ------------------
  |  |  157|    421|    DLX_ENUM_OPCODE_IMPL(SD)                                                                       \
  |  |  ------------------
  |  |  |  |  207|     22|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 22, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     22|        return #name;
  |  |  ------------------
  |  |  158|     22|                                                                                                   \
  |  |  159|     22|    /* Moving data */                                                                              \
  |  |  160|    183|    DLX_ENUM_OPCODE_IMPL(MOVD)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    183|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 183, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    183|        return #name;
  |  |  ------------------
  |  |  161|    496|    DLX_ENUM_OPCODE_IMPL(MOVF)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    496|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 496, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    496|        return #name;
  |  |  ------------------
  |  |  162|    541|    DLX_ENUM_OPCODE_IMPL(MOVFP2I)                                                                  \
  |  |  ------------------
  |  |  |  |  207|    541|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 541, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    541|        return #name;
  |  |  ------------------
  |  |  163|  5.76k|    DLX_ENUM_OPCODE_IMPL(MOVI2FP)                                                                  \
  |  |  ------------------
  |  |  |  |  207|  5.76k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 5.76k, False: 213k]
  |  |  |  |  ------------------
  |  |  |  |  208|  5.76k|        return #name;
  |  |  ------------------
  |  |  164|  5.76k|                                                                                                   \
  |  |  165|  5.76k|    /* Converting data */                                                                          \
  |  |  166|  5.76k|    DLX_ENUM_OPCODE_IMPL(CVTF2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     38|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 38, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     38|        return #name;
  |  |  ------------------
  |  |  167|     38|    DLX_ENUM_OPCODE_IMPL(CVTF2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     20|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 20, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     20|        return #name;
  |  |  ------------------
  |  |  168|    102|    DLX_ENUM_OPCODE_IMPL(CVTD2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    102|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 102, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|    102|        return #name;
  |  |  ------------------
  |  |  169|    102|    DLX_ENUM_OPCODE_IMPL(CVTD2I)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  170|     67|    DLX_ENUM_OPCODE_IMPL(CVTI2F)                                                                   \
  |  |  ------------------
  |  |  |  |  207|     67|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 67, False: 219k]
  |  |  |  |  ------------------
  |  |  |  |  208|     67|        return #name;
  |  |  ------------------
  |  |  171|    479|    DLX_ENUM_OPCODE_IMPL(CVTI2D)                                                                   \
  |  |  ------------------
  |  |  |  |  207|    479|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 479, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    479|        return #name;
  |  |  ------------------
  |  |  172|    479|                                                                                                   \
  |  |  173|    479|    /* Other */                                                                                    \
  |  |  174|    479|    DLX_ENUM_OPCODE_IMPL(TRAP)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    318|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 318, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    318|        return #name;
  |  |  ------------------
  |  |  175|    451|    DLX_ENUM_OPCODE_IMPL(HALT)                                                                     \
  |  |  ------------------
  |  |  |  |  207|    451|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 451, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|    451|        return #name;
  |  |  ------------------
  |  |  176|  1.08k|    DLX_ENUM_OPCODE_IMPL(NOP)
  |  |  ------------------
  |  |  |  |  207|  1.08k|    case OpCode::name:                                                                             \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (207:5): [True: 1.08k, False: 218k]
  |  |  |  |  ------------------
  |  |  |  |  208|  1.08k|        return #name;
  |  |  ------------------
  ------------------
  211|       |
  212|      0|#undef DLX_ENUM_OPCODE_IMPL
  213|       |
  214|      0|            default:
  ------------------
  |  Branch (214:13): [True: 0, False: 219k]
  ------------------
  215|      0|                PHI_ASSERT_NOT_REACHED();
  216|   219k|        }
  217|   219k|    }

_ZN3dlx20IsReservedIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   31|  1.07M|    {
   32|  1.07M|        if (StringToIntRegister(token) != IntRegisterID::None)
  ------------------
  |  Branch (32:13): [True: 15.7k, False: 1.05M]
  ------------------
   33|  15.7k|        {
   34|  15.7k|            return true;
   35|  15.7k|        }
   36|       |
   37|  1.05M|        if (StringToFloatRegister(token) != FloatRegisterID::None)
  ------------------
  |  Branch (37:13): [True: 16.1k, False: 1.03M]
  ------------------
   38|  16.1k|        {
   39|  16.1k|            return true;
   40|  16.1k|        }
   41|       |
   42|  1.03M|        if (StringToOpCode(token) != OpCode::NONE)
  ------------------
  |  Branch (42:13): [True: 210k, False: 827k]
  ------------------
   43|   210k|        {
   44|   210k|            return true;
   45|   210k|        }
   46|       |
   47|   827k|        if (IsFPSR(token))
  ------------------
  |  Branch (47:13): [True: 2.62k, False: 825k]
  ------------------
   48|  2.62k|        {
   49|  2.62k|            return true;
   50|  2.62k|        }
   51|       |
   52|   825k|        return false;
   53|   827k|    }
_ZN3dlx17IsValidIdentifierENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   56|   825k|    {
   57|   825k|        if (token.empty())
  ------------------
  |  Branch (57:13): [True: 0, False: 825k]
  ------------------
   58|      0|        {
   59|      0|            return false;
   60|      0|        }
   61|       |
   62|   825k|        const char first_char = token.at(0);
   63|       |
   64|   825k|        if (token.length() == 1u)
  ------------------
  |  Branch (64:13): [True: 241k, False: 583k]
  ------------------
   65|   241k|        {
   66|   241k|            return phi::is_alpha(first_char);
   67|   241k|        }
   68|       |
   69|   583k|        phi::boolean just_under_scores = (first_char == '_');
   70|   583k|        if (!(phi::is_alpha(first_char) || (first_char == '_')))
  ------------------
  |  Branch (70:13): [True: 199k, False: 383k]
  |  Branch (70:15): [True: 374k, False: 209k]
  |  Branch (70:44): [True: 9.75k, False: 199k]
  ------------------
   71|   199k|        {
   72|   199k|            return false;
   73|   199k|        }
   74|       |
   75|  1.15M|        for (std::size_t index{1u}; index < token.length(); ++index)
  ------------------
  |  Branch (75:37): [True: 989k, False: 167k]
  ------------------
   76|   989k|        {
   77|   989k|            const char c{token.at(index)};
   78|       |
   79|   989k|            if (phi::is_alpha_numeric(c))
  ------------------
  |  Branch (79:17): [True: 750k, False: 238k]
  ------------------
   80|   750k|            {
   81|   750k|                just_under_scores = false;
   82|   750k|            }
   83|   238k|            else if (c == '_')
  ------------------
  |  Branch (83:22): [True: 22.0k, False: 216k]
  ------------------
   84|  22.0k|            {
   85|  22.0k|                continue;
   86|  22.0k|            }
   87|   216k|            else
   88|   216k|            {
   89|   216k|                return false;
   90|   216k|            }
   91|   989k|        }
   92|       |
   93|   167k|        return !just_under_scores;
   94|   383k|    }
_ZN3dlx11ParseNumberENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  100|  3.10M|    {
  101|  3.10M|        if (token.empty())
  ------------------
  |  Branch (101:13): [True: 0, False: 3.10M]
  ------------------
  102|      0|        {
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|  3.10M|        if (token.length() == 1)
  ------------------
  |  Branch (106:13): [True: 392k, False: 2.71M]
  ------------------
  107|   392k|        {
  108|   392k|            if (phi::is_digit(token.at(0)))
  ------------------
  |  Branch (108:17): [True: 29.7k, False: 362k]
  ------------------
  109|  29.7k|            {
  110|  29.7k|                return static_cast<std::int16_t>(token.at(0) - '0');
  111|  29.7k|            }
  112|       |
  113|   362k|            return {};
  114|   392k|        }
  115|       |
  116|       |        // Disallow trailing seperators
  117|  2.71M|        if (token.at(token.size() - 1) == '\'')
  ------------------
  |  Branch (117:13): [True: 16.5k, False: 2.70M]
  ------------------
  118|  16.5k|        {
  119|  16.5k|            return {};
  120|  16.5k|        }
  121|       |
  122|  2.70M|        std::int32_t number{0};
  123|  2.70M|        phi::boolean is_negative{false};
  124|  2.70M|        phi::boolean starts_with_zero{false};
  125|  2.70M|        phi::boolean parsing_binary{false};
  126|  2.70M|        phi::boolean parsing_octal{false};
  127|  2.70M|        phi::boolean parsing_hexadecimal{false};
  128|  2.70M|        phi::boolean parsed_something{false};
  129|  2.70M|        phi::boolean parsed_separator{false};
  130|       |
  131|       |        // TODO: Move x'th character checks out of the for loop
  132|       |
  133|  2.92M|        for (std::size_t index{0u}; index < token.length(); ++index)
  ------------------
  |  Branch (133:37): [True: 2.90M, False: 21.8k]
  ------------------
  134|  2.90M|        {
  135|  2.90M|            const char c{token.at(index)};
  136|       |
  137|       |            // First character
  138|  2.90M|            if (index == 0u)
  ------------------
  |  Branch (138:17): [True: 2.70M, False: 202k]
  ------------------
  139|  2.70M|            {
  140|  2.70M|                if (c == '+')
  ------------------
  |  Branch (140:21): [True: 7.26k, False: 2.69M]
  ------------------
  141|  7.26k|                {
  142|  7.26k|                    continue;
  143|  7.26k|                }
  144|       |
  145|  2.69M|                if (c == '-')
  ------------------
  |  Branch (145:21): [True: 15.1k, False: 2.67M]
  ------------------
  146|  15.1k|                {
  147|  15.1k|                    is_negative = true;
  148|  15.1k|                    continue;
  149|  15.1k|                }
  150|       |
  151|  2.67M|                if (c == '0')
  ------------------
  |  Branch (151:21): [True: 37.7k, False: 2.63M]
  ------------------
  152|  37.7k|                {
  153|  37.7k|                    starts_with_zero = true;
  154|  37.7k|                    continue;
  155|  37.7k|                }
  156|       |
  157|  2.63M|                if (c == '\'')
  ------------------
  |  Branch (157:21): [True: 15.5k, False: 2.62M]
  ------------------
  158|  15.5k|                {
  159|  15.5k|                    return {};
  160|  15.5k|                }
  161|  2.63M|            }
  162|       |
  163|       |            // Second character
  164|  2.82M|            if (index == 1u)
  ------------------
  |  Branch (164:17): [True: 104k, False: 2.72M]
  ------------------
  165|   104k|            {
  166|   104k|                if (starts_with_zero)
  ------------------
  |  Branch (166:21): [True: 37.7k, False: 66.4k]
  ------------------
  167|  37.7k|                {
  168|       |                    // Binary
  169|  37.7k|                    if (c == 'b' || c == 'B')
  ------------------
  |  Branch (169:25): [True: 3.45k, False: 34.2k]
  |  Branch (169:37): [True: 5.77k, False: 28.5k]
  ------------------
  170|  9.23k|                    {
  171|  9.23k|                        parsing_binary = true;
  172|  9.23k|                        continue;
  173|  9.23k|                    }
  174|       |
  175|       |                    // Hexadecimal
  176|  28.5k|                    if (c == 'x' || c == 'X')
  ------------------
  |  Branch (176:25): [True: 4.43k, False: 24.0k]
  |  Branch (176:37): [True: 7.22k, False: 16.8k]
  ------------------
  177|  11.6k|                    {
  178|  11.6k|                        parsing_hexadecimal = true;
  179|  11.6k|                        continue;
  180|  11.6k|                    }
  181|       |
  182|       |                    // Octal
  183|  16.8k|                    parsing_octal = true;
  184|  16.8k|                }
  185|   104k|            }
  186|       |
  187|       |            // Handle seperators
  188|  2.80M|            if (c == '\'')
  ------------------
  |  Branch (188:17): [True: 10.4k, False: 2.79M]
  ------------------
  189|  10.4k|            {
  190|  10.4k|                if (parsed_separator)
  ------------------
  |  Branch (190:21): [True: 3.36k, False: 7.12k]
  ------------------
  191|  3.36k|                {
  192|  3.36k|                    return {};
  193|  3.36k|                }
  194|       |
  195|  7.12k|                parsed_separator = true;
  196|  7.12k|                continue;
  197|  10.4k|            }
  198|       |
  199|       |            // Check for over/underflow
  200|  2.79M|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (200:17): [True: 43.6k, False: 2.75M]
  |  Branch (200:32): [True: 3.32k, False: 40.2k]
  ------------------
  201|  3.32k|            {
  202|       |                // Would underflow
  203|  3.32k|                return {};
  204|  3.32k|            }
  205|  2.79M|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (205:17): [True: 2.75M, False: 40.2k]
  |  Branch (205:17): [True: 4.17k, False: 2.78M]
  |  Branch (205:33): [True: 4.17k, False: 2.74M]
  ------------------
  206|  4.17k|            {
  207|       |                // Would overflow
  208|  4.17k|                return {};
  209|  4.17k|            }
  210|       |
  211|  2.78M|            parsed_separator = false;
  212|  2.78M|            parsed_something = true;
  213|       |
  214|  2.78M|            if (parsing_binary)
  ------------------
  |  Branch (214:17): [True: 8.07k, False: 2.78M]
  ------------------
  215|  8.07k|            {
  216|  8.07k|                if (!phi::is_binary_digit(c))
  ------------------
  |  Branch (216:21): [True: 4.34k, False: 3.72k]
  ------------------
  217|  4.34k|                {
  218|  4.34k|                    return {};
  219|  4.34k|                }
  220|       |
  221|  3.72k|                number <<= 1;
  222|  3.72k|                number |= (c - '0');
  223|  3.72k|            }
  224|  2.78M|            else if (parsing_octal)
  ------------------
  |  Branch (224:22): [True: 25.9k, False: 2.75M]
  ------------------
  225|  25.9k|            {
  226|  25.9k|                if (!phi::is_octal_digit(c))
  ------------------
  |  Branch (226:21): [True: 16.0k, False: 9.85k]
  ------------------
  227|  16.0k|                {
  228|  16.0k|                    return {};
  229|  16.0k|                }
  230|       |
  231|  9.85k|                number <<= 3;
  232|  9.85k|                number |= (c - '0');
  233|  9.85k|            }
  234|  2.75M|            else if (parsing_hexadecimal)
  ------------------
  |  Branch (234:22): [True: 27.6k, False: 2.72M]
  ------------------
  235|  27.6k|            {
  236|  27.6k|                if (!phi::is_hex_digit(c))
  ------------------
  |  Branch (236:21): [True: 7.29k, False: 20.3k]
  ------------------
  237|  7.29k|                {
  238|  7.29k|                    return {};
  239|  7.29k|                }
  240|       |
  241|  20.3k|                number <<= 4;
  242|  20.3k|                number |= phi::hex_digit_value(c).unsafe();
  243|  20.3k|            }
  244|  2.72M|            else
  245|  2.72M|            {
  246|  2.72M|                if (!phi::is_digit(c))
  ------------------
  |  Branch (246:21): [True: 2.61M, False: 106k]
  ------------------
  247|  2.61M|                {
  248|  2.61M|                    return {};
  249|  2.61M|                }
  250|       |
  251|       |                // Disallow leading zeros
  252|   106k|                if (number == 0 && c == '0')
  ------------------
  |  Branch (252:21): [True: 61.0k, False: 45.9k]
  |  Branch (252:36): [True: 4.40k, False: 56.6k]
  ------------------
  253|  4.40k|                {
  254|  4.40k|                    return {};
  255|  4.40k|                }
  256|       |
  257|   102k|                number *= 10;
  258|   102k|                number += (c - '0');
  259|   102k|            }
  260|  2.78M|        }
  261|       |
  262|  21.8k|        if (parsed_something)
  ------------------
  |  Branch (262:13): [True: 19.4k, False: 2.41k]
  ------------------
  263|  19.4k|        {
  264|       |            // Check for over/underflow
  265|  19.4k|            if (is_negative && (-number < std::numeric_limits<std::int16_t>::min()))
  ------------------
  |  Branch (265:17): [True: 8.27k, False: 11.2k]
  |  Branch (265:32): [True: 2.01k, False: 6.26k]
  ------------------
  266|  2.01k|            {
  267|       |                // Would underflow
  268|  2.01k|                return {};
  269|  2.01k|            }
  270|  17.4k|            if (!is_negative && (number > std::numeric_limits<std::int16_t>::max()))
  ------------------
  |  Branch (270:17): [True: 11.2k, False: 6.26k]
  |  Branch (270:17): [True: 1.94k, False: 15.5k]
  |  Branch (270:33): [True: 1.94k, False: 9.26k]
  ------------------
  271|  1.94k|            {
  272|       |                // Would overflow
  273|  1.94k|                return {};
  274|  1.94k|            }
  275|       |
  276|  15.5k|            if (is_negative)
  ------------------
  |  Branch (276:17): [True: 6.26k, False: 9.26k]
  ------------------
  277|  6.26k|            {
  278|  6.26k|                return static_cast<std::int16_t>(-number);
  279|  6.26k|            }
  280|       |
  281|  9.26k|            return static_cast<std::int16_t>(number);
  282|  15.5k|        }
  283|       |
  284|  2.41k|        return {};
  285|  21.8k|    }

_ZN3dlx9enum_nameINS_13IntRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
   95|  39.3k|    {
   96|  39.3k|        switch (value)
   97|  39.3k|        {
   98|      0|#define DLX_ENUM_INT_REGISTER_ID_IMPL(name)                                                        \
   99|      0|    case IntRegisterID::name:                                                                      \
  100|      0|        return #name;
  101|       |
  102|      0|            DLX_ENUM_INT_REGISTER_ID
  ------------------
  |  |   13|  11.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R0)                                                              \
  |  |  ------------------
  |  |  |  |   99|  11.4k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 11.4k, False: 27.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|  11.4k|        return #name;
  |  |  ------------------
  |  |   14|  11.4k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R1)                                                              \
  |  |  ------------------
  |  |  |  |   99|  9.02k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 9.02k, False: 30.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  9.02k|        return #name;
  |  |  ------------------
  |  |   15|  9.02k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R2)                                                              \
  |  |  ------------------
  |  |  |  |   99|     40|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 40, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     40|        return #name;
  |  |  ------------------
  |  |   16|  4.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R3)                                                              \
  |  |  ------------------
  |  |  |  |   99|  4.22k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.22k, False: 35.0k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.22k|        return #name;
  |  |  ------------------
  |  |   17|  4.22k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R4)                                                              \
  |  |  ------------------
  |  |  |  |   99|    358|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 358, False: 38.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|    358|        return #name;
  |  |  ------------------
  |  |   18|    358|    DLX_ENUM_INT_REGISTER_ID_IMPL(R5)                                                              \
  |  |  ------------------
  |  |  |  |   99|     20|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 20, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     20|        return #name;
  |  |  ------------------
  |  |   19|    469|    DLX_ENUM_INT_REGISTER_ID_IMPL(R6)                                                              \
  |  |  ------------------
  |  |  |  |   99|    469|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 469, False: 38.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    469|        return #name;
  |  |  ------------------
  |  |   20|    469|    DLX_ENUM_INT_REGISTER_ID_IMPL(R7)                                                              \
  |  |  ------------------
  |  |  |  |   99|     52|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 52, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     52|        return #name;
  |  |  ------------------
  |  |   21|    154|    DLX_ENUM_INT_REGISTER_ID_IMPL(R8)                                                              \
  |  |  ------------------
  |  |  |  |   99|    154|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 154, False: 39.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    154|        return #name;
  |  |  ------------------
  |  |   22|    154|    DLX_ENUM_INT_REGISTER_ID_IMPL(R9)                                                              \
  |  |  ------------------
  |  |  |  |   99|     70|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 70, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     70|        return #name;
  |  |  ------------------
  |  |   23|    429|    DLX_ENUM_INT_REGISTER_ID_IMPL(R10)                                                             \
  |  |  ------------------
  |  |  |  |   99|    429|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 429, False: 38.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    429|        return #name;
  |  |  ------------------
  |  |   24|    429|    DLX_ENUM_INT_REGISTER_ID_IMPL(R11)                                                             \
  |  |  ------------------
  |  |  |  |   99|    152|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 152, False: 39.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    152|        return #name;
  |  |  ------------------
  |  |   25|    152|    DLX_ENUM_INT_REGISTER_ID_IMPL(R12)                                                             \
  |  |  ------------------
  |  |  |  |   99|     67|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 67, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     67|        return #name;
  |  |  ------------------
  |  |   26|    110|    DLX_ENUM_INT_REGISTER_ID_IMPL(R13)                                                             \
  |  |  ------------------
  |  |  |  |   99|    110|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 110, False: 39.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    110|        return #name;
  |  |  ------------------
  |  |   27|    110|    DLX_ENUM_INT_REGISTER_ID_IMPL(R14)                                                             \
  |  |  ------------------
  |  |  |  |   99|     26|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 26, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     26|        return #name;
  |  |  ------------------
  |  |   28|     26|    DLX_ENUM_INT_REGISTER_ID_IMPL(R15)                                                             \
  |  |  ------------------
  |  |  |  |   99|      4|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4, False: 39.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|      4|        return #name;
  |  |  ------------------
  |  |   29|  4.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R16)                                                             \
  |  |  ------------------
  |  |  |  |   99|  4.08k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 4.08k, False: 35.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|  4.08k|        return #name;
  |  |  ------------------
  |  |   30|  4.08k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R17)                                                             \
  |  |  ------------------
  |  |  |  |   99|    492|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 492, False: 38.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    492|        return #name;
  |  |  ------------------
  |  |   31|    492|    DLX_ENUM_INT_REGISTER_ID_IMPL(R18)                                                             \
  |  |  ------------------
  |  |  |  |   99|      5|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 5, False: 39.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|      5|        return #name;
  |  |  ------------------
  |  |   32|  3.78k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R19)                                                             \
  |  |  ------------------
  |  |  |  |   99|  3.78k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3.78k, False: 35.5k]
  |  |  |  |  ------------------
  |  |  |  |  100|  3.78k|        return #name;
  |  |  ------------------
  |  |   33|  3.78k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R20)                                                             \
  |  |  ------------------
  |  |  |  |   99|     10|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 10, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     10|        return #name;
  |  |  ------------------
  |  |   34|     10|    DLX_ENUM_INT_REGISTER_ID_IMPL(R21)                                                             \
  |  |  ------------------
  |  |  |  |   99|      3|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 3, False: 39.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|      3|        return #name;
  |  |  ------------------
  |  |   35|  1.35k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R22)                                                             \
  |  |  ------------------
  |  |  |  |   99|  1.35k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1.35k, False: 37.9k]
  |  |  |  |  ------------------
  |  |  |  |  100|  1.35k|        return #name;
  |  |  ------------------
  |  |   36|  1.35k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R23)                                                             \
  |  |  ------------------
  |  |  |  |   99|      1|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 1, False: 39.3k]
  |  |  |  |  ------------------
  |  |  |  |  100|      1|        return #name;
  |  |  ------------------
  |  |   37|     15|    DLX_ENUM_INT_REGISTER_ID_IMPL(R24)                                                             \
  |  |  ------------------
  |  |  |  |   99|     15|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 15, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     15|        return #name;
  |  |  ------------------
  |  |   38|     15|    DLX_ENUM_INT_REGISTER_ID_IMPL(R25)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   39|    159|    DLX_ENUM_INT_REGISTER_ID_IMPL(R26)                                                             \
  |  |  ------------------
  |  |  |  |   99|    159|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 159, False: 39.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|    159|        return #name;
  |  |  ------------------
  |  |   40|    159|    DLX_ENUM_INT_REGISTER_ID_IMPL(R27)                                                             \
  |  |  ------------------
  |  |  |  |   99|     45|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 45, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     45|        return #name;
  |  |  ------------------
  |  |   41|     45|    DLX_ENUM_INT_REGISTER_ID_IMPL(R28)                                                             \
  |  |  ------------------
  |  |  |  |   99|     33|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 33, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     33|        return #name;
  |  |  ------------------
  |  |   42|     33|    DLX_ENUM_INT_REGISTER_ID_IMPL(R29)                                                             \
  |  |  ------------------
  |  |  |  |   99|     13|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 13, False: 39.2k]
  |  |  |  |  ------------------
  |  |  |  |  100|     13|        return #name;
  |  |  ------------------
  |  |   43|  2.15k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R30)                                                             \
  |  |  ------------------
  |  |  |  |   99|  2.15k|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 2.15k, False: 37.1k]
  |  |  |  |  ------------------
  |  |  |  |  100|  2.15k|        return #name;
  |  |  ------------------
  |  |   44|  2.15k|    DLX_ENUM_INT_REGISTER_ID_IMPL(R31)
  |  |  ------------------
  |  |  |  |   99|    479|    case IntRegisterID::name:                                                                      \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (99:5): [True: 479, False: 38.8k]
  |  |  |  |  ------------------
  |  |  |  |  100|    479|        return #name;
  |  |  ------------------
  ------------------
  103|       |
  104|      0|#undef DLX_ENUM_INT_REGISTER_ID_IMPL
  105|       |
  106|      0|            default:
  ------------------
  |  Branch (106:13): [True: 0, False: 39.3k]
  ------------------
  107|      0|                PHI_ASSERT_NOT_REACHED();
  108|  39.3k|        }
  109|  39.3k|    }
_ZN3dlx9enum_nameINS_15FloatRegisterIDEEENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEET_:
  130|  7.48k|    {
  131|  7.48k|        switch (value)
  132|  7.48k|        {
  133|      0|#define DLX_ENUM_FLOAT_REGISTER_ID_IMPL(name)                                                      \
  134|      0|    case FloatRegisterID::name:                                                                    \
  135|      0|        return #name;
  136|       |
  137|      0|            DLX_ENUM_FLOAT_REGISTER_ID
  ------------------
  |  |   47|  5.49k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F0)                                                            \
  |  |  ------------------
  |  |  |  |  134|  5.49k|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5.49k, False: 1.99k]
  |  |  |  |  ------------------
  |  |  |  |  135|  5.49k|        return #name;
  |  |  ------------------
  |  |   48|  5.49k|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F1)                                                            \
  |  |  ------------------
  |  |  |  |  134|    247|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 247, False: 7.23k]
  |  |  |  |  ------------------
  |  |  |  |  135|    247|        return #name;
  |  |  ------------------
  |  |   49|    247|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F2)                                                            \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   50|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F3)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   51|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F4)                                                            \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   52|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F5)                                                            \
  |  |  ------------------
  |  |  |  |  134|    118|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 118, False: 7.36k]
  |  |  |  |  ------------------
  |  |  |  |  135|    118|        return #name;
  |  |  ------------------
  |  |   53|    118|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F6)                                                            \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   54|      2|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F7)                                                            \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   55|     82|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F8)                                                            \
  |  |  ------------------
  |  |  |  |  134|     82|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 82, False: 7.39k]
  |  |  |  |  ------------------
  |  |  |  |  135|     82|        return #name;
  |  |  ------------------
  |  |   56|     82|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F9)                                                            \
  |  |  ------------------
  |  |  |  |  134|     15|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 15, False: 7.46k]
  |  |  |  |  ------------------
  |  |  |  |  135|     15|        return #name;
  |  |  ------------------
  |  |   57|     25|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F10)                                                           \
  |  |  ------------------
  |  |  |  |  134|     25|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 25, False: 7.45k]
  |  |  |  |  ------------------
  |  |  |  |  135|     25|        return #name;
  |  |  ------------------
  |  |   58|    414|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F11)                                                           \
  |  |  ------------------
  |  |  |  |  134|    414|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 414, False: 7.06k]
  |  |  |  |  ------------------
  |  |  |  |  135|    414|        return #name;
  |  |  ------------------
  |  |   59|    414|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F12)                                                           \
  |  |  ------------------
  |  |  |  |  134|     21|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 21, False: 7.46k]
  |  |  |  |  ------------------
  |  |  |  |  135|     21|        return #name;
  |  |  ------------------
  |  |   60|     21|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F13)                                                           \
  |  |  ------------------
  |  |  |  |  134|      6|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 6, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      6|        return #name;
  |  |  ------------------
  |  |   61|      6|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F14)                                                           \
  |  |  ------------------
  |  |  |  |  134|      5|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 5, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      5|        return #name;
  |  |  ------------------
  |  |   62|      5|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F15)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   63|    315|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F16)                                                           \
  |  |  ------------------
  |  |  |  |  134|    315|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 315, False: 7.16k]
  |  |  |  |  ------------------
  |  |  |  |  135|    315|        return #name;
  |  |  ------------------
  |  |   64|    315|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F17)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   65|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F18)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   66|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F19)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   67|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F20)                                                           \
  |  |  ------------------
  |  |  |  |  134|      8|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 8, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      8|        return #name;
  |  |  ------------------
  |  |   68|      8|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F21)                                                           \
  |  |  ------------------
  |  |  |  |  134|      2|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 2, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      2|        return #name;
  |  |  ------------------
  |  |   69|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F22)                                                           \
  |  |  ------------------
  |  |  |  |  134|      3|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 3, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      3|        return #name;
  |  |  ------------------
  |  |   70|      3|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F23)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   71|      0|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F24)                                                           \
  |  |  ------------------
  |  |  |  |  134|      0|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 0, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      0|        return #name;
  |  |  ------------------
  |  |   72|      1|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F25)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   73|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F26)                                                           \
  |  |  ------------------
  |  |  |  |  134|     26|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 26, False: 7.45k]
  |  |  |  |  ------------------
  |  |  |  |  135|     26|        return #name;
  |  |  ------------------
  |  |   74|     26|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F27)                                                           \
  |  |  ------------------
  |  |  |  |  134|      7|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 7, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|      7|        return #name;
  |  |  ------------------
  |  |   75|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F28)                                                           \
  |  |  ------------------
  |  |  |  |  134|     10|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 10, False: 7.47k]
  |  |  |  |  ------------------
  |  |  |  |  135|     10|        return #name;
  |  |  ------------------
  |  |   76|     10|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F29)                                                           \
  |  |  ------------------
  |  |  |  |  134|      1|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 1, False: 7.48k]
  |  |  |  |  ------------------
  |  |  |  |  135|      1|        return #name;
  |  |  ------------------
  |  |   77|     30|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F30)                                                           \
  |  |  ------------------
  |  |  |  |  134|     30|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 30, False: 7.45k]
  |  |  |  |  ------------------
  |  |  |  |  135|     30|        return #name;
  |  |  ------------------
  |  |   78|    638|    DLX_ENUM_FLOAT_REGISTER_ID_IMPL(F31)
  |  |  ------------------
  |  |  |  |  134|    638|    case FloatRegisterID::name:                                                                    \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (134:5): [True: 638, False: 6.84k]
  |  |  |  |  ------------------
  |  |  |  |  135|    638|        return #name;
  |  |  ------------------
  ------------------
  138|       |
  139|      0|#undef DLX_ENUM_FLOAT_REGISTER_ID_IMPL
  140|       |
  141|      0|            default:
  ------------------
  |  Branch (141:13): [True: 0, False: 7.48k]
  ------------------
  142|      0|                PHI_ASSERT_NOT_REACHED();
  143|  7.48k|        }
  144|  7.48k|    }

Parser.cpp:_ZNK3dlx11TokenStream19find_first_token_ifIZNS_6Parser5ParseERS0_E3$_0EEPKNS_5TokenET_:
   58|   247k|        {
   59|       |#if defined(PHI_DEBUG)
   60|       |            PHI_ASSERT(m_Finialized);
   61|       |#endif
   62|       |
   63|   247k|            for (const Token& token : m_Tokens)
  ------------------
  |  Branch (63:37): [True: 6.24M, False: 0]
  ------------------
   64|  6.24M|            {
   65|  6.24M|                if (pred(token))
  ------------------
  |  Branch (65:21): [True: 247k, False: 5.99M]
  ------------------
   66|   247k|                {
   67|   247k|                    return &token;
   68|   247k|                }
   69|  6.24M|            }
   70|       |
   71|      0|            return nullptr;
   72|   247k|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5Token4TypeENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEERN3phi7integerImEESC_EEEvDpOT_:
   24|  1.37M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  1.37M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  1.37M|        }
_ZN3dlx11TokenStream12emplace_backIJNS_5TokenEEEEvDpOT_:
   24|  3.15M|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|  3.15M|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|  3.15M|        }
_ZN3dlx11TokenStream12emplace_backIJRNS_5Token4TypeENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEERN3phi7integerImEESD_EEEvDpOT_:
   24|   976k|        {
   25|       |#if defined(PHI_DEBUG)
   26|       |            PHI_ASSERT(!m_Finialized);
   27|       |#endif
   28|       |
   29|   976k|            m_Tokens.emplace_back(std::forward<ArgsT>(args)...);
   30|   976k|        }

_ZN3dlx13FloatRegister8SetValueEN3phi14floating_pointIfEE:
   10|  1.71M|    {
   11|  1.71M|        m_Value = val;
   12|  1.71M|    }
_ZNK3dlx13FloatRegister8GetValueEv:
   15|     58|    {
   16|     58|        return m_Value;
   17|     58|    }

_ZN3dlx11InstructionC2ERKNS_15InstructionInfoEN3phi7integerImEE:
   18|   161k|    {}
_ZN3dlx11Instruction11SetArgumentEN3phi7integerIhEENS_19InstructionArgumentE:
   23|  23.3k|    {
   24|  23.3k|        PHI_ASSERT(argument_number < 3u);
   25|       |
   26|  23.3k|        switch (argument_number.unsafe())
   27|  23.3k|        {
   28|  20.9k|            case 0u:
  ------------------
  |  Branch (28:13): [True: 20.9k, False: 2.42k]
  ------------------
   29|  20.9k|                m_Arg1 = argument;
   30|  20.9k|                break;
   31|  1.70k|            case 1u:
  ------------------
  |  Branch (31:13): [True: 1.70k, False: 21.6k]
  ------------------
   32|  1.70k|                m_Arg2 = argument;
   33|  1.70k|                break;
   34|    715|            case 2u:
  ------------------
  |  Branch (34:13): [True: 715, False: 22.6k]
  ------------------
   35|    715|                m_Arg3 = argument;
   36|    715|                break;
   37|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
   38|      0|            default:
  ------------------
  |  Branch (38:13): [True: 0, False: 23.3k]
  ------------------
   39|      0|                PHI_ASSERT_NOT_REACHED();
   40|  23.3k|#endif
   41|  23.3k|        }
   42|  23.3k|    }
_ZNK3dlx11Instruction7ExecuteERNS_9ProcessorE:
   82|  52.2k|    {
   83|  52.2k|        m_Info.Execute(processor, m_Arg1, m_Arg2, m_Arg3);
   84|  52.2k|    }
_ZNK3dlx11Instruction7GetInfoEv:
   87|  52.2k|    {
   88|  52.2k|        return m_Info;
   89|  52.2k|    }

_ZN3dlx19InstructionArgumentC2Ev:
   23|   508k|    {}
_ZNK3dlx19InstructionArgument7GetTypeEv:
   26|   313k|    {
   27|   313k|        return m_Type;
   28|   313k|    }
_ZNK3dlx19InstructionArgument13AsRegisterIntEv:
   77|  20.8k|    {
   78|  20.8k|        PHI_ASSERT(m_Type == ArgumentType::IntRegister);
   79|       |
   80|  20.8k|        return register_int;
   81|  20.8k|    }
_ZNK3dlx19InstructionArgument15AsRegisterFloatEv:
   85|     66|    {
   86|     66|        PHI_ASSERT(m_Type == ArgumentType::FloatRegister);
   87|       |
   88|     66|        return register_float;
   89|     66|    }
_ZNK3dlx19InstructionArgument16AsImmediateValueEv:
   93|     34|    {
   94|     34|        PHI_ASSERT(m_Type == ArgumentType::ImmediateInteger);
   95|       |
   96|     34|        return immediate_value;
   97|     34|    }
_ZNK3dlx19InstructionArgument7AsLabelEv:
  109|  31.3k|    {
  110|  31.3k|        PHI_ASSERT(m_Type == ArgumentType::Label);
  111|       |
  112|  31.3k|        return label;
  113|  31.3k|    }
_ZN3dlx39ConstructInstructionArgumentRegisterIntENS_13IntRegisterIDE:
  173|  4.54k|    {
  174|  4.54k|        InstructionArgument arg;
  175|  4.54k|        arg.m_Type                   = ArgumentType::IntRegister;
  176|  4.54k|        arg.register_int.register_id = id;
  177|  4.54k|        return arg;
  178|  4.54k|    }
_ZN3dlx41ConstructInstructionArgumentRegisterFloatENS_15FloatRegisterIDE:
  182|    495|    {
  183|    495|        InstructionArgument arg;
  184|    495|        arg.m_Type                     = ArgumentType::FloatRegister;
  185|    495|        arg.register_float.register_id = id;
  186|    495|        return arg;
  187|    495|    }
_ZN3dlx42ConstructInstructionArgumentImmediateValueEs:
  191|  2.20k|    {
  192|  2.20k|        InstructionArgument arg;
  193|  2.20k|        arg.m_Type                       = ArgumentType::ImmediateInteger;
  194|  2.20k|        arg.immediate_value.signed_value = value;
  195|  2.20k|        return arg;
  196|  2.20k|    }
_ZN3dlx47ConstructInstructionArgumentAddressDisplacementENS_13IntRegisterIDEN3phi7integerIiEE:
  200|  2.64k|    {
  201|  2.64k|        InstructionArgument arg;
  202|  2.64k|        arg.m_Type                            = ArgumentType::AddressDisplacement;
  203|  2.64k|        arg.address_displacement.register_id  = id;
  204|  2.64k|        arg.address_displacement.displacement = displacement;
  205|  2.64k|        return arg;
  206|  2.64k|    }
_ZN3dlx33ConstructInstructionArgumentLabelENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  210|  13.4k|    {
  211|  13.4k|        InstructionArgument arg;
  212|  13.4k|        arg.m_Type           = ArgumentType::Label;
  213|  13.4k|        arg.label.label_name = label_name;
  214|  13.4k|        return arg;
  215|  13.4k|    }

_ZN3dlx4impl3ADDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  356|     46|        {
  357|     46|            const auto& dest_reg = arg1.AsRegisterInt();
  358|     46|            const auto& lhs_reg  = arg2.AsRegisterInt();
  359|     46|            const auto& rhs_reg  = arg3.AsRegisterInt();
  360|       |
  361|     46|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  362|     46|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  363|       |
  364|     46|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  365|     46|        }
_ZN3dlx4impl4ADDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  369|      1|        {
  370|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  371|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  372|      1|            const auto& imm_value = arg3.AsImmediateValue();
  373|       |
  374|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  375|       |
  376|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  377|      1|        }
_ZN3dlx4impl4ADDUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  381|     65|        {
  382|     65|            const auto& dest_reg = arg1.AsRegisterInt();
  383|     65|            const auto& lhs_reg  = arg2.AsRegisterInt();
  384|     65|            const auto& rhs_reg  = arg3.AsRegisterInt();
  385|       |
  386|     65|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  387|     65|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  388|       |
  389|     65|            Addition(processor, dest_reg.register_id, lhs_value, rhs_value);
  390|     65|        }
_ZN3dlx4impl5ADDUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  394|      1|        {
  395|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  396|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  397|      1|            const auto& imm_value = arg3.AsImmediateValue();
  398|       |
  399|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  400|       |
  401|      1|            Addition(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  402|      1|        }
_ZN3dlx4impl4ADDFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  406|      1|        {
  407|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  408|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  409|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  410|       |
  411|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  412|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  413|       |
  414|      1|            const phi::f32 new_value = lhs_value + rhs_value;
  415|       |
  416|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  417|      1|        }
_ZN3dlx4impl4ADDDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  421|      1|        {
  422|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  423|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  424|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  425|       |
  426|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  427|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  428|       |
  429|      1|            const phi::f64 new_value = lhs_value + rhs_value;
  430|       |
  431|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  432|      1|        }
_ZN3dlx4impl3SUBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  436|     11|        {
  437|     11|            const auto& dest_reg = arg1.AsRegisterInt();
  438|     11|            const auto& lhs_reg  = arg2.AsRegisterInt();
  439|     11|            const auto& rhs_reg  = arg3.AsRegisterInt();
  440|       |
  441|     11|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  442|     11|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  443|       |
  444|     11|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  445|     11|        }
_ZN3dlx4impl4SUBIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  449|      1|        {
  450|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  451|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  452|      1|            const auto& imm_value = arg3.AsImmediateValue();
  453|       |
  454|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  455|       |
  456|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  457|      1|        }
_ZN3dlx4impl4SUBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  461|      1|        {
  462|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  463|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  464|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  465|       |
  466|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  467|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  468|       |
  469|      1|            Subtraction(processor, dest_reg.register_id, lhs_value, rhs_value);
  470|      1|        }
_ZN3dlx4impl5SUBUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  474|      1|        {
  475|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  476|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  477|      1|            const auto& imm_value = arg3.AsImmediateValue();
  478|       |
  479|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  480|       |
  481|      1|            Subtraction(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  482|      1|        }
_ZN3dlx4impl4SUBFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  486|      1|        {
  487|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  488|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  489|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  490|       |
  491|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  492|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  493|       |
  494|      1|            const phi::f32 new_value = lhs_value - rhs_value;
  495|       |
  496|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  497|      1|        }
_ZN3dlx4impl4SUBDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  501|      1|        {
  502|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  503|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  504|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  505|       |
  506|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  507|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  508|       |
  509|      1|            const phi::f64 new_value = lhs_value - rhs_value;
  510|       |
  511|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  512|      1|        }
_ZN3dlx4impl4MULTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  516|      1|        {
  517|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  518|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  519|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  520|       |
  521|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  522|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  523|       |
  524|      1|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  525|      1|        }
_ZN3dlx4impl5MULTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  529|      1|        {
  530|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  531|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  532|      1|            const auto& imm_value = arg3.AsImmediateValue();
  533|       |
  534|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  535|       |
  536|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  537|      1|        }
_ZN3dlx4impl5MULTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  541|     45|        {
  542|     45|            const auto& dest_reg = arg1.AsRegisterInt();
  543|     45|            const auto& lhs_reg  = arg2.AsRegisterInt();
  544|     45|            const auto& rhs_reg  = arg3.AsRegisterInt();
  545|       |
  546|     45|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  547|     45|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  548|       |
  549|     45|            Multiplication(processor, dest_reg.register_id, lhs_value, rhs_value);
  550|     45|        }
_ZN3dlx4impl6MULTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  554|      1|        {
  555|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  556|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  557|      1|            const auto& imm_value = arg3.AsImmediateValue();
  558|       |
  559|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  560|       |
  561|      1|            Multiplication(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  562|      1|        }
_ZN3dlx4impl5MULTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  566|      1|        {
  567|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  568|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  569|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  570|       |
  571|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  572|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  573|       |
  574|      1|            const phi::f32 new_value = lhs_value * rhs_value;
  575|       |
  576|      1|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  577|      1|        }
_ZN3dlx4impl5MULTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  581|      1|        {
  582|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  583|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  584|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  585|       |
  586|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  587|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  588|       |
  589|      1|            const phi::f64 new_value = lhs_value * rhs_value;
  590|       |
  591|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  592|      1|        }
_ZN3dlx4impl3DIVERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  596|      1|        {
  597|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  598|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  599|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  600|       |
  601|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  602|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  603|       |
  604|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  605|      1|        }
_ZN3dlx4impl4DIVIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  609|      1|        {
  610|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  611|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  612|      1|            const auto& imm_value = arg3.AsImmediateValue();
  613|       |
  614|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  615|       |
  616|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.signed_value);
  617|      1|        }
_ZN3dlx4impl4DIVUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  621|      1|        {
  622|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  623|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  624|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  625|       |
  626|      1|            phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  627|      1|            phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  628|       |
  629|      1|            Division(processor, dest_reg.register_id, lhs_value, rhs_value);
  630|      1|        }
_ZN3dlx4impl5DIVUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  634|      1|        {
  635|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  636|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  637|      1|            const auto& imm_value = arg3.AsImmediateValue();
  638|       |
  639|      1|            phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  640|       |
  641|      1|            Division(processor, dest_reg.register_id, src_value, imm_value.unsigned_value);
  642|      1|        }
_ZN3dlx4impl4DIVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  646|      1|        {
  647|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  648|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  649|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  650|       |
  651|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  652|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  653|       |
  654|      1|            if (rhs_value.unsafe() == 0.0f)
  ------------------
  |  Branch (654:17): [True: 1, False: 0]
  ------------------
  655|      1|            {
  656|      1|                processor.Raise(Exception::DivideByZero);
  657|      1|                return;
  658|      1|            }
  659|       |
  660|      0|            const phi::f32 new_value = lhs_value / rhs_value;
  661|       |
  662|      0|            processor.FloatRegisterSetFloatValue(dest_reg, new_value);
  663|      0|        }
_ZN3dlx4impl4DIVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  667|      1|        {
  668|      1|            const auto& dest_reg = arg1.AsRegisterFloat().register_id;
  669|      1|            const auto& lhs_reg  = arg2.AsRegisterFloat().register_id;
  670|      1|            const auto& rhs_reg  = arg3.AsRegisterFloat().register_id;
  671|       |
  672|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  673|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  674|       |
  675|      1|            if (rhs_value.unsafe() == 0.0)
  ------------------
  |  Branch (675:17): [True: 1, False: 0]
  ------------------
  676|      1|            {
  677|      1|                processor.Raise(Exception::DivideByZero);
  678|      1|                return;
  679|      1|            }
  680|       |
  681|      0|            const phi::f64 new_value = lhs_value / rhs_value;
  682|       |
  683|      0|            processor.FloatRegisterSetDoubleValue(dest_reg, new_value);
  684|      0|        }
_ZN3dlx4impl3SLLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  688|      1|        {
  689|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  690|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  691|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  692|       |
  693|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  694|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  695|       |
  696|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  697|      1|        }
_ZN3dlx4impl4SLLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  701|      1|        {
  702|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  703|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  704|      1|            const auto& imm_value = arg3.AsImmediateValue();
  705|       |
  706|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  707|      1|            phi::i32 shift_value = imm_value.signed_value;
  708|       |
  709|      1|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  710|      1|        }
_ZN3dlx4impl3SRLERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  714|      1|        {
  715|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  716|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  717|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  718|       |
  719|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  720|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  721|       |
  722|      1|            ShiftRightLogical(processor, dest_reg.register_id, lhs_value, rhs_value);
  723|      1|        }
_ZN3dlx4impl4SRLIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  727|      1|        {
  728|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  729|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  730|      1|            const auto& imm_value = arg3.AsImmediateValue();
  731|       |
  732|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  733|      1|            phi::i32 shift_value = imm_value.signed_value;
  734|       |
  735|      1|            ShiftRightLogical(processor, dest_reg.register_id, src_value, shift_value);
  736|      1|        }
_ZN3dlx4impl3SLAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  740|      1|        {
  741|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  742|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  743|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  744|       |
  745|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  746|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  747|       |
  748|      1|            ShiftLeft(processor, dest_reg.register_id, lhs_value, rhs_value);
  749|      1|        }
_ZN3dlx4impl4SLAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  753|      1|        {
  754|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  755|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  756|      1|            const auto& imm_value = arg3.AsImmediateValue();
  757|       |
  758|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  759|      1|            phi::i32 shift_value = imm_value.signed_value;
  760|       |
  761|      1|            ShiftLeft(processor, dest_reg.register_id, src_value, shift_value);
  762|      1|        }
_ZN3dlx4impl3SRAERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  766|      1|        {
  767|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  768|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  769|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  770|       |
  771|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  772|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  773|       |
  774|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, lhs_value, rhs_value);
  775|      1|        }
_ZN3dlx4impl4SRAIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  779|      1|        {
  780|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  781|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  782|      1|            const auto& imm_value = arg3.AsImmediateValue();
  783|       |
  784|      1|            phi::i32 src_value   = processor.IntRegisterGetSignedValue(src_reg.register_id);
  785|      1|            phi::i32 shift_value = imm_value.signed_value;
  786|       |
  787|      1|            ShiftRightArithmetic(processor, dest_reg.register_id, src_value, shift_value);
  788|      1|        }
_ZN3dlx4impl3ANDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  792|      1|        {
  793|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  794|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  795|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  796|       |
  797|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  798|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  799|      1|            phi::i32 new_value = lhs_value.unsafe() & rhs_value.unsafe();
  800|       |
  801|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  802|      1|        }
_ZN3dlx4impl4ANDIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  806|      1|        {
  807|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  808|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  809|      1|            const auto& imm_value = arg3.AsImmediateValue();
  810|       |
  811|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  812|      1|            phi::i32 new_value = src_value.unsafe() & imm_value.signed_value.unsafe();
  813|       |
  814|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  815|      1|        }
_ZN3dlx4impl2ORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  819|      1|        {
  820|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  821|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  822|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  823|       |
  824|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  825|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  826|      1|            phi::i32 new_value = lhs_value.unsafe() | rhs_value.unsafe();
  827|       |
  828|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  829|      1|        }
_ZN3dlx4impl3ORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  833|      1|        {
  834|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  835|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  836|      1|            const auto& imm_value = arg3.AsImmediateValue();
  837|       |
  838|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  839|      1|            phi::i32 new_value = src_value.unsafe() | imm_value.signed_value.unsafe();
  840|       |
  841|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  842|      1|        }
_ZN3dlx4impl3XORERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  846|      1|        {
  847|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  848|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  849|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  850|       |
  851|      1|            phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  852|      1|            phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  853|      1|            phi::i32 new_value = lhs_value.unsafe() ^ rhs_value.unsafe();
  854|       |
  855|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  856|      1|        }
_ZN3dlx4impl4XORIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  860|      1|        {
  861|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  862|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  863|      1|            const auto& imm_value = arg3.AsImmediateValue();
  864|       |
  865|      1|            phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  866|      1|            phi::i32 new_value = src_value.unsafe() ^ imm_value.signed_value.unsafe();
  867|       |
  868|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  869|      1|        }
_ZN3dlx4impl3SLTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  873|      1|        {
  874|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  875|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  876|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  877|       |
  878|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  879|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  880|       |
  881|      1|            const phi::i32 new_value = (lhs_value < rhs_value ? 1 : 0);
  ------------------
  |  Branch (881:41): [True: 0, False: 1]
  ------------------
  882|       |
  883|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  884|      1|        }
_ZN3dlx4impl4SLTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  888|      1|        {
  889|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  890|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  891|      1|            const auto& imm_value = arg3.AsImmediateValue();
  892|       |
  893|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  894|       |
  895|      1|            const phi::i32 new_value = (src_value < imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (895:41): [True: 0, False: 1]
  ------------------
  896|       |
  897|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  898|      1|        }
_ZN3dlx4impl4SLTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  902|      1|        {
  903|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  904|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  905|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  906|       |
  907|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  908|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  909|       |
  910|      1|            const phi::u32 new_value = (lhs_value < rhs_value ? 1u : 0u);
  ------------------
  |  Branch (910:41): [True: 0, False: 1]
  ------------------
  911|       |
  912|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  913|      1|        }
_ZN3dlx4impl5SLTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  917|      1|        {
  918|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  919|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  920|      1|            const auto& imm_value = arg3.AsImmediateValue();
  921|       |
  922|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
  923|       |
  924|      1|            const phi::u32 new_value = (src_value < imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (924:41): [True: 0, False: 1]
  ------------------
  925|       |
  926|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  927|      1|        }
_ZN3dlx4impl3LTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  931|      1|        {
  932|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  933|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  934|       |
  935|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
  936|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
  937|       |
  938|      1|            const phi::boolean new_value = (lhs_value < rhs_value);
  939|       |
  940|      1|            processor.SetFPSRValue(new_value);
  941|      1|        }
_ZN3dlx4impl3LTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  945|      1|        {
  946|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
  947|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
  948|       |
  949|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
  950|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
  951|       |
  952|      1|            const phi::boolean new_value = (lhs_value < rhs_value);
  953|       |
  954|      1|            processor.SetFPSRValue(new_value);
  955|      1|        }
_ZN3dlx4impl3SGTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  959|     31|        {
  960|     31|            const auto& dest_reg = arg1.AsRegisterInt();
  961|     31|            const auto& lhs_reg  = arg2.AsRegisterInt();
  962|     31|            const auto& rhs_reg  = arg3.AsRegisterInt();
  963|       |
  964|     31|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
  965|     31|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
  966|       |
  967|     31|            const phi::i32 new_value = (lhs_value > rhs_value ? 1 : 0);
  ------------------
  |  Branch (967:41): [True: 0, False: 31]
  ------------------
  968|       |
  969|     31|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  970|     31|        }
_ZN3dlx4impl4SGTIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  974|      1|        {
  975|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
  976|      1|            const auto& src_reg   = arg2.AsRegisterInt();
  977|      1|            const auto& imm_value = arg3.AsImmediateValue();
  978|       |
  979|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
  980|       |
  981|      1|            const phi::i32 new_value = (src_value > imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (981:41): [True: 0, False: 1]
  ------------------
  982|       |
  983|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
  984|      1|        }
_ZN3dlx4impl4SGTUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
  988|      1|        {
  989|      1|            const auto& dest_reg = arg1.AsRegisterInt();
  990|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
  991|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
  992|       |
  993|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
  994|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
  995|       |
  996|      1|            const phi::u32 new_value = (lhs_value > rhs_value ? 1u : 0u);
  ------------------
  |  Branch (996:41): [True: 0, False: 1]
  ------------------
  997|       |
  998|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
  999|      1|        }
_ZN3dlx4impl5SGTUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1003|      1|        {
 1004|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1005|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1006|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1007|       |
 1008|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1009|       |
 1010|      1|            const phi::u32 new_value = (src_value > imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1010:41): [True: 0, False: 1]
  ------------------
 1011|       |
 1012|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1013|      1|        }
_ZN3dlx4impl3GTFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1017|      1|        {
 1018|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1019|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1020|       |
 1021|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1022|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1023|       |
 1024|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1025|       |
 1026|      1|            processor.SetFPSRValue(new_value);
 1027|      1|        }
_ZN3dlx4impl3GTDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1031|      1|        {
 1032|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1033|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1034|       |
 1035|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1036|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1037|       |
 1038|      1|            const phi::boolean new_value = (lhs_value > rhs_value);
 1039|       |
 1040|      1|            processor.SetFPSRValue(new_value);
 1041|      1|        }
_ZN3dlx4impl3SLEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1045|      1|        {
 1046|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1047|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1048|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1049|       |
 1050|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1051|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1052|       |
 1053|      1|            const phi::i32 new_value = (lhs_value <= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1053:41): [True: 1, False: 0]
  ------------------
 1054|       |
 1055|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1056|      1|        }
_ZN3dlx4impl4SLEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1060|      1|        {
 1061|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1062|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1063|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1064|       |
 1065|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1066|       |
 1067|      1|            const phi::i32 new_value = (src_value <= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1067:41): [True: 1, False: 0]
  ------------------
 1068|       |
 1069|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1070|      1|        }
_ZN3dlx4impl4SLEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1074|     22|        {
 1075|     22|            const auto& dest_reg = arg1.AsRegisterInt();
 1076|     22|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1077|     22|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1078|       |
 1079|     22|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1080|     22|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1081|       |
 1082|     22|            const phi::u32 new_value = (lhs_value <= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1082:41): [True: 22, False: 0]
  ------------------
 1083|       |
 1084|     22|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1085|     22|        }
_ZN3dlx4impl5SLEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1089|      1|        {
 1090|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1091|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1092|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1093|       |
 1094|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1095|       |
 1096|      1|            const phi::u32 new_value = (src_value <= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1096:41): [True: 1, False: 0]
  ------------------
 1097|       |
 1098|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1099|      1|        }
_ZN3dlx4impl3LEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1103|      1|        {
 1104|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1105|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1106|       |
 1107|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1108|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1109|       |
 1110|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1111|       |
 1112|      1|            processor.SetFPSRValue(new_value);
 1113|      1|        }
_ZN3dlx4impl3LEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1117|      1|        {
 1118|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1119|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1120|       |
 1121|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1122|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1123|       |
 1124|      1|            const phi::boolean new_value = (lhs_value <= rhs_value);
 1125|       |
 1126|      1|            processor.SetFPSRValue(new_value);
 1127|      1|        }
_ZN3dlx4impl3SGEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1131|      1|        {
 1132|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1133|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1134|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1135|       |
 1136|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1137|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1138|       |
 1139|      1|            const phi::i32 new_value = (lhs_value >= rhs_value ? 1 : 0);
  ------------------
  |  Branch (1139:41): [True: 1, False: 0]
  ------------------
 1140|       |
 1141|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1142|      1|        }
_ZN3dlx4impl4SGEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1146|      1|        {
 1147|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1148|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1149|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1150|       |
 1151|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1152|       |
 1153|      1|            const phi::i32 new_value = (src_value >= imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1153:41): [True: 1, False: 0]
  ------------------
 1154|       |
 1155|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1156|      1|        }
_ZN3dlx4impl4SGEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1160|     23|        {
 1161|     23|            const auto& dest_reg = arg1.AsRegisterInt();
 1162|     23|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1163|     23|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1164|       |
 1165|     23|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1166|     23|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1167|       |
 1168|     23|            const phi::u32 new_value = (lhs_value >= rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1168:41): [True: 23, False: 0]
  ------------------
 1169|       |
 1170|     23|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1171|     23|        }
_ZN3dlx4impl5SGEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1175|      1|        {
 1176|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1177|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1178|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1179|       |
 1180|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1181|       |
 1182|      1|            const phi::u32 new_value = (src_value >= imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1182:41): [True: 1, False: 0]
  ------------------
 1183|       |
 1184|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1185|      1|        }
_ZN3dlx4impl3GEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1189|      1|        {
 1190|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1191|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1192|       |
 1193|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1194|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1195|       |
 1196|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1197|       |
 1198|      1|            processor.SetFPSRValue(new_value);
 1199|      1|        }
_ZN3dlx4impl3GEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1203|      1|        {
 1204|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1205|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1206|       |
 1207|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1208|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1209|       |
 1210|      1|            const phi::boolean new_value = (lhs_value >= rhs_value);
 1211|       |
 1212|      1|            processor.SetFPSRValue(new_value);
 1213|      1|        }
_ZN3dlx4impl3SEQERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1217|      1|        {
 1218|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1219|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1220|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1221|       |
 1222|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1223|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1224|       |
 1225|      1|            const phi::i32 new_value = (lhs_value == rhs_value ? 1 : 0);
  ------------------
  |  Branch (1225:41): [True: 1, False: 0]
  ------------------
 1226|       |
 1227|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1228|      1|        }
_ZN3dlx4impl4SEQIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1232|      1|        {
 1233|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1234|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1235|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1236|       |
 1237|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1238|       |
 1239|      1|            const phi::i32 new_value = (src_value == imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1239:41): [True: 1, False: 0]
  ------------------
 1240|       |
 1241|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1242|      1|        }
_ZN3dlx4impl4SEQUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1246|      1|        {
 1247|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1248|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1249|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1250|       |
 1251|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1252|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1253|       |
 1254|      1|            const phi::u32 new_value = (lhs_value == rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1254:41): [True: 1, False: 0]
  ------------------
 1255|       |
 1256|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1257|      1|        }
_ZN3dlx4impl5SEQUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1261|      1|        {
 1262|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1263|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1264|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1265|       |
 1266|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1267|       |
 1268|      1|            const phi::u32 new_value = (src_value == imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1268:41): [True: 1, False: 0]
  ------------------
 1269|       |
 1270|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1271|      1|        }
_ZN3dlx4impl3EQFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1275|      1|        {
 1276|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1277|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1278|       |
 1279|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1280|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1281|       |
 1282|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1283|       |
 1284|      1|            processor.SetFPSRValue(new_value);
 1285|      1|        }
_ZN3dlx4impl3EQDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1289|      1|        {
 1290|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1291|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1292|       |
 1293|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1294|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1295|       |
 1296|      1|            const phi::boolean new_value = (lhs_value.unsafe() == rhs_value.unsafe());
 1297|       |
 1298|      1|            processor.SetFPSRValue(new_value);
 1299|      1|        }
_ZN3dlx4impl3SNEERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1303|      1|        {
 1304|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1305|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1306|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1307|       |
 1308|      1|            const phi::i32 lhs_value = processor.IntRegisterGetSignedValue(lhs_reg.register_id);
 1309|      1|            const phi::i32 rhs_value = processor.IntRegisterGetSignedValue(rhs_reg.register_id);
 1310|       |
 1311|      1|            const phi::i32 new_value = (lhs_value != rhs_value ? 1 : 0);
  ------------------
  |  Branch (1311:41): [True: 0, False: 1]
  ------------------
 1312|       |
 1313|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1314|      1|        }
_ZN3dlx4impl4SNEIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1318|      1|        {
 1319|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1320|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1321|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1322|       |
 1323|      1|            const phi::i32 src_value = processor.IntRegisterGetSignedValue(src_reg.register_id);
 1324|       |
 1325|      1|            const phi::i32 new_value = (src_value != imm_value.signed_value ? 1 : 0);
  ------------------
  |  Branch (1325:41): [True: 0, False: 1]
  ------------------
 1326|       |
 1327|      1|            processor.IntRegisterSetSignedValue(dest_reg.register_id, new_value);
 1328|      1|        }
_ZN3dlx4impl4SNEUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1332|      1|        {
 1333|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1334|      1|            const auto& lhs_reg  = arg2.AsRegisterInt();
 1335|      1|            const auto& rhs_reg  = arg3.AsRegisterInt();
 1336|       |
 1337|      1|            const phi::u32 lhs_value = processor.IntRegisterGetUnsignedValue(lhs_reg.register_id);
 1338|      1|            const phi::u32 rhs_value = processor.IntRegisterGetUnsignedValue(rhs_reg.register_id);
 1339|       |
 1340|      1|            const phi::u32 new_value = (lhs_value != rhs_value ? 1u : 0u);
  ------------------
  |  Branch (1340:41): [True: 0, False: 1]
  ------------------
 1341|       |
 1342|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1343|      1|        }
_ZN3dlx4impl5SNEUIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1347|      1|        {
 1348|      1|            const auto& dest_reg  = arg1.AsRegisterInt();
 1349|      1|            const auto& src_reg   = arg2.AsRegisterInt();
 1350|      1|            const auto& imm_value = arg3.AsImmediateValue();
 1351|       |
 1352|      1|            const phi::u32 src_value = processor.IntRegisterGetUnsignedValue(src_reg.register_id);
 1353|       |
 1354|      1|            const phi::u32 new_value = (src_value != imm_value.unsigned_value ? 1u : 0u);
  ------------------
  |  Branch (1354:41): [True: 0, False: 1]
  ------------------
 1355|       |
 1356|      1|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, new_value);
 1357|      1|        }
_ZN3dlx4impl3NEFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1361|      1|        {
 1362|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1363|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1364|       |
 1365|      1|            const phi::f32 lhs_value = processor.FloatRegisterGetFloatValue(lhs_reg);
 1366|      1|            const phi::f32 rhs_value = processor.FloatRegisterGetFloatValue(rhs_reg);
 1367|       |
 1368|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1369|       |
 1370|      1|            processor.SetFPSRValue(new_value);
 1371|      1|        }
_ZN3dlx4impl3NEDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1375|      1|        {
 1376|      1|            const FloatRegisterID lhs_reg = arg1.AsRegisterFloat().register_id;
 1377|      1|            const FloatRegisterID rhs_reg = arg2.AsRegisterFloat().register_id;
 1378|       |
 1379|      1|            const phi::f64 lhs_value = processor.FloatRegisterGetDoubleValue(lhs_reg);
 1380|      1|            const phi::f64 rhs_value = processor.FloatRegisterGetDoubleValue(rhs_reg);
 1381|       |
 1382|      1|            const phi::boolean new_value = (lhs_value.unsafe() != rhs_value.unsafe());
 1383|       |
 1384|      1|            processor.SetFPSRValue(new_value);
 1385|      1|        }
_ZN3dlx4impl4BEQZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1389|      1|        {
 1390|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1391|      1|            const auto& jump_label = arg2.AsLabel();
 1392|       |
 1393|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1394|       |
 1395|      1|            if (test_value == 0)
  ------------------
  |  Branch (1395:17): [True: 1, False: 0]
  ------------------
 1396|      1|            {
 1397|      1|                JumpToLabel(processor, jump_label.label_name);
 1398|      1|            }
 1399|      1|        }
_ZN3dlx4impl4BNEZERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1403|      1|        {
 1404|      1|            const auto& test_reg   = arg1.AsRegisterInt();
 1405|      1|            const auto& jump_label = arg2.AsLabel();
 1406|       |
 1407|      1|            phi::i32 test_value = processor.IntRegisterGetSignedValue(test_reg.register_id);
 1408|       |
 1409|      1|            if (test_value != 0)
  ------------------
  |  Branch (1409:17): [True: 0, False: 1]
  ------------------
 1410|      0|            {
 1411|      0|                JumpToLabel(processor, jump_label.label_name);
 1412|      0|            }
 1413|      1|        }
_ZN3dlx4impl4BFPTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1417|  1.24k|        {
 1418|  1.24k|            const auto& jump_label = arg1.AsLabel();
 1419|       |
 1420|  1.24k|            phi::boolean test_value = processor.GetFPSRValue();
 1421|       |
 1422|  1.24k|            if (test_value)
  ------------------
  |  Branch (1422:17): [True: 0, False: 1.24k]
  ------------------
 1423|      0|            {
 1424|      0|                JumpToLabel(processor, jump_label.label_name);
 1425|      0|            }
 1426|  1.24k|        }
_ZN3dlx4impl4BFPFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1430|      2|        {
 1431|      2|            const auto& jump_label = arg1.AsLabel();
 1432|       |
 1433|      2|            phi::boolean test_value = processor.GetFPSRValue();
 1434|       |
 1435|      2|            if (!test_value)
  ------------------
  |  Branch (1435:17): [True: 2, False: 0]
  ------------------
 1436|      2|            {
 1437|      2|                JumpToLabel(processor, jump_label.label_name);
 1438|      2|            }
 1439|      2|        }
_ZN3dlx4impl1JERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1443|  30.0k|        {
 1444|  30.0k|            const auto& jump_label = arg1.AsLabel();
 1445|       |
 1446|  30.0k|            JumpToLabel(processor, jump_label.label_name);
 1447|  30.0k|        }
_ZN3dlx4impl2JRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1451|  10.0k|        {
 1452|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1453|       |
 1454|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1455|  10.0k|        }
_ZN3dlx4impl3JALERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1459|      1|        {
 1460|      1|            const auto& jump_label = arg1.AsLabel();
 1461|       |
 1462|      1|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1463|      1|                                                  processor.GetNextProgramCounter());
 1464|       |
 1465|      1|            JumpToLabel(processor, jump_label.label_name);
 1466|      1|        }
_ZN3dlx4impl4JALRERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1470|  10.0k|        {
 1471|  10.0k|            const auto& jump_register = arg1.AsRegisterInt();
 1472|       |
 1473|  10.0k|            processor.IntRegisterSetUnsignedValue(IntRegisterID::R31,
 1474|  10.0k|                                                  processor.GetNextProgramCounter());
 1475|       |
 1476|  10.0k|            JumpToRegister(processor, jump_register.register_id);
 1477|  10.0k|        }
_ZN3dlx4impl3LHIERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1481|      1|        {
 1482|      1|            const IntRegisterID dest_reg  = arg1.AsRegisterInt().register_id;
 1483|      1|            std::int32_t        imm_value = arg2.AsImmediateValue().signed_value.unsafe();
 1484|       |
 1485|      1|            imm_value = static_cast<std::int32_t>((imm_value << 16) & 0xFFFF0000);
 1486|       |
 1487|      1|            processor.IntRegisterSetSignedValue(dest_reg, imm_value);
 1488|      1|        }
_ZN3dlx4impl2LBERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1492|      1|        {
 1493|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1494|       |
 1495|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1496|       |
 1497|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1497:17): [True: 0, False: 1]
  ------------------
 1498|      0|            {
 1499|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1500|      0|                return;
 1501|      0|            }
 1502|       |
 1503|      1|            phi::i32 address = optional_address.value();
 1504|       |
 1505|      1|            auto optional_value =
 1506|      1|                    processor.GetMemory().LoadByte(static_cast<std::size_t>(address.unsafe()));
 1507|       |
 1508|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1508:17): [True: 1, False: 0]
  ------------------
 1509|      1|            {
 1510|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1511|      1|                DLX_ERROR("Failed to load byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1512|      1|                return;
 1513|      1|            }
 1514|       |
 1515|      0|            phi::i32 value = optional_value.value();
 1516|       |
 1517|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1518|      0|        }
_ZN3dlx4impl3LBUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1522|      1|        {
 1523|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1524|       |
 1525|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1526|       |
 1527|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1527:17): [True: 0, False: 1]
  ------------------
 1528|      0|            {
 1529|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1530|      0|                return;
 1531|      0|            }
 1532|       |
 1533|      1|            phi::i32 address = optional_address.value();
 1534|       |
 1535|      1|            auto optional_value = processor.GetMemory().LoadUnsignedByte(
 1536|      1|                    static_cast<std::size_t>(address.unsafe()));
 1537|       |
 1538|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1538:17): [True: 1, False: 0]
  ------------------
 1539|      1|            {
 1540|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1541|      1|                DLX_ERROR("Failed to load unsigned byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1542|      1|                return;
 1543|      1|            }
 1544|       |
 1545|      0|            phi::u32 value = optional_value.value();
 1546|       |
 1547|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1548|      0|        }
_ZN3dlx4impl2LHERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1552|      1|        {
 1553|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1554|       |
 1555|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1556|       |
 1557|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1557:17): [True: 0, False: 1]
  ------------------
 1558|      0|            {
 1559|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1560|      0|                return;
 1561|      0|            }
 1562|       |
 1563|      1|            phi::i32 address = optional_address.value();
 1564|       |
 1565|      1|            auto optional_value =
 1566|      1|                    processor.GetMemory().LoadHalfWord(static_cast<std::size_t>(address.unsafe()));
 1567|       |
 1568|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1568:17): [True: 1, False: 0]
  ------------------
 1569|      1|            {
 1570|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1571|      1|                DLX_ERROR("Failed to load half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1572|      1|                return;
 1573|      1|            }
 1574|       |
 1575|      0|            phi::i32 value = optional_value.value();
 1576|       |
 1577|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, value);
 1578|      0|        }
_ZN3dlx4impl3LHUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1582|      1|        {
 1583|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1584|       |
 1585|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1586|       |
 1587|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1587:17): [True: 0, False: 1]
  ------------------
 1588|      0|            {
 1589|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1590|      0|                return;
 1591|      0|            }
 1592|       |
 1593|      1|            phi::i32 address = optional_address.value();
 1594|       |
 1595|      1|            auto optional_value = processor.GetMemory().LoadUnsignedHalfWord(
 1596|      1|                    static_cast<std::size_t>(address.unsafe()));
 1597|       |
 1598|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1598:17): [True: 1, False: 0]
  ------------------
 1599|      1|            {
 1600|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1601|      1|                DLX_ERROR("Failed to load unsigned half byte at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1602|      1|                return;
 1603|      1|            }
 1604|       |
 1605|      0|            phi::u32 value = optional_value.value();
 1606|       |
 1607|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, value);
 1608|      0|        }
_ZN3dlx4impl2LWERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1612|      1|        {
 1613|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1614|       |
 1615|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1616|       |
 1617|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1617:17): [True: 0, False: 1]
  ------------------
 1618|      0|            {
 1619|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1620|      0|                return;
 1621|      0|            }
 1622|       |
 1623|      1|            phi::i32 address = optional_address.value();
 1624|       |
 1625|      1|            auto optional_value =
 1626|      1|                    processor.GetMemory().LoadWord(static_cast<std::size_t>(address.unsafe()));
 1627|       |
 1628|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1628:17): [True: 1, False: 0]
  ------------------
 1629|      1|            {
 1630|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1631|      1|                DLX_ERROR("Failed to load word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1632|      1|                return;
 1633|      1|            }
 1634|       |
 1635|      0|            processor.IntRegisterSetSignedValue(dest_reg.register_id, optional_value.value());
 1636|      0|        }
_ZN3dlx4impl3LWUERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1640|      1|        {
 1641|      1|            const auto& dest_reg = arg1.AsRegisterInt();
 1642|       |
 1643|      1|            auto optional_address = GetLoadStoreAddress(processor, arg2);
 1644|       |
 1645|      1|            if (!optional_address.has_value())
  ------------------
  |  Branch (1645:17): [True: 0, False: 1]
  ------------------
 1646|      0|            {
 1647|      0|                processor.Raise(Exception::AddressOutOfBounds);
 1648|      0|                return;
 1649|      0|            }
 1650|       |
 1651|      1|            phi::i32 address = optional_address.value();
 1652|       |
 1653|      1|            auto optional_value = processor.GetMemory().LoadUnsignedWord(
 1654|      1|                    static_cast<std::size_t>(address.unsafe()));
 1655|       |
 1656|      1|            if (!optional_value.has_value())
  ------------------
  |  Branch (1656:17): [True: 1, False: 0]
  ------------------
 1657|      1|            {
 1658|      1|                processor.Raise(Exception::AddressOutOfBounds);
 1659|      1|                DLX_ERROR("Failed to load unsigned word at address {}", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
 1660|      1|                return;
 1661|      1|            }
 1662|       |
 1663|      0|            processor.IntRegisterSetUnsignedValue(dest_reg.register_id, optional_value.value());
 1664|      0|        }
_ZN3dlx4impl4MOVFERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1944|      1|        {
 1945|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1946|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1947|       |
 1948|      1|            const phi::f32 source_value = processor.FloatRegisterGetFloatValue(source_reg);
 1949|       |
 1950|      1|            processor.FloatRegisterSetFloatValue(dest_reg, source_value);
 1951|      1|        }
_ZN3dlx4impl4MOVDERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1955|      1|        {
 1956|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1957|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1958|       |
 1959|      1|            const phi::f64 source_value = processor.FloatRegisterGetDoubleValue(source_reg);
 1960|       |
 1961|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, source_value);
 1962|      1|        }
_ZN3dlx4impl7MOVFP2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1966|      1|        {
 1967|      1|            const IntRegisterID   dest_reg   = arg1.AsRegisterInt().register_id;
 1968|      1|            const FloatRegisterID source_reg = arg2.AsRegisterFloat().register_id;
 1969|       |
 1970|      1|            const float source_value = processor.FloatRegisterGetFloatValue(source_reg).unsafe();
 1971|       |
 1972|      1|            const std::int32_t moved_value = *reinterpret_cast<const std::int32_t*>(&source_value);
 1973|       |
 1974|      1|            processor.IntRegisterSetSignedValue(dest_reg, moved_value);
 1975|      1|        }
_ZN3dlx4impl7MOVI2FPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1979|      1|        {
 1980|      1|            const FloatRegisterID dest_reg   = arg1.AsRegisterFloat().register_id;
 1981|      1|            const IntRegisterID   source_reg = arg2.AsRegisterInt().register_id;
 1982|       |
 1983|      1|            const std::int32_t source_value =
 1984|      1|                    processor.IntRegisterGetSignedValue(source_reg).unsafe();
 1985|       |
 1986|      1|            const float moved_value = *reinterpret_cast<const float*>(&source_value);
 1987|       |
 1988|      1|            processor.FloatRegisterSetFloatValue(dest_reg, moved_value);
 1989|      1|        }
_ZN3dlx4impl6CVTF2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 1993|      1|        {
 1994|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 1995|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 1996|       |
 1997|      1|            const phi::f32 src_value = processor.FloatRegisterGetFloatValue(src_reg);
 1998|       |
 1999|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, src_value);
 2000|      1|        }
_ZN3dlx4impl6CVTF2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2004|      1|        {
 2005|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2006|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2007|       |
 2008|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2009|      1|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2010|      1|            const float        converted_value_float =
 2011|      1|                    *reinterpret_cast<const float*>(&converted_value_int);
 2012|       |
 2013|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2014|      1|        }
_ZN3dlx4impl6CVTD2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2018|      1|        {
 2019|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2020|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2021|       |
 2022|      1|            const double src_value       = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2023|      1|            const float  converted_value = static_cast<float>(src_value);
 2024|       |
 2025|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value);
 2026|      1|        }
_ZN3dlx4impl6CVTD2IERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2030|      1|        {
 2031|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2032|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2033|       |
 2034|      1|            const double       src_value = processor.FloatRegisterGetDoubleValue(src_reg).unsafe();
 2035|      1|            const std::int32_t converted_value_int = static_cast<std::int32_t>(src_value);
 2036|      1|            const float        converted_value_float =
 2037|      1|                    *reinterpret_cast<const float*>(&converted_value_int);
 2038|       |
 2039|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2040|      1|        }
_ZN3dlx4impl6CVTI2FERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2044|      1|        {
 2045|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2046|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2047|       |
 2048|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2049|      1|            const std::int32_t converted_value_int =
 2050|      1|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2051|      1|            const float converted_value_float = static_cast<float>(converted_value_int);
 2052|       |
 2053|      1|            processor.FloatRegisterSetFloatValue(dest_reg, converted_value_float);
 2054|      1|        }
_ZN3dlx4impl6CVTI2DERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2058|      1|        {
 2059|      1|            const FloatRegisterID dest_reg = arg1.AsRegisterFloat().register_id;
 2060|      1|            const FloatRegisterID src_reg  = arg2.AsRegisterFloat().register_id;
 2061|       |
 2062|      1|            const float        src_value = processor.FloatRegisterGetFloatValue(src_reg).unsafe();
 2063|      1|            const std::int32_t converted_value_int =
 2064|      1|                    *reinterpret_cast<const std::int32_t*>(&src_value);
 2065|      1|            const double converted_value_double = static_cast<double>(converted_value_int);
 2066|       |
 2067|      1|            processor.FloatRegisterSetDoubleValue(dest_reg, converted_value_double);
 2068|      1|        }
_ZN3dlx4impl4TRAPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2072|      1|        {
 2073|      1|            processor.Raise(Exception::Trap);
 2074|      1|        }
_ZN3dlx4impl4HALTERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2078|      3|        {
 2079|      3|            processor.Raise(Exception::Halt);
 2080|      3|        }
_ZN3dlx4impl3NOPERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
 2084|    586|        {
 2085|       |            /* Do nothing */
 2086|    586|        }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  174|     47|    {
  175|     47|        phi::i64 res = phi::i64(lhs) + rhs;
  176|       |
  177|     47|        SafeWriteInteger(processor, dest_reg, res);
  178|     47|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIlEE:
  129|     61|    {
  130|     61|        static const constexpr phi::i64 min = phi::i32::limits_type::min();
  131|     61|        static const constexpr phi::i64 max = phi::i32::limits_type::max();
  132|       |
  133|       |        // Check for underflow
  134|     61|        if (value < min)
  ------------------
  |  Branch (134:13): [True: 0, False: 61]
  ------------------
  135|      0|        {
  136|      0|            processor.Raise(Exception::Underflow);
  137|       |
  138|      0|            value = max + (value % (min - 1));
  139|      0|        }
  140|       |        // Check for overflow
  141|     61|        else if (value > max)
  ------------------
  |  Branch (141:18): [True: 0, False: 61]
  ------------------
  142|      0|        {
  143|      0|            processor.Raise(Exception::Overflow);
  144|       |
  145|      0|            value = min + (value % (max + 1));
  146|      0|        }
  147|       |
  148|     61|        PHI_ASSERT(value >= min);
  149|     61|        PHI_ASSERT(value <= max);
  150|       |
  151|     61|        processor.IntRegisterSetSignedValue(dest_reg, static_cast<std::int32_t>(value.unsafe()));
  152|     61|    }
InstructionImplementation.cpp:_ZN3dlxL8AdditionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  182|     66|    {
  183|     66|        phi::u64 res = phi::u64(lhs) + rhs;
  184|       |
  185|     66|        SafeWriteInteger(processor, dest_reg, res);
  186|     66|    }
InstructionImplementation.cpp:_ZN3dlxL16SafeWriteIntegerERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerImEE:
  156|    114|    {
  157|    114|        static constexpr const phi::u64 max = phi::u32::limits_type::max();
  158|       |
  159|       |        // Check for overflow
  160|    114|        if (value > max)
  ------------------
  |  Branch (160:13): [True: 0, False: 114]
  ------------------
  161|      0|        {
  162|      0|            processor.Raise(Exception::Overflow);
  163|       |
  164|      0|            value %= max + 1u;
  165|      0|        }
  166|       |
  167|    114|        PHI_ASSERT(value <= max);
  168|       |
  169|    114|        processor.IntRegisterSetUnsignedValue(dest_reg, static_cast<std::uint32_t>(value.unsafe()));
  170|    114|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  190|     12|    {
  191|     12|        phi::i64 res = phi::i64(lhs) - rhs;
  192|       |
  193|     12|        SafeWriteInteger(processor, dest_reg, res);
  194|     12|    }
InstructionImplementation.cpp:_ZN3dlxL11SubtractionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  198|      2|    {
  199|      2|        constexpr phi::u32 max = phi::u32::limits_type::max();
  200|       |
  201|      2|        if (lhs < rhs)
  ------------------
  |  Branch (201:13): [True: 0, False: 2]
  ------------------
  202|      0|        {
  203|      0|            processor.Raise(Exception::Underflow);
  204|       |
  205|      0|            phi::u64 res = max - rhs + lhs + 1u;
  206|      0|            SafeWriteInteger(processor, dest_reg, res);
  207|      0|            return;
  208|      0|        }
  209|       |
  210|      2|        phi::u64 res = phi::u64(lhs) - rhs;
  211|       |
  212|      2|        SafeWriteInteger(processor, dest_reg, res);
  213|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  217|      2|    {
  218|      2|        phi::i64 res = phi::i64(lhs) * rhs;
  219|       |
  220|      2|        SafeWriteInteger(processor, dest_reg, res);
  221|      2|    }
InstructionImplementation.cpp:_ZN3dlxL14MultiplicationERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  225|     46|    {
  226|     46|        phi::u64 res = phi::u64(lhs) * rhs;
  227|       |
  228|     46|        SafeWriteInteger(processor, dest_reg, res);
  229|     46|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  233|      2|    {
  234|      2|        if (rhs == 0)
  ------------------
  |  Branch (234:13): [True: 2, False: 0]
  ------------------
  235|      2|        {
  236|      2|            processor.Raise(Exception::DivideByZero);
  237|      2|            return;
  238|      2|        }
  239|       |
  240|      0|        phi::i64 res = phi::i64(lhs) / rhs;
  241|       |
  242|      0|        SafeWriteInteger(processor, dest_reg, res);
  243|      0|    }
InstructionImplementation.cpp:_ZN3dlxL8DivisionERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIjEES5_:
  247|      2|    {
  248|      2|        if (rhs == 0u)
  ------------------
  |  Branch (248:13): [True: 2, False: 0]
  ------------------
  249|      2|        {
  250|      2|            processor.Raise(Exception::DivideByZero);
  251|      2|            return;
  252|      2|        }
  253|       |
  254|      0|        phi::u64 res = phi::u64(lhs) / rhs;
  255|       |
  256|      0|        SafeWriteInteger(processor, dest_reg, res);
  257|      0|    }
InstructionImplementation.cpp:_ZN3dlxL9ShiftLeftERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  330|      4|    {
  331|      4|        if (shift > 31)
  ------------------
  |  Branch (331:13): [True: 0, False: 4]
  ------------------
  332|      0|        {
  333|      0|            processor.Raise(Exception::BadShift);
  334|       |
  335|       |            // Just set register to 0
  336|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  337|      0|            return;
  338|      0|        }
  339|       |
  340|       |        // Negative shifts are undefined behavior
  341|      4|        if (shift < 0)
  ------------------
  |  Branch (341:13): [True: 0, False: 4]
  ------------------
  342|      0|        {
  343|      0|            processor.Raise(Exception::BadShift);
  344|      0|            return;
  345|      0|        }
  346|       |
  347|      4|        phi::i32 new_value = base.unsafe() << shift.unsafe();
  348|       |
  349|      4|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  350|      4|    }
InstructionImplementation.cpp:_ZN3dlxL17ShiftRightLogicalERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  261|      2|    {
  262|       |        // Prevent undefined behavior by shifting by more than 31
  263|      2|        if (shift > 31)
  ------------------
  |  Branch (263:13): [True: 0, False: 2]
  ------------------
  264|      0|        {
  265|      0|            processor.Raise(Exception::BadShift);
  266|       |
  267|       |            // Just set register to 0
  268|      0|            processor.IntRegisterSetSignedValue(dest_reg, 0);
  269|      0|            return;
  270|      0|        }
  271|       |
  272|       |        // Do nothing when shifting by zero to prevent undefined behavior
  273|      2|        if (shift == 0)
  ------------------
  |  Branch (273:13): [True: 2, False: 0]
  ------------------
  274|      2|        {
  275|      2|            processor.IntRegisterSetSignedValue(dest_reg, base);
  276|      2|            return;
  277|      2|        }
  278|       |
  279|       |        // Negative shifts are undefiend behavior
  280|      0|        if (shift < 0)
  ------------------
  |  Branch (280:13): [True: 0, False: 0]
  ------------------
  281|      0|        {
  282|      0|            processor.Raise(Exception::BadShift);
  283|      0|            return;
  284|      0|        }
  285|       |
  286|      0|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  287|       |
  288|      0|        new_value = clear_top_n_bits(new_value.unsafe(), shift.unsafe());
  289|       |
  290|      0|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  291|      0|    }
InstructionImplementation.cpp:_ZN3dlxL20ShiftRightArithmeticERNS_9ProcessorENS_13IntRegisterIDEN3phi7integerIiEES5_:
  295|      2|    {
  296|       |        // Prevent undefined behavior by shifting by more than 31
  297|      2|        if (shift > 31)
  ------------------
  |  Branch (297:13): [True: 0, False: 2]
  ------------------
  298|      0|        {
  299|      0|            processor.Raise(Exception::BadShift);
  300|       |
  301|       |            // Is negative ie. sign bit is set
  302|      0|            if (base < 0)
  ------------------
  |  Branch (302:17): [True: 0, False: 0]
  ------------------
  303|      0|            {
  304|       |                // Set every byte to 1
  305|      0|                processor.IntRegisterSetSignedValue(dest_reg, ~0);
  306|      0|            }
  307|      0|            else
  308|      0|            {
  309|       |                // Set every byte to 0
  310|      0|                processor.IntRegisterSetSignedValue(dest_reg, 0);
  311|      0|            }
  312|      0|            return;
  313|      0|        }
  314|       |
  315|       |        // Negative shifts are undefined behavior
  316|      2|        if (shift < 0)
  ------------------
  |  Branch (316:13): [True: 0, False: 2]
  ------------------
  317|      0|        {
  318|      0|            processor.Raise(Exception::BadShift);
  319|      0|            return;
  320|      0|        }
  321|       |
  322|      2|        phi::i32 new_value = base.unsafe() >> shift.unsafe();
  323|       |
  324|      2|        processor.IntRegisterSetSignedValue(dest_reg, new_value);
  325|      2|    }
InstructionImplementation.cpp:_ZN3dlxL11JumpToLabelERNS_9ProcessorENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   38|  30.0k|    {
   39|       |        // Lookup the label
   40|  30.0k|        const phi::observer_ptr<ParsedProgram> program = processor.GetCurrentProgramm();
   41|  30.0k|        PHI_ASSERT(program != nullptr);
   42|  30.0k|        PHI_ASSERT(!label_name.empty(), "Can't jump to empty label");
   43|       |
   44|  30.0k|        if (program->m_JumpData.find(label_name) == program->m_JumpData.end())
  ------------------
  |  Branch (44:13): [True: 80, False: 30.0k]
  ------------------
   45|     80|        {
   46|     80|            DLX_ERROR("Unable to find jump label {}", label_name);
  ------------------
  |  |    9|     80|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|     80|            processor.Raise(Exception::UnknownLabel);
   48|     80|            return;
   49|     80|        }
   50|       |
   51|  30.0k|        const std::uint32_t jump_point = program->m_JumpData.at(label_name);
   52|  30.0k|        PHI_ASSERT(jump_point < program->m_Instructions.size(), "Jump point out of bounds");
   53|       |
   54|       |        // Set program counter
   55|  30.0k|        processor.SetNextProgramCounter(jump_point);
   56|  30.0k|    }
InstructionImplementation.cpp:_ZN3dlxL14JumpToRegisterERNS_9ProcessorENS_13IntRegisterIDE:
   59|  20.0k|    {
   60|  20.0k|        phi::u32 address = processor.IntRegisterGetUnsignedValue(reg_id);
   61|       |
   62|  20.0k|        phi::u32 max_address =
   63|  20.0k|                static_cast<std::uint32_t>(processor.GetCurrentProgramm()->m_Instructions.size());
   64|  20.0k|        if (address >= max_address)
  ------------------
  |  Branch (64:13): [True: 1, False: 20.0k]
  ------------------
   65|      1|        {
   66|      1|            processor.Raise(Exception::AddressOutOfBounds);
   67|      1|            return;
   68|      1|        }
   69|       |
   70|  20.0k|        processor.SetNextProgramCounter(address.unsafe());
   71|  20.0k|    }
InstructionImplementation.cpp:_ZN3dlxL19GetLoadStoreAddressERNS_9ProcessorENS_19InstructionArgumentE:
  100|      6|    {
  101|      6|        if (argument.GetType() == ArgumentType::ImmediateInteger)
  ------------------
  |  Branch (101:13): [True: 6, False: 0]
  ------------------
  102|      6|        {
  103|      6|            const auto& imm_value = argument.AsImmediateValue();
  104|       |
  105|      6|            if (imm_value.signed_value < 0)
  ------------------
  |  Branch (105:17): [True: 0, False: 6]
  ------------------
  106|      0|            {
  107|      0|                return {};
  108|      0|            }
  109|       |
  110|      6|            return imm_value.signed_value;
  111|      6|        }
  112|       |
  113|      0|        if (argument.GetType() == ArgumentType::AddressDisplacement)
  ------------------
  |  Branch (113:13): [True: 0, False: 0]
  ------------------
  114|      0|        {
  115|      0|            const auto& adr_displacement = argument.AsAddressDisplacement();
  116|      0|            return CalculateDisplacementAddress(processor, adr_displacement);
  117|      0|        }
  118|       |
  119|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  120|      0|        PHI_ASSERT_NOT_REACHED();
  121|      0|#endif
  122|      0|    }

_ZNK3dlx15InstructionInfo7ExecuteERNS_9ProcessorERKNS_19InstructionArgumentES5_S5_:
   11|  52.2k|    {
   12|  52.2k|        PHI_ASSERT(m_Executor, "No execution function defined");
   13|       |
   14|       |        // Make sure non arguments are marked as unknown
   15|  52.2k|        PHI_ASSERT(arg1.GetType() != ArgumentType::Unknown, "Arg1 type is unknown");
   16|  52.2k|        PHI_ASSERT(arg2.GetType() != ArgumentType::Unknown, "Arg2 type is unknown");
   17|  52.2k|        PHI_ASSERT(arg3.GetType() != ArgumentType::Unknown, "Arg3 type is unknown");
   18|       |
   19|       |        // Make sure argument types match
   20|  52.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg1.GetType(), m_Arg1Type),
   21|  52.2k|                   "Unexpected argument type for arg1");
   22|  52.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg2.GetType(), m_Arg2Type),
   23|  52.2k|                   "Unexpected argument type for arg2");
   24|  52.2k|        PHI_ASSERT(ArgumentTypeIncludes(arg3.GetType(), m_Arg3Type),
   25|  52.2k|                   "Unexpected argument type for arg3");
   26|       |
   27|       |        // Execute the instruction using the specified executor
   28|  52.2k|        m_Executor(processor, arg1, arg2, arg3);
   29|  52.2k|    }

_ZN3dlx20LookUpIntructionInfoENS_6OpCodeE:
  452|   161k|    {
  453|   161k|        return instruction_table.at(static_cast<std::size_t>(instruction));
  454|   161k|    }

_ZN3dlx11IntRegisterC2Ev:
   13|     32|    {}
_ZN3dlx11IntRegister14SetSignedValueEN3phi7integerIiEE:
   16|  1.71M|    {
   17|  1.71M|        m_ValueSigned = val;
   18|  1.71M|    }
_ZN3dlx11IntRegister16SetUnsignedValueEN3phi7integerIjEE:
   21|  10.0k|    {
   22|  10.0k|        m_ValueUnsigned = val;
   23|  10.0k|    }
_ZNK3dlx11IntRegister14GetSignedValueEv:
   26|    224|    {
   27|    224|        return m_ValueSigned;
   28|    224|    }
_ZNK3dlx11IntRegister16GetUnsignedValueEv:
   31|  20.3k|    {
   32|  20.3k|        return m_ValueUnsigned;
   33|  20.3k|    }
_ZNK3dlx11IntRegister10IsReadOnlyEv:
   36|  10.2k|    {
   37|  10.2k|        return m_IsReadOnly;
   38|  10.2k|    }
_ZN3dlx11IntRegister11SetReadOnlyEN3phi7booleanE:
   41|      1|    {
   42|      1|        m_IsReadOnly = read_only;
   43|      1|    }

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   14|      1|    {
   15|      1|        m_Values.resize(starting_size.unsafe());
   16|      1|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   19|      1|    {
   20|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (20:13): [True: 1, False: 0]
  ------------------
   21|      1|        {
   22|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   23|      1|            return {};
   24|      1|        }
   25|       |
   26|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   27|      0|        return m_Values[index].signed_value;
   28|      1|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   31|      1|    {
   32|      1|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (32:13): [True: 1, False: 0]
  ------------------
   33|      1|        {
   34|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   35|      1|            return {};
   36|      1|        }
   37|       |
   38|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   39|      0|        return m_Values[index].unsigned_value;
   40|      1|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   43|      1|    {
   44|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (44:13): [True: 1, False: 0]
  ------------------
   45|      1|        {
   46|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   47|      1|            return {};
   48|      1|        }
   49|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (49:13): [True: 0, False: 0]
  ------------------
   50|      0|        {
   51|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   52|      0|            return {};
   53|      0|        }
   54|       |
   55|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   56|      0|        return *reinterpret_cast<const std::int16_t*>(&m_Values[index].signed_value);
   57|      0|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   60|      1|    {
   61|      1|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (61:13): [True: 1, False: 0]
  ------------------
   62|      1|        {
   63|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   64|      1|            return {};
   65|      1|        }
   66|      0|        if (!IsAddressAlignedCorrectly(address, 2u))
  ------------------
  |  Branch (66:13): [True: 0, False: 0]
  ------------------
   67|      0|        {
   68|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|      0|            return {};
   70|      0|        }
   71|       |
   72|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   73|      0|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[index].unsigned_value);
   74|      0|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   77|      1|    {
   78|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (78:13): [True: 1, False: 0]
  ------------------
   79|      1|        {
   80|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   81|      1|            return {};
   82|      1|        }
   83|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (83:13): [True: 0, False: 0]
  ------------------
   84|      0|        {
   85|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   86|      0|            return {};
   87|      0|        }
   88|       |
   89|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
   90|      0|        return *reinterpret_cast<const std::int32_t*>(&m_Values[index].signed_value);
   91|      0|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   94|      1|    {
   95|      1|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (95:13): [True: 1, False: 0]
  ------------------
   96|      1|        {
   97|      1|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   98|      1|            return {};
   99|      1|        }
  100|      0|        if (!IsAddressAlignedCorrectly(address, 4u))
  ------------------
  |  Branch (100:13): [True: 0, False: 0]
  ------------------
  101|      0|        {
  102|      0|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|      0|            return {};
  104|      0|        }
  105|       |
  106|      0|        std::size_t index = (address - m_StartingAddress).unsafe();
  107|      0|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[index].unsigned_value);
  108|      0|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  243|      6|    {
  244|      6|        return address >= m_StartingAddress &&
  ------------------
  |  Branch (244:16): [True: 0, False: 6]
  ------------------
  245|      6|               (address + size) <= (m_StartingAddress + m_Values.size());
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      6|    }
_ZN3dlx11MemoryBlock5ClearEv:
  255|  53.6k|    {
  256|  53.6k|        for (auto& val : m_Values)
  ------------------
  |  Branch (256:24): [True: 53.6M, False: 53.6k]
  ------------------
  257|  53.6M|        {
  258|  53.6M|            val.signed_value = 0;
  259|  53.6M|        }
  260|  53.6k|    }

_ZN3dlx14StringToOpCodeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   23|  4.01M|    {
   24|  4.01M|        switch (token.length())
   25|  4.01M|        {
   26|       |            // 1 character OpCodes
   27|   607k|            case 1: {
  ------------------
  |  Branch (27:13): [True: 607k, False: 3.40M]
  ------------------
   28|   607k|                char c1 = token[0];
   29|   607k|                if (ice(c1, 'J'))
  ------------------
  |  Branch (29:21): [True: 71.6k, False: 535k]
  ------------------
   30|  71.6k|                {
   31|  71.6k|                    return OpCode::J;
   32|  71.6k|                }
   33|   535k|                break;
   34|   607k|            }
   35|       |
   36|       |            // 2 character OpCodes
   37|   745k|            case 2: {
  ------------------
  |  Branch (37:13): [True: 745k, False: 3.26M]
  ------------------
   38|   745k|                char c1 = token[0];
   39|   745k|                char c2 = token[1];
   40|       |
   41|   745k|                switch (c1)
  ------------------
  |  Branch (41:25): [True: 510k, False: 235k]
  ------------------
   42|   745k|                {
   43|  30.1k|                    case 'J':
  ------------------
  |  Branch (43:21): [True: 30.1k, False: 715k]
  ------------------
   44|  34.2k|                    case 'j':
  ------------------
  |  Branch (44:21): [True: 4.08k, False: 741k]
  ------------------
   45|  34.2k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (45:29): [True: 9.22k, False: 25.0k]
  ------------------
   46|  9.22k|                        {
   47|  9.22k|                            return OpCode::JR;
   48|  9.22k|                        }
   49|  25.0k|                        break;
   50|       |
   51|  25.0k|                    case 'L':
  ------------------
  |  Branch (51:21): [True: 24.0k, False: 721k]
  ------------------
   52|  59.1k|                    case 'l':
  ------------------
  |  Branch (52:21): [True: 35.0k, False: 710k]
  ------------------
   53|  59.1k|                        switch (c2)
  ------------------
  |  Branch (53:33): [True: 11.9k, False: 47.2k]
  ------------------
   54|  59.1k|                        {
   55|  2.83k|                            case 'B':
  ------------------
  |  Branch (55:29): [True: 2.83k, False: 56.3k]
  ------------------
   56|  9.19k|                            case 'b':
  ------------------
  |  Branch (56:29): [True: 6.36k, False: 52.8k]
  ------------------
   57|  9.19k|                                return OpCode::LB;
   58|  8.23k|                            case 'D':
  ------------------
  |  Branch (58:29): [True: 8.23k, False: 50.9k]
  ------------------
   59|  10.7k|                            case 'd':
  ------------------
  |  Branch (59:29): [True: 2.50k, False: 56.6k]
  ------------------
   60|  10.7k|                                return OpCode::LD;
   61|  1.08k|                            case 'F':
  ------------------
  |  Branch (61:29): [True: 1.08k, False: 58.0k]
  ------------------
   62|  2.77k|                            case 'f':
  ------------------
  |  Branch (62:29): [True: 1.69k, False: 57.4k]
  ------------------
   63|  2.77k|                                return OpCode::LF;
   64|  4.86k|                            case 'H':
  ------------------
  |  Branch (64:29): [True: 4.86k, False: 54.2k]
  ------------------
   65|  17.6k|                            case 'h':
  ------------------
  |  Branch (65:29): [True: 12.7k, False: 46.3k]
  ------------------
   66|  17.6k|                                return OpCode::LH;
   67|  3.51k|                            case 'W':
  ------------------
  |  Branch (67:29): [True: 3.51k, False: 55.6k]
  ------------------
   68|  6.85k|                            case 'w':
  ------------------
  |  Branch (68:29): [True: 3.34k, False: 55.8k]
  ------------------
   69|  6.85k|                                return OpCode::LW;
   70|  59.1k|                        }
   71|  11.9k|                        break;
   72|  11.9k|                    case 'O':
  ------------------
  |  Branch (72:21): [True: 6.02k, False: 739k]
  ------------------
   73|  44.0k|                    case 'o':
  ------------------
  |  Branch (73:21): [True: 37.9k, False: 707k]
  ------------------
   74|  44.0k|                        if (ice(c2, 'R'))
  ------------------
  |  Branch (74:29): [True: 4.77k, False: 39.2k]
  ------------------
   75|  4.77k|                        {
   76|  4.77k|                            return OpCode::OR;
   77|  4.77k|                        }
   78|  39.2k|                        break;
   79|  66.8k|                    case 'S':
  ------------------
  |  Branch (79:21): [True: 66.8k, False: 678k]
  ------------------
   80|  98.1k|                    case 's':
  ------------------
  |  Branch (80:21): [True: 31.3k, False: 714k]
  ------------------
   81|  98.1k|                        switch (c2)
  ------------------
  |  Branch (81:33): [True: 37.0k, False: 61.0k]
  ------------------
   82|  98.1k|                        {
   83|  2.74k|                            case 'B':
  ------------------
  |  Branch (83:29): [True: 2.74k, False: 95.3k]
  ------------------
   84|  7.59k|                            case 'b':
  ------------------
  |  Branch (84:29): [True: 4.84k, False: 93.2k]
  ------------------
   85|  7.59k|                                return OpCode::SB;
   86|  3.90k|                            case 'D':
  ------------------
  |  Branch (86:29): [True: 3.90k, False: 94.2k]
  ------------------
   87|  17.9k|                            case 'd':
  ------------------
  |  Branch (87:29): [True: 14.0k, False: 84.1k]
  ------------------
   88|  17.9k|                                return OpCode::SD;
   89|  5.77k|                            case 'F':
  ------------------
  |  Branch (89:29): [True: 5.77k, False: 92.3k]
  ------------------
   90|  11.8k|                            case 'f':
  ------------------
  |  Branch (90:29): [True: 6.10k, False: 92.0k]
  ------------------
   91|  11.8k|                                return OpCode::SF;
   92|  2.65k|                            case 'H':
  ------------------
  |  Branch (92:29): [True: 2.65k, False: 95.4k]
  ------------------
   93|  12.0k|                            case 'h':
  ------------------
  |  Branch (93:29): [True: 9.35k, False: 88.7k]
  ------------------
   94|  12.0k|                                return OpCode::SH;
   95|  8.12k|                            case 'w':
  ------------------
  |  Branch (95:29): [True: 8.12k, False: 90.0k]
  ------------------
   96|  11.6k|                            case 'W':
  ------------------
  |  Branch (96:29): [True: 3.54k, False: 94.5k]
  ------------------
   97|  11.6k|                                return OpCode::SW;
   98|  98.1k|                        }
   99|  37.0k|                        break;
  100|   745k|                }
  101|   623k|                break;
  102|   745k|            }
  103|       |
  104|       |            // 3 character OpCodes
  105|   855k|            case 3: {
  ------------------
  |  Branch (105:13): [True: 855k, False: 3.15M]
  ------------------
  106|   855k|                char c1 = token[0];
  107|   855k|                char c2 = token[1];
  108|   855k|                char c3 = token[2];
  109|       |
  110|   855k|                switch (c1)
  ------------------
  |  Branch (110:25): [True: 313k, False: 541k]
  ------------------
  111|   855k|                {
  112|   119k|                    case 'A':
  ------------------
  |  Branch (112:21): [True: 119k, False: 735k]
  ------------------
  113|   137k|                    case 'a':
  ------------------
  |  Branch (113:21): [True: 17.2k, False: 838k]
  ------------------
  114|   137k|                        if (ice(c2, 'D') && ice(c3, 'D'))
  ------------------
  |  Branch (114:29): [True: 110k, False: 26.2k]
  |  Branch (114:29): [True: 104k, False: 33.0k]
  |  Branch (114:45): [True: 104k, False: 6.72k]
  ------------------
  115|   104k|                        {
  116|   104k|                            return OpCode::ADD;
  117|   104k|                        }
  118|  33.0k|                        else if (ice(c2, 'N') && ice(c3, 'D'))
  ------------------
  |  Branch (118:34): [True: 14.5k, False: 18.4k]
  |  Branch (118:34): [True: 8.09k, False: 24.9k]
  |  Branch (118:50): [True: 8.09k, False: 6.44k]
  ------------------
  119|  8.09k|                        {
  120|  8.09k|                            return OpCode::AND;
  121|  8.09k|                        }
  122|  24.9k|                        break;
  123|       |
  124|  24.9k|                    case 'D':
  ------------------
  |  Branch (124:21): [True: 775, False: 854k]
  ------------------
  125|  20.8k|                    case 'd':
  ------------------
  |  Branch (125:21): [True: 20.0k, False: 835k]
  ------------------
  126|  20.8k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (126:29): [True: 14.3k, False: 6.53k]
  |  Branch (126:29): [True: 3.79k, False: 17.0k]
  |  Branch (126:45): [True: 3.79k, False: 10.5k]
  ------------------
  127|  3.79k|                        {
  128|  3.79k|                            return OpCode::DIV;
  129|  3.79k|                        }
  130|  17.0k|                        break;
  131|       |
  132|  17.0k|                    case 'E':
  ------------------
  |  Branch (132:21): [True: 1.43k, False: 853k]
  ------------------
  133|  9.94k|                    case 'e':
  ------------------
  |  Branch (133:21): [True: 8.51k, False: 846k]
  ------------------
  134|  9.94k|                        if (ice(c2, 'Q'))
  ------------------
  |  Branch (134:29): [True: 6.40k, False: 3.54k]
  ------------------
  135|  6.40k|                        {
  136|  6.40k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (136:33): [True: 673, False: 5.73k]
  ------------------
  137|    673|                            {
  138|    673|                                return OpCode::EQD;
  139|    673|                            }
  140|  5.73k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (140:38): [True: 3.70k, False: 2.02k]
  ------------------
  141|  3.70k|                            {
  142|  3.70k|                                return OpCode::EQF;
  143|  3.70k|                            }
  144|  6.40k|                        }
  145|  5.57k|                        break;
  146|       |
  147|  14.4k|                    case 'G':
  ------------------
  |  Branch (147:21): [True: 14.4k, False: 840k]
  ------------------
  148|  32.8k|                    case 'g':
  ------------------
  |  Branch (148:21): [True: 18.4k, False: 836k]
  ------------------
  149|  32.8k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (149:29): [True: 10.6k, False: 22.2k]
  ------------------
  150|  10.6k|                        {
  151|  10.6k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (151:33): [True: 3.62k, False: 7.02k]
  ------------------
  152|  3.62k|                            {
  153|  3.62k|                                return OpCode::GED;
  154|  3.62k|                            }
  155|  7.02k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (155:38): [True: 3.07k, False: 3.94k]
  ------------------
  156|  3.07k|                            {
  157|  3.07k|                                return OpCode::GEF;
  158|  3.07k|                            }
  159|  10.6k|                        }
  160|  22.2k|                        else if (ice(c2, 'T'))
  ------------------
  |  Branch (160:34): [True: 14.1k, False: 8.11k]
  ------------------
  161|  14.1k|                        {
  162|  14.1k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (162:33): [True: 4.37k, False: 9.73k]
  ------------------
  163|  4.37k|                            {
  164|  4.37k|                                return OpCode::GTD;
  165|  4.37k|                            }
  166|  9.73k|                            if (ice(c3, 'F'))
  ------------------
  |  Branch (166:33): [True: 3.76k, False: 5.96k]
  ------------------
  167|  3.76k|                            {
  168|  3.76k|                                return OpCode::GTF;
  169|  3.76k|                            }
  170|  9.73k|                        }
  171|  18.0k|                        break;
  172|       |
  173|  20.8k|                    case 'J':
  ------------------
  |  Branch (173:21): [True: 20.8k, False: 834k]
  ------------------
  174|  26.4k|                    case 'j':
  ------------------
  |  Branch (174:21): [True: 5.63k, False: 849k]
  ------------------
  175|  26.4k|                        if (ice(c2, 'A') && ice(c3, 'L'))
  ------------------
  |  Branch (175:29): [True: 7.08k, False: 19.3k]
  |  Branch (175:29): [True: 2.86k, False: 23.6k]
  |  Branch (175:45): [True: 2.86k, False: 4.22k]
  ------------------
  176|  2.86k|                        {
  177|  2.86k|                            return OpCode::JAL;
  178|  2.86k|                        }
  179|  23.6k|                        break;
  180|       |
  181|  23.6k|                    case 'L':
  ------------------
  |  Branch (181:21): [True: 22.2k, False: 832k]
  ------------------
  182|  93.9k|                    case 'l':
  ------------------
  |  Branch (182:21): [True: 71.6k, False: 783k]
  ------------------
  183|  93.9k|                        switch (c2)
  ------------------
  |  Branch (183:33): [True: 10.4k, False: 83.5k]
  ------------------
  184|  93.9k|                        {
  185|  6.60k|                            case 'B':
  ------------------
  |  Branch (185:29): [True: 6.60k, False: 87.3k]
  ------------------
  186|  12.1k|                            case 'b':
  ------------------
  |  Branch (186:29): [True: 5.56k, False: 88.3k]
  ------------------
  187|  12.1k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (187:37): [True: 5.55k, False: 6.61k]
  ------------------
  188|  5.55k|                                {
  189|  5.55k|                                    return OpCode::LBU;
  190|  5.55k|                                }
  191|  6.61k|                                break;
  192|       |
  193|  6.61k|                            case 'E':
  ------------------
  |  Branch (193:29): [True: 2.60k, False: 91.3k]
  ------------------
  194|  12.9k|                            case 'e':
  ------------------
  |  Branch (194:29): [True: 10.3k, False: 83.5k]
  ------------------
  195|  12.9k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (195:37): [True: 8.12k, False: 4.82k]
  ------------------
  196|  8.12k|                                {
  197|  8.12k|                                    return OpCode::LED;
  198|  8.12k|                                }
  199|  4.82k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (199:42): [True: 2.56k, False: 2.26k]
  ------------------
  200|  2.56k|                                {
  201|  2.56k|                                    return OpCode::LEF;
  202|  2.56k|                                }
  203|  2.26k|                                break;
  204|       |
  205|  4.41k|                            case 'H':
  ------------------
  |  Branch (205:29): [True: 4.41k, False: 89.5k]
  ------------------
  206|  30.7k|                            case 'h':
  ------------------
  |  Branch (206:29): [True: 26.3k, False: 67.5k]
  ------------------
  207|  30.7k|                                if (ice(c3, 'I'))
  ------------------
  |  Branch (207:37): [True: 7.92k, False: 22.8k]
  ------------------
  208|  7.92k|                                {
  209|  7.92k|                                    return OpCode::LHI;
  210|  7.92k|                                }
  211|  22.8k|                                else if (ice(c3, 'U'))
  ------------------
  |  Branch (211:42): [True: 7.71k, False: 15.1k]
  ------------------
  212|  7.71k|                                {
  213|  7.71k|                                    return OpCode::LHU;
  214|  7.71k|                                }
  215|  15.1k|                                break;
  216|       |
  217|  15.1k|                            case 'T':
  ------------------
  |  Branch (217:29): [True: 7.35k, False: 86.5k]
  ------------------
  218|  14.3k|                            case 't':
  ------------------
  |  Branch (218:29): [True: 7.01k, False: 86.9k]
  ------------------
  219|  14.3k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (219:37): [True: 8.00k, False: 6.36k]
  ------------------
  220|  8.00k|                                {
  221|  8.00k|                                    return OpCode::LTD;
  222|  8.00k|                                }
  223|  6.36k|                                else if (ice(c3, 'F'))
  ------------------
  |  Branch (223:42): [True: 2.23k, False: 4.13k]
  ------------------
  224|  2.23k|                                {
  225|  2.23k|                                    return OpCode::LTF;
  226|  2.23k|                                }
  227|  4.13k|                                break;
  228|       |
  229|  4.13k|                            case 'W':
  ------------------
  |  Branch (229:29): [True: 3.18k, False: 90.7k]
  ------------------
  230|  13.2k|                            case 'w':
  ------------------
  |  Branch (230:29): [True: 10.0k, False: 83.8k]
  ------------------
  231|  13.2k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (231:37): [True: 8.93k, False: 4.30k]
  ------------------
  232|  8.93k|                                {
  233|  8.93k|                                    return OpCode::LWU;
  234|  8.93k|                                }
  235|  4.30k|                                break;
  236|  93.9k|                        }
  237|  42.8k|                        break;
  238|       |
  239|  42.8k|                    case 'N':
  ------------------
  |  Branch (239:21): [True: 11.0k, False: 844k]
  ------------------
  240|  20.6k|                    case 'n':
  ------------------
  |  Branch (240:21): [True: 9.55k, False: 845k]
  ------------------
  241|  20.6k|                        if (ice(c2, 'E'))
  ------------------
  |  Branch (241:29): [True: 9.34k, False: 11.2k]
  ------------------
  242|  9.34k|                        {
  243|  9.34k|                            if (ice(c3, 'D'))
  ------------------
  |  Branch (243:33): [True: 2.08k, False: 7.25k]
  ------------------
  244|  2.08k|                            {
  245|  2.08k|                                return OpCode::NED;
  246|  2.08k|                            }
  247|  7.25k|                            else if (ice(c3, 'F'))
  ------------------
  |  Branch (247:38): [True: 2.12k, False: 5.13k]
  ------------------
  248|  2.12k|                            {
  249|  2.12k|                                return OpCode::NEF;
  250|  2.12k|                            }
  251|  9.34k|                        }
  252|  11.2k|                        else if (ice(c2, 'O') && ice(c3, 'P'))
  ------------------
  |  Branch (252:34): [True: 5.88k, False: 5.38k]
  |  Branch (252:34): [True: 3.40k, False: 7.86k]
  |  Branch (252:50): [True: 3.40k, False: 2.47k]
  ------------------
  253|  3.40k|                        {
  254|  3.40k|                            return OpCode::NOP;
  255|  3.40k|                        }
  256|       |
  257|  12.9k|                        break;
  258|       |
  259|  12.9k|                    case 'O':
  ------------------
  |  Branch (259:21): [True: 9.60k, False: 845k]
  ------------------
  260|  26.2k|                    case 'o':
  ------------------
  |  Branch (260:21): [True: 16.6k, False: 838k]
  ------------------
  261|  26.2k|                        if (ice(c2, 'R') && ice(c3, 'I'))
  ------------------
  |  Branch (261:29): [True: 7.86k, False: 18.3k]
  |  Branch (261:29): [True: 2.57k, False: 23.6k]
  |  Branch (261:45): [True: 2.57k, False: 5.29k]
  ------------------
  262|  2.57k|                        {
  263|  2.57k|                            return OpCode::ORI;
  264|  2.57k|                        }
  265|  23.6k|                        break;
  266|       |
  267|   104k|                    case 'S':
  ------------------
  |  Branch (267:21): [True: 104k, False: 750k]
  ------------------
  268|   158k|                    case 's':
  ------------------
  |  Branch (268:21): [True: 54.3k, False: 800k]
  ------------------
  269|   158k|                        switch (c2)
  ------------------
  |  Branch (269:33): [True: 26.3k, False: 132k]
  ------------------
  270|   158k|                        {
  271|  4.78k|                            case 'B':
  ------------------
  |  Branch (271:29): [True: 4.78k, False: 154k]
  ------------------
  272|  9.41k|                            case 'b':
  ------------------
  |  Branch (272:29): [True: 4.63k, False: 154k]
  ------------------
  273|  9.41k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (273:37): [True: 2.62k, False: 6.79k]
  ------------------
  274|  2.62k|                                {
  275|  2.62k|                                    return OpCode::SBU;
  276|  2.62k|                                }
  277|  6.79k|                                break;
  278|       |
  279|  6.79k|                            case 'E':
  ------------------
  |  Branch (279:29): [True: 4.10k, False: 154k]
  ------------------
  280|  11.5k|                            case 'e':
  ------------------
  |  Branch (280:29): [True: 7.42k, False: 151k]
  ------------------
  281|  11.5k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (281:37): [True: 5.41k, False: 6.11k]
  ------------------
  282|  5.41k|                                {
  283|  5.41k|                                    return OpCode::SEQ;
  284|  5.41k|                                }
  285|  6.11k|                                break;
  286|       |
  287|  6.11k|                            case 'G':
  ------------------
  |  Branch (287:29): [True: 2.77k, False: 156k]
  ------------------
  288|  14.2k|                            case 'g':
  ------------------
  |  Branch (288:29): [True: 11.4k, False: 147k]
  ------------------
  289|  14.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (289:37): [True: 4.14k, False: 10.0k]
  ------------------
  290|  4.14k|                                {
  291|  4.14k|                                    return OpCode::SGE;
  292|  4.14k|                                }
  293|  10.0k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (293:42): [True: 4.62k, False: 5.44k]
  ------------------
  294|  4.62k|                                {
  295|  4.62k|                                    return OpCode::SGT;
  296|  4.62k|                                }
  297|  5.44k|                                break;
  298|       |
  299|  5.44k|                            case 'H':
  ------------------
  |  Branch (299:29): [True: 2.75k, False: 156k]
  ------------------
  300|  8.86k|                            case 'h':
  ------------------
  |  Branch (300:29): [True: 6.10k, False: 152k]
  ------------------
  301|  8.86k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (301:37): [True: 5.44k, False: 3.42k]
  ------------------
  302|  5.44k|                                {
  303|  5.44k|                                    return OpCode::SHU;
  304|  5.44k|                                }
  305|  3.42k|                                break;
  306|       |
  307|  5.05k|                            case 'L':
  ------------------
  |  Branch (307:29): [True: 5.05k, False: 153k]
  ------------------
  308|  23.9k|                            case 'l':
  ------------------
  |  Branch (308:29): [True: 18.9k, False: 139k]
  ------------------
  309|  23.9k|                                switch (c3)
  ------------------
  |  Branch (309:41): [True: 2.67k, False: 21.3k]
  ------------------
  310|  23.9k|                                {
  311|    148|                                    case 'A':
  ------------------
  |  Branch (311:37): [True: 148, False: 23.8k]
  ------------------
  312|  1.86k|                                    case 'a':
  ------------------
  |  Branch (312:37): [True: 1.72k, False: 22.2k]
  ------------------
  313|  1.86k|                                        return OpCode::SLA;
  314|       |
  315|  1.30k|                                    case 'E':
  ------------------
  |  Branch (315:37): [True: 1.30k, False: 22.6k]
  ------------------
  316|  8.58k|                                    case 'e':
  ------------------
  |  Branch (316:37): [True: 7.28k, False: 16.7k]
  ------------------
  317|  8.58k|                                        return OpCode::SLE;
  318|       |
  319|  2.02k|                                    case 'L':
  ------------------
  |  Branch (319:37): [True: 2.02k, False: 21.9k]
  ------------------
  320|  5.94k|                                    case 'l':
  ------------------
  |  Branch (320:37): [True: 3.91k, False: 20.0k]
  ------------------
  321|  5.94k|                                        return OpCode::SLL;
  322|       |
  323|    840|                                    case 'T':
  ------------------
  |  Branch (323:37): [True: 840, False: 23.1k]
  ------------------
  324|  4.92k|                                    case 't':
  ------------------
  |  Branch (324:37): [True: 4.08k, False: 19.9k]
  ------------------
  325|  4.92k|                                        return OpCode::SLT;
  326|  23.9k|                                }
  327|  2.67k|                                break;
  328|       |
  329|  2.67k|                            case 'N':
  ------------------
  |  Branch (329:29): [True: 2.30k, False: 156k]
  ------------------
  330|  12.5k|                            case 'n':
  ------------------
  |  Branch (330:29): [True: 10.2k, False: 148k]
  ------------------
  331|  12.5k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (331:37): [True: 8.83k, False: 3.75k]
  ------------------
  332|  8.83k|                                {
  333|  8.83k|                                    return OpCode::SNE;
  334|  8.83k|                                }
  335|  3.75k|                                break;
  336|       |
  337|  3.75k|                            case 'R':
  ------------------
  |  Branch (337:29): [True: 1.32k, False: 157k]
  ------------------
  338|  13.4k|                            case 'r':
  ------------------
  |  Branch (338:29): [True: 12.1k, False: 146k]
  ------------------
  339|  13.4k|                                if (ice(c3, 'A'))
  ------------------
  |  Branch (339:37): [True: 4.88k, False: 8.60k]
  ------------------
  340|  4.88k|                                {
  341|  4.88k|                                    return OpCode::SRA;
  342|  4.88k|                                }
  343|  8.60k|                                else if (ice(c3, 'L'))
  ------------------
  |  Branch (343:42): [True: 5.30k, False: 3.29k]
  ------------------
  344|  5.30k|                                {
  345|  5.30k|                                    return OpCode::SRL;
  346|  5.30k|                                }
  347|  3.29k|                                break;
  348|       |
  349|  3.29k|                            case 'U':
  ------------------
  |  Branch (349:29): [True: 1.41k, False: 157k]
  ------------------
  350|  12.7k|                            case 'u':
  ------------------
  |  Branch (350:29): [True: 11.3k, False: 147k]
  ------------------
  351|  12.7k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (351:37): [True: 8.34k, False: 4.38k]
  ------------------
  352|  8.34k|                                {
  353|  8.34k|                                    return OpCode::SUB;
  354|  8.34k|                                }
  355|  4.38k|                                break;
  356|       |
  357|  4.38k|                            case 'W':
  ------------------
  |  Branch (357:29): [True: 643, False: 158k]
  ------------------
  358|  25.6k|                            case 'w':
  ------------------
  |  Branch (358:29): [True: 25.0k, False: 133k]
  ------------------
  359|  25.6k|                                if (ice(c3, 'U'))
  ------------------
  |  Branch (359:37): [True: 13.9k, False: 11.7k]
  ------------------
  360|  13.9k|                                {
  361|  13.9k|                                    return OpCode::SWU;
  362|  13.9k|                                }
  363|  11.7k|                                break;
  364|   158k|                        }
  365|       |
  366|  75.6k|                    case 'X':
  ------------------
  |  Branch (366:21): [True: 1.68k, False: 853k]
  ------------------
  367|  88.8k|                    case 'x':
  ------------------
  |  Branch (367:21): [True: 13.1k, False: 842k]
  ------------------
  368|  88.8k|                        if (ice(c2, 'O') && ice(c3, 'R'))
  ------------------
  |  Branch (368:29): [True: 17.8k, False: 71.0k]
  |  Branch (368:29): [True: 6.43k, False: 82.3k]
  |  Branch (368:45): [True: 6.43k, False: 11.3k]
  ------------------
  369|  6.43k|                        {
  370|  6.43k|                            return OpCode::XOR;
  371|  6.43k|                        }
  372|  82.3k|                        break;
  373|   855k|                }
  374|   564k|                break;
  375|   855k|            }
  376|       |
  377|       |            // 4 character OpCodes
  378|   679k|            case 4: {
  ------------------
  |  Branch (378:13): [True: 679k, False: 3.33M]
  ------------------
  379|   679k|                char c1 = token[0];
  380|   679k|                char c2 = token[1];
  381|   679k|                char c3 = token[2];
  382|   679k|                char c4 = token[3];
  383|       |
  384|   679k|                switch (c1)
  ------------------
  |  Branch (384:25): [True: 216k, False: 462k]
  ------------------
  385|   679k|                {
  386|  47.4k|                    case 'A':
  ------------------
  |  Branch (386:21): [True: 47.4k, False: 631k]
  ------------------
  387|  72.0k|                    case 'a':
  ------------------
  |  Branch (387:21): [True: 24.5k, False: 654k]
  ------------------
  388|  72.0k|                        switch (c2)
  ------------------
  |  Branch (388:33): [True: 13.9k, False: 58.0k]
  ------------------
  389|  72.0k|                        {
  390|  20.0k|                            case 'D':
  ------------------
  |  Branch (390:29): [True: 20.0k, False: 51.9k]
  ------------------
  391|  41.6k|                            case 'd':
  ------------------
  |  Branch (391:29): [True: 21.6k, False: 50.3k]
  ------------------
  392|  41.6k|                                if (ice(c3, 'D'))
  ------------------
  |  Branch (392:37): [True: 38.0k, False: 3.62k]
  ------------------
  393|  38.0k|                                {
  394|  38.0k|                                    switch (c4)
  ------------------
  |  Branch (394:45): [True: 2.27k, False: 35.7k]
  ------------------
  395|  38.0k|                                    {
  396|  4.91k|                                        case 'D':
  ------------------
  |  Branch (396:41): [True: 4.91k, False: 33.1k]
  ------------------
  397|  9.24k|                                        case 'd':
  ------------------
  |  Branch (397:41): [True: 4.32k, False: 33.7k]
  ------------------
  398|  9.24k|                                            return OpCode::ADDD;
  399|       |
  400|    280|                                        case 'F':
  ------------------
  |  Branch (400:41): [True: 280, False: 37.7k]
  ------------------
  401|  5.63k|                                        case 'f':
  ------------------
  |  Branch (401:41): [True: 5.35k, False: 32.7k]
  ------------------
  402|  5.63k|                                            return OpCode::ADDF;
  403|       |
  404|  13.5k|                                        case 'I':
  ------------------
  |  Branch (404:41): [True: 13.5k, False: 24.4k]
  ------------------
  405|  18.0k|                                        case 'i':
  ------------------
  |  Branch (405:41): [True: 4.50k, False: 33.5k]
  ------------------
  406|  18.0k|                                            return OpCode::ADDI;
  407|       |
  408|    512|                                        case 'U':
  ------------------
  |  Branch (408:41): [True: 512, False: 37.5k]
  ------------------
  409|  2.83k|                                        case 'u':
  ------------------
  |  Branch (409:41): [True: 2.31k, False: 35.7k]
  ------------------
  410|  2.83k|                                            return OpCode::ADDU;
  411|  38.0k|                                    }
  412|  38.0k|                                }
  413|  5.89k|                                break;
  414|       |
  415|  5.89k|                            case 'N':
  ------------------
  |  Branch (415:29): [True: 463, False: 71.5k]
  ------------------
  416|  16.3k|                            case 'n':
  ------------------
  |  Branch (416:29): [True: 15.8k, False: 56.1k]
  ------------------
  417|  16.3k|                                if (ice(c3, 'D') && ice(c4, 'I'))
  ------------------
  |  Branch (417:37): [True: 6.83k, False: 9.50k]
  |  Branch (417:37): [True: 3.01k, False: 13.3k]
  |  Branch (417:53): [True: 3.01k, False: 3.81k]
  ------------------
  418|  3.01k|                                {
  419|  3.01k|                                    return OpCode::ANDI;
  420|  3.01k|                                }
  421|       |
  422|  13.3k|                                break;
  423|  72.0k|                        }
  424|  33.2k|                        break;
  425|       |
  426|  33.2k|                    case 'B':
  ------------------
  |  Branch (426:21): [True: 19.9k, False: 659k]
  ------------------
  427|  42.8k|                    case 'b':
  ------------------
  |  Branch (427:21): [True: 22.9k, False: 656k]
  ------------------
  428|  42.8k|                        switch (c2)
  ------------------
  |  Branch (428:33): [True: 4.07k, False: 38.8k]
  ------------------
  429|  42.8k|                        {
  430|  2.30k|                            case 'E':
  ------------------
  |  Branch (430:29): [True: 2.30k, False: 40.5k]
  ------------------
  431|  10.1k|                            case 'e':
  ------------------
  |  Branch (431:29): [True: 7.81k, False: 35.0k]
  ------------------
  432|  10.1k|                                if (ice(c3, 'Q') && ice(c4, 'Z'))
  ------------------
  |  Branch (432:37): [True: 7.07k, False: 3.04k]
  |  Branch (432:37): [True: 4.04k, False: 6.07k]
  |  Branch (432:53): [True: 4.04k, False: 3.03k]
  ------------------
  433|  4.04k|                                {
  434|  4.04k|                                    return OpCode::BEQZ;
  435|  4.04k|                                }
  436|  6.07k|                                break;
  437|       |
  438|  6.07k|                            case 'F':
  ------------------
  |  Branch (438:29): [True: 3.39k, False: 39.4k]
  ------------------
  439|  16.1k|                            case 'f':
  ------------------
  |  Branch (439:29): [True: 12.7k, False: 30.1k]
  ------------------
  440|  16.1k|                                if (ice(c3, 'P'))
  ------------------
  |  Branch (440:37): [True: 14.9k, False: 1.19k]
  ------------------
  441|  14.9k|                                {
  442|  14.9k|                                    if (ice(c4, 'F'))
  ------------------
  |  Branch (442:41): [True: 9.23k, False: 5.67k]
  ------------------
  443|  9.23k|                                    {
  444|  9.23k|                                        return OpCode::BFPF;
  445|  9.23k|                                    }
  446|  5.67k|                                    else if (ice(c4, 'T'))
  ------------------
  |  Branch (446:46): [True: 3.00k, False: 2.67k]
  ------------------
  447|  3.00k|                                    {
  448|  3.00k|                                        return OpCode::BFPT;
  449|  3.00k|                                    }
  450|  14.9k|                                }
  451|  3.87k|                                break;
  452|       |
  453|  6.37k|                            case 'N':
  ------------------
  |  Branch (453:29): [True: 6.37k, False: 36.5k]
  ------------------
  454|  12.5k|                            case 'n':
  ------------------
  |  Branch (454:29): [True: 6.22k, False: 36.6k]
  ------------------
  455|  12.5k|                                if (ice(c3, 'E') && ice(c4, 'Z'))
  ------------------
  |  Branch (455:37): [True: 6.18k, False: 6.41k]
  |  Branch (455:37): [True: 2.04k, False: 10.5k]
  |  Branch (455:53): [True: 2.04k, False: 4.13k]
  ------------------
  456|  2.04k|                                {
  457|  2.04k|                                    return OpCode::BNEZ;
  458|  2.04k|                                }
  459|  42.8k|                        }
  460|  24.5k|                        break;
  461|       |
  462|  24.5k|                    case 'D':
  ------------------
  |  Branch (462:21): [True: 2.16k, False: 676k]
  ------------------
  463|  41.3k|                    case 'd':
  ------------------
  |  Branch (463:21): [True: 39.1k, False: 639k]
  ------------------
  464|  41.3k|                        if (ice(c2, 'I') && ice(c3, 'V'))
  ------------------
  |  Branch (464:29): [True: 36.8k, False: 4.47k]
  |  Branch (464:29): [True: 31.4k, False: 9.88k]
  |  Branch (464:45): [True: 31.4k, False: 5.41k]
  ------------------
  465|  31.4k|                        {
  466|  31.4k|                            switch (c4)
  ------------------
  |  Branch (466:37): [True: 3.61k, False: 27.7k]
  ------------------
  467|  31.4k|                            {
  468|  1.53k|                                case 'D':
  ------------------
  |  Branch (468:33): [True: 1.53k, False: 29.8k]
  ------------------
  469|  8.53k|                                case 'd':
  ------------------
  |  Branch (469:33): [True: 7.00k, False: 24.4k]
  ------------------
  470|  8.53k|                                    return OpCode::DIVD;
  471|       |
  472|    131|                                case 'F':
  ------------------
  |  Branch (472:33): [True: 131, False: 31.2k]
  ------------------
  473|  7.45k|                                case 'f':
  ------------------
  |  Branch (473:33): [True: 7.32k, False: 24.0k]
  ------------------
  474|  7.45k|                                    return OpCode::DIVF;
  475|       |
  476|     19|                                case 'I':
  ------------------
  |  Branch (476:33): [True: 19, False: 31.3k]
  ------------------
  477|  4.84k|                                case 'i':
  ------------------
  |  Branch (477:33): [True: 4.82k, False: 26.5k]
  ------------------
  478|  4.84k|                                    return OpCode::DIVI;
  479|       |
  480|    301|                                case 'U':
  ------------------
  |  Branch (480:33): [True: 301, False: 31.1k]
  ------------------
  481|  6.95k|                                case 'u':
  ------------------
  |  Branch (481:33): [True: 6.65k, False: 24.7k]
  ------------------
  482|  6.95k|                                    return OpCode::DIVU;
  483|  31.4k|                            }
  484|  31.4k|                        }
  485|  13.5k|                        break;
  486|       |
  487|  16.4k|                    case 'H':
  ------------------
  |  Branch (487:21): [True: 16.4k, False: 662k]
  ------------------
  488|  23.5k|                    case 'h':
  ------------------
  |  Branch (488:21): [True: 7.08k, False: 671k]
  ------------------
  489|  23.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (489:29): [True: 12.9k, False: 10.6k]
  |  Branch (489:29): [True: 6.18k, False: 17.3k]
  |  Branch (489:45): [True: 9.99k, False: 2.91k]
  |  Branch (489:61): [True: 6.18k, False: 3.81k]
  ------------------
  490|  6.18k|                        {
  491|  6.18k|                            return OpCode::HALT;
  492|  6.18k|                        }
  493|  17.3k|                        break;
  494|       |
  495|  17.3k|                    case 'J':
  ------------------
  |  Branch (495:21): [True: 16.8k, False: 662k]
  ------------------
  496|  20.5k|                    case 'j':
  ------------------
  |  Branch (496:21): [True: 3.64k, False: 675k]
  ------------------
  497|  20.5k|                        if (ice(c2, 'A') && ice(c3, 'L') && ice(c4, 'R'))
  ------------------
  |  Branch (497:29): [True: 11.8k, False: 8.69k]
  |  Branch (497:29): [True: 5.84k, False: 14.6k]
  |  Branch (497:45): [True: 10.0k, False: 1.75k]
  |  Branch (497:61): [True: 5.84k, False: 4.22k]
  ------------------
  498|  5.84k|                        {
  499|  5.84k|                            return OpCode::JALR;
  500|  5.84k|                        }
  501|  14.6k|                        break;
  502|       |
  503|  14.6k|                    case 'M':
  ------------------
  |  Branch (503:21): [True: 11.8k, False: 667k]
  ------------------
  504|  28.5k|                    case 'm':
  ------------------
  |  Branch (504:21): [True: 16.7k, False: 662k]
  ------------------
  505|  28.5k|                        if (ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (505:29): [True: 12.3k, False: 16.2k]
  |  Branch (505:29): [True: 10.4k, False: 18.1k]
  |  Branch (505:45): [True: 10.4k, False: 1.97k]
  ------------------
  506|  10.4k|                        {
  507|  10.4k|                            if (ice(c4, 'D'))
  ------------------
  |  Branch (507:33): [True: 4.28k, False: 6.13k]
  ------------------
  508|  4.28k|                            {
  509|  4.28k|                                return OpCode::MOVD;
  510|  4.28k|                            }
  511|  6.13k|                            else if (ice(c4, 'F'))
  ------------------
  |  Branch (511:38): [True: 2.96k, False: 3.16k]
  ------------------
  512|  2.96k|                            {
  513|  2.96k|                                return OpCode::MOVF;
  514|  2.96k|                            }
  515|  10.4k|                        }
  516|  18.1k|                        else if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (516:34): [True: 12.1k, False: 6.03k]
  |  Branch (516:34): [True: 3.62k, False: 14.5k]
  |  Branch (516:50): [True: 5.85k, False: 6.29k]
  |  Branch (516:66): [True: 3.62k, False: 2.22k]
  ------------------
  517|  3.62k|                        {
  518|  3.62k|                            return OpCode::MULT;
  519|  3.62k|                        }
  520|  17.7k|                        break;
  521|       |
  522|   124k|                    case 'S':
  ------------------
  |  Branch (522:21): [True: 124k, False: 554k]
  ------------------
  523|   195k|                    case 's':
  ------------------
  |  Branch (523:21): [True: 71.1k, False: 607k]
  ------------------
  524|   195k|                        switch (c2)
  ------------------
  |  Branch (524:33): [True: 30.0k, False: 165k]
  ------------------
  525|   195k|                        {
  526|  1.60k|                            case 'E':
  ------------------
  |  Branch (526:29): [True: 1.60k, False: 193k]
  ------------------
  527|  16.2k|                            case 'e':
  ------------------
  |  Branch (527:29): [True: 14.6k, False: 180k]
  ------------------
  528|  16.2k|                                if (ice(c3, 'Q'))
  ------------------
  |  Branch (528:37): [True: 9.59k, False: 6.67k]
  ------------------
  529|  9.59k|                                {
  530|  9.59k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (530:41): [True: 2.43k, False: 7.16k]
  ------------------
  531|  2.43k|                                    {
  532|  2.43k|                                        return OpCode::SEQI;
  533|  2.43k|                                    }
  534|  7.16k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (534:46): [True: 2.44k, False: 4.71k]
  ------------------
  535|  2.44k|                                    {
  536|  2.44k|                                        return OpCode::SEQU;
  537|  2.44k|                                    }
  538|  9.59k|                                }
  539|  11.3k|                                break;
  540|       |
  541|  11.3k|                            case 'G':
  ------------------
  |  Branch (541:29): [True: 8.09k, False: 187k]
  ------------------
  542|  31.1k|                            case 'g':
  ------------------
  |  Branch (542:29): [True: 23.0k, False: 172k]
  ------------------
  543|  31.1k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (543:37): [True: 14.4k, False: 16.6k]
  ------------------
  544|  14.4k|                                {
  545|  14.4k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (545:41): [True: 4.65k, False: 9.80k]
  ------------------
  546|  4.65k|                                    {
  547|  4.65k|                                        return OpCode::SGEI;
  548|  4.65k|                                    }
  549|  9.80k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (549:46): [True: 4.67k, False: 5.13k]
  ------------------
  550|  4.67k|                                    {
  551|  4.67k|                                        return OpCode::SGEU;
  552|  4.67k|                                    }
  553|  14.4k|                                }
  554|  16.6k|                                else if (ice(c3, 'T'))
  ------------------
  |  Branch (554:42): [True: 8.76k, False: 7.89k]
  ------------------
  555|  8.76k|                                {
  556|  8.76k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (556:41): [True: 3.03k, False: 5.73k]
  ------------------
  557|  3.03k|                                    {
  558|  3.03k|                                        return OpCode::SGTI;
  559|  3.03k|                                    }
  560|  5.73k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (560:46): [True: 3.48k, False: 2.25k]
  ------------------
  561|  3.48k|                                    {
  562|  3.48k|                                        return OpCode::SGTU;
  563|  3.48k|                                    }
  564|  8.76k|                                }
  565|  15.2k|                                break;
  566|       |
  567|  15.2k|                            case 'L':
  ------------------
  |  Branch (567:29): [True: 7.31k, False: 188k]
  ------------------
  568|  51.4k|                            case 'l':
  ------------------
  |  Branch (568:29): [True: 44.0k, False: 151k]
  ------------------
  569|  51.4k|                                switch (c3)
  ------------------
  |  Branch (569:41): [True: 3.13k, False: 48.2k]
  ------------------
  570|  51.4k|                                {
  571|  3.25k|                                    case 'A':
  ------------------
  |  Branch (571:37): [True: 3.25k, False: 48.1k]
  ------------------
  572|  6.29k|                                    case 'a':
  ------------------
  |  Branch (572:37): [True: 3.04k, False: 48.3k]
  ------------------
  573|  6.29k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (573:45): [True: 2.54k, False: 3.74k]
  ------------------
  574|  2.54k|                                        {
  575|  2.54k|                                            return OpCode::SLAI;
  576|  2.54k|                                        }
  577|  3.74k|                                        break;
  578|       |
  579|  3.74k|                                    case 'E':
  ------------------
  |  Branch (579:37): [True: 3.49k, False: 47.9k]
  ------------------
  580|  9.52k|                                    case 'e':
  ------------------
  |  Branch (580:37): [True: 6.02k, False: 45.3k]
  ------------------
  581|  9.52k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (581:45): [True: 1.71k, False: 7.80k]
  ------------------
  582|  1.71k|                                        {
  583|  1.71k|                                            return OpCode::SLEI;
  584|  1.71k|                                        }
  585|  7.80k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (585:50): [True: 3.40k, False: 4.40k]
  ------------------
  586|  3.40k|                                        {
  587|  3.40k|                                            return OpCode::SLEU;
  588|  3.40k|                                        }
  589|  4.40k|                                        break;
  590|       |
  591|  4.40k|                                    case 'L':
  ------------------
  |  Branch (591:37): [True: 673, False: 50.7k]
  ------------------
  592|  11.1k|                                    case 'l':
  ------------------
  |  Branch (592:37): [True: 10.4k, False: 40.9k]
  ------------------
  593|  11.1k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (593:45): [True: 4.05k, False: 7.07k]
  ------------------
  594|  4.05k|                                        {
  595|  4.05k|                                            return OpCode::SLLI;
  596|  4.05k|                                        }
  597|  7.07k|                                        break;
  598|       |
  599|  7.07k|                                    case 'T':
  ------------------
  |  Branch (599:37): [True: 1.09k, False: 50.3k]
  ------------------
  600|  21.3k|                                    case 't':
  ------------------
  |  Branch (600:37): [True: 20.2k, False: 31.1k]
  ------------------
  601|  21.3k|                                        if (ice(c4, 'I'))
  ------------------
  |  Branch (601:45): [True: 5.89k, False: 15.4k]
  ------------------
  602|  5.89k|                                        {
  603|  5.89k|                                            return OpCode::SLTI;
  604|  5.89k|                                        }
  605|  15.4k|                                        else if (ice(c4, 'U'))
  ------------------
  |  Branch (605:50): [True: 9.25k, False: 6.18k]
  ------------------
  606|  9.25k|                                        {
  607|  9.25k|                                            return OpCode::SLTU;
  608|  9.25k|                                        }
  609|  6.18k|                                        break;
  610|  51.4k|                                }
  611|       |
  612|  24.7k|                            case 'N':
  ------------------
  |  Branch (612:29): [True: 169, False: 195k]
  ------------------
  613|  38.2k|                            case 'n':
  ------------------
  |  Branch (613:29): [True: 13.5k, False: 182k]
  ------------------
  614|  38.2k|                                if (ice(c3, 'E'))
  ------------------
  |  Branch (614:37): [True: 17.7k, False: 20.5k]
  ------------------
  615|  17.7k|                                {
  616|  17.7k|                                    if (ice(c4, 'I'))
  ------------------
  |  Branch (616:41): [True: 4.30k, False: 13.4k]
  ------------------
  617|  4.30k|                                    {
  618|  4.30k|                                        return OpCode::SNEI;
  619|  4.30k|                                    }
  620|  13.4k|                                    else if (ice(c4, 'U'))
  ------------------
  |  Branch (620:46): [True: 5.09k, False: 8.33k]
  ------------------
  621|  5.09k|                                    {
  622|  5.09k|                                        return OpCode::SNEU;
  623|  5.09k|                                    }
  624|  17.7k|                                }
  625|  28.8k|                                break;
  626|       |
  627|  28.8k|                            case 'R':
  ------------------
  |  Branch (627:29): [True: 543, False: 195k]
  ------------------
  628|  17.6k|                            case 'r':
  ------------------
  |  Branch (628:29): [True: 17.0k, False: 178k]
  ------------------
  629|  17.6k|                                if (ice(c3, 'A') && ice(c4, 'I'))
  ------------------
  |  Branch (629:37): [True: 9.04k, False: 8.59k]
  |  Branch (629:37): [True: 3.92k, False: 13.7k]
  |  Branch (629:53): [True: 3.92k, False: 5.12k]
  ------------------
  630|  3.92k|                                {
  631|  3.92k|                                    return OpCode::SRAI;
  632|  3.92k|                                }
  633|  13.7k|                                else if (ice(c3, 'L') && ice(c4, 'I'))
  ------------------
  |  Branch (633:42): [True: 8.52k, False: 5.19k]
  |  Branch (633:42): [True: 3.73k, False: 9.98k]
  |  Branch (633:58): [True: 3.73k, False: 4.79k]
  ------------------
  634|  3.73k|                                {
  635|  3.73k|                                    return OpCode::SRLI;
  636|  3.73k|                                }
  637|  9.98k|                                break;
  638|       |
  639|  14.0k|                            case 'U':
  ------------------
  |  Branch (639:29): [True: 14.0k, False: 181k]
  ------------------
  640|  35.3k|                            case 'u':
  ------------------
  |  Branch (640:29): [True: 21.3k, False: 174k]
  ------------------
  641|  35.3k|                                if (ice(c3, 'B'))
  ------------------
  |  Branch (641:37): [True: 30.0k, False: 5.34k]
  ------------------
  642|  30.0k|                                {
  643|  30.0k|                                    switch (c4)
  ------------------
  |  Branch (643:45): [True: 4.07k, False: 25.9k]
  ------------------
  644|  30.0k|                                    {
  645|    265|                                        case 'D':
  ------------------
  |  Branch (645:41): [True: 265, False: 29.7k]
  ------------------
  646|  3.91k|                                        case 'd':
  ------------------
  |  Branch (646:41): [True: 3.64k, False: 26.3k]
  ------------------
  647|  3.91k|                                            return OpCode::SUBD;
  648|       |
  649|    859|                                        case 'F':
  ------------------
  |  Branch (649:41): [True: 859, False: 29.1k]
  ------------------
  650|  3.24k|                                        case 'f':
  ------------------
  |  Branch (650:41): [True: 2.38k, False: 27.6k]
  ------------------
  651|  3.24k|                                            return OpCode::SUBF;
  652|       |
  653|  2.86k|                                        case 'I':
  ------------------
  |  Branch (653:41): [True: 2.86k, False: 27.1k]
  ------------------
  654|  5.77k|                                        case 'i':
  ------------------
  |  Branch (654:41): [True: 2.90k, False: 27.1k]
  ------------------
  655|  5.77k|                                            return OpCode::SUBI;
  656|       |
  657|  7.67k|                                        case 'U':
  ------------------
  |  Branch (657:41): [True: 7.67k, False: 22.3k]
  ------------------
  658|  13.0k|                                        case 'u':
  ------------------
  |  Branch (658:41): [True: 5.34k, False: 24.6k]
  ------------------
  659|  13.0k|                                            return OpCode::SUBU;
  660|  30.0k|                                    }
  661|  30.0k|                                }
  662|  9.41k|                                break;
  663|   195k|                        }
  664|   104k|                        break;
  665|       |
  666|   104k|                    case 'T':
  ------------------
  |  Branch (666:21): [True: 4.74k, False: 674k]
  ------------------
  667|  18.9k|                    case 't':
  ------------------
  |  Branch (667:21): [True: 14.2k, False: 664k]
  ------------------
  668|  18.9k|                        if (ice(c2, 'R') && ice(c3, 'A') && ice(c4, 'P'))
  ------------------
  |  Branch (668:29): [True: 9.40k, False: 9.59k]
  |  Branch (668:29): [True: 3.03k, False: 15.9k]
  |  Branch (668:45): [True: 4.80k, False: 4.59k]
  |  Branch (668:61): [True: 3.03k, False: 1.77k]
  ------------------
  669|  3.03k|                        {
  670|  3.03k|                            return OpCode::TRAP;
  671|  3.03k|                        }
  672|  15.9k|                        break;
  673|  15.9k|                    case 'X':
  ------------------
  |  Branch (673:21): [True: 3.37k, False: 675k]
  ------------------
  674|  18.9k|                    case 'x':
  ------------------
  |  Branch (674:21): [True: 15.5k, False: 663k]
  ------------------
  675|  18.9k|                        if (ice(c2, 'O') && ice(c3, 'R') && ice(c4, 'I'))
  ------------------
  |  Branch (675:29): [True: 13.2k, False: 5.65k]
  |  Branch (675:29): [True: 3.02k, False: 15.8k]
  |  Branch (675:45): [True: 8.53k, False: 4.73k]
  |  Branch (675:61): [True: 3.02k, False: 5.50k]
  ------------------
  676|  3.02k|                        {
  677|  3.02k|                            return OpCode::XORI;
  678|  3.02k|                        }
  679|  15.8k|                        break;
  680|   679k|                }
  681|   474k|                break;
  682|   679k|            }
  683|       |
  684|       |            // 5 character OpCodes
  685|   474k|            case 5: {
  ------------------
  |  Branch (685:13): [True: 394k, False: 3.61M]
  ------------------
  686|   394k|                char c1 = token[0];
  687|   394k|                char c2 = token[1];
  688|   394k|                char c3 = token[2];
  689|   394k|                char c4 = token[3];
  690|   394k|                char c5 = token[4];
  691|       |
  692|   394k|                switch (c1)
  ------------------
  |  Branch (692:25): [True: 168k, False: 225k]
  ------------------
  693|   394k|                {
  694|  20.3k|                    case 'A':
  ------------------
  |  Branch (694:21): [True: 20.3k, False: 374k]
  ------------------
  695|  34.0k|                    case 'a':
  ------------------
  |  Branch (695:21): [True: 13.6k, False: 381k]
  ------------------
  696|  34.0k|                        if (ice(c2, 'D') && ice(c3, 'D') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (696:29): [True: 22.3k, False: 11.7k]
  |  Branch (696:29): [True: 7.78k, False: 26.2k]
  |  Branch (696:45): [True: 18.5k, False: 3.80k]
  |  Branch (696:61): [True: 10.3k, False: 8.19k]
  |  Branch (696:77): [True: 7.78k, False: 2.55k]
  ------------------
  697|  7.78k|                        {
  698|  7.78k|                            return OpCode::ADDUI;
  699|  7.78k|                        }
  700|  26.2k|                        break;
  701|       |
  702|  26.2k|                    case 'D':
  ------------------
  |  Branch (702:21): [True: 2.52k, False: 392k]
  ------------------
  703|  47.8k|                    case 'd':
  ------------------
  |  Branch (703:21): [True: 45.2k, False: 349k]
  ------------------
  704|  47.8k|                        if (ice(c2, 'I') && ice(c3, 'V') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (704:29): [True: 44.0k, False: 3.73k]
  |  Branch (704:29): [True: 3.98k, False: 43.8k]
  |  Branch (704:45): [True: 37.8k, False: 6.23k]
  |  Branch (704:61): [True: 15.8k, False: 21.9k]
  |  Branch (704:77): [True: 3.98k, False: 11.8k]
  ------------------
  705|  3.98k|                        {
  706|  3.98k|                            return OpCode::DIVUI;
  707|  3.98k|                        }
  708|  43.8k|                        break;
  709|       |
  710|  43.8k|                    case 'M':
  ------------------
  |  Branch (710:21): [True: 17.5k, False: 377k]
  ------------------
  711|  41.6k|                    case 'm':
  ------------------
  |  Branch (711:21): [True: 24.1k, False: 370k]
  ------------------
  712|  41.6k|                        if (ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T'))
  ------------------
  |  Branch (712:29): [True: 30.8k, False: 10.8k]
  |  Branch (712:29): [True: 16.3k, False: 25.3k]
  |  Branch (712:45): [True: 18.4k, False: 12.3k]
  |  Branch (712:61): [True: 16.3k, False: 2.10k]
  ------------------
  713|  16.3k|                        {
  714|  16.3k|                            switch (c5)
  ------------------
  |  Branch (714:37): [True: 4.68k, False: 11.6k]
  ------------------
  715|  16.3k|                            {
  716|    585|                                case 'D':
  ------------------
  |  Branch (716:33): [True: 585, False: 15.7k]
  ------------------
  717|  2.11k|                                case 'd':
  ------------------
  |  Branch (717:33): [True: 1.52k, False: 14.8k]
  ------------------
  718|  2.11k|                                    return OpCode::MULTD;
  719|       |
  720|  1.19k|                                case 'F':
  ------------------
  |  Branch (720:33): [True: 1.19k, False: 15.1k]
  ------------------
  721|  4.98k|                                case 'f':
  ------------------
  |  Branch (721:33): [True: 3.79k, False: 12.5k]
  ------------------
  722|  4.98k|                                    return OpCode::MULTF;
  723|       |
  724|    139|                                case 'I':
  ------------------
  |  Branch (724:33): [True: 139, False: 16.1k]
  ------------------
  725|  2.16k|                                case 'i':
  ------------------
  |  Branch (725:33): [True: 2.02k, False: 14.3k]
  ------------------
  726|  2.16k|                                    return OpCode::MULTI;
  727|       |
  728|  1.29k|                                case 'U':
  ------------------
  |  Branch (728:33): [True: 1.29k, False: 15.0k]
  ------------------
  729|  2.37k|                                case 'u':
  ------------------
  |  Branch (729:33): [True: 1.08k, False: 15.2k]
  ------------------
  730|  2.37k|                                    return OpCode::MULTU;
  731|  16.3k|                            }
  732|  16.3k|                        }
  733|  30.0k|                        break;
  734|       |
  735|  53.4k|                    case 'S':
  ------------------
  |  Branch (735:21): [True: 53.4k, False: 341k]
  ------------------
  736|   102k|                    case 's':
  ------------------
  |  Branch (736:21): [True: 48.8k, False: 345k]
  ------------------
  737|   102k|                        switch (c2)
  ------------------
  |  Branch (737:33): [True: 20.3k, False: 81.8k]
  ------------------
  738|   102k|                        {
  739|    499|                            case 'E':
  ------------------
  |  Branch (739:29): [True: 499, False: 101k]
  ------------------
  740|  11.3k|                            case 'e':
  ------------------
  |  Branch (740:29): [True: 10.8k, False: 91.3k]
  ------------------
  741|  11.3k|                                if (ice(c3, 'Q') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (741:37): [True: 7.82k, False: 3.53k]
  |  Branch (741:37): [True: 2.20k, False: 9.16k]
  |  Branch (741:53): [True: 4.22k, False: 3.60k]
  |  Branch (741:69): [True: 2.20k, False: 2.01k]
  ------------------
  742|  2.20k|                                {
  743|  2.20k|                                    return OpCode::SEQUI;
  744|  2.20k|                                }
  745|  9.16k|                                break;
  746|       |
  747|  9.16k|                            case 'G':
  ------------------
  |  Branch (747:29): [True: 3.39k, False: 98.8k]
  ------------------
  748|  17.2k|                            case 'g':
  ------------------
  |  Branch (748:29): [True: 13.8k, False: 88.4k]
  ------------------
  749|  17.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (749:37): [True: 8.06k, False: 9.15k]
  |  Branch (749:37): [True: 4.11k, False: 13.1k]
  |  Branch (749:53): [True: 5.82k, False: 2.23k]
  |  Branch (749:69): [True: 4.11k, False: 1.71k]
  ------------------
  750|  4.11k|                                {
  751|  4.11k|                                    return OpCode::SGEUI;
  752|  4.11k|                                }
  753|  13.1k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (753:42): [True: 8.07k, False: 5.02k]
  |  Branch (753:42): [True: 2.24k, False: 10.8k]
  |  Branch (753:58): [True: 5.18k, False: 2.89k]
  |  Branch (753:74): [True: 2.24k, False: 2.93k]
  ------------------
  754|  2.24k|                                {
  755|  2.24k|                                    return OpCode::SGTUI;
  756|  2.24k|                                }
  757|  10.8k|                                break;
  758|       |
  759|  10.8k|                            case 'L':
  ------------------
  |  Branch (759:29): [True: 5.95k, False: 96.2k]
  ------------------
  760|  25.2k|                            case 'l':
  ------------------
  |  Branch (760:29): [True: 19.2k, False: 82.9k]
  ------------------
  761|  25.2k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (761:37): [True: 6.89k, False: 18.3k]
  |  Branch (761:37): [True: 1.50k, False: 23.7k]
  |  Branch (761:53): [True: 4.76k, False: 2.12k]
  |  Branch (761:69): [True: 1.50k, False: 3.25k]
  ------------------
  762|  1.50k|                                {
  763|  1.50k|                                    return OpCode::SLEUI;
  764|  1.50k|                                }
  765|  23.7k|                                else if (ice(c3, 'T') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (765:42): [True: 14.2k, False: 9.43k]
  |  Branch (765:42): [True: 2.75k, False: 20.9k]
  |  Branch (765:58): [True: 9.12k, False: 5.15k]
  |  Branch (765:74): [True: 2.75k, False: 6.37k]
  ------------------
  766|  2.75k|                                {
  767|  2.75k|                                    return OpCode::SLTUI;
  768|  2.75k|                                }
  769|  20.9k|                                break;
  770|       |
  771|  20.9k|                            case 'N':
  ------------------
  |  Branch (771:29): [True: 182, False: 102k]
  ------------------
  772|  12.0k|                            case 'n':
  ------------------
  |  Branch (772:29): [True: 11.9k, False: 90.3k]
  ------------------
  773|  12.0k|                                if (ice(c3, 'E') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (773:37): [True: 11.1k, False: 918]
  |  Branch (773:37): [True: 3.14k, False: 8.95k]
  |  Branch (773:53): [True: 8.50k, False: 2.67k]
  |  Branch (773:69): [True: 3.14k, False: 5.36k]
  ------------------
  774|  3.14k|                                {
  775|  3.14k|                                    return OpCode::SNEUI;
  776|  3.14k|                                }
  777|  8.95k|                                break;
  778|       |
  779|  8.95k|                            case 'U':
  ------------------
  |  Branch (779:29): [True: 909, False: 101k]
  ------------------
  780|  15.9k|                            case 'u':
  ------------------
  |  Branch (780:29): [True: 15.0k, False: 87.2k]
  ------------------
  781|  15.9k|                                if (ice(c3, 'B') && ice(c4, 'U') && ice(c5, 'I'))
  ------------------
  |  Branch (781:37): [True: 14.2k, False: 1.63k]
  |  Branch (781:37): [True: 4.59k, False: 11.3k]
  |  Branch (781:53): [True: 10.0k, False: 4.29k]
  |  Branch (781:69): [True: 4.59k, False: 5.40k]
  ------------------
  782|  4.59k|                                {
  783|  4.59k|                                    return OpCode::SUBUI;
  784|  4.59k|                                }
  785|  11.3k|                                break;
  786|   102k|                        }
  787|       |
  788|  81.6k|                        break;
  789|   394k|                }
  790|       |
  791|   350k|                break;
  792|   394k|            }
  793|       |
  794|       |            // 6 character OpCodes
  795|   350k|            case 6: {
  ------------------
  |  Branch (795:13): [True: 203k, False: 3.80M]
  ------------------
  796|   203k|                char c1 = token[0];
  797|   203k|                char c2 = token[1];
  798|   203k|                char c3 = token[2];
  799|   203k|                char c4 = token[3];
  800|   203k|                char c5 = token[4];
  801|   203k|                char c6 = token[5];
  802|       |
  803|   203k|                if (ice(c1, 'C') && ice(c2, 'V') && ice(c3, 'T'))
  ------------------
  |  Branch (803:21): [True: 31.1k, False: 172k]
  |  Branch (803:21): [True: 23.4k, False: 180k]
  |  Branch (803:37): [True: 25.1k, False: 6.03k]
  |  Branch (803:53): [True: 23.4k, False: 1.73k]
  ------------------
  804|  23.4k|                {
  805|  23.4k|                    switch (c4)
  ------------------
  |  Branch (805:29): [True: 1.82k, False: 21.5k]
  ------------------
  806|  23.4k|                    {
  807|  1.17k|                        case 'D':
  ------------------
  |  Branch (807:25): [True: 1.17k, False: 22.2k]
  ------------------
  808|  9.55k|                        case 'd':
  ------------------
  |  Branch (808:25): [True: 8.37k, False: 15.0k]
  ------------------
  809|  9.55k|                            if (c5 == '2')
  ------------------
  |  Branch (809:33): [True: 6.19k, False: 3.35k]
  ------------------
  810|  6.19k|                            {
  811|  6.19k|                                if (ice(c6, 'F'))
  ------------------
  |  Branch (811:37): [True: 2.37k, False: 3.82k]
  ------------------
  812|  2.37k|                                {
  813|  2.37k|                                    return OpCode::CVTD2F;
  814|  2.37k|                                }
  815|  3.82k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (815:42): [True: 2.11k, False: 1.70k]
  ------------------
  816|  2.11k|                                {
  817|  2.11k|                                    return OpCode::CVTD2I;
  818|  2.11k|                                }
  819|  6.19k|                            }
  820|  5.06k|                            break;
  821|       |
  822|  5.06k|                        case 'F':
  ------------------
  |  Branch (822:25): [True: 2.68k, False: 20.7k]
  ------------------
  823|  6.35k|                        case 'f':
  ------------------
  |  Branch (823:25): [True: 3.67k, False: 19.7k]
  ------------------
  824|  6.35k|                            if (c5 == '2')
  ------------------
  |  Branch (824:33): [True: 4.43k, False: 1.91k]
  ------------------
  825|  4.43k|                            {
  826|  4.43k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (826:37): [True: 1.23k, False: 3.20k]
  ------------------
  827|  1.23k|                                {
  828|  1.23k|                                    return OpCode::CVTF2D;
  829|  1.23k|                                }
  830|  3.20k|                                else if (ice(c6, 'I'))
  ------------------
  |  Branch (830:42): [True: 1.36k, False: 1.83k]
  ------------------
  831|  1.36k|                                {
  832|  1.36k|                                    return OpCode::CVTF2I;
  833|  1.36k|                                }
  834|  4.43k|                            }
  835|  3.75k|                            break;
  836|       |
  837|  3.75k|                        case 'I':
  ------------------
  |  Branch (837:25): [True: 525, False: 22.8k]
  ------------------
  838|  5.68k|                        case 'i':
  ------------------
  |  Branch (838:25): [True: 5.15k, False: 18.2k]
  ------------------
  839|  5.68k|                            if (c5 == '2')
  ------------------
  |  Branch (839:33): [True: 4.70k, False: 983]
  ------------------
  840|  4.70k|                            {
  841|  4.70k|                                if (ice(c6, 'D'))
  ------------------
  |  Branch (841:37): [True: 2.08k, False: 2.61k]
  ------------------
  842|  2.08k|                                {
  843|  2.08k|                                    return OpCode::CVTI2D;
  844|  2.08k|                                }
  845|  2.61k|                                else if (ice(c6, 'F'))
  ------------------
  |  Branch (845:42): [True: 1.19k, False: 1.42k]
  ------------------
  846|  1.19k|                                {
  847|  1.19k|                                    return OpCode::CVTI2F;
  848|  1.19k|                                }
  849|  4.70k|                            }
  850|  23.4k|                    }
  851|  23.4k|                }
  852|   180k|                else if (ice(c1, 'M') && ice(c2, 'U') && ice(c3, 'L') && ice(c4, 'T') &&
  ------------------
  |  Branch (852:26): [True: 29.9k, False: 150k]
  |  Branch (852:26): [True: 2.83k, False: 177k]
  |  Branch (852:42): [True: 21.6k, False: 8.22k]
  |  Branch (852:58): [True: 15.9k, False: 5.79k]
  |  Branch (852:74): [True: 11.2k, False: 4.62k]
  ------------------
  853|   180k|                         ice(c5, 'U') && ice(c6, 'I'))
  ------------------
  |  Branch (853:26): [True: 4.90k, False: 6.37k]
  |  Branch (853:42): [True: 2.83k, False: 2.06k]
  ------------------
  854|  2.83k|                {
  855|  2.83k|                    return OpCode::MULTUI;
  856|  2.83k|                }
  857|   190k|                break;
  858|   203k|            }
  859|       |
  860|       |            // 7 character OpCodes
  861|   190k|            case 7: {
  ------------------
  |  Branch (861:13): [True: 149k, False: 3.86M]
  ------------------
  862|   149k|                char c1 = token[0];
  863|   149k|                char c2 = token[1];
  864|   149k|                char c3 = token[2];
  865|   149k|                char c4 = token[3];
  866|   149k|                char c5 = token[4];
  867|   149k|                char c6 = token[5];
  868|   149k|                char c7 = token[6];
  869|       |
  870|   149k|                if (ice(c1, 'M') && ice(c2, 'O') && ice(c3, 'V'))
  ------------------
  |  Branch (870:21): [True: 29.8k, False: 119k]
  |  Branch (870:21): [True: 20.6k, False: 128k]
  |  Branch (870:37): [True: 22.0k, False: 7.71k]
  |  Branch (870:53): [True: 20.6k, False: 1.46k]
  ------------------
  871|  20.6k|                {
  872|  20.6k|                    if (ice(c4, 'I') && c5 == '2' && ice(c6, 'F') && ice(c7, 'P'))
  ------------------
  |  Branch (872:25): [True: 13.2k, False: 7.38k]
  |  Branch (872:25): [True: 7.06k, False: 13.5k]
  |  Branch (872:41): [True: 10.4k, False: 2.81k]
  |  Branch (872:54): [True: 8.83k, False: 1.59k]
  |  Branch (872:70): [True: 7.06k, False: 1.77k]
  ------------------
  873|  7.06k|                    {
  874|  7.06k|                        return OpCode::MOVI2FP;
  875|  7.06k|                    }
  876|  13.5k|                    else if (ice(c4, 'F') && ice(c5, 'P') && c6 == '2' && ice(c7, 'I'))
  ------------------
  |  Branch (876:30): [True: 7.19k, False: 6.36k]
  |  Branch (876:30): [True: 1.43k, False: 12.1k]
  |  Branch (876:46): [True: 5.19k, False: 1.99k]
  |  Branch (876:62): [True: 2.74k, False: 2.44k]
  |  Branch (876:75): [True: 1.43k, False: 1.30k]
  ------------------
  877|  1.43k|                    {
  878|  1.43k|                        return OpCode::MOVFP2I;
  879|  1.43k|                    }
  880|  20.6k|                }
  881|   140k|                break;
  882|   149k|            }
  883|       |
  884|   376k|            default: {
  ------------------
  |  Branch (884:13): [True: 376k, False: 3.63M]
  ------------------
  885|   376k|                break;
  886|   149k|            }
  887|  4.01M|        }
  888|       |
  889|       |        // None found
  890|  3.25M|        return OpCode::NONE;
  891|  4.01M|    }
_ZN3dlx3iceEcc:
   17|  3.79M|    {
   18|  3.79M|        constexpr const char diff = 'a' - 'A';
   19|  3.79M|        return (c == t) || (c == t + diff);
  ------------------
  |  Branch (19:16): [True: 673k, False: 3.12M]
  |  Branch (19:28): [True: 1.03M, False: 2.09M]
  ------------------
   20|  3.79M|    }

_ZN3dlx10ParseErrorC2Ev:
   20|  4.46M|    {}
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorEmmNS_12ArgumentTypeES0_:
  192|  31.8k|    {
  193|  31.8k|        ParseError err;
  194|       |
  195|  31.8k|        err.m_Type                                 = ParseError::Type::UnexpectedArgumentType;
  196|  31.8k|        err.m_LineNumber                           = line_number;
  197|  31.8k|        err.m_Column                               = column;
  198|  31.8k|        err.unexpected_argument_type.expected_type = expected_type;
  199|  31.8k|        err.unexpected_argument_type.actual_type   = actual_type;
  200|       |
  201|  31.8k|        return err;
  202|  31.8k|    }
_ZN3dlx41ConstructUnexpectedArgumentTypeParseErrorERKNS_5TokenENS_12ArgumentTypeES3_:
  206|  31.8k|    {
  207|  31.8k|        return ConstructUnexpectedArgumentTypeParseError(token.GetLineNumber().unsafe(),
  208|  31.8k|                                                         token.GetColumn().unsafe(), expected_type,
  209|  31.8k|                                                         actual_type);
  210|  31.8k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  215|  1.78k|    {
  216|  1.78k|        ParseError err;
  217|       |
  218|  1.78k|        err.m_Type              = ParseError::Type::InvalidNumber;
  219|  1.78k|        err.m_LineNumber        = line_number;
  220|  1.78k|        err.m_Column            = column;
  221|  1.78k|        err.invalid_number.text = text;
  222|       |
  223|  1.78k|        return err;
  224|  1.78k|    }
_ZN3dlx32ConstructInvalidNumberParseErrorERKNS_5TokenE:
  227|  1.78k|    {
  228|  1.78k|        return ConstructInvalidNumberParseError(token.GetLineNumber().unsafe(),
  229|  1.78k|                                                token.GetColumn().unsafe(), token.GetText());
  230|  1.78k|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorEmm:
  234|      4|    {
  235|      4|        ParseError err;
  236|       |
  237|      4|        err.m_Type       = ParseError::Type::TooFewArgumentsAddressDisplacement;
  238|      4|        err.m_LineNumber = line_number;
  239|      4|        err.m_Column     = column;
  240|       |
  241|      4|        return err;
  242|      4|    }
_ZN3dlx53ConstructTooFewArgumentsAddressDisplacementParseErrorERKNS_5TokenE:
  246|      4|    {
  247|      4|        return ConstructTooFewArgumentsAddressDisplacementParseError(token.GetLineNumber().unsafe(),
  248|      4|                                                                     token.GetColumn().unsafe());
  249|      4|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorEmmNS_5Token4TypeES1_:
  254|  2.08M|    {
  255|  2.08M|        ParseError err;
  256|       |
  257|  2.08M|        err.m_Type                         = ParseError::Type::UnexpectedToken;
  258|  2.08M|        err.m_LineNumber                   = line_number;
  259|  2.08M|        err.m_Column                       = column;
  260|  2.08M|        err.unexpected_token.expected_type = expected_type;
  261|  2.08M|        err.unexpected_token.actual_type   = actual_type;
  262|       |
  263|  2.08M|        return err;
  264|  2.08M|    }
_ZN3dlx34ConstructUnexpectedTokenParseErrorERKNS_5TokenENS0_4TypeE:
  268|  2.08M|    {
  269|  2.08M|        return ConstructUnexpectedTokenParseError(token.GetLineNumber().unsafe(),
  270|  2.08M|                                                  token.GetColumn().unsafe(), expected_type,
  271|  2.08M|                                                  token.GetType());
  272|  2.08M|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  276|   249k|    {
  277|   249k|        ParseError err;
  278|       |
  279|   249k|        err.m_Type                         = ParseError::Type::ReserverdIdentifier;
  280|   249k|        err.m_LineNumber                   = line_number;
  281|   249k|        err.m_Column                       = column;
  282|   249k|        err.reserved_identifier.identifier = identifier;
  283|       |
  284|   249k|        return err;
  285|   249k|    }
_ZN3dlx36ConstructReservedIdentiferParseErrorERKNS_5TokenE:
  288|  4.71k|    {
  289|  4.71k|        return ConstructReservedIdentiferParseError(token.GetLineNumber().unsafe(),
  290|  4.71k|                                                    token.GetColumn().unsafe(), token.GetText());
  291|  4.71k|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  295|  1.34M|    {
  296|  1.34M|        ParseError err;
  297|       |
  298|  1.34M|        err.m_Type                             = ParseError::Type::InvalidLabelIdentifier;
  299|  1.34M|        err.m_LineNumber                       = line_number;
  300|  1.34M|        err.m_Column                           = column;
  301|  1.34M|        err.invalid_label_identifier.identifer = identifier;
  302|       |
  303|  1.34M|        return err;
  304|  1.34M|    }
_ZN3dlx41ConstructInvalidLabelIdentifierParseErrorERKNS_5TokenE:
  308|  1.34M|    {
  309|  1.34M|        return ConstructInvalidLabelIdentifierParseError(
  310|  1.34M|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText());
  311|  1.34M|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEmm:
  316|   247k|    {
  317|   247k|        ParseError err;
  318|       |
  319|   247k|        err.m_Type                           = ParseError::Type::LabelAlreadyDefined;
  320|   247k|        err.m_LineNumber                     = line_number;
  321|   247k|        err.m_Column                         = column;
  322|   247k|        err.label_already_defined.label_name = label_name;
  323|   247k|        err.label_already_defined.at_line    = at_line;
  324|   247k|        err.label_already_defined.at_column  = at_column;
  325|       |
  326|   247k|        return err;
  327|   247k|    }
_ZN3dlx38ConstructLabelAlreadyDefinedParseErrorERKNS_5TokenES2_:
  331|   247k|    {
  332|   247k|        return ConstructLabelAlreadyDefinedParseError(
  333|   247k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(), token.GetText(),
  334|   247k|                first_definition.GetLineNumber().unsafe(), first_definition.GetColumn().unsafe());
  335|   247k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorEmm:
  339|   373k|    {
  340|   373k|        ParseError err;
  341|       |
  342|   373k|        err.m_Type       = ParseError::Type::OneInstructionPerLine;
  343|   373k|        err.m_LineNumber = line_number;
  344|   373k|        err.m_Column     = column;
  345|       |
  346|   373k|        return err;
  347|   373k|    }
_ZN3dlx40ConstructOneInstructionPerLineParseErrorERKNS_5TokenE:
  351|   373k|    {
  352|   373k|        return ConstructOneInstructionPerLineParseError(token.GetLineNumber().unsafe(),
  353|   373k|                                                        token.GetColumn().unsafe());
  354|   373k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorEmmhh:
  359|  47.7k|    {
  360|  47.7k|        ParseError err;
  361|       |
  362|  47.7k|        err.m_Type                     = ParseError::Type::TooFewArgument;
  363|  47.7k|        err.m_LineNumber               = line_number;
  364|  47.7k|        err.m_Column                   = column;
  365|  47.7k|        err.too_few_arguments.required = required;
  366|  47.7k|        err.too_few_arguments.provided = provided;
  367|       |
  368|  47.7k|        return err;
  369|  47.7k|    }
_ZN3dlx34ConstructTooFewArgumentsParseErrorERKNS_5TokenEhh:
  373|  47.7k|    {
  374|  47.7k|        return ConstructTooFewArgumentsParseError(token.GetLineNumber().unsafe(),
  375|  47.7k|                                                  token.GetColumn().unsafe(), required, provided);
  376|  47.7k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorEmmNSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  380|  55.2k|    {
  381|  55.2k|        ParseError err;
  382|       |
  383|  55.2k|        err.m_Type                 = ParseError::Type::EmptyLabel;
  384|  55.2k|        err.m_LineNumber           = line_number;
  385|  55.2k|        err.m_Column               = column;
  386|  55.2k|        err.empty_label.label_name = label_name;
  387|       |
  388|  55.2k|        return err;
  389|  55.2k|    }
_ZN3dlx29ConstructEmptyLabelParseErrorERKNS_5TokenE:
  392|  55.2k|    {
  393|  55.2k|        return ConstructEmptyLabelParseError(
  394|  55.2k|                token.GetLineNumber().unsafe(), token.GetColumn().unsafe(),
  395|  55.2k|                (token.GetText().back() == ':') ?
  ------------------
  |  Branch (395:17): [True: 41.9k, False: 13.2k]
  ------------------
  396|  41.9k|                        token.GetText().substr(0, token.GetText().size() - 1) :
  397|  55.2k|                        token.GetText());
  398|  55.2k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorEmm:
  402|  30.1k|    {
  403|  30.1k|        ParseError err;
  404|       |
  405|  30.1k|        err.m_Type       = ParseError::Type::TooManyComma;
  406|  30.1k|        err.m_LineNumber = line_number;
  407|  30.1k|        err.m_Column     = column;
  408|       |
  409|  30.1k|        return err;
  410|  30.1k|    }
_ZN3dlx31ConstructTooManyCommaParseErrorERKNS_5TokenE:
  413|  30.1k|    {
  414|  30.1k|        return ConstructTooManyCommaParseError(token.GetLineNumber().unsafe(),
  415|  30.1k|                                               token.GetColumn().unsafe());
  416|  30.1k|    }

_ZN3dlx13ParsedProgram13AddParseErrorEONS_10ParseErrorE:
   18|  4.46M|    {
   19|  4.46M|        m_ParseErrors.emplace_back(phi::move(error));
   20|  4.46M|    }

_ZN3dlx6Parser5ParseERNS_11TokenStreamE:
  181|  53.6k|    {
  182|  53.6k|        ParsedProgram program;
  183|       |
  184|  53.6k|        program.m_Tokens = tokens;
  185|       |
  186|  53.6k|        phi::boolean line_has_instruction{false};
  187|  53.6k|        phi::usize   label_count{0u};
  188|       |
  189|  5.33M|        while (tokens.has_more())
  ------------------
  |  Branch (189:16): [True: 5.27M, False: 53.6k]
  ------------------
  190|  5.27M|        {
  191|  5.27M|            const Token& current_token = tokens.consume();
  192|       |
  193|       |            //DLX_INFO("Parsing '{}'", current_token.DebugInfo());
  194|       |
  195|  5.27M|            switch (current_token.GetType())
  196|  5.27M|            {
  197|       |                // Ignore comments
  198|  48.0k|                case Token::Type::Comment:
  ------------------
  |  Branch (198:17): [True: 48.0k, False: 5.23M]
  ------------------
  199|       |                    //DLX_DEBUG("Ignoring comment");
  200|  48.0k|                    break;
  201|       |
  202|   763k|                case Token::Type::NewLine:
  ------------------
  |  Branch (202:17): [True: 763k, False: 4.51M]
  ------------------
  203|       |                    //DLX_DEBUG("Ignoring newline");
  204|   763k|                    line_has_instruction = false;
  205|   763k|                    break;
  206|       |
  207|  2.36M|                case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (207:17): [True: 2.36M, False: 2.91M]
  ------------------
  208|  2.36M|                    if (line_has_instruction)
  ------------------
  |  Branch (208:25): [True: 483k, False: 1.88M]
  ------------------
  209|   483k|                    {
  210|   483k|                        program.AddParseError(ConstructUnexpectedTokenParseError(
  211|   483k|                                current_token, Token::Type::NewLine));
  212|   483k|                        break;
  213|   483k|                    }
  214|       |
  215|       |                    // Handle jump labels
  216|       |                    // Check if the last character of the identifier is a colon
  217|  1.88M|                    if (current_token.GetText().back() != ':')
  ------------------
  |  Branch (217:25): [True: 847k, False: 1.03M]
  ------------------
  218|   847k|                    {
  219|   847k|                        program.AddParseError(
  220|   847k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  221|   847k|                        break;
  222|   847k|                    }
  223|       |
  224|  1.03M|                    std::string_view label_name = current_token.GetText();
  225|  1.03M|                    label_name.remove_suffix(1);
  226|       |
  227|  1.03M|                    if (IsReservedIdentifier(label_name))
  ------------------
  |  Branch (227:25): [True: 245k, False: 788k]
  ------------------
  228|   245k|                    {
  229|   245k|                        program.AddParseError(ConstructReservedIdentiferParseError(
  230|   245k|                                current_token.GetLineNumber().unsafe(),
  231|   245k|                                current_token.GetColumn().unsafe(), label_name));
  232|   245k|                        break;
  233|   245k|                    }
  234|       |
  235|   788k|                    if (!IsValidIdentifier(label_name))
  ------------------
  |  Branch (235:25): [True: 478k, False: 309k]
  ------------------
  236|   478k|                    {
  237|   478k|                        program.AddParseError(
  238|   478k|                                ConstructInvalidLabelIdentifierParseError(current_token));
  239|   478k|                        break;
  240|   478k|                    }
  241|       |
  242|       |                    // Check if label was already defined
  243|   309k|                    if (program.m_JumpData.find(label_name) != program.m_JumpData.end())
  ------------------
  |  Branch (243:25): [True: 247k, False: 61.4k]
  ------------------
  244|   247k|                    {
  245|       |                        // Find first defintions of label
  246|   247k|                        const Token* first_label_definition =
  247|   247k|                                tokens.find_first_token_if([&](const Token& t) {
  248|   247k|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  249|   247k|                                    {
  250|   247k|                                        std::string_view token_label_name = t.GetText();
  251|   247k|                                        token_label_name.remove_suffix(1);
  252|       |
  253|   247k|                                        if (token_label_name == label_name)
  254|   247k|                                        {
  255|   247k|                                            return true;
  256|   247k|                                        }
  257|   247k|                                    }
  258|       |
  259|   247k|                                    return false;
  260|   247k|                                });
  261|       |
  262|   247k|                        PHI_ASSERT(first_label_definition);
  263|       |
  264|   247k|                        program.AddParseError(ConstructLabelAlreadyDefinedParseError(
  265|   247k|                                current_token, *first_label_definition));
  266|   247k|                        break;
  267|   247k|                    }
  268|       |
  269|  61.4k|                    program.m_JumpData[label_name] =
  270|  61.4k|                            static_cast<std::uint32_t>(program.m_Instructions.size());
  271|  61.4k|                    label_count += 1u;
  272|       |
  273|       |                    //DLX_INFO("Added jump label {} -> {}", label_name,
  274|       |                    //             program.m_Instructions.size());
  275|       |
  276|  61.4k|                    break;
  277|   309k|                }
  278|       |
  279|   535k|                case Token::Type::OpCode: {
  ------------------
  |  Branch (279:17): [True: 535k, False: 4.74M]
  ------------------
  280|   535k|                    if (line_has_instruction)
  ------------------
  |  Branch (280:25): [True: 373k, False: 161k]
  ------------------
  281|   373k|                    {
  282|   373k|                        program.AddParseError(
  283|   373k|                                ConstructOneInstructionPerLineParseError(current_token));
  284|   373k|                        break;
  285|   373k|                    }
  286|       |
  287|   161k|                    label_count = 0u;
  288|       |
  289|       |                    // Handle normal instructions
  290|   161k|                    PHI_ASSERT(current_token.HasHint());
  291|   161k|                    OpCode opcode = static_cast<OpCode>(current_token.GetHint());
  292|       |
  293|       |                    //DLX_INFO("Instruction opcode: {}", dlx::enum_name(opcode));
  294|       |
  295|   161k|                    const InstructionInfo& info = LookUpIntructionInfo(opcode);
  296|       |
  297|       |                    // Make sure we got no problems here
  298|   161k|                    PHI_ASSERT(info.GetArgumentType(0_u8) != ArgumentType::Unknown);
  299|   161k|                    PHI_ASSERT(info.GetArgumentType(1_u8) != ArgumentType::Unknown);
  300|   161k|                    PHI_ASSERT(info.GetArgumentType(2_u8) != ArgumentType::Unknown);
  301|   161k|                    PHI_ASSERT(info.GetExecutor());
  302|       |
  303|   161k|                    const phi::u8 number_of_argument_required = info.GetNumberOfRequiredArguments();
  304|       |                    //DLX_INFO("Instruction requires {} arguments",
  305|       |                    //             number_of_argument_required.unsafe());
  306|       |
  307|       |                    // Create instruction
  308|   161k|                    Instruction  instruction(info, current_token.GetLineNumber());
  309|   161k|                    phi::boolean consumed_comma{false};
  310|       |
  311|       |                    // Parse arguments
  312|   227k|                    for (phi::u8 argument_num{0_u8}; argument_num < number_of_argument_required;)
  ------------------
  |  Branch (312:54): [True: 205k, False: 22.5k]
  ------------------
  313|   205k|                    {
  314|       |                        // Get next token
  315|   205k|                        if (!tokens.has_more())
  ------------------
  |  Branch (315:29): [True: 964, False: 204k]
  ------------------
  316|    964|                        {
  317|    964|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  318|    964|                                    current_token, number_of_argument_required.unsafe(),
  319|    964|                                    argument_num.unsafe()));
  320|    964|                            break;
  321|    964|                        }
  322|       |
  323|   204k|                        const Token& token = tokens.consume();
  324|       |
  325|       |                        // Skip commas
  326|   204k|                        if (token.GetType() == Token::Type::Comma)
  ------------------
  |  Branch (326:29): [True: 42.8k, False: 161k]
  ------------------
  327|  42.8k|                        {
  328|  42.8k|                            if (consumed_comma)
  ------------------
  |  Branch (328:33): [True: 30.1k, False: 12.7k]
  ------------------
  329|  30.1k|                            {
  330|  30.1k|                                program.AddParseError(ConstructTooManyCommaParseError(token));
  331|  30.1k|                            }
  332|       |
  333|  42.8k|                            consumed_comma = true;
  334|       |                            //DLX_DEBUG("Skipping comma");
  335|  42.8k|                            continue;
  336|  42.8k|                        }
  337|       |
  338|   161k|                        if (token.GetType() == Token::Type::NewLine)
  ------------------
  |  Branch (338:29): [True: 46.7k, False: 114k]
  ------------------
  339|  46.7k|                        {
  340|  46.7k|                            program.AddParseError(ConstructTooFewArgumentsParseError(
  341|  46.7k|                                    token, number_of_argument_required.unsafe(),
  342|  46.7k|                                    argument_num.unsafe()));
  343|  46.7k|                            break;
  344|  46.7k|                        }
  345|       |
  346|   114k|                        phi::optional<InstructionArgument> optional_parsed_argument =
  347|   114k|                                parse_instruction_argument(
  348|   114k|                                        token, info.GetArgumentType(argument_num), tokens, program);
  349|   114k|                        if (!optional_parsed_argument.has_value())
  ------------------
  |  Branch (349:29): [True: 91.5k, False: 23.3k]
  ------------------
  350|  91.5k|                        {
  351|       |                            // The parse_instruction_argument function should already have added a parse error with more detail
  352|  91.5k|                            break;
  353|  91.5k|                        }
  354|       |
  355|       |                        // Successfully parsed one argument
  356|  23.3k|                        InstructionArgument parsed_argument = optional_parsed_argument.value();
  357|       |
  358|  23.3k|                        instruction.SetArgument(argument_num, parsed_argument);
  359|  23.3k|                        argument_num++;
  360|  23.3k|                        consumed_comma = false;
  361|       |
  362|       |                        //DLX_INFO("Successfully parsed argument {}", argument_num.unsafe());
  363|  23.3k|                    }
  364|       |
  365|       |                    //DLX_INFO("Successfully parsed instruction '{}'",
  366|       |                    //            instruction.DebugInfo());
  367|   161k|                    program.m_Instructions.emplace_back(instruction);
  368|   161k|                    line_has_instruction = true;
  369|   161k|                    break;
  370|   535k|                }
  371|       |
  372|  1.56M|                default:
  ------------------
  |  Branch (372:17): [True: 1.56M, False: 3.71M]
  ------------------
  373|  1.56M|                    Token::Type expected_token_type = Token::Type::Unknown;
  374|  1.56M|                    if (line_has_instruction)
  ------------------
  |  Branch (374:25): [True: 618k, False: 949k]
  ------------------
  375|   618k|                    {
  376|   618k|                        expected_token_type = Token::Type::NewLine;
  377|   618k|                    }
  378|       |
  379|  1.56M|                    program.AddParseError(
  380|  1.56M|                            ConstructUnexpectedTokenParseError(current_token, expected_token_type));
  381|  1.56M|                    break;
  382|  5.27M|            }
  383|  5.27M|        }
  384|       |
  385|       |        // Check for empty labels
  386|  53.6k|        if (label_count > 0u)
  ------------------
  |  Branch (386:13): [True: 8.48k, False: 45.1k]
  ------------------
  387|  8.48k|        {
  388|  94.0k|            for (auto it = tokens.rbegin(); label_count > 0u; ++it)
  ------------------
  |  Branch (388:45): [True: 85.5k, False: 8.48k]
  ------------------
  389|  85.5k|            {
  390|  85.5k|                PHI_ASSERT(it != tokens.rend(), "Iterator should never reach the end");
  391|       |
  392|  85.5k|                const Token& token = *it;
  393|  85.5k|                if (token.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (393:21): [True: 55.2k, False: 30.3k]
  ------------------
  394|  55.2k|                {
  395|  55.2k|                    program.AddParseError(ConstructEmptyLabelParseError(token));
  396|  55.2k|                    --label_count;
  397|  55.2k|                }
  398|  85.5k|            }
  399|  8.48k|        }
  400|       |
  401|  53.6k|        return program;
  402|  53.6k|    }
_ZN3dlx6Parser5ParseENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  405|  53.6k|    {
  406|  53.6k|        TokenStream tokens = Tokenize(source);
  407|  53.6k|        return Parse(tokens);
  408|  53.6k|    }
Parser.cpp:_ZN3dlxL26parse_instruction_argumentERKNS_5TokenENS_12ArgumentTypeERNS_11TokenStreamERNS_13ParsedProgramE:
   33|   114k|    {
   34|       |        // DLX_INFO("Parsing argument with token '{}' and expected type '{}'", token.DebugInfo(),
   35|       |        //              dlx::enum_name(expected_argument_type));
   36|       |
   37|   114k|        switch (token.GetType())
   38|   114k|        {
   39|  10.1k|            case Token::Type::IntegerLiteral: {
  ------------------
  |  Branch (39:13): [True: 10.1k, False: 104k]
  ------------------
   40|  10.1k|                if (!ArgumentTypeIncludes(expected_argument_type,
  ------------------
  |  Branch (40:21): [True: 1.66k, False: 8.45k]
  ------------------
   41|  10.1k|                                          ArgumentType::AddressDisplacement))
   42|  1.66k|                {
   43|  1.66k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
   44|  1.66k|                            token, expected_argument_type, ArgumentType::AddressDisplacement));
   45|       |
   46|  1.66k|                    return {};
   47|  1.66k|                }
   48|       |
   49|       |                // Get address displacement
   50|  8.45k|                PHI_ASSERT(token.HasHint());
   51|       |
   52|  8.45k|                std::int16_t value = static_cast<std::int16_t>(token.GetHint());
   53|       |
   54|  8.45k|                if (!tokens.has_x_more(3u))
  ------------------
  |  Branch (54:21): [True: 4, False: 8.44k]
  ------------------
   55|      4|                {
   56|      4|                    program.AddParseError(
   57|      4|                            ConstructTooFewArgumentsAddressDisplacementParseError(token));
   58|      4|                    return {};
   59|      4|                }
   60|       |
   61|  8.44k|                auto         it           = tokens.current_position();
   62|  8.44k|                const Token& first_token  = tokens.consume();
   63|  8.44k|                const Token& second_token = tokens.consume();
   64|  8.44k|                const Token& third_token  = tokens.consume();
   65|       |
   66|  8.44k|                if (first_token.GetType() != Token::Type::OpenBracket)
  ------------------
  |  Branch (66:21): [True: 2.18k, False: 6.26k]
  ------------------
   67|  2.18k|                {
   68|  2.18k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   69|  2.18k|                            first_token, Token::Type::OpenBracket));
   70|  2.18k|                    return {};
   71|  2.18k|                }
   72|       |
   73|       |                // Second token is the register
   74|  6.26k|                if (second_token.GetType() != Token::Type::RegisterInt)
  ------------------
  |  Branch (74:21): [True: 1.47k, False: 4.78k]
  ------------------
   75|  1.47k|                {
   76|  1.47k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   77|  1.47k|                            second_token, Token::Type::RegisterInt));
   78|  1.47k|                    return {};
   79|  1.47k|                }
   80|       |
   81|  4.78k|                if (third_token.GetType() != Token::Type::ClosingBracket)
  ------------------
  |  Branch (81:21): [True: 2.14k, False: 2.64k]
  ------------------
   82|  2.14k|                {
   83|  2.14k|                    program.AddParseError(ConstructUnexpectedTokenParseError(
   84|  2.14k|                            third_token, Token::Type::ClosingBracket));
   85|  2.14k|                    return {};
   86|  2.14k|                }
   87|       |
   88|       |                // Consume the 3 tokens
   89|  2.64k|                tokens.set_position(it + 3u);
   90|       |
   91|       |                //DLX_INFO("Parsed address displacement with '{}' displacement and Register '{}'",
   92|       |                //             value, dlx::enum_name(reg_id));
   93|       |
   94|  2.64k|                return ConstructInstructionArgumentAddressDisplacement(
   95|  2.64k|                        static_cast<IntRegisterID>(second_token.GetHint()), value);
   96|  4.78k|            }
   97|  7.12k|            case Token::Type::RegisterInt: {
  ------------------
  |  Branch (97:13): [True: 7.12k, False: 107k]
  ------------------
   98|  7.12k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::IntRegister))
  ------------------
  |  Branch (98:21): [True: 2.58k, False: 4.54k]
  ------------------
   99|  2.58k|                {
  100|  2.58k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  101|  2.58k|                            token, expected_argument_type, ArgumentType::IntRegister));
  102|  2.58k|                    return {};
  103|  2.58k|                }
  104|       |
  105|       |                //DLX_INFO("Parsed identifier as int register {}",
  106|       |                //             dlx::enum_name(reg_id));
  107|       |
  108|  4.54k|                return ConstructInstructionArgumentRegisterInt(
  109|  4.54k|                        static_cast<IntRegisterID>(token.GetHint()));
  110|  7.12k|            }
  111|  2.78k|            case Token::Type::RegisterFloat: {
  ------------------
  |  Branch (111:13): [True: 2.78k, False: 112k]
  ------------------
  112|  2.78k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::FloatRegister))
  ------------------
  |  Branch (112:21): [True: 2.29k, False: 495]
  ------------------
  113|  2.29k|                {
  114|  2.29k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  115|  2.29k|                            token, expected_argument_type, ArgumentType::FloatRegister));
  116|  2.29k|                    return {};
  117|  2.29k|                }
  118|       |
  119|       |                //DLX_INFO("Parsed identifier as float register {}",
  120|       |                //             dlx::enum_name(float_reg_id));
  121|       |
  122|    495|                return ConstructInstructionArgumentRegisterFloat(
  123|    495|                        static_cast<FloatRegisterID>(token.GetHint()));
  124|  2.78k|            }
  125|  4.71k|            case Token::Type::RegisterStatus: {
  ------------------
  |  Branch (125:13): [True: 4.71k, False: 110k]
  ------------------
  126|  4.71k|                program.AddParseError(ConstructReservedIdentiferParseError(token));
  127|       |
  128|  4.71k|                return {};
  129|  2.78k|            }
  130|  61.1k|            case Token::Type::LabelIdentifier: {
  ------------------
  |  Branch (130:13): [True: 61.1k, False: 53.6k]
  ------------------
  131|       |                // Parse as Label
  132|  61.1k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::Label))
  ------------------
  |  Branch (132:21): [True: 24.2k, False: 36.9k]
  ------------------
  133|  24.2k|                {
  134|  24.2k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  135|  24.2k|                            token, expected_argument_type, ArgumentType::Label));
  136|  24.2k|                    return {};
  137|  24.2k|                }
  138|       |
  139|  36.9k|                if (IsReservedIdentifier(token.GetText()))
  ------------------
  |  Branch (139:21): [True: 0, False: 36.9k]
  ------------------
  140|      0|                {
  141|      0|                    program.AddParseError(ConstructReservedIdentiferParseError(token));
  142|      0|                    return {};
  143|      0|                }
  144|       |
  145|  36.9k|                if (!IsValidIdentifier(token.GetText()))
  ------------------
  |  Branch (145:21): [True: 23.4k, False: 13.4k]
  ------------------
  146|  23.4k|                {
  147|  23.4k|                    program.AddParseError(ConstructInvalidLabelIdentifierParseError(token));
  148|  23.4k|                    return {};
  149|  23.4k|                }
  150|       |
  151|       |                //DLX_INFO("Parsed Label identifier as '{}'", token.GetText());
  152|       |
  153|  13.4k|                return ConstructInstructionArgumentLabel(token.GetText());
  154|  36.9k|            }
  155|  5.08k|            case Token::Type::ImmediateInteger: {
  ------------------
  |  Branch (155:13): [True: 5.08k, False: 109k]
  ------------------
  156|  5.08k|                if (!ArgumentTypeIncludes(expected_argument_type, ArgumentType::ImmediateInteger))
  ------------------
  |  Branch (156:21): [True: 1.09k, False: 3.98k]
  ------------------
  157|  1.09k|                {
  158|  1.09k|                    program.AddParseError(ConstructUnexpectedArgumentTypeParseError(
  159|  1.09k|                            token, expected_argument_type, ArgumentType::ImmediateInteger));
  160|  1.09k|                    return {};
  161|  1.09k|                }
  162|       |
  163|  3.98k|                if (token.HasHint())
  ------------------
  |  Branch (163:21): [True: 2.20k, False: 1.78k]
  ------------------
  164|  2.20k|                {
  165|  2.20k|                    return ConstructInstructionArgumentImmediateValue(
  166|  2.20k|                            static_cast<std::int16_t>(token.GetHint()));
  167|  2.20k|                }
  168|       |
  169|  1.78k|                program.AddParseError(ConstructInvalidNumberParseError(token));
  170|  1.78k|                return {};
  171|  3.98k|            }
  172|       |
  173|  23.8k|            default:
  ------------------
  |  Branch (173:13): [True: 23.8k, False: 90.9k]
  ------------------
  174|  23.8k|                program.AddParseError(
  175|  23.8k|                        ConstructUnexpectedTokenParseError(token, Token::Type::Unknown));
  176|  23.8k|                return {};
  177|   114k|        }
  178|   114k|    }
Parser.cpp:_ZZN3dlx6Parser5ParseERNS_11TokenStreamEENK3$_0clERKNS_5TokenE:
  247|  6.24M|                                tokens.find_first_token_if([&](const Token& t) {
  248|  6.24M|                                    if (t.GetType() == Token::Type::LabelIdentifier)
  ------------------
  |  Branch (248:41): [True: 3.80M, False: 2.43M]
  ------------------
  249|  3.80M|                                    {
  250|  3.80M|                                        std::string_view token_label_name = t.GetText();
  251|  3.80M|                                        token_label_name.remove_suffix(1);
  252|       |
  253|  3.80M|                                        if (token_label_name == label_name)
  ------------------
  |  Branch (253:45): [True: 247k, False: 3.55M]
  ------------------
  254|   247k|                                        {
  255|   247k|                                            return true;
  256|   247k|                                        }
  257|  3.80M|                                    }
  258|       |
  259|  5.99M|                                    return false;
  260|  6.24M|                                });

_ZN3dlx9ProcessorC2Ev:
   63|      1|    {
   64|       |        // Mark R0 as ready only
   65|      1|        m_IntRegisters[0].SetReadOnly(true);
   66|      1|    }
_ZN3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   69|  10.2k|    {
   70|  10.2k|        PHI_ASSERT(id != IntRegisterID::None);
   71|  10.2k|        phi::size_t id_value = phi::to_underlying(id);
   72|       |
   73|  10.2k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   74|       |
   75|  10.2k|        return m_IntRegisters[id_value];
   76|  10.2k|    }
_ZNK3dlx9Processor14GetIntRegisterENS_13IntRegisterIDE:
   80|  20.5k|    {
   81|  20.5k|        PHI_ASSERT(id != IntRegisterID::None);
   82|  20.5k|        phi::size_t id_value = phi::to_underlying(id);
   83|       |
   84|  20.5k|        PHI_ASSERT(id_value < m_IntRegisters.size());
   85|       |
   86|  20.5k|        return m_IntRegisters[id_value];
   87|  20.5k|    }
_ZNK3dlx9Processor25IntRegisterGetSignedValueENS_13IntRegisterIDE:
   90|    224|    {
   91|    224|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
   92|    224|                                             RegisterAccessType::Signed),
   93|    224|                   "Mismatch for instruction access type");
   94|       |
   95|    224|        const phi::size_t id_value = phi::to_underlying(id);
   96|       |
   97|    224|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
   98|    224|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
   99|    224|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (99:13): [True: 44, False: 180]
  ------------------
  100|    224|            register_value_type != IntRegisterValueType::Signed)
  ------------------
  |  Branch (100:13): [True: 42, False: 2]
  ------------------
  101|     42|        {
  102|     42|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     42|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  103|     42|        }
  104|       |
  105|    224|        return GetIntRegister(id).GetSignedValue();
  106|    224|    }
_ZNK3dlx9Processor27IntRegisterGetUnsignedValueENS_13IntRegisterIDE:
  109|  20.3k|    {
  110|  20.3k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  111|  20.3k|                                             RegisterAccessType::Unsigned),
  112|  20.3k|                   "Mismatch for instruction access type");
  113|       |
  114|  20.3k|        const phi::size_t id_value = phi::to_underlying(id);
  115|       |
  116|  20.3k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  117|  20.3k|        const IntRegisterValueType register_value_type = m_IntRegistersValueTypes[id_value];
  118|  20.3k|        if (register_value_type != IntRegisterValueType::NotSet &&
  ------------------
  |  Branch (118:13): [True: 37, False: 20.2k]
  ------------------
  119|  20.3k|            register_value_type != IntRegisterValueType::Unsigned)
  ------------------
  |  Branch (119:13): [True: 14, False: 23]
  ------------------
  120|     14|        {
  121|     14|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|     14|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  122|     14|        }
  123|       |
  124|  20.3k|        return GetIntRegister(id).GetUnsignedValue();
  125|  20.3k|    }
_ZN3dlx9Processor25IntRegisterSetSignedValueENS_13IntRegisterIDEN3phi7integerIiEE:
  128|    119|    {
  129|    119|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  130|    119|                                             RegisterAccessType::Signed),
  131|    119|                   "Mismatch for instruction access type");
  132|       |
  133|    119|        IntRegister& reg = GetIntRegister(id);
  134|       |
  135|    119|        if (reg.IsReadOnly())
  ------------------
  |  Branch (135:13): [True: 65, False: 54]
  ------------------
  136|     65|        {
  137|     65|            return;
  138|     65|        }
  139|       |
  140|     54|        reg.SetSignedValue(value);
  141|       |
  142|     54|        const phi::size_t id_value = phi::to_underlying(id);
  143|       |
  144|     54|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  145|     54|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Signed;
  146|     54|    }
_ZN3dlx9Processor27IntRegisterSetUnsignedValueENS_13IntRegisterIDEN3phi7integerIjEE:
  149|  10.1k|    {
  150|  10.1k|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  151|  10.1k|                                             RegisterAccessType::Unsigned),
  152|  10.1k|                   "Mismatch for instruction access type");
  153|       |
  154|  10.1k|        IntRegister& reg = GetIntRegister(id);
  155|       |
  156|  10.1k|        if (reg.IsReadOnly())
  ------------------
  |  Branch (156:13): [True: 143, False: 10.0k]
  ------------------
  157|    143|        {
  158|    143|            return;
  159|    143|        }
  160|       |
  161|  10.0k|        reg.SetUnsignedValue(value);
  162|       |
  163|  10.0k|        const phi::size_t id_value = phi::to_underlying(id);
  164|       |
  165|  10.0k|        PHI_ASSERT(id_value < m_IntRegistersValueTypes.size());
  166|  10.0k|        m_IntRegistersValueTypes[id_value] = IntRegisterValueType::Unsigned;
  167|  10.0k|    }
_ZN3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  170|     45|    {
  171|     45|        PHI_ASSERT(id != FloatRegisterID::None);
  172|     45|        const phi::size_t id_value = phi::to_underlying(id);
  173|       |
  174|     45|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  175|       |
  176|     45|        return m_FloatRegisters[id_value];
  177|     45|    }
_ZNK3dlx9Processor16GetFloatRegisterENS_15FloatRegisterIDE:
  181|     26|    {
  182|     26|        PHI_ASSERT(id != FloatRegisterID::None);
  183|     26|        const phi::size_t id_value = phi::to_underlying(id);
  184|       |
  185|     26|        PHI_ASSERT(id_value < m_FloatRegisters.size());
  186|       |
  187|     26|        return m_FloatRegisters[id_value];
  188|     26|    }
_ZNK3dlx9Processor26FloatRegisterGetFloatValueENS_15FloatRegisterIDE:
  191|     26|    {
  192|     26|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  193|     26|                                             RegisterAccessType::Float),
  194|     26|                   "Mismatch for instruction access type");
  195|       |
  196|     26|        const phi::size_t id_value = phi::to_underlying(id);
  197|       |
  198|     26|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  199|     26|        const FloatRegisterValueType register_value_type = m_FloatRegistersValueTypes[id_value];
  200|     26|        if (register_value_type != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (200:13): [True: 4, False: 22]
  ------------------
  201|     26|            register_value_type != FloatRegisterValueType::Float)
  ------------------
  |  Branch (201:13): [True: 1, False: 3]
  ------------------
  202|      1|        {
  203|       |            /*
  204|       |            DLX_WARN("Mismatch for register value type");
  205|       |            */
  206|      1|        }
  207|       |
  208|     26|        const FloatRegister& reg = GetFloatRegister(id);
  209|       |
  210|     26|        return reg.GetValue();
  211|     26|    }
_ZN3dlx9Processor27FloatRegisterGetDoubleValueENS_15FloatRegisterIDE:
  214|     23|    {
  215|     23|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  216|     23|                                             RegisterAccessType::Double),
  217|     23|                   "Mismatch for instruction access type");
  218|       |
  219|     23|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (219:13): [True: 7, False: 16]
  ------------------
  220|      7|        {
  221|      7|            Raise(Exception::MisalignedRegisterAccess);
  222|      7|            return {0.0};
  223|      7|        }
  224|       |
  225|     16|        const phi::size_t id_value = phi::to_underlying(id);
  226|       |
  227|     16|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  228|     16|        const FloatRegisterValueType register_value_type_low = m_FloatRegistersValueTypes[id_value];
  229|     16|        if (register_value_type_low != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (229:13): [True: 3, False: 13]
  ------------------
  230|     16|            register_value_type_low != FloatRegisterValueType::DoubleLow)
  ------------------
  |  Branch (230:13): [True: 1, False: 2]
  ------------------
  231|      1|        {
  232|      1|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      1|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  233|      1|        }
  234|       |
  235|     16|        const FloatRegisterValueType register_value_type_high =
  236|     16|                m_FloatRegistersValueTypes[id_value + 1u];
  237|     16|        if (register_value_type_high != FloatRegisterValueType::NotSet &&
  ------------------
  |  Branch (237:13): [True: 9, False: 7]
  ------------------
  238|     16|            register_value_type_high != FloatRegisterValueType::DoubleHigh)
  ------------------
  |  Branch (238:13): [True: 6, False: 3]
  ------------------
  239|      6|        {
  240|      6|            DLX_WARN("Mismatch for register value type");
  ------------------
  |  |    8|      6|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  241|      6|        }
  242|       |
  243|     16|        const FloatRegister& first_reg = GetFloatRegister(id);
  244|     16|        const FloatRegister& second_reg =
  245|     16|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  246|       |
  247|     16|        const float first_value  = first_reg.GetValue().unsafe();
  248|     16|        const float second_value = second_reg.GetValue().unsafe();
  249|       |
  250|       |        // TODO: Don't invoke undefined behavior this way. Instead use union type punning
  251|     16|        PHI_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wundefined-reinterpret-cast")
  252|       |
  253|     16|        const std::uint32_t first_value_bits =
  254|     16|                *reinterpret_cast<const std::uint32_t*>(&first_value);
  255|     16|        const std::uint32_t second_value_bits =
  256|     16|                *reinterpret_cast<const std::uint32_t*>(&second_value);
  257|       |
  258|     16|        std::uint64_t final_value_bits =
  259|     16|                static_cast<std::uint64_t>(second_value_bits) << 32u | first_value_bits;
  260|       |
  261|     16|        return *reinterpret_cast<double*>(&final_value_bits);
  262|       |
  263|     23|        PHI_CLANG_SUPPRESS_WARNING_POP()
  264|     23|    }
_ZN3dlx9Processor26FloatRegisterSetFloatValueENS_15FloatRegisterIDEN3phi14floating_pointIfEE:
  267|      9|    {
  268|      9|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  269|      9|                                             RegisterAccessType::Float),
  270|      9|                   "Mismatch for instruction access type");
  271|       |
  272|      9|        FloatRegister& reg = GetFloatRegister(id);
  273|       |
  274|      9|        reg.SetValue(value);
  275|       |
  276|      9|        const phi::size_t id_value = phi::to_underlying(id);
  277|       |
  278|      9|        PHI_ASSERT(id_value < m_FloatRegistersValueTypes.size());
  279|      9|        m_FloatRegistersValueTypes[id_value] = FloatRegisterValueType::Float;
  280|      9|    }
_ZN3dlx9Processor27FloatRegisterSetDoubleValueENS_15FloatRegisterIDEN3phi14floating_pointIdEE:
  283|      6|    {
  284|      6|        PHI_ASSERT(RegisterAccessTypeMatches(m_CurrentInstructionAccessType,
  285|      6|                                             RegisterAccessType::Double),
  286|      6|                   "Mismatch for instruction access type");
  287|       |
  288|      6|        if (phi::to_underlying(id) % 2 == 1)
  ------------------
  |  Branch (288:13): [True: 4, False: 2]
  ------------------
  289|      4|        {
  290|      4|            Raise(Exception::MisalignedRegisterAccess);
  291|      4|            return;
  292|      4|        }
  293|       |
  294|      2|        const constexpr std::uint64_t first_32_bits  = 0b11111111'11111111'11111111'11111111;
  295|      2|        const constexpr std::uint64_t second_32_bits = first_32_bits << 32u;
  296|       |
  297|      2|        double              value_raw  = value.unsafe();
  298|      2|        const std::uint64_t value_bits = *reinterpret_cast<std::uint64_t*>(&value_raw);
  299|       |
  300|      2|        const std::uint32_t first_bits  = value_bits & first_32_bits;
  301|      2|        const std::uint32_t second_bits = (value_bits & second_32_bits) >> 32u;
  302|       |
  303|      2|        const float first_value  = *reinterpret_cast<const float*>(&first_bits);
  304|      2|        const float second_value = *reinterpret_cast<const float*>(&second_bits);
  305|       |
  306|      2|        FloatRegister& first_reg = GetFloatRegister(id);
  307|      2|        FloatRegister& second_reg =
  308|      2|                GetFloatRegister(static_cast<FloatRegisterID>(static_cast<std::size_t>(id) + 1));
  309|       |
  310|      2|        first_reg.SetValue(first_value);
  311|      2|        second_reg.SetValue(second_value);
  312|       |
  313|      2|        const phi::size_t id_value = phi::to_underlying(id);
  314|       |
  315|      2|        PHI_ASSERT(id_value + 1u < m_FloatRegistersValueTypes.size());
  316|      2|        m_FloatRegistersValueTypes[id_value]      = FloatRegisterValueType::DoubleLow;
  317|      2|        m_FloatRegistersValueTypes[id_value + 1u] = FloatRegisterValueType::DoubleHigh;
  318|      2|    }
_ZN3dlx9Processor7GetFPSREv:
  321|     12|    {
  322|     12|        return m_FPSR;
  323|     12|    }
_ZNK3dlx9Processor7GetFPSREv:
  326|  1.24k|    {
  327|  1.24k|        return m_FPSR;
  328|  1.24k|    }
_ZNK3dlx9Processor12GetFPSRValueEv:
  331|  1.24k|    {
  332|  1.24k|        const StatusRegister& status_reg = GetFPSR();
  333|       |
  334|  1.24k|        return status_reg.Get();
  335|  1.24k|    }
_ZN3dlx9Processor12SetFPSRValueEN3phi7booleanE:
  338|     12|    {
  339|     12|        StatusRegister& status_reg = GetFPSR();
  340|       |
  341|     12|        status_reg.SetStatus(value);
  342|     12|    }
_ZN3dlx9Processor18ExecuteInstructionERKNS_11InstructionE:
  345|  52.2k|    {
  346|  52.2k|        m_CurrentInstructionAccessType = inst.GetInfo().GetRegisterAccessType();
  347|       |
  348|  52.2k|        inst.Execute(*this);
  349|  52.2k|    }
_ZN3dlx9Processor11LoadProgramERNS_13ParsedProgramE:
  352|  53.6k|    {
  353|  53.6k|        if (!program.m_ParseErrors.empty())
  ------------------
  |  Branch (353:13): [True: 29.2k, False: 24.3k]
  ------------------
  354|  29.2k|        {
  355|  29.2k|            DLX_WARN("Trying to load program with parsing errors");
  ------------------
  |  |    8|  29.2k|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  356|  29.2k|            return false;
  357|  29.2k|        }
  358|       |
  359|  24.3k|        m_CurrentProgram = &program;
  360|       |
  361|  24.3k|        m_ProgramCounter               = 0u;
  362|  24.3k|        m_Halted                       = false;
  363|  24.3k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  364|  24.3k|        m_LastRaisedException          = Exception::None;
  365|  24.3k|        m_CurrentStepCount             = 0u;
  366|       |
  367|  24.3k|        return true;
  368|  53.6k|    }
_ZNK3dlx9Processor18GetCurrentProgrammEv:
  372|  50.0k|    {
  373|  50.0k|        return m_CurrentProgram;
  374|  50.0k|    }
_ZN3dlx9Processor11ExecuteStepEv:
  377|  76.3k|    {
  378|       |        // No nothing when no program is loaded
  379|  76.3k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (379:13): [True: 0, False: 76.3k]
  ------------------
  380|      0|        {
  381|      0|            return;
  382|      0|        }
  383|       |
  384|       |        // Halt if there are no instruction to execute
  385|  76.3k|        if (m_CurrentProgram->m_Instructions.empty())
  ------------------
  |  Branch (385:13): [True: 24.0k, False: 52.2k]
  ------------------
  386|  24.0k|        {
  387|  24.0k|            m_Halted                       = true;
  388|  24.0k|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  389|  24.0k|        }
  390|       |
  391|       |        // Do nothing when processor is halted
  392|  76.3k|        if (m_Halted)
  ------------------
  |  Branch (392:13): [True: 24.0k, False: 52.2k]
  ------------------
  393|  24.0k|        {
  394|  24.0k|            return;
  395|  24.0k|        }
  396|       |
  397|       |        // Increase Next program counter (may be later overwritten by branch instructions)
  398|  52.2k|        m_NextProgramCounter = m_ProgramCounter + 1u;
  399|       |
  400|       |        // Get current instruction pointed to by the program counter
  401|  52.2k|        const auto& current_instruction =
  402|  52.2k|                m_CurrentProgram->m_Instructions.at(m_ProgramCounter.unsafe());
  403|       |
  404|       |        // Execute current instruction
  405|  52.2k|        ExecuteInstruction(current_instruction);
  406|       |
  407|       |        // Stop executing if the last instruction halted the processor
  408|  52.2k|        if (m_Halted)
  ------------------
  |  Branch (408:13): [True: 105, False: 52.1k]
  ------------------
  409|    105|        {
  410|    105|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  411|    105|            return;
  412|    105|        }
  413|       |
  414|  52.1k|        m_ProgramCounter = m_NextProgramCounter;
  415|       |
  416|  52.1k|        ++m_CurrentStepCount;
  417|       |
  418|  52.1k|        if ((m_MaxNumberOfSteps != 0u && m_CurrentStepCount >= m_MaxNumberOfSteps) ||
  ------------------
  |  Branch (418:13): [True: 234, False: 51.9k]
  |  Branch (418:14): [True: 52.1k, False: 0]
  |  Branch (418:42): [True: 5, False: 52.1k]
  ------------------
  419|  52.1k|            (m_ProgramCounter >= m_CurrentProgram->m_Instructions.size()))
  ------------------
  |  Branch (419:13): [True: 229, False: 51.9k]
  ------------------
  420|    234|        {
  421|    234|            m_Halted                       = true;
  422|    234|            m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  423|    234|        }
  424|  52.1k|    }
_ZN3dlx9Processor21ExecuteCurrentProgramEv:
  427|  24.3k|    {
  428|       |        // Do nothing when no program is loaded
  429|  24.3k|        if (!m_CurrentProgram)
  ------------------
  |  Branch (429:13): [True: 0, False: 24.3k]
  ------------------
  430|      0|        {
  431|      0|            return;
  432|      0|        }
  433|       |
  434|  24.3k|        m_ProgramCounter               = 0u;
  435|  24.3k|        m_Halted                       = false;
  436|  24.3k|        m_CurrentInstructionAccessType = RegisterAccessType::Ignored;
  437|  24.3k|        m_LastRaisedException          = Exception::None;
  438|  24.3k|        m_CurrentStepCount             = 0u;
  439|       |
  440|   100k|        while (!m_Halted)
  ------------------
  |  Branch (440:16): [True: 76.3k, False: 24.3k]
  ------------------
  441|  76.3k|        {
  442|  76.3k|            ExecuteStep();
  443|  76.3k|        }
  444|       |
  445|  24.3k|        PHI_ASSERT(m_CurrentInstructionAccessType == RegisterAccessType::Ignored,
  446|  24.3k|                   "RegisterAccessType was not reset correctly");
  447|  24.3k|    }
_ZN3dlx9Processor14ClearRegistersEv:
  463|  53.6k|    {
  464|  53.6k|        for (auto& reg : m_IntRegisters)
  ------------------
  |  Branch (464:24): [True: 1.71M, False: 53.6k]
  ------------------
  465|  1.71M|        {
  466|  1.71M|            reg.SetSignedValue(0);
  467|  1.71M|        }
  468|       |
  469|  53.6k|        for (auto& reg : m_FloatRegisters)
  ------------------
  |  Branch (469:24): [True: 1.71M, False: 53.6k]
  ------------------
  470|  1.71M|        {
  471|  1.71M|            reg.SetValue(0.0f);
  472|  1.71M|        }
  473|       |
  474|  53.6k|        m_FPSR.SetStatus(false);
  475|  53.6k|    }
_ZN3dlx9Processor11ClearMemoryEv:
  478|  53.6k|    {
  479|  53.6k|        m_MemoryBlock.Clear();
  480|  53.6k|    }
_ZN3dlx9Processor5RaiseENS_9ExceptionE:
  487|    108|    {
  488|    108|        PHI_ASSERT(exception != Exception::None, "Cannot raise None exception");
  489|       |
  490|    108|        m_LastRaisedException = exception;
  491|       |
  492|    108|        switch (exception)
  493|    108|        {
  494|      6|            case Exception::DivideByZero:
  ------------------
  |  Branch (494:13): [True: 6, False: 102]
  ------------------
  495|      6|                m_Halted = true;
  496|      6|                DLX_ERROR("Division through zero");
  ------------------
  |  |    9|      6|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  497|      6|                return;
  498|      0|            case Exception::Overflow:
  ------------------
  |  Branch (498:13): [True: 0, False: 108]
  ------------------
  499|      0|                DLX_WARN("Overflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  500|      0|                return;
  501|      0|            case Exception::Underflow:
  ------------------
  |  Branch (501:13): [True: 0, False: 108]
  ------------------
  502|      0|                DLX_WARN("Underflow");
  ------------------
  |  |    8|      0|#define DLX_WARN(...)     PHI_EMPTY_MACRO()
  ------------------
  503|      0|                return;
  504|      1|            case Exception::Trap:
  ------------------
  |  Branch (504:13): [True: 1, False: 107]
  ------------------
  505|      1|                m_Halted = true;
  506|      1|                DLX_ERROR("Trapped");
  ------------------
  |  |    9|      1|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  507|      1|                return;
  508|      3|            case Exception::Halt:
  ------------------
  |  Branch (508:13): [True: 3, False: 105]
  ------------------
  509|      3|                m_Halted = true;
  510|      3|                return;
  511|     80|            case Exception::UnknownLabel:
  ------------------
  |  Branch (511:13): [True: 80, False: 28]
  ------------------
  512|     80|                m_Halted = true;
  513|     80|                DLX_ERROR("Unknown label");
  ------------------
  |  |    9|     80|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  514|     80|                return;
  515|      0|            case Exception::BadShift:
  ------------------
  |  Branch (515:13): [True: 0, False: 108]
  ------------------
  516|      0|                DLX_ERROR("Bad shift");
  ------------------
  |  |    9|      0|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  517|      0|                return;
  518|      7|            case Exception::AddressOutOfBounds:
  ------------------
  |  Branch (518:13): [True: 7, False: 101]
  ------------------
  519|      7|                DLX_ERROR("Address out of bounds");
  ------------------
  |  |    9|      7|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  520|      7|                m_Halted = true;
  521|      7|                return;
  522|     11|            case Exception::MisalignedRegisterAccess:
  ------------------
  |  Branch (522:13): [True: 11, False: 97]
  ------------------
  523|     11|                DLX_ERROR("Misaligned register access");
  ------------------
  |  |    9|     11|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  524|     11|                m_Halted = true;
  525|     11|                return;
  526|       |
  527|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  528|      0|            default:
  ------------------
  |  Branch (528:13): [True: 0, False: 108]
  ------------------
  529|      0|                PHI_ASSERT_NOT_REACHED();
  530|    108|#endif
  531|    108|        }
  532|       |
  533|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  534|      0|        PHI_ASSERT_NOT_REACHED();
  535|      0|#endif
  536|      0|    }
_ZN3dlx9Processor9GetMemoryEv:
  557|      6|    {
  558|      6|        return m_MemoryBlock;
  559|      6|    }
_ZNK3dlx9Processor21GetNextProgramCounterEv:
  572|  10.0k|    {
  573|  10.0k|        return m_NextProgramCounter;
  574|  10.0k|    }
_ZN3dlx9Processor21SetNextProgramCounterEN3phi7integerIjEE:
  577|  50.0k|    {
  578|  50.0k|        m_NextProgramCounter = new_npc;
  579|  50.0k|    }
Processor.cpp:_ZN3dlxL25RegisterAccessTypeMatchesENS_18RegisterAccessTypeES0_:
   35|  30.9k|    {
   36|  30.9k|        PHI_ASSERT(access == RegisterAccessType::Signed || access == RegisterAccessType::Unsigned ||
   37|  30.9k|                   access == RegisterAccessType::Float || access == RegisterAccessType::Double);
   38|       |
   39|  30.9k|        switch (expected_access)
   40|  30.9k|        {
   41|     37|            case RegisterAccessType::Ignored:
  ------------------
  |  Branch (41:13): [True: 37, False: 30.8k]
  ------------------
   42|     37|                return true;
   43|      0|            case RegisterAccessType::None:
  ------------------
  |  Branch (43:13): [True: 0, False: 30.9k]
  ------------------
   44|      0|                return false;
   45|      8|            case RegisterAccessType::MixedFloatDouble:
  ------------------
  |  Branch (45:13): [True: 8, False: 30.9k]
  ------------------
   46|      8|                return access == RegisterAccessType::Float || access == RegisterAccessType::Double;
  ------------------
  |  Branch (46:24): [True: 4, False: 4]
  |  Branch (46:63): [True: 4, False: 0]
  ------------------
   47|      0|            case RegisterAccessType::MixedSignedUnsigned:
  ------------------
  |  Branch (47:13): [True: 0, False: 30.9k]
  ------------------
   48|      0|                return access == RegisterAccessType::Signed ||
  ------------------
  |  Branch (48:24): [True: 0, False: 0]
  ------------------
   49|      0|                       access == RegisterAccessType::Unsigned;
  ------------------
  |  Branch (49:24): [True: 0, False: 0]
  ------------------
   50|      4|            case RegisterAccessType::MixedFloatSigned:
  ------------------
  |  Branch (50:13): [True: 4, False: 30.9k]
  ------------------
   51|      4|                return access == RegisterAccessType::Float || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (51:24): [True: 2, False: 2]
  |  Branch (51:63): [True: 2, False: 0]
  ------------------
   52|      0|            case RegisterAccessType::MixedDoubleSigned:
  ------------------
  |  Branch (52:13): [True: 0, False: 30.9k]
  ------------------
   53|      0|                return access == RegisterAccessType::Double || access == RegisterAccessType::Signed;
  ------------------
  |  Branch (53:24): [True: 0, False: 0]
  |  Branch (53:64): [True: 0, False: 0]
  ------------------
   54|  30.8k|            default:
  ------------------
  |  Branch (54:13): [True: 30.8k, False: 49]
  ------------------
   55|  30.8k|                return expected_access == access;
   56|  30.9k|        }
   57|  30.9k|    }

_ZN3dlx19StringToIntRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   13|  4.09M|    {
   14|  4.09M|        if (token.length() == 2)
  ------------------
  |  Branch (14:13): [True: 811k, False: 3.28M]
  ------------------
   15|   811k|        {
   16|   811k|            char first_char = token[0];
   17|   811k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (17:17): [True: 62.8k, False: 748k]
  |  Branch (17:38): [True: 10.3k, False: 738k]
  ------------------
   18|  73.1k|            {
   19|  73.1k|                char second_char = token[1];
   20|  73.1k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (20:21): [True: 66.6k, False: 6.52k]
  |  Branch (20:43): [True: 49.4k, False: 17.1k]
  ------------------
   21|  49.4k|                {
   22|  49.4k|                    return static_cast<IntRegisterID>(second_char - '0');
   23|  49.4k|                }
   24|  73.1k|            }
   25|   811k|        }
   26|  3.28M|        else if (token.length() == 3)
  ------------------
  |  Branch (26:18): [True: 874k, False: 2.41M]
  ------------------
   27|   874k|        {
   28|   874k|            char first_char = token[0];
   29|   874k|            if (first_char == 'R' || first_char == 'r')
  ------------------
  |  Branch (29:17): [True: 42.6k, False: 831k]
  |  Branch (29:38): [True: 4.47k, False: 827k]
  ------------------
   30|  47.1k|            {
   31|  47.1k|                char second_char = token[1];
   32|  47.1k|                char third_char  = token[2];
   33|       |
   34|  47.1k|                switch (second_char)
   35|  47.1k|                {
   36|  17.4k|                    case '1': {
  ------------------
  |  Branch (36:21): [True: 17.4k, False: 29.7k]
  ------------------
   37|  17.4k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (37:29): [True: 14.1k, False: 3.31k]
  |  Branch (37:50): [True: 6.52k, False: 7.58k]
  ------------------
   38|  6.52k|                        {
   39|  6.52k|                            return static_cast<IntRegisterID>(third_char - '0' + 10);
   40|  6.52k|                        }
   41|  10.9k|                        break;
   42|  17.4k|                    }
   43|  10.9k|                    case '2': {
  ------------------
  |  Branch (43:21): [True: 6.63k, False: 40.4k]
  ------------------
   44|  6.63k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (44:29): [True: 4.17k, False: 2.45k]
  |  Branch (44:50): [True: 1.44k, False: 2.73k]
  ------------------
   45|  1.44k|                        {
   46|  1.44k|                            return static_cast<IntRegisterID>(third_char - '0' + 20);
   47|  1.44k|                        }
   48|  5.19k|                        break;
   49|  6.63k|                    }
   50|  7.96k|                    case '3': {
  ------------------
  |  Branch (50:21): [True: 7.96k, False: 39.1k]
  ------------------
   51|  7.96k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (51:29): [True: 2.15k, False: 5.81k]
  |  Branch (51:50): [True: 405, False: 5.40k]
  ------------------
   52|  2.56k|                        {
   53|  2.56k|                            return static_cast<IntRegisterID>(third_char - '0' + 30);
   54|  2.56k|                        }
   55|  5.40k|                        break;
   56|  7.96k|                    }
   57|  15.1k|                    default: {
  ------------------
  |  Branch (57:21): [True: 15.1k, False: 32.0k]
  ------------------
   58|  15.1k|                        break;
   59|  7.96k|                    }
   60|  47.1k|                }
   61|  47.1k|            }
   62|   874k|        }
   63|       |
   64|  4.03M|        return IntRegisterID::None;
   65|  4.09M|    }
_ZN3dlx21StringToFloatRegisterENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   68|  4.03M|    {
   69|  4.03M|        if (token.length() == 2)
  ------------------
  |  Branch (69:13): [True: 762k, False: 3.27M]
  ------------------
   70|   762k|        {
   71|   762k|            char first_char = token[0];
   72|   762k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (72:17): [True: 13.5k, False: 748k]
  |  Branch (72:38): [True: 33.9k, False: 714k]
  ------------------
   73|  47.4k|            {
   74|  47.4k|                char second_char = token[1];
   75|  47.4k|                if (second_char >= '0' && second_char <= '9')
  ------------------
  |  Branch (75:21): [True: 37.5k, False: 9.87k]
  |  Branch (75:43): [True: 16.3k, False: 21.2k]
  ------------------
   76|  16.3k|                {
   77|  16.3k|                    return static_cast<FloatRegisterID>(second_char - '0');
   78|  16.3k|                }
   79|  47.4k|            }
   80|   762k|        }
   81|  3.27M|        else if (token.length() == 3)
  ------------------
  |  Branch (81:18): [True: 863k, False: 2.41M]
  ------------------
   82|   863k|        {
   83|   863k|            char first_char = token[0];
   84|   863k|            if (first_char == 'F' || first_char == 'f')
  ------------------
  |  Branch (84:17): [True: 9.09k, False: 854k]
  |  Branch (84:38): [True: 37.4k, False: 817k]
  ------------------
   85|  46.5k|            {
   86|  46.5k|                char second_char = token[1];
   87|  46.5k|                char third_char  = token[2];
   88|       |
   89|  46.5k|                switch (second_char)
   90|  46.5k|                {
   91|  4.29k|                    case '1': {
  ------------------
  |  Branch (91:21): [True: 4.29k, False: 42.2k]
  ------------------
   92|  4.29k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (92:29): [True: 2.35k, False: 1.93k]
  |  Branch (92:50): [True: 721, False: 1.63k]
  ------------------
   93|    721|                        {
   94|    721|                            return static_cast<FloatRegisterID>(third_char - '0' + 10);
   95|    721|                        }
   96|  3.57k|                        break;
   97|  4.29k|                    }
   98|  9.66k|                    case '2': {
  ------------------
  |  Branch (98:21): [True: 9.66k, False: 36.9k]
  ------------------
   99|  9.66k|                        if (third_char >= '0' && third_char <= '9')
  ------------------
  |  Branch (99:29): [True: 7.55k, False: 2.10k]
  |  Branch (99:50): [True: 1.22k, False: 6.33k]
  ------------------
  100|  1.22k|                        {
  101|  1.22k|                            return static_cast<FloatRegisterID>(third_char - '0' + 20);
  102|  1.22k|                        }
  103|  8.43k|                        break;
  104|  9.66k|                    }
  105|  9.29k|                    case '3': {
  ------------------
  |  Branch (105:21): [True: 9.29k, False: 37.2k]
  ------------------
  106|  9.29k|                        if (third_char == '0' || third_char == '1')
  ------------------
  |  Branch (106:29): [True: 5.92k, False: 3.37k]
  |  Branch (106:50): [True: 660, False: 2.71k]
  ------------------
  107|  6.58k|                        {
  108|  6.58k|                            return static_cast<FloatRegisterID>(third_char - '0' + 30);
  109|  6.58k|                        }
  110|  2.71k|                        break;
  111|  9.29k|                    }
  112|  23.3k|                    default: {
  ------------------
  |  Branch (112:21): [True: 23.3k, False: 23.2k]
  ------------------
  113|  23.3k|                        break;
  114|  9.29k|                    }
  115|  46.5k|                }
  116|  46.5k|            }
  117|   863k|        }
  118|       |
  119|  4.01M|        return FloatRegisterID::None;
  120|  4.03M|    }
_ZN3dlx6IsFPSRENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
  123|  3.88M|    {
  124|  3.88M|        if (token.length() == 4)
  ------------------
  |  Branch (124:13): [True: 619k, False: 3.26M]
  ------------------
  125|   619k|        {
  126|   619k|            char c1 = token[0];
  127|   619k|            char c2 = token[1];
  128|   619k|            char c3 = token[2];
  129|   619k|            char c4 = token[3];
  130|       |
  131|   619k|            return (c1 == 'F' || c1 == 'f') && (c2 == 'P' || c2 == 'p') &&
  ------------------
  |  Branch (131:21): [True: 32.7k, False: 586k]
  |  Branch (131:34): [True: 22.3k, False: 564k]
  |  Branch (131:49): [True: 26.1k, False: 28.9k]
  |  Branch (131:62): [True: 11.7k, False: 17.1k]
  ------------------
  132|   619k|                   (c3 == 'S' || c3 == 's') && (c4 == 'R' || c4 == 'r');
  ------------------
  |  Branch (132:21): [True: 30.2k, False: 7.68k]
  |  Branch (132:34): [True: 2.41k, False: 5.27k]
  |  Branch (132:49): [True: 27.3k, False: 5.32k]
  |  Branch (132:62): [True: 1.43k, False: 3.89k]
  ------------------
  133|   619k|        }
  134|       |
  135|  3.26M|        return false;
  136|  3.88M|    }

_ZN3dlx14StatusRegister9SetStatusEN3phi7booleanE:
   11|  53.6k|    {
   12|  53.6k|        m_Value = value;
   13|  53.6k|    }
_ZNK3dlx14StatusRegister3GetEv:
   16|  1.24k|    {
   17|  1.24k|        return m_Value;
   18|  1.24k|    }

_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_:
   27|  4.86M|    {}
_ZN3dlx5TokenC2ENS0_4TypeENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEN3phi7integerImEES9_j:
   37|   642k|    {}
_ZNK3dlx5Token7GetTypeEv:
   40|  14.1M|    {
   41|  14.1M|        return m_Type;
   42|  14.1M|    }
_ZNK3dlx5Token13GetLineNumberEv:
   50|  4.87M|    {
   51|  4.87M|        return m_LineNumber;
   52|  4.87M|    }
_ZNK3dlx5Token9GetColumnEv:
   55|  4.71M|    {
   56|  4.71M|        return m_Column;
   57|  4.71M|    }
_ZNK3dlx5Token7GetTextEv:
   65|  8.55M|    {
   66|  8.55M|        return m_Text;
   67|  8.55M|    }
_ZNK3dlx5Token7HasHintEv:
   79|   174k|    {
   80|   174k|        return m_HasHint;
   81|   174k|    }
_ZNK3dlx5Token7GetHintEv:
   84|   180k|    {
   85|   180k|        PHI_ASSERT(m_Type == Type::RegisterInt || m_Type == Type::RegisterFloat ||
   86|   180k|                   m_Type == Type::IntegerLiteral || m_Type == Type::OpCode ||
   87|   180k|                   m_Type == Type::ImmediateInteger);
   88|   180k|        PHI_ASSERT(m_HasHint);
   89|       |
   90|   180k|        return m_Hint;
   91|   180k|    }

_ZN3dlx11TokenStream8finalizeEv:
   29|  53.6k|    {
   30|       |#if defined(PHI_DEBUG)
   31|       |        PHI_ASSERT(!m_Finialized);
   32|       |#endif
   33|       |
   34|  53.6k|        m_Iterator = m_Tokens.begin();
   35|       |#if defined(PHI_DEBUG)
   36|       |        m_Finialized = true;
   37|       |#endif
   38|  53.6k|    }
_ZNK3dlx11TokenStream10has_x_moreEN3phi7integerImEE:
   50|  8.45k|    {
   51|  8.45k|        auto it = m_Iterator;
   52|  33.7k|        for (; x > 0u; ++it, --x)
  ------------------
  |  Branch (52:16): [True: 25.3k, False: 8.44k]
  ------------------
   53|  25.3k|        {
   54|  25.3k|            if (it == m_Tokens.end())
  ------------------
  |  Branch (54:17): [True: 4, False: 25.3k]
  ------------------
   55|      4|            {
   56|      4|                return false;
   57|      4|            }
   58|  25.3k|        }
   59|       |
   60|  8.44k|        return true;
   61|  8.45k|    }
_ZNK3dlx11TokenStream8has_moreEv:
   64|  5.53M|    {
   65|  5.53M|        return m_Iterator != m_Tokens.end();
   66|  5.53M|    }
_ZNK3dlx11TokenStream11reached_endEv:
   69|  5.50M|    {
   70|  5.50M|        return m_Iterator == m_Tokens.end();
   71|  5.50M|    }
_ZN3dlx11TokenStream7consumeEv:
   84|  5.50M|    {
   85|  5.50M|        PHI_ASSERT(!reached_end());
   86|       |#if defined(PHI_DEBUG)
   87|       |        PHI_ASSERT(m_Finialized);
   88|       |#endif
   89|       |
   90|  5.50M|        return *m_Iterator++;
   91|  5.50M|    }
_ZN3dlx11TokenStream16current_positionEv:
  163|  8.44k|    {
  164|  8.44k|        return m_Iterator;
  165|  8.44k|    }
_ZN3dlx11TokenStream12set_positionENSt3__111__wrap_iterIPNS_5TokenEEE:
  173|  2.64k|    {
  174|       |#if defined(PHI_DEBUG)
  175|       |        PHI_ASSERT(m_Finialized);
  176|       |#endif
  177|       |
  178|  2.64k|        m_Iterator = it;
  179|  2.64k|    }
_ZNK3dlx11TokenStream6rbeginEv:
  218|  8.48k|    {
  219|       |#if defined(PHI_DEBUG)
  220|       |        //PHI_ASSERT(m_Finialized);
  221|       |#endif
  222|       |
  223|  8.48k|        return m_Tokens.rbegin();
  224|  8.48k|    }
_ZNK3dlx11TokenStream4rendEv:
  227|  85.5k|    {
  228|       |#if defined(PHI_DEBUG)
  229|       |        //PHI_ASSERT(m_Finialized);
  230|       |#endif
  231|       |
  232|  85.5k|        return m_Tokens.rend();
  233|  85.5k|    }

_ZN3dlx8TokenizeENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEE:
   62|  53.6k|    {
   63|  53.6k|        TokenStream tokens;
   64|       |
   65|  53.6k|        std::string_view current_token;
   66|       |
   67|  53.6k|        phi::u64 current_line_number{1u};
   68|  53.6k|        phi::u64 current_column{1u};
   69|  53.6k|        phi::u64 token_begin{0u};
   70|       |
   71|  53.6k|        phi::boolean parsing_comment{false};
   72|       |
   73|  17.8M|        for (phi::usize i{0u}; i < source.length(); ++i)
  ------------------
  |  Branch (73:32): [True: 17.7M, False: 53.6k]
  ------------------
   74|  17.7M|        {
   75|  17.7M|            const char c{source.at(i.unsafe())};
   76|       |
   77|  17.7M|            if (c == '\n')
  ------------------
  |  Branch (77:17): [True: 812k, False: 16.9M]
  ------------------
   78|   812k|            {
   79|   812k|                if (current_token.empty())
  ------------------
  |  Branch (79:21): [True: 305k, False: 507k]
  ------------------
   80|   305k|                {
   81|       |                    // Skip empty lines
   82|   305k|                    tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1u),
   83|   305k|                                        current_line_number, current_column);
   84|       |
   85|   305k|                    parsing_comment = false;
   86|   305k|                    current_line_number += 1u;
   87|   305k|                    current_column = 1u;
   88|   305k|                    continue;
   89|   305k|                }
   90|       |
   91|       |                // Otherwise a new line separates tokens
   92|   507k|                tokens.emplace_back(
   93|   507k|                        ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
   94|   507k|                                   current_line_number, current_column - current_token.length()));
   95|       |
   96|   507k|                tokens.emplace_back(Token::Type::NewLine, source.substr(i.unsafe(), 1),
   97|   507k|                                    current_line_number, current_column);
   98|       |
   99|   507k|                current_token   = std::string_view{};
  100|   507k|                parsing_comment = false;
  101|   507k|                current_line_number += 1u;
  102|   507k|                current_column = 0u;
  103|   507k|            }
  104|       |            // Comments begin with an '/' or ';' and after that the entire line is treated as part of the comment
  105|  16.9M|            else if (c == '/' || c == ';')
  ------------------
  |  Branch (105:22): [True: 19.4k, False: 16.9M]
  |  Branch (105:34): [True: 68.8k, False: 16.8M]
  ------------------
  106|  88.3k|            {
  107|  88.3k|                if (current_token.empty())
  ------------------
  |  Branch (107:21): [True: 22.1k, False: 66.1k]
  ------------------
  108|  22.1k|                {
  109|  22.1k|                    token_begin = i;
  110|  22.1k|                }
  111|  66.1k|                else if (!parsing_comment)
  ------------------
  |  Branch (111:26): [True: 27.7k, False: 38.3k]
  ------------------
  112|  27.7k|                {
  113|  27.7k|                    tokens.emplace_back(ParseToken(
  114|  27.7k|                            source.substr(token_begin.unsafe(), current_token.length()),
  115|  27.7k|                            current_line_number, current_column - current_token.length()));
  116|  27.7k|                    token_begin   = i;
  117|  27.7k|                    current_token = std::string_view{};
  118|  27.7k|                }
  119|       |
  120|  88.3k|                parsing_comment = true;
  121|  88.3k|                current_token   = source.substr(token_begin.unsafe(), current_token.length() + 1);
  122|  88.3k|            }
  123|  16.8M|            else if (parsing_comment)
  ------------------
  |  Branch (123:22): [True: 303k, False: 16.5M]
  ------------------
  124|   303k|            {
  125|       |                // simply append the character
  126|   303k|                current_token = source.substr(token_begin.unsafe(), current_token.length() + 1);
  127|   303k|            }
  128|  16.5M|            else
  129|  16.5M|            {
  130|       |                // Not parsing a comment
  131|  16.5M|                switch (c)
  132|  16.5M|                {
  133|   812k|                    case ' ':
  ------------------
  |  Branch (133:21): [True: 812k, False: 15.7M]
  ------------------
  134|  1.13M|                    case '\t':
  ------------------
  |  Branch (134:21): [True: 320k, False: 16.2M]
  ------------------
  135|  1.41M|                    case '\v':
  ------------------
  |  Branch (135:21): [True: 285k, False: 16.3M]
  ------------------
  136|  1.41M|                        if (current_token.empty())
  ------------------
  |  Branch (136:29): [True: 434k, False: 984k]
  ------------------
  137|   434k|                        {
  138|   434k|                            current_column += 1u;
  139|       |                            // We haven't found any usable character for the current token so just skip the whitespace.
  140|   434k|                            continue;
  141|   434k|                        }
  142|       |
  143|       |                        // Otherwise a whitespace separates tokens
  144|   984k|                        tokens.emplace_back(ParseToken(
  145|   984k|                                source.substr(token_begin.unsafe(), current_token.length()),
  146|   984k|                                current_line_number, current_column - current_token.length()));
  147|   984k|                        current_token = std::string_view{};
  148|   984k|                        break;
  149|  1.67M|                    case ':':
  ------------------
  |  Branch (149:21): [True: 1.67M, False: 14.9M]
  ------------------
  150|       |                        // Need to parse label names together with their colon
  151|  1.67M|                        if (!current_token.empty())
  ------------------
  |  Branch (151:29): [True: 1.11M, False: 562k]
  ------------------
  152|  1.11M|                        {
  153|  1.11M|                            current_token =
  154|  1.11M|                                    source.substr(token_begin.unsafe(), current_token.length() + 1);
  155|  1.11M|                            tokens.emplace_back(ParseToken(
  156|  1.11M|                                    source.substr(token_begin.unsafe(), current_token.length()),
  157|  1.11M|                                    current_line_number,
  158|  1.11M|                                    current_column + 1u - current_token.length()));
  159|       |
  160|  1.11M|                            current_token = std::string_view{};
  161|  1.11M|                        }
  162|   562k|                        else
  163|   562k|                        {
  164|       |                            // Orphan colon
  165|   562k|                            token_begin = i;
  166|       |
  167|   562k|                            tokens.emplace_back(Token::Type::Colon,
  168|   562k|                                                source.substr(token_begin.unsafe(), 1),
  169|   562k|                                                current_line_number, current_column);
  170|   562k|                        }
  171|  1.67M|                        break;
  172|   312k|                    case ',':
  ------------------
  |  Branch (172:21): [True: 312k, False: 16.2M]
  ------------------
  173|   770k|                    case '(':
  ------------------
  |  Branch (173:21): [True: 457k, False: 16.1M]
  ------------------
  174|   976k|                    case ')':
  ------------------
  |  Branch (174:21): [True: 206k, False: 16.3M]
  ------------------
  175|   976k|                        if (!current_token.empty())
  ------------------
  |  Branch (175:29): [True: 505k, False: 470k]
  ------------------
  176|   505k|                        {
  177|   505k|                            tokens.emplace_back(ParseToken(
  178|   505k|                                    source.substr(token_begin.unsafe(), current_token.length()),
  179|   505k|                                    current_line_number, current_column - current_token.length()));
  180|       |
  181|   505k|                            current_token = std::string_view{};
  182|   505k|                        }
  183|       |
  184|   976k|                        Token::Type type;
  185|   976k|                        switch (c)
  186|   976k|                        {
  187|   312k|                            case ',':
  ------------------
  |  Branch (187:29): [True: 312k, False: 663k]
  ------------------
  188|   312k|                                type = Token::Type::Comma;
  189|   312k|                                break;
  190|   457k|                            case '(':
  ------------------
  |  Branch (190:29): [True: 457k, False: 519k]
  ------------------
  191|   457k|                                type = Token::Type::OpenBracket;
  192|   457k|                                break;
  193|   206k|                            case ')':
  ------------------
  |  Branch (193:29): [True: 206k, False: 770k]
  ------------------
  194|   206k|                                type = Token::Type::ClosingBracket;
  195|   206k|                                break;
  196|      0|#if !defined(DLXEMU_COVERAGE_BUILD)
  197|      0|                            default:
  ------------------
  |  Branch (197:29): [True: 0, False: 976k]
  ------------------
  198|      0|                                PHI_ASSERT_NOT_REACHED();
  199|      0|                                break;
  200|   976k|#endif
  201|   976k|                        }
  202|       |
  203|   976k|                        token_begin = i;
  204|       |
  205|   976k|                        tokens.emplace_back(type, source.substr(token_begin.unsafe(), 1),
  206|   976k|                                            current_line_number, current_column);
  207|   976k|                        break;
  208|       |
  209|  12.5M|                    default:
  ------------------
  |  Branch (209:21): [True: 12.5M, False: 4.07M]
  ------------------
  210|  12.5M|                        if (current_token.empty())
  ------------------
  |  Branch (210:29): [True: 3.10M, False: 9.41M]
  ------------------
  211|  3.10M|                        {
  212|  3.10M|                            token_begin = i;
  213|  3.10M|                        }
  214|       |
  215|       |                        // simply append the character
  216|  12.5M|                        current_token =
  217|  12.5M|                                source.substr(token_begin.unsafe(), current_token.length() + 1);
  218|  16.5M|                }
  219|  16.5M|            }
  220|       |
  221|  17.0M|            current_column += 1u;
  222|  17.0M|        }
  223|       |
  224|       |        // Checked the entire string. Parse whats left if anything
  225|  53.6k|        if (!current_token.empty())
  ------------------
  |  Branch (225:13): [True: 21.4k, False: 32.1k]
  ------------------
  226|  21.4k|        {
  227|  21.4k|            tokens.emplace_back(
  228|  21.4k|                    ParseToken(source.substr(token_begin.unsafe(), current_token.length()),
  229|  21.4k|                               current_line_number, current_column - current_token.length()));
  230|  21.4k|        }
  231|       |
  232|       |        // Finialize token stream
  233|  53.6k|        tokens.finalize();
  234|       |
  235|  53.6k|        return tokens;
  236|  53.6k|    }
Tokenize.cpp:_ZN3dlxL10ParseTokenENSt3__117basic_string_viewIcNS0_11char_traitsIcEEEEN3phi7integerImEES7_:
   10|  3.15M|    {
   11|  3.15M|        if (token.at(0) == '#' && token.size() > 1)
  ------------------
  |  Branch (11:13): [True: 37.1k, False: 3.12M]
  |  Branch (11:35): [True: 18.9k, False: 18.1k]
  ------------------
   12|  18.9k|        {
   13|  18.9k|            auto number = ParseNumber(token.substr(1u));
   14|       |
   15|  18.9k|            if (number)
  ------------------
  |  Branch (15:17): [True: 8.67k, False: 10.3k]
  ------------------
   16|  8.67k|            {
   17|  8.67k|                return {Token::Type::ImmediateInteger, token, line_number, column,
   18|  8.67k|                        static_cast<std::uint32_t>(number.value().unsafe())};
   19|  8.67k|            }
   20|       |
   21|  10.3k|            return {Token::Type::ImmediateInteger, token, line_number, column};
   22|  18.9k|        }
   23|       |
   24|  3.13M|        if (token.at(0) == '/' || token.at(0) == ';')
  ------------------
  |  Branch (24:13): [True: 15.6k, False: 3.12M]
  |  Branch (24:35): [True: 34.2k, False: 3.08M]
  ------------------
   25|  49.9k|        {
   26|  49.9k|            return {Token::Type::Comment, token, line_number, column};
   27|  49.9k|        }
   28|       |
   29|  3.08M|        if (phi::optional<phi::i16> number = ParseNumber(token); number.has_value())
  ------------------
  |  Branch (29:66): [True: 36.5k, False: 3.05M]
  ------------------
   30|  36.5k|        {
   31|  36.5k|            return {Token::Type::IntegerLiteral, token, line_number, column,
   32|  36.5k|                    static_cast<std::uint32_t>(number->unsafe())};
   33|  36.5k|        }
   34|       |
   35|  3.05M|        if (IsFPSR(token))
  ------------------
  |  Branch (35:13): [True: 26.1k, False: 3.02M]
  ------------------
   36|  26.1k|        {
   37|  26.1k|            return {Token::Type::RegisterStatus, token, line_number, column};
   38|  26.1k|        }
   39|       |
   40|  3.02M|        if (IntRegisterID id = StringToIntRegister(token); id != IntRegisterID::None)
  ------------------
  |  Branch (40:60): [True: 44.2k, False: 2.98M]
  ------------------
   41|  44.2k|        {
   42|  44.2k|            return {Token::Type::RegisterInt, token, line_number, column,
   43|  44.2k|                    static_cast<std::uint32_t>(id)};
   44|  44.2k|        }
   45|       |
   46|  2.98M|        if (FloatRegisterID id = StringToFloatRegister(token); id != FloatRegisterID::None)
  ------------------
  |  Branch (46:64): [True: 8.71k, False: 2.97M]
  ------------------
   47|  8.71k|        {
   48|  8.71k|            return {Token::Type::RegisterFloat, token, line_number, column,
   49|  8.71k|                    static_cast<std::uint32_t>(id)};
   50|  8.71k|        }
   51|       |
   52|  2.97M|        if (OpCode opcode = StringToOpCode(token); opcode != OpCode::NONE)
  ------------------
  |  Branch (52:52): [True: 544k, False: 2.42M]
  ------------------
   53|   544k|        {
   54|   544k|            return {Token::Type::OpCode, token, line_number, column,
   55|   544k|                    static_cast<std::uint32_t>(opcode)};
   56|   544k|        }
   57|       |
   58|  2.42M|        return {Token::Type::LabelIdentifier, token, line_number, column};
   59|  2.97M|    }

_ZN4fuzz23ParseAsStrucutedDLXCodeEPKhm:
   52|  26.8k|    {
   53|       |        // Constants
   54|  26.8k|        constexpr std::uint8_t number_of_opcodes =
   55|  26.8k|                static_cast<std::uint8_t>(dlx::OpCode::NUMBER_OF_ELEMENTS);
   56|  26.8k|        constexpr std::uint8_t number_of_int_registers   = 32;
   57|  26.8k|        constexpr std::uint8_t number_of_float_registers = 32;
   58|       |
   59|  26.8k|        std::string ret;
   60|       |
   61|   343k|        for (std::size_t index{0}; index < size;)
  ------------------
  |  Branch (61:36): [True: 340k, False: 2.84k]
  ------------------
   62|   340k|        {
   63|   340k|            std::uint8_t current_value = data[index++];
   64|       |
   65|   340k|            switch (current_value)
   66|   340k|            {
   67|       |                // OpCode
   68|   219k|                case 0: {
  ------------------
  |  Branch (68:17): [True: 219k, False: 120k]
  ------------------
   69|       |                    // Has one more value
   70|   219k|                    if (index < size)
  ------------------
  |  Branch (70:25): [True: 219k, False: 455]
  ------------------
   71|   219k|                    {
   72|   219k|                        std::uint8_t opcode_value = data[index++] % number_of_opcodes;
   73|       |
   74|   219k|                        ret += dlx::enum_name(static_cast<dlx::OpCode>(opcode_value));
   75|       |
   76|   219k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (76:29): [True: 3.67k, False: 215k]
  ------------------
   77|  3.67k|                        {
   78|  3.67k|                            return detail::ErrorString;
   79|  3.67k|                        }
   80|   219k|                    }
   81|   215k|                    break;
   82|   219k|                }
   83|       |
   84|       |                // Int Register
   85|   215k|                case 1: {
  ------------------
  |  Branch (85:17): [True: 39.3k, False: 300k]
  ------------------
   86|       |                    // Has one more value
   87|  39.3k|                    if (index < size)
  ------------------
  |  Branch (87:25): [True: 39.3k, False: 82]
  ------------------
   88|  39.3k|                    {
   89|  39.3k|                        std::uint8_t opcode_value = data[index++] % number_of_int_registers;
   90|       |
   91|  39.3k|                        ret += dlx::enum_name(static_cast<dlx::IntRegisterID>(opcode_value));
   92|  39.3k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (92:29): [True: 671, False: 38.6k]
  ------------------
   93|    671|                        {
   94|    671|                            return detail::ErrorString;
   95|    671|                        }
   96|  39.3k|                    }
   97|  38.7k|                    break;
   98|  39.3k|                }
   99|       |
  100|       |                // Float register
  101|  38.7k|                case 2: {
  ------------------
  |  Branch (101:17): [True: 7.48k, False: 332k]
  ------------------
  102|       |                    // Has one more value
  103|  7.48k|                    if (index < size)
  ------------------
  |  Branch (103:25): [True: 7.48k, False: 1]
  ------------------
  104|  7.48k|                    {
  105|  7.48k|                        std::uint8_t opcode_value = data[index++] % number_of_float_registers;
  106|       |
  107|  7.48k|                        ret += dlx::enum_name(static_cast<dlx::FloatRegisterID>(opcode_value));
  108|  7.48k|                        if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (108:29): [True: 82, False: 7.39k]
  ------------------
  109|     82|                        {
  110|     82|                            return detail::ErrorString;
  111|     82|                        }
  112|  7.48k|                    }
  113|  7.40k|                    break;
  114|  7.48k|                }
  115|       |
  116|       |                // Floating point status register
  117|  29.9k|                case 3: {
  ------------------
  |  Branch (117:17): [True: 29.9k, False: 310k]
  ------------------
  118|  29.9k|                    ret += "FPSR";
  119|  29.9k|                    if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (119:25): [True: 31, False: 29.9k]
  ------------------
  120|     31|                    {
  121|     31|                        return detail::ErrorString;
  122|     31|                    }
  123|       |
  124|  29.9k|                    break;
  125|  29.9k|                }
  126|       |
  127|       |                // Immediate integer
  128|  29.9k|                case 4: {
  ------------------
  |  Branch (128:17): [True: 1.22k, False: 338k]
  ------------------
  129|  1.22k|                    ret += "#";
  130|  1.22k|                    [[fallthrough]];
  131|  1.22k|                }
  132|       |
  133|       |                // Integer literal
  134|  1.80k|                case 5: {
  ------------------
  |  Branch (134:17): [True: 582, False: 339k]
  ------------------
  135|  1.80k|                    std::size_t size_of_int = std::min(2ul, size - index);
  136|       |
  137|  1.80k|                    if (size_of_int > 0)
  ------------------
  |  Branch (137:25): [True: 1.78k, False: 22]
  ------------------
  138|  1.78k|                    {
  139|  1.78k|                        std::int16_t value = 0;
  140|       |
  141|  5.30k|                        for (; size_of_int > 0; --size_of_int)
  ------------------
  |  Branch (141:32): [True: 3.52k, False: 1.78k]
  ------------------
  142|  3.52k|                        {
  143|  3.52k|                            value <<= 8;
  144|  3.52k|                            value &= data[index++];
  145|  3.52k|                        }
  146|       |
  147|  1.78k|                        ret += std::to_string(value);
  148|  1.78k|                    }
  149|  1.80k|                    break;
  150|  1.22k|                }
  151|       |
  152|       |                // Label
  153|  6.50k|                case 6: {
  ------------------
  |  Branch (153:17): [True: 6.50k, False: 333k]
  ------------------
  154|  6.50k|                    std::size_t label_length = std::min(5ul, size - index);
  155|       |
  156|  6.50k|                    if (label_length > 0)
  ------------------
  |  Branch (156:25): [True: 6.50k, False: 1]
  ------------------
  157|  6.50k|                    {
  158|  6.50k|                        std::string label_name = "lbl_";
  159|       |
  160|  38.7k|                        for (; label_length > 0; --label_length)
  ------------------
  |  Branch (160:32): [True: 32.2k, False: 6.50k]
  ------------------
  161|  32.2k|                        {
  162|  32.2k|                            char c = detail::SanitizeForIdentifier(data[index++]);
  163|       |
  164|  32.2k|                            label_name += c;
  165|  32.2k|                        }
  166|       |
  167|       |                        // Add 1 in 10 chance to add a colon
  168|  6.50k|                        if (index < size && data[index++] % 10 == 0)
  ------------------
  |  Branch (168:29): [True: 6.40k, False: 96]
  |  Branch (168:45): [True: 3.07k, False: 3.33k]
  ------------------
  169|  3.07k|                        {
  170|  3.07k|                            label_name += ':';
  171|  3.07k|                            ret += label_name;
  172|  3.07k|                        }
  173|  3.43k|                        else
  174|  3.43k|                        {
  175|  3.43k|                            ret += label_name;
  176|  3.43k|                            if (!detail::AddSeperatorToken(ret, data, size, index))
  ------------------
  |  Branch (176:33): [True: 293, False: 3.13k]
  ------------------
  177|    293|                            {
  178|    293|                                return detail::ErrorString;
  179|    293|                            }
  180|  3.43k|                        }
  181|  6.50k|                    }
  182|  6.20k|                    break;
  183|  6.50k|                }
  184|       |
  185|       |                // Newline
  186|  6.20k|                case 7: {
  ------------------
  |  Branch (186:17): [True: 3.20k, False: 337k]
  ------------------
  187|  3.20k|                    ret += '\n';
  188|  3.20k|                    break;
  189|  6.50k|                }
  190|       |
  191|       |                // Comment
  192|  13.0k|                case 8: {
  ------------------
  |  Branch (192:17): [True: 13.0k, False: 327k]
  ------------------
  193|  13.0k|                    std::size_t comment_length = std::min(5ul, size - index);
  194|       |
  195|  13.0k|                    if (comment_length > 0)
  ------------------
  |  Branch (195:25): [True: 13.0k, False: 3]
  ------------------
  196|  13.0k|                    {
  197|  13.0k|                        std::string comment = "; ";
  198|       |
  199|  78.0k|                        for (; comment_length > 0; --comment_length)
  ------------------
  |  Branch (199:32): [True: 64.9k, False: 13.0k]
  ------------------
  200|  64.9k|                        {
  201|  64.9k|                            comment += static_cast<char>(data[index++]);
  202|  64.9k|                        }
  203|       |
  204|  13.0k|                        ret += comment + '\n';
  205|  13.0k|                    }
  206|  13.0k|                    break;
  207|  6.50k|                }
  208|       |
  209|       |                // Ignore
  210|  19.2k|                default:
  ------------------
  |  Branch (210:17): [True: 19.2k, False: 320k]
  ------------------
  211|  19.2k|                    return detail::ErrorString;
  212|   340k|            }
  213|   340k|        }
  214|       |
  215|  2.84k|        return ret;
  216|  26.8k|    }
_ZN4fuzz6detail17AddSeperatorTokenERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKhmRm:
   19|   299k|        {
   20|   299k|            if (index < size)
  ------------------
  |  Branch (20:17): [True: 297k, False: 1.39k]
  ------------------
   21|   297k|            {
   22|   297k|                std::uint8_t val = data[index++];
   23|   297k|                if (val == 0)
  ------------------
  |  Branch (23:21): [True: 248k, False: 49.0k]
  ------------------
   24|   248k|                {
   25|   248k|                    text += ' ';
   26|   248k|                }
   27|  49.0k|                else if (val == 1)
  ------------------
  |  Branch (27:26): [True: 44.3k, False: 4.74k]
  ------------------
   28|  44.3k|                {
   29|  44.3k|                    text += ',';
   30|  44.3k|                }
   31|  4.74k|                else
   32|  4.74k|                {
   33|  4.74k|                    return false;
   34|  4.74k|                }
   35|   297k|            }
   36|       |
   37|   294k|            return true;
   38|   299k|        }
_ZN4fuzz6detail21SanitizeForIdentifierEh:
   41|  32.2k|        {
   42|  32.2k|            if (!phi::is_alpha_numeric(static_cast<char>(c)))
  ------------------
  |  Branch (42:17): [True: 28.2k, False: 4.01k]
  ------------------
   43|  28.2k|            {
   44|  28.2k|                return '_';
   45|  28.2k|            }
   46|       |
   47|  4.01k|            return c;
   48|  32.2k|        }

LLVMFuzzerTestOneInput:
   13|  26.8k|{
   14|  26.8k|    static dlx::Processor processor;
   15|       |
   16|  26.8k|    std::string_view source = std::string_view(reinterpret_cast<const char*>(data), size);
   17|       |
   18|       |    // Parse it
   19|  26.8k|    dlx::ParsedProgram program = dlx::Parser::Parse(source);
   20|       |
   21|       |    // Clear registers and memory
   22|  26.8k|    processor.ClearRegisters();
   23|  26.8k|    processor.ClearMemory();
   24|       |
   25|       |    // Run it
   26|  26.8k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (26:9): [True: 223, False: 26.5k]
  ------------------
   27|    223|    {
   28|    223|        processor.ExecuteCurrentProgram();
   29|    223|    }
   30|       |
   31|  26.8k|    std::string source_structured = fuzz::ParseAsStrucutedDLXCode(data, size);
   32|       |
   33|  26.8k|    program = dlx::Parser::Parse(source_structured);
   34|       |
   35|  26.8k|    processor.ClearRegisters();
   36|  26.8k|    processor.ClearMemory();
   37|       |
   38|  26.8k|    if (processor.LoadProgram(program))
  ------------------
  |  Branch (38:9): [True: 24.1k, False: 2.64k]
  ------------------
   39|  24.1k|    {
   40|  24.1k|        processor.ExecuteCurrentProgram();
   41|  24.1k|    }
   42|       |
   43|  26.8k|    return 0;
   44|  26.8k|}


_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  2.48M|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|  3.23k|    {
   13|  3.23k|        m_Values.resize(starting_size.unsafe());
   14|  3.23k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  3.85k|    {
   18|  3.85k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 3.66k, False: 194]
  ------------------
   19|  3.66k|        {
   20|  3.66k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.66k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|  3.66k|            return {};
   22|  3.66k|        }
   23|       |
   24|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|    194|        return m_Values[raw_address].signed_value;
   27|  3.85k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|    982|    {
   31|    982|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 788, False: 194]
  ------------------
   32|    788|        {
   33|    788|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    788|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|    788|            return {};
   35|    788|        }
   36|       |
   37|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|    194|        return m_Values[raw_address].unsigned_value;
   39|    982|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  1.16k|    {
   43|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 776, False: 388]
  ------------------
   44|    776|        {
   45|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    776|            return {};
   47|    776|        }
   48|       |
   49|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 194, False: 194]
  ------------------
   52|    194|        {
   53|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|    194|            return {};
   55|    194|        }
   56|       |
   57|    194|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  1.16k|    {
   62|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 776, False: 388]
  ------------------
   63|    776|        {
   64|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|    776|            return {};
   66|    776|        }
   67|       |
   68|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 194, False: 194]
  ------------------
   71|    194|        {
   72|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|    194|            return {};
   74|    194|        }
   75|       |
   76|    194|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  1.16k|    {
   81|  1.16k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 776, False: 388]
  ------------------
   82|    776|        {
   83|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|    776|            return {};
   85|    776|        }
   86|       |
   87|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 194, False: 194]
  ------------------
   90|    194|        {
   91|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|    194|            return {};
   93|    194|        }
   94|       |
   95|    194|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|    388|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  1.17k|    {
  100|  1.17k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 785, False: 388]
  ------------------
  101|    785|        {
  102|    785|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    785|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|    785|            return {};
  104|    785|        }
  105|       |
  106|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 194, False: 194]
  ------------------
  109|    194|        {
  110|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|    194|            return {};
  112|    194|        }
  113|       |
  114|    194|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|    388|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  1.40k|    {
  119|  1.40k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 1.01k, False: 388]
  ------------------
  120|  1.01k|        {
  121|  1.01k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.01k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|  1.01k|            return {};
  123|  1.01k|        }
  124|       |
  125|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 194, False: 194]
  ------------------
  128|    194|        {
  129|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|    194|            return {};
  131|    194|        }
  132|       |
  133|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|    388|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  1.16k|    {
  138|  1.16k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 777, False: 388]
  ------------------
  139|    777|        {
  140|    777|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    777|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|    777|            return {};
  142|    777|        }
  143|       |
  144|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 194, False: 194]
  ------------------
  147|    194|        {
  148|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|    194|            return {};
  150|    194|        }
  151|       |
  152|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|  1.10k|    {
  157|  1.10k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 913, False: 194]
  ------------------
  158|    913|        {
  159|    913|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    913|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|    913|            return false;
  161|    913|        }
  162|       |
  163|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|    194|        return true;
  165|  1.10k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|    714|    {
  169|    714|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 520, False: 194]
  ------------------
  170|    520|        {
  171|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|    520|            return false;
  173|    520|        }
  174|       |
  175|    194|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|    194|        return true;
  177|    714|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  2.39k|    {
  181|  2.39k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 2.19k, False: 194]
  ------------------
  182|  2.19k|        {
  183|  2.19k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.19k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|  2.19k|            return false;
  185|  2.19k|        }
  186|       |
  187|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|    194|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|    194|        return true;
  191|  2.39k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|    980|    {
  195|    980|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 786, False: 194]
  ------------------
  196|    786|        {
  197|    786|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    786|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|    786|            return false;
  199|    786|        }
  200|       |
  201|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|    194|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|    194|        return true;
  205|    980|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|    970|    {
  209|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 776, False: 194]
  ------------------
  210|    776|        {
  211|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|    776|            return false;
  213|    776|        }
  214|       |
  215|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|    194|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|    194|        return true;
  219|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|    842|    {
  223|    842|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 648, False: 194]
  ------------------
  224|    648|        {
  225|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|    648|            return false;
  227|    648|        }
  228|       |
  229|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|    194|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|    194|        return true;
  233|    842|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|    970|    {
  237|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 776, False: 194]
  ------------------
  238|    776|        {
  239|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|    776|            return false;
  241|    776|        }
  242|       |
  243|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|    194|        return true;
  247|    970|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|    970|    {
  251|    970|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 776, False: 194]
  ------------------
  252|    776|        {
  253|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|    776|            return false;
  255|    776|        }
  256|       |
  257|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|    194|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|    194|        return true;
  261|    970|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|  21.8k|    {
  265|       |        // Cannot access anything before the starting address
  266|  21.8k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 5.47k, False: 16.4k]
  ------------------
  267|  5.47k|        {
  268|  5.47k|            return false;
  269|  5.47k|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|  16.4k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 3.04k, False: 13.3k]
  ------------------
  273|  16.4k|                                             address.unsafe(), size.unsafe()))
  274|  3.04k|        {
  275|  3.04k|            return false;
  276|  3.04k|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|  13.3k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 3.04k, False: 10.3k]
  ------------------
  280|  13.3k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|  3.04k|        {
  282|  3.04k|            return false;
  283|  3.04k|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|  10.3k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 5.86k, False: 4.46k]
  ------------------
  287|  5.86k|        {
  288|  5.86k|            return false;
  289|  5.86k|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|  4.46k|        return true;
  293|  10.3k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|  2.58k|    {
  298|  2.58k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 2.52k, False: 66]
  |  Branch (298:30): [True: 1.16k, False: 1.35k]
  ------------------
  299|  2.58k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  1.65k|    {
  303|  1.65k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 182k, False: 1.65k]
  ------------------
  304|   182k|        {
  305|   182k|            val.signed_value = 0;
  306|   182k|        }
  307|  1.65k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  310|    194|    {
  311|    194|        return m_StartingAddress;
  312|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  315|    498|    {
  316|    498|        m_StartingAddress = new_starting_address;
  317|    498|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  320|    251|    {
  321|    251|        return m_Values.size();
  322|    251|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  325|   235k|    {
  326|   235k|        m_Values.resize(new_size.unsafe());
  327|   235k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  330|    194|    {
  331|    194|        return m_Values;
  332|    194|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  335|    204|    {
  336|    204|        return m_Values;
  337|    204|    }

LLVMFuzzerTestOneInput:
   80|  3.23k|{
   81|  3.23k|    dlx::MemoryBlock memory_block{1000u, max_size};
   82|       |
   83|  3.23k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   28|  3.23k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   84|       |
   85|   280k|    for (phi::size_t index{0u}; index < size;)
  ------------------
  |  Branch (85:33): [True: 280k, False: 542]
  ------------------
   86|   280k|    {
   87|   280k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   15|   280k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|   280k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1.71k, False: 278k]
  |  |  ------------------
  |  |   17|   280k|    {                                                                                              \
  |  |   18|  1.71k|        return 0;                                                                                  \
  |  |   19|  1.71k|    }                                                                                              \
  |  |   20|   280k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   88|       |
   89|   278k|        switch (function_index)
  ------------------
  |  Branch (89:17): [True: 17.2k, False: 261k]
  ------------------
   90|   278k|        {
   91|       |            // LoadByte
   92|  4.17k|            case 0: {
  ------------------
  |  Branch (92:13): [True: 4.17k, False: 274k]
  ------------------
   93|  4.17k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  4.17k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  4.17k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 323, False: 3.85k]
  |  |  ------------------
  |  |   17|  4.17k|    {                                                                                              \
  |  |   18|    323|        return 0;                                                                                  \
  |  |   19|    323|    }                                                                                              \
  |  |   20|  4.17k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   94|       |
   95|  3.85k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   28|  3.85k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   96|  3.85k|                (void)memory_block.LoadByte(address);
   97|  3.85k|                break;
   98|  4.17k|            }
   99|       |
  100|       |            // LoadUnsignedByte
  101|    983|            case 1: {
  ------------------
  |  Branch (101:13): [True: 983, False: 277k]
  ------------------
  102|    983|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    983|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    983|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 982]
  |  |  ------------------
  |  |   17|    983|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    983|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  103|       |
  104|    982|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   28|    982|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  105|    982|                (void)memory_block.LoadUnsignedByte(address);
  106|    982|                break;
  107|    983|            }
  108|       |
  109|       |            // LoadHalfWord
  110|  1.16k|            case 2: {
  ------------------
  |  Branch (110:13): [True: 1.16k, False: 277k]
  ------------------
  111|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  112|       |
  113|  1.16k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  114|  1.16k|                (void)memory_block.LoadHalfWord(address);
  115|  1.16k|                break;
  116|  1.16k|            }
  117|       |
  118|       |                // LoadUnsignedHalfWord
  119|  1.16k|            case 3: {
  ------------------
  |  Branch (119:13): [True: 1.16k, False: 277k]
  ------------------
  120|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  121|       |
  122|  1.16k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  123|  1.16k|                (void)memory_block.LoadUnsignedHalfWord(address);
  124|  1.16k|                break;
  125|  1.16k|            }
  126|       |
  127|       |            // LoadWord
  128|  1.16k|            case 4: {
  ------------------
  |  Branch (128:13): [True: 1.16k, False: 277k]
  ------------------
  129|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  130|       |
  131|  1.16k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  132|  1.16k|                (void)memory_block.LoadWord(address);
  133|  1.16k|                break;
  134|  1.16k|            }
  135|       |
  136|       |            // LoadUnsignedWord
  137|  1.17k|            case 5: {
  ------------------
  |  Branch (137:13): [True: 1.17k, False: 277k]
  ------------------
  138|  1.17k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.17k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.17k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.17k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.17k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  139|       |
  140|  1.17k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.17k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  141|  1.17k|                (void)memory_block.LoadUnsignedWord(address);
  142|  1.17k|                break;
  143|  1.17k|            }
  144|       |
  145|       |            // LoadFloat
  146|  1.41k|            case 6: {
  ------------------
  |  Branch (146:13): [True: 1.41k, False: 277k]
  ------------------
  147|  1.41k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.41k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.41k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 9, False: 1.40k]
  |  |  ------------------
  |  |   17|  1.41k|    {                                                                                              \
  |  |   18|      9|        return 0;                                                                                  \
  |  |   19|      9|    }                                                                                              \
  |  |   20|  1.41k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  148|       |
  149|  1.40k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   28|  1.40k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  150|  1.40k|                (void)memory_block.LoadFloat(address);
  151|  1.40k|                break;
  152|  1.41k|            }
  153|       |
  154|       |            // LoadDouble
  155|  1.16k|            case 7: {
  ------------------
  |  Branch (155:13): [True: 1.16k, False: 277k]
  ------------------
  156|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  157|       |
  158|  1.16k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  159|  1.16k|                (void)memory_block.LoadDouble(address);
  160|  1.16k|                break;
  161|  1.16k|            }
  162|       |
  163|       |            // StoreByte
  164|  1.10k|            case 8: {
  ------------------
  |  Branch (164:13): [True: 1.10k, False: 277k]
  ------------------
  165|  1.10k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.10k]
  |  |  ------------------
  |  |   17|  1.10k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  166|  1.10k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   15|  1.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.10k]
  |  |  ------------------
  |  |   17|  1.10k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|       |
  168|  1.10k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.10k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  169|  1.10k|                (void)memory_block.StoreByte(address, value);
  170|  1.10k|                break;
  171|  1.10k|            }
  172|       |
  173|       |            // StoreUnsignedByte
  174|    716|            case 9: {
  ------------------
  |  Branch (174:13): [True: 716, False: 277k]
  ------------------
  175|    716|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    716|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    716|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 715]
  |  |  ------------------
  |  |   17|    716|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    716|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  176|    715|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   15|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   17|    715|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|       |
  178|    714|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  179|    714|                (void)memory_block.StoreUnsignedByte(address, value);
  180|    714|                break;
  181|    715|            }
  182|       |
  183|       |            // StoreHalfWord
  184|  2.39k|            case 10: {
  ------------------
  |  Branch (184:13): [True: 2.39k, False: 276k]
  ------------------
  185|  2.39k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  2.39k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  2.39k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 2, False: 2.39k]
  |  |  ------------------
  |  |   17|  2.39k|    {                                                                                              \
  |  |   18|      2|        return 0;                                                                                  \
  |  |   19|      2|    }                                                                                              \
  |  |   20|  2.39k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  186|  2.39k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   15|  2.39k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  2.39k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 2.39k]
  |  |  ------------------
  |  |   17|  2.39k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  2.39k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|       |
  188|  2.39k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  2.39k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  189|  2.39k|                (void)memory_block.StoreHalfWord(address, value);
  190|  2.39k|                break;
  191|  2.39k|            }
  192|       |
  193|       |            // StoreUnsignedHalfWord
  194|    982|            case 11: {
  ------------------
  |  Branch (194:13): [True: 982, False: 277k]
  ------------------
  195|    982|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    982|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    982|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 981]
  |  |  ------------------
  |  |   17|    982|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    982|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  196|    981|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   15|    981|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    981|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 980]
  |  |  ------------------
  |  |   17|    981|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    981|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|       |
  198|    980|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    980|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  199|    980|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  200|    980|                break;
  201|    981|            }
  202|       |
  203|       |            // StoreWord
  204|    972|            case 12: {
  ------------------
  |  Branch (204:13): [True: 972, False: 277k]
  ------------------
  205|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  206|    971|                GET_T(phi::int32_t, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|       |
  208|    970|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  209|    970|                (void)memory_block.StoreWord(address, value);
  210|    970|                break;
  211|    971|            }
  212|       |
  213|       |            // StoreUnsignedWord
  214|    849|            case 13: {
  ------------------
  |  Branch (214:13): [True: 849, False: 277k]
  ------------------
  215|    849|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    849|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    849|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 6, False: 843]
  |  |  ------------------
  |  |   17|    849|    {                                                                                              \
  |  |   18|      6|        return 0;                                                                                  \
  |  |   19|      6|    }                                                                                              \
  |  |   20|    849|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  216|    843|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   15|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   17|    843|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|       |
  218|    842|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  219|    842|                (void)memory_block.StoreUnsignedWord(address, value);
  220|    842|                break;
  221|    843|            }
  222|       |
  223|       |            // StoreFloat
  224|    972|            case 14: {
  ------------------
  |  Branch (224:13): [True: 972, False: 277k]
  ------------------
  225|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  226|    971|                GET_T(phi::float32, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|       |
  228|    970|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  229|    970|                (void)memory_block.StoreFloat(address, value);
  230|    970|                break;
  231|    971|            }
  232|       |
  233|       |            // StoreDouble
  234|    972|            case 15: {
  ------------------
  |  Branch (234:13): [True: 972, False: 277k]
  ------------------
  235|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  236|    971|                GET_T(phi::float64, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|       |
  238|    970|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  239|    970|                (void)memory_block.StoreDouble(address, value);
  240|    970|                break;
  241|    971|            }
  242|       |
  243|       |            // IsAddressValid
  244|    877|            case 16: {
  ------------------
  |  Branch (244:13): [True: 877, False: 277k]
  ------------------
  245|    877|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    877|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    877|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 876]
  |  |  ------------------
  |  |   17|    877|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    877|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  246|    876|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    876|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    876|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 875]
  |  |  ------------------
  |  |   17|    876|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    876|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|       |
  248|    875|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   28|    875|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  249|    875|                (void)memory_block.IsAddressValid(address, arg_size);
  250|    875|                break;
  251|    876|            }
  252|       |
  253|       |            // IsAddressAlignedCorrectly
  254|    262|            case 17: {
  ------------------
  |  Branch (254:13): [True: 262, False: 278k]
  ------------------
  255|    262|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    262|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    262|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 261]
  |  |  ------------------
  |  |   17|    262|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    262|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  256|    261|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    261|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    261|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 260]
  |  |  ------------------
  |  |   17|    261|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    261|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|       |
  258|    260|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   28|    260|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  259|    260|                         print_int(arg_size));
  260|    260|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  261|    260|                break;
  262|    261|            }
  263|       |
  264|       |            // GetStartingAddress
  265|    194|            case 18: {
  ------------------
  |  Branch (265:13): [True: 194, False: 278k]
  ------------------
  266|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  267|    194|                (void)memory_block.GetStartingAddress();
  268|    194|                break;
  269|    261|            }
  270|       |
  271|       |            // SetStartingAddress
  272|    499|            case 19: {
  ------------------
  |  Branch (272:13): [True: 499, False: 277k]
  ------------------
  273|    499|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    499|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    499|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 498]
  |  |  ------------------
  |  |   17|    499|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    499|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  274|       |
  275|    498|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   28|    498|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  276|    498|                memory_block.SetStartingAddress(address);
  277|    498|                break;
  278|    499|            }
  279|       |
  280|       |            // GetSize
  281|    251|            case 20: {
  ------------------
  |  Branch (281:13): [True: 251, False: 278k]
  ------------------
  282|    251|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   28|    251|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  283|    251|                (void)memory_block.GetSize();
  284|    251|                break;
  285|    499|            }
  286|       |
  287|       |            // Resize
  288|   235k|            case 21: {
  ------------------
  |  Branch (288:13): [True: 235k, False: 42.7k]
  ------------------
  289|   235k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   15|   235k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|   235k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 345, False: 235k]
  |  |  ------------------
  |  |   17|   235k|    {                                                                                              \
  |  |   18|    345|        return 0;                                                                                  \
  |  |   19|    345|    }                                                                                              \
  |  |   20|   235k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  290|       |
  291|       |                // Reject too big resizes
  292|   235k|                if (new_size > max_size)
  ------------------
  |  Branch (292:21): [True: 261, False: 235k]
  ------------------
  293|    261|                {
  294|    261|                    return 0;
  295|    261|                }
  296|       |
  297|   235k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   28|   235k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  298|   235k|                memory_block.Resize(new_size);
  299|   235k|                break;
  300|   235k|            }
  301|       |
  302|       |            // GetRawMemory
  303|    194|            case 22: {
  ------------------
  |  Branch (303:13): [True: 194, False: 278k]
  ------------------
  304|    194|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  305|    194|                (void)memory_block.GetRawMemory();
  306|    194|                break;
  307|   235k|            }
  308|       |
  309|       |            // GetRawMemory const
  310|    204|            case 23: {
  ------------------
  |  Branch (310:13): [True: 204, False: 278k]
  ------------------
  311|    204|                const dlx::MemoryBlock& const_memory_block = memory_block;
  312|    204|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   28|    204|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  313|    204|                (void)const_memory_block.GetRawMemory();
  314|    204|                break;
  315|   235k|            }
  316|       |
  317|       |            // Clear
  318|  1.65k|            case 24: {
  ------------------
  |  Branch (318:13): [True: 1.65k, False: 276k]
  ------------------
  319|  1.65k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   28|  1.65k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  320|  1.65k|                memory_block.Clear();
  321|  1.65k|            }
  322|   278k|        }
  323|   278k|    }
  324|       |
  325|    542|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   28|    542|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  326|       |
  327|    542|    return 0;
  328|  3.23k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   48|   281k|{
   49|   281k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1.71k, False: 279k]
  ------------------
   50|  1.71k|    {
   51|  1.71k|        return {};
   52|  1.71k|    }
   53|       |
   54|   279k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   279k|    const phi::size_t old_index = index;
   57|   279k|    index += aligned_size<T>();
   58|       |
   59|   279k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   279k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   279k|        return static_cast<bool>(value);
   63|   279k|    }
   64|   279k|    else
   65|   279k|    {
   66|   279k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   279k|    }
   68|   279k|}
_Z10has_x_moremmm:
   33|   548k|{
   34|   548k|    return index + x < size;
   35|   548k|}
_Z12aligned_sizeIjEmv:
   41|   279k|{
   42|   279k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   279k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   48|   259k|{
   49|   259k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 702, False: 259k]
  ------------------
   50|    702|    {
   51|    702|        return {};
   52|    702|    }
   53|       |
   54|   259k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   259k|    const phi::size_t old_index = index;
   57|   259k|    index += aligned_size<T>();
   58|       |
   59|   259k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   259k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   259k|        return static_cast<bool>(value);
   63|   259k|    }
   64|   259k|    else
   65|   259k|    {
   66|   259k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   259k|    }
   68|   259k|}
_Z12aligned_sizeImEmv:
   41|   259k|{
   42|   259k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   259k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   48|  1.10k|{
   49|  1.10k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.10k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.10k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.10k|    const phi::size_t old_index = index;
   57|  1.10k|    index += aligned_size<T>();
   58|       |
   59|  1.10k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.10k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.10k|        return static_cast<bool>(value);
   63|  1.10k|    }
   64|  1.10k|    else
   65|  1.10k|    {
   66|  1.10k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.10k|    }
   68|  1.10k|}
_Z12aligned_sizeIaEmv:
   41|  1.10k|{
   42|  1.10k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.10k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   48|    715|{
   49|    715|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 714]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    714|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    714|    const phi::size_t old_index = index;
   57|    714|    index += aligned_size<T>();
   58|       |
   59|    714|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    714|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    714|        return static_cast<bool>(value);
   63|    714|    }
   64|    714|    else
   65|    714|    {
   66|    714|        return *reinterpret_cast<const T*>(data + old_index);
   67|    714|    }
   68|    714|}
_Z12aligned_sizeIhEmv:
   41|    714|{
   42|    714|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    714|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   48|  2.39k|{
   49|  2.39k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 2.39k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  2.39k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  2.39k|    const phi::size_t old_index = index;
   57|  2.39k|    index += aligned_size<T>();
   58|       |
   59|  2.39k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  2.39k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  2.39k|        return static_cast<bool>(value);
   63|  2.39k|    }
   64|  2.39k|    else
   65|  2.39k|    {
   66|  2.39k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  2.39k|    }
   68|  2.39k|}
_Z12aligned_sizeIsEmv:
   41|  2.39k|{
   42|  2.39k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  2.39k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   48|    981|{
   49|    981|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 980]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    980|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    980|    const phi::size_t old_index = index;
   57|    980|    index += aligned_size<T>();
   58|       |
   59|    980|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    980|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    980|        return static_cast<bool>(value);
   63|    980|    }
   64|    980|    else
   65|    980|    {
   66|    980|        return *reinterpret_cast<const T*>(data + old_index);
   67|    980|    }
   68|    980|}
_Z12aligned_sizeItEmv:
   41|    980|{
   42|    980|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    980|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIiEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIfEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIdEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}


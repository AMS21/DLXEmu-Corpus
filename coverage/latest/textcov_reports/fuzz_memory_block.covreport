_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   938k|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|  1.68k|    {
   13|  1.68k|        m_Values.resize(starting_size.unsafe());
   14|  1.68k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  1.88k|    {
   18|  1.88k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 1.61k, False: 268]
  ------------------
   19|  1.61k|        {
   20|  1.61k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.61k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|  1.61k|            return {};
   22|  1.61k|        }
   23|       |
   24|    268|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|    268|        return m_Values[raw_address].signed_value;
   27|  1.88k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|  1.11k|    {
   31|  1.11k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 921, False: 194]
  ------------------
   32|    921|        {
   33|    921|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    921|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|    921|            return {};
   35|    921|        }
   36|       |
   37|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|    194|        return m_Values[raw_address].unsigned_value;
   39|  1.11k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  1.16k|    {
   43|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 776, False: 388]
  ------------------
   44|    776|        {
   45|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    776|            return {};
   47|    776|        }
   48|       |
   49|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 194, False: 194]
  ------------------
   52|    194|        {
   53|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|    194|            return {};
   55|    194|        }
   56|       |
   57|    194|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  1.16k|    {
   62|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 776, False: 388]
  ------------------
   63|    776|        {
   64|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|    776|            return {};
   66|    776|        }
   67|       |
   68|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 194, False: 194]
  ------------------
   71|    194|        {
   72|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|    194|            return {};
   74|    194|        }
   75|       |
   76|    194|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  1.16k|    {
   81|  1.16k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 776, False: 388]
  ------------------
   82|    776|        {
   83|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|    776|            return {};
   85|    776|        }
   86|       |
   87|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 194, False: 194]
  ------------------
   90|    194|        {
   91|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|    194|            return {};
   93|    194|        }
   94|       |
   95|    194|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|    388|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  1.16k|    {
  100|  1.16k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 776, False: 388]
  ------------------
  101|    776|        {
  102|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|    776|            return {};
  104|    776|        }
  105|       |
  106|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 194, False: 194]
  ------------------
  109|    194|        {
  110|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|    194|            return {};
  112|    194|        }
  113|       |
  114|    194|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|    388|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  1.35k|    {
  119|  1.35k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 968, False: 388]
  ------------------
  120|    968|        {
  121|    968|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    968|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|    968|            return {};
  123|    968|        }
  124|       |
  125|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 194, False: 194]
  ------------------
  128|    194|        {
  129|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|    194|            return {};
  131|    194|        }
  132|       |
  133|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|    388|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  1.16k|    {
  138|  1.16k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 776, False: 388]
  ------------------
  139|    776|        {
  140|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|    776|            return {};
  142|    776|        }
  143|       |
  144|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 194, False: 194]
  ------------------
  147|    194|        {
  148|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|    194|            return {};
  150|    194|        }
  151|       |
  152|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|    970|    {
  157|    970|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 776, False: 194]
  ------------------
  158|    776|        {
  159|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|    776|            return false;
  161|    776|        }
  162|       |
  163|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|    194|        return true;
  165|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|    714|    {
  169|    714|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 520, False: 194]
  ------------------
  170|    520|        {
  171|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|    520|            return false;
  173|    520|        }
  174|       |
  175|    194|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|    194|        return true;
  177|    714|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  1.31k|    {
  181|  1.31k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 1.12k, False: 194]
  ------------------
  182|  1.12k|        {
  183|  1.12k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.12k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|  1.12k|            return false;
  185|  1.12k|        }
  186|       |
  187|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|    194|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|    194|        return true;
  191|  1.31k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|    970|    {
  195|    970|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 776, False: 194]
  ------------------
  196|    776|        {
  197|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|    776|            return false;
  199|    776|        }
  200|       |
  201|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|    194|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|    194|        return true;
  205|    970|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|    970|    {
  209|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 776, False: 194]
  ------------------
  210|    776|        {
  211|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|    776|            return false;
  213|    776|        }
  214|       |
  215|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|    194|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|    194|        return true;
  219|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|    842|    {
  223|    842|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 648, False: 194]
  ------------------
  224|    648|        {
  225|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|    648|            return false;
  227|    648|        }
  228|       |
  229|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|    194|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|    194|        return true;
  233|    842|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|    970|    {
  237|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 776, False: 194]
  ------------------
  238|    776|        {
  239|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|    776|            return false;
  241|    776|        }
  242|       |
  243|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|    194|        return true;
  247|    970|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|    987|    {
  251|    987|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 783, False: 204]
  ------------------
  252|    783|        {
  253|    783|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    783|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|    783|            return false;
  255|    783|        }
  256|       |
  257|    204|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|    204|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|    204|        return true;
  261|    987|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|  18.7k|    {
  265|       |        // Cannot access anything before the starting address
  266|  18.7k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 3.97k, False: 14.7k]
  ------------------
  267|  3.97k|        {
  268|  3.97k|            return false;
  269|  3.97k|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|  14.7k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 3.04k, False: 11.7k]
  ------------------
  273|  14.7k|                                             address.unsafe(), size.unsafe()))
  274|  3.04k|        {
  275|  3.04k|            return false;
  276|  3.04k|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|  11.7k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 3.04k, False: 8.69k]
  ------------------
  280|  11.7k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|  3.04k|        {
  282|  3.04k|            return false;
  283|  3.04k|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|  8.69k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 4.15k, False: 4.54k]
  ------------------
  287|  4.15k|        {
  288|  4.15k|            return false;
  289|  4.15k|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|  4.54k|        return true;
  293|  8.69k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|  2.67k|    {
  298|  2.67k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 2.61k, False: 66]
  |  Branch (298:30): [True: 1.24k, False: 1.36k]
  ------------------
  299|  2.67k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  1.68k|    {
  303|  1.68k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 180k, False: 1.68k]
  ------------------
  304|   180k|        {
  305|   180k|            val.signed_value = 0;
  306|   180k|        }
  307|  1.68k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  310|    194|    {
  311|    194|        return m_StartingAddress;
  312|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  315|    720|    {
  316|    720|        m_StartingAddress = new_starting_address;
  317|    720|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  320|    201|    {
  321|    201|        return m_Values.size();
  322|    201|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  325|  84.3k|    {
  326|  84.3k|        m_Values.resize(new_size.unsafe());
  327|  84.3k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  330|    194|    {
  331|    194|        return m_Values;
  332|    194|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  335|    211|    {
  336|    211|        return m_Values;
  337|    211|    }

LLVMFuzzerTestOneInput:
   81|  1.68k|{
   82|  1.68k|    dlx::MemoryBlock memory_block{1000u, max_size};
   83|       |
   84|  1.68k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   29|  1.68k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   85|       |
   86|   114k|    for (phi::size_t index{0u}; index < size;)
  ------------------
  |  Branch (86:33): [True: 114k, False: 541]
  ------------------
   87|   114k|    {
   88|   114k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   16|   114k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|   114k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 906, False: 113k]
  |  |  ------------------
  |  |   18|   114k|    {                                                                                              \
  |  |   19|    906|        return 0;                                                                                  \
  |  |   20|    906|    }                                                                                              \
  |  |   21|   114k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   89|       |
   90|   113k|        switch (function_index)
  ------------------
  |  Branch (90:17): [True: 6.54k, False: 106k]
  ------------------
   91|   113k|        {
   92|       |            // LoadByte
   93|  1.95k|            case 0: {
  ------------------
  |  Branch (93:13): [True: 1.95k, False: 111k]
  ------------------
   94|  1.95k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.95k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.95k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 65, False: 1.88k]
  |  |  ------------------
  |  |   18|  1.95k|    {                                                                                              \
  |  |   19|     65|        return 0;                                                                                  \
  |  |   20|     65|    }                                                                                              \
  |  |   21|  1.95k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   95|       |
   96|  1.88k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   29|  1.88k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   97|  1.88k|                (void)memory_block.LoadByte(address);
   98|  1.88k|                break;
   99|  1.95k|            }
  100|       |
  101|       |            // LoadUnsignedByte
  102|  1.11k|            case 1: {
  ------------------
  |  Branch (102:13): [True: 1.11k, False: 112k]
  ------------------
  103|  1.11k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.11k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.11k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.11k]
  |  |  ------------------
  |  |   18|  1.11k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.11k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  104|       |
  105|  1.11k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   29|  1.11k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  106|  1.11k|                (void)memory_block.LoadUnsignedByte(address);
  107|  1.11k|                break;
  108|  1.11k|            }
  109|       |
  110|       |            // LoadHalfWord
  111|  1.16k|            case 2: {
  ------------------
  |  Branch (111:13): [True: 1.16k, False: 112k]
  ------------------
  112|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  113|       |
  114|  1.16k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  115|  1.16k|                (void)memory_block.LoadHalfWord(address);
  116|  1.16k|                break;
  117|  1.16k|            }
  118|       |
  119|       |                // LoadUnsignedHalfWord
  120|  1.16k|            case 3: {
  ------------------
  |  Branch (120:13): [True: 1.16k, False: 112k]
  ------------------
  121|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  122|       |
  123|  1.16k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  124|  1.16k|                (void)memory_block.LoadUnsignedHalfWord(address);
  125|  1.16k|                break;
  126|  1.16k|            }
  127|       |
  128|       |            // LoadWord
  129|  1.16k|            case 4: {
  ------------------
  |  Branch (129:13): [True: 1.16k, False: 112k]
  ------------------
  130|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  131|       |
  132|  1.16k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  133|  1.16k|                (void)memory_block.LoadWord(address);
  134|  1.16k|                break;
  135|  1.16k|            }
  136|       |
  137|       |            // LoadUnsignedWord
  138|  1.16k|            case 5: {
  ------------------
  |  Branch (138:13): [True: 1.16k, False: 112k]
  ------------------
  139|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  140|       |
  141|  1.16k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  142|  1.16k|                (void)memory_block.LoadUnsignedWord(address);
  143|  1.16k|                break;
  144|  1.16k|            }
  145|       |
  146|       |            // LoadFloat
  147|  1.35k|            case 6: {
  ------------------
  |  Branch (147:13): [True: 1.35k, False: 112k]
  ------------------
  148|  1.35k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.35k]
  |  |  ------------------
  |  |   18|  1.35k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  149|       |
  150|  1.35k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   29|  1.35k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  151|  1.35k|                (void)memory_block.LoadFloat(address);
  152|  1.35k|                break;
  153|  1.35k|            }
  154|       |
  155|       |            // LoadDouble
  156|  1.16k|            case 7: {
  ------------------
  |  Branch (156:13): [True: 1.16k, False: 112k]
  ------------------
  157|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  158|       |
  159|  1.16k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  160|  1.16k|                (void)memory_block.LoadDouble(address);
  161|  1.16k|                break;
  162|  1.16k|            }
  163|       |
  164|       |            // StoreByte
  165|    972|            case 8: {
  ------------------
  |  Branch (165:13): [True: 972, False: 112k]
  ------------------
  166|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|    971|                GET_T(phi::int8_t, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  168|       |
  169|    970|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  170|    970|                (void)memory_block.StoreByte(address, value);
  171|    970|                break;
  172|    971|            }
  173|       |
  174|       |            // StoreUnsignedByte
  175|    716|            case 9: {
  ------------------
  |  Branch (175:13): [True: 716, False: 112k]
  ------------------
  176|    716|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    716|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    716|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 715]
  |  |  ------------------
  |  |   18|    716|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    716|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|    715|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   16|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   18|    715|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  178|       |
  179|    714|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  180|    714|                (void)memory_block.StoreUnsignedByte(address, value);
  181|    714|                break;
  182|    715|            }
  183|       |
  184|       |            // StoreHalfWord
  185|  1.31k|            case 10: {
  ------------------
  |  Branch (185:13): [True: 1.31k, False: 112k]
  ------------------
  186|  1.31k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.31k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.31k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.31k]
  |  |  ------------------
  |  |   18|  1.31k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.31k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|  1.31k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   16|  1.31k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.31k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.31k]
  |  |  ------------------
  |  |   18|  1.31k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.31k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  188|       |
  189|  1.31k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|  1.31k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  190|  1.31k|                (void)memory_block.StoreHalfWord(address, value);
  191|  1.31k|                break;
  192|  1.31k|            }
  193|       |
  194|       |            // StoreUnsignedHalfWord
  195|    972|            case 11: {
  ------------------
  |  Branch (195:13): [True: 972, False: 112k]
  ------------------
  196|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|    971|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  198|       |
  199|    970|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  200|    970|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  201|    970|                break;
  202|    971|            }
  203|       |
  204|       |            // StoreWord
  205|    972|            case 12: {
  ------------------
  |  Branch (205:13): [True: 972, False: 112k]
  ------------------
  206|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|    971|                GET_T(phi::int32_t, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  208|       |
  209|    970|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  210|    970|                (void)memory_block.StoreWord(address, value);
  211|    970|                break;
  212|    971|            }
  213|       |
  214|       |            // StoreUnsignedWord
  215|    844|            case 13: {
  ------------------
  |  Branch (215:13): [True: 844, False: 112k]
  ------------------
  216|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   18|    844|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|    843|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   16|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   18|    843|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  218|       |
  219|    842|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  220|    842|                (void)memory_block.StoreUnsignedWord(address, value);
  221|    842|                break;
  222|    843|            }
  223|       |
  224|       |            // StoreFloat
  225|    972|            case 14: {
  ------------------
  |  Branch (225:13): [True: 972, False: 112k]
  ------------------
  226|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|    971|                GET_T(phi::float32, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  228|       |
  229|    970|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  230|    970|                (void)memory_block.StoreFloat(address, value);
  231|    970|                break;
  232|    971|            }
  233|       |
  234|       |            // StoreDouble
  235|    989|            case 15: {
  ------------------
  |  Branch (235:13): [True: 989, False: 112k]
  ------------------
  236|    989|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    989|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    989|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 988]
  |  |  ------------------
  |  |   18|    989|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    989|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|    988|                GET_T(phi::float64, value);
  ------------------
  |  |   16|    988|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    988|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 987]
  |  |  ------------------
  |  |   18|    988|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    988|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  238|       |
  239|    987|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   29|    987|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  240|    987|                (void)memory_block.StoreDouble(address, value);
  241|    987|                break;
  242|    988|            }
  243|       |
  244|       |            // IsAddressValid
  245|    844|            case 16: {
  ------------------
  |  Branch (245:13): [True: 844, False: 112k]
  ------------------
  246|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   18|    844|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|    843|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   16|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   18|    843|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  248|       |
  249|    842|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   29|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  250|    842|                (void)memory_block.IsAddressValid(address, arg_size);
  251|    842|                break;
  252|    843|            }
  253|       |
  254|       |            // IsAddressAlignedCorrectly
  255|    353|            case 17: {
  ------------------
  |  Branch (255:13): [True: 353, False: 113k]
  ------------------
  256|    353|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    353|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    353|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 352]
  |  |  ------------------
  |  |   18|    353|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    353|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|    352|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   16|    352|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    352|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 351]
  |  |  ------------------
  |  |   18|    352|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    352|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  258|       |
  259|    351|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   29|    351|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  260|    351|                         print_int(arg_size));
  261|    351|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  262|    351|                break;
  263|    352|            }
  264|       |
  265|       |            // GetStartingAddress
  266|    194|            case 18: {
  ------------------
  |  Branch (266:13): [True: 194, False: 113k]
  ------------------
  267|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   29|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  268|    194|                (void)memory_block.GetStartingAddress();
  269|    194|                break;
  270|    352|            }
  271|       |
  272|       |            // SetStartingAddress
  273|    721|            case 19: {
  ------------------
  |  Branch (273:13): [True: 721, False: 112k]
  ------------------
  274|    721|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    721|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    721|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 720]
  |  |  ------------------
  |  |   18|    721|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    721|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  275|       |
  276|    720|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   29|    720|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  277|    720|                memory_block.SetStartingAddress(address);
  278|    720|                break;
  279|    721|            }
  280|       |
  281|       |            // GetSize
  282|    201|            case 20: {
  ------------------
  |  Branch (282:13): [True: 201, False: 113k]
  ------------------
  283|    201|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   29|    201|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  284|    201|                (void)memory_block.GetSize();
  285|    201|                break;
  286|    721|            }
  287|       |
  288|       |            // Resize
  289|  84.4k|            case 21: {
  ------------------
  |  Branch (289:13): [True: 84.4k, False: 28.9k]
  ------------------
  290|  84.4k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   16|  84.4k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  84.4k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 93, False: 84.3k]
  |  |  ------------------
  |  |   18|  84.4k|    {                                                                                              \
  |  |   19|     93|        return 0;                                                                                  \
  |  |   20|     93|    }                                                                                              \
  |  |   21|  84.4k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  291|       |
  292|       |                // Reject too big resizes
  293|  84.3k|                if (new_size > max_size)
  ------------------
  |  Branch (293:21): [True: 56, False: 84.3k]
  ------------------
  294|     56|                {
  295|     56|                    return 0;
  296|     56|                }
  297|       |
  298|  84.3k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   29|  84.3k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  299|  84.3k|                memory_block.Resize(new_size);
  300|  84.3k|                break;
  301|  84.3k|            }
  302|       |
  303|       |            // GetRawMemory
  304|    194|            case 22: {
  ------------------
  |  Branch (304:13): [True: 194, False: 113k]
  ------------------
  305|    194|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   29|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  306|    194|                (void)memory_block.GetRawMemory();
  307|    194|                break;
  308|  84.3k|            }
  309|       |
  310|       |            // GetRawMemory const
  311|    211|            case 23: {
  ------------------
  |  Branch (311:13): [True: 211, False: 113k]
  ------------------
  312|    211|                const dlx::MemoryBlock& const_memory_block = memory_block;
  313|    211|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   29|    211|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  314|    211|                (void)const_memory_block.GetRawMemory();
  315|    211|                break;
  316|  84.3k|            }
  317|       |
  318|       |            // Clear
  319|  1.68k|            case 24: {
  ------------------
  |  Branch (319:13): [True: 1.68k, False: 111k]
  ------------------
  320|  1.68k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   29|  1.68k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  321|  1.68k|                memory_block.Clear();
  322|  1.68k|            }
  323|   113k|        }
  324|   113k|    }
  325|       |
  326|    541|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   29|    541|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  327|       |
  328|    541|    return 0;
  329|  1.68k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   49|   115k|{
   50|   115k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 907, False: 114k]
  ------------------
   51|    907|    {
   52|    907|        return {};
   53|    907|    }
   54|       |
   55|   114k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|   114k|    const phi::size_t old_index = index;
   58|   114k|    index += aligned_size<T>();
   59|       |
   60|   114k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|   114k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|   114k|        return static_cast<bool>(value);
   64|   114k|    }
   65|   114k|    else
   66|   114k|    {
   67|   114k|        return *reinterpret_cast<const T*>(data + old_index);
   68|   114k|    }
   69|   114k|}
_Z10has_x_moremmm:
   34|   227k|{
   35|   227k|    return index + x < size;
   36|   227k|}
_Z12aligned_sizeIjEmv:
   42|   114k|{
   43|   114k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|   114k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   49|   105k|{
   50|   105k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 178, False: 105k]
  ------------------
   51|    178|    {
   52|    178|        return {};
   53|    178|    }
   54|       |
   55|   105k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|   105k|    const phi::size_t old_index = index;
   58|   105k|    index += aligned_size<T>();
   59|       |
   60|   105k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|   105k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|   105k|        return static_cast<bool>(value);
   64|   105k|    }
   65|   105k|    else
   66|   105k|    {
   67|   105k|        return *reinterpret_cast<const T*>(data + old_index);
   68|   105k|    }
   69|   105k|}
_Z12aligned_sizeImEmv:
   42|   105k|{
   43|   105k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|   105k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIaEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   49|    715|{
   50|    715|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 714]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    714|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    714|    const phi::size_t old_index = index;
   58|    714|    index += aligned_size<T>();
   59|       |
   60|    714|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    714|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    714|        return static_cast<bool>(value);
   64|    714|    }
   65|    714|    else
   66|    714|    {
   67|    714|        return *reinterpret_cast<const T*>(data + old_index);
   68|    714|    }
   69|    714|}
_Z12aligned_sizeIhEmv:
   42|    714|{
   43|    714|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    714|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   49|  1.31k|{
   50|  1.31k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 1.31k]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|  1.31k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|  1.31k|    const phi::size_t old_index = index;
   58|  1.31k|    index += aligned_size<T>();
   59|       |
   60|  1.31k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|  1.31k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|  1.31k|        return static_cast<bool>(value);
   64|  1.31k|    }
   65|  1.31k|    else
   66|  1.31k|    {
   67|  1.31k|        return *reinterpret_cast<const T*>(data + old_index);
   68|  1.31k|    }
   69|  1.31k|}
_Z12aligned_sizeIsEmv:
   42|  1.31k|{
   43|  1.31k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|  1.31k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeItEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIiEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIfEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   49|    988|{
   50|    988|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 987]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    987|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    987|    const phi::size_t old_index = index;
   58|    987|    index += aligned_size<T>();
   59|       |
   60|    987|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    987|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    987|        return static_cast<bool>(value);
   64|    987|    }
   65|    987|    else
   66|    987|    {
   67|    987|        return *reinterpret_cast<const T*>(data + old_index);
   68|    987|    }
   69|    987|}
_Z12aligned_sizeIdEmv:
   42|    987|{
   43|    987|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    987|}


_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   765k|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|  1.49k|    {
   17|  1.49k|        m_Values.resize(starting_size.unsafe());
   18|  1.49k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  1.93k|    {
   22|  1.93k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 1.74k, False: 194]
  ------------------
   23|  1.74k|        {
   24|  1.74k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.74k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|  1.74k|            return {};
   26|  1.74k|        }
   27|       |
   28|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|    194|        return m_Values[raw_address].signed_value;
   31|  1.93k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  1.00k|    {
   35|  1.00k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 804, False: 202]
  ------------------
   36|    804|        {
   37|    804|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    804|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|    804|            return {};
   39|    804|        }
   40|       |
   41|    202|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|    202|        return m_Values[raw_address].unsigned_value;
   43|  1.00k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  1.16k|    {
   47|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 776, False: 388]
  ------------------
   48|    776|        {
   49|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|    776|            return {};
   51|    776|        }
   52|       |
   53|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 194, False: 194]
  ------------------
   56|    194|        {
   57|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|    194|            return {};
   59|    194|        }
   60|       |
   61|    194|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  1.29k|    {
   66|  1.29k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 904, False: 388]
  ------------------
   67|    904|        {
   68|    904|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    904|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|    904|            return {};
   70|    904|        }
   71|       |
   72|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 194, False: 194]
  ------------------
   75|    194|        {
   76|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|    194|            return {};
   78|    194|        }
   79|       |
   80|    194|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  1.16k|    {
   85|  1.16k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 904, False: 260]
  ------------------
   86|    904|        {
   87|    904|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    904|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|    904|            return {};
   89|    904|        }
   90|       |
   91|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 66, False: 194]
  ------------------
   94|     66|        {
   95|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|     66|            return {};
   97|     66|        }
   98|       |
   99|    194|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|    260|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  1.03k|    {
  104|  1.03k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 776, False: 260]
  ------------------
  105|    776|        {
  106|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|    776|            return {};
  108|    776|        }
  109|       |
  110|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 66, False: 194]
  ------------------
  113|     66|        {
  114|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|     66|            return {};
  116|     66|        }
  117|       |
  118|    194|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    260|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  1.24k|    {
  123|  1.24k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 853, False: 388]
  ------------------
  124|    853|        {
  125|    853|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    853|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|    853|            return {};
  127|    853|        }
  128|       |
  129|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 194, False: 194]
  ------------------
  132|    194|        {
  133|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|    194|            return {};
  135|    194|        }
  136|       |
  137|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|    388|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  1.16k|    {
  142|  1.16k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 776, False: 388]
  ------------------
  143|    776|        {
  144|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|    776|            return {};
  146|    776|        }
  147|       |
  148|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 194, False: 194]
  ------------------
  151|    194|        {
  152|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|    194|            return {};
  154|    194|        }
  155|       |
  156|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|    970|    {
  161|    970|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 776, False: 194]
  ------------------
  162|    776|        {
  163|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|    776|            return false;
  165|    776|        }
  166|       |
  167|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|    194|        return true;
  169|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|    586|    {
  173|    586|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 520, False: 66]
  ------------------
  174|    520|        {
  175|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|    520|            return false;
  177|    520|        }
  178|       |
  179|     66|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|     66|        return true;
  181|    586|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  2.31k|    {
  185|  2.31k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 2.12k, False: 194]
  ------------------
  186|  2.12k|        {
  187|  2.12k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.12k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|  2.12k|            return false;
  189|  2.12k|        }
  190|       |
  191|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|    194|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|    194|        return true;
  195|  2.31k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|    586|    {
  199|    586|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 520, False: 66]
  ------------------
  200|    520|        {
  201|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|    520|            return false;
  203|    520|        }
  204|       |
  205|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|     66|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|     66|        return true;
  209|    586|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  1.09k|    {
  213|  1.09k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 904, False: 194]
  ------------------
  214|    904|        {
  215|    904|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    904|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|    904|            return false;
  217|    904|        }
  218|       |
  219|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|    194|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|    194|        return true;
  223|  1.09k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|    842|    {
  227|    842|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 648, False: 194]
  ------------------
  228|    648|        {
  229|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|    648|            return false;
  231|    648|        }
  232|       |
  233|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|    194|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|    194|        return true;
  237|    842|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|    970|    {
  241|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 776, False: 194]
  ------------------
  242|    776|        {
  243|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|    776|            return false;
  245|    776|        }
  246|       |
  247|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|    194|        return true;
  251|    970|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|    842|    {
  255|    842|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 648, False: 194]
  ------------------
  256|    648|        {
  257|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|    648|            return false;
  259|    648|        }
  260|       |
  261|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|    194|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|    194|        return true;
  265|    842|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  19.4k|    {
  269|       |        // Cannot access anything before the starting address
  270|  19.4k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 4.08k, False: 15.3k]
  ------------------
  271|  4.08k|        {
  272|  4.08k|            return false;
  273|  4.08k|        }
  274|       |
  275|       |        // Check if address + size will overflow
  276|  15.3k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 3.68k, False: 11.6k]
  ------------------
  277|  15.3k|                                             address.unsafe(), size.unsafe()))
  278|  3.68k|        {
  279|  3.68k|            return false;
  280|  3.68k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  11.6k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 3.93k, False: 7.73k]
  ------------------
  284|  11.6k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|  3.93k|        {
  286|  3.93k|            return false;
  287|  3.93k|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  7.73k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 3.77k, False: 3.95k]
  ------------------
  291|  3.77k|        {
  292|  3.77k|            return false;
  293|  3.77k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  3.95k|        return true;
  297|  7.73k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  2.33k|    {
  302|  2.33k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 2.26k, False: 66]
  |  Branch (302:30): [True: 1.16k, False: 1.10k]
  ------------------
  303|  2.33k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  1.40k|    {
  307|  1.40k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 147k, False: 1.40k]
  ------------------
  308|   147k|        {
  309|   147k|            val.signed_value = 0;
  310|   147k|        }
  311|  1.40k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    194|    {
  315|    194|        return m_StartingAddress;
  316|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|    507|    {
  320|    507|        m_StartingAddress = new_starting_address;
  321|    507|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|    194|    {
  325|    194|        return m_Values.size();
  326|    194|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|  63.2k|    {
  330|  63.2k|        m_Values.resize(new_size.unsafe());
  331|  63.2k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|    194|    {
  335|    194|        return m_Values;
  336|    194|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  339|    217|    {
  340|    217|        return m_Values;
  341|    217|    }

LLVMFuzzerTestOneInput:
   80|  1.49k|{
   81|  1.49k|    dlx::MemoryBlock memory_block{1000u, max_size};
   82|       |
   83|  1.49k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   28|  1.49k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   84|       |
   85|  92.6k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (85:33): [True: 92.1k, False: 466]
  ------------------
   86|  92.1k|    {
   87|  92.1k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   15|  92.1k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  92.1k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 792, False: 91.3k]
  |  |  ------------------
  |  |   17|  92.1k|    {                                                                                              \
  |  |   18|    792|        return 0;                                                                                  \
  |  |   19|    792|    }                                                                                              \
  |  |   20|  92.1k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   88|       |
   89|  91.3k|        switch (function_index)
  ------------------
  |  Branch (89:17): [True: 5.43k, False: 85.9k]
  ------------------
   90|  91.3k|        {
   91|       |            // LoadByte
   92|  2.03k|            case 0: {
  ------------------
  |  Branch (92:13): [True: 2.03k, False: 89.3k]
  ------------------
   93|  2.03k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  2.03k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  2.03k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 97, False: 1.93k]
  |  |  ------------------
  |  |   17|  2.03k|    {                                                                                              \
  |  |   18|     97|        return 0;                                                                                  \
  |  |   19|     97|    }                                                                                              \
  |  |   20|  2.03k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   94|       |
   95|  1.93k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   28|  1.93k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   96|  1.93k|                (void)memory_block.LoadByte(address);
   97|  1.93k|                break;
   98|  2.03k|            }
   99|       |
  100|       |            // LoadUnsignedByte
  101|  1.00k|            case 1: {
  ------------------
  |  Branch (101:13): [True: 1.00k, False: 90.3k]
  ------------------
  102|  1.00k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  103|       |
  104|  1.00k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   28|  1.00k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  105|  1.00k|                (void)memory_block.LoadUnsignedByte(address);
  106|  1.00k|                break;
  107|  1.00k|            }
  108|       |
  109|       |            // LoadHalfWord
  110|  1.16k|            case 2: {
  ------------------
  |  Branch (110:13): [True: 1.16k, False: 90.2k]
  ------------------
  111|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  112|       |
  113|  1.16k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  114|  1.16k|                (void)memory_block.LoadHalfWord(address);
  115|  1.16k|                break;
  116|  1.16k|            }
  117|       |
  118|       |                // LoadUnsignedHalfWord
  119|  1.29k|            case 3: {
  ------------------
  |  Branch (119:13): [True: 1.29k, False: 90.0k]
  ------------------
  120|  1.29k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.29k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.29k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.29k]
  |  |  ------------------
  |  |   17|  1.29k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.29k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  121|       |
  122|  1.29k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.29k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  123|  1.29k|                (void)memory_block.LoadUnsignedHalfWord(address);
  124|  1.29k|                break;
  125|  1.29k|            }
  126|       |
  127|       |            // LoadWord
  128|  1.16k|            case 4: {
  ------------------
  |  Branch (128:13): [True: 1.16k, False: 90.2k]
  ------------------
  129|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  130|       |
  131|  1.16k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  132|  1.16k|                (void)memory_block.LoadWord(address);
  133|  1.16k|                break;
  134|  1.16k|            }
  135|       |
  136|       |            // LoadUnsignedWord
  137|  1.03k|            case 5: {
  ------------------
  |  Branch (137:13): [True: 1.03k, False: 90.3k]
  ------------------
  138|  1.03k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.03k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.03k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.03k]
  |  |  ------------------
  |  |   17|  1.03k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.03k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  139|       |
  140|  1.03k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.03k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  141|  1.03k|                (void)memory_block.LoadUnsignedWord(address);
  142|  1.03k|                break;
  143|  1.03k|            }
  144|       |
  145|       |            // LoadFloat
  146|  1.24k|            case 6: {
  ------------------
  |  Branch (146:13): [True: 1.24k, False: 90.1k]
  ------------------
  147|  1.24k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.24k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.24k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.24k]
  |  |  ------------------
  |  |   17|  1.24k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.24k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  148|       |
  149|  1.24k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   28|  1.24k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  150|  1.24k|                (void)memory_block.LoadFloat(address);
  151|  1.24k|                break;
  152|  1.24k|            }
  153|       |
  154|       |            // LoadDouble
  155|  1.16k|            case 7: {
  ------------------
  |  Branch (155:13): [True: 1.16k, False: 90.2k]
  ------------------
  156|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  157|       |
  158|  1.16k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  159|  1.16k|                (void)memory_block.LoadDouble(address);
  160|  1.16k|                break;
  161|  1.16k|            }
  162|       |
  163|       |            // StoreByte
  164|    972|            case 8: {
  ------------------
  |  Branch (164:13): [True: 972, False: 90.4k]
  ------------------
  165|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  166|    971|                GET_T(phi::int8_t, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|       |
  168|    970|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  169|    970|                (void)memory_block.StoreByte(address, value);
  170|    970|                break;
  171|    971|            }
  172|       |
  173|       |            // StoreUnsignedByte
  174|    588|            case 9: {
  ------------------
  |  Branch (174:13): [True: 588, False: 90.7k]
  ------------------
  175|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   17|    588|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  176|    587|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   15|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   17|    587|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|       |
  178|    586|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  179|    586|                (void)memory_block.StoreUnsignedByte(address, value);
  180|    586|                break;
  181|    587|            }
  182|       |
  183|       |            // StoreHalfWord
  184|  2.32k|            case 10: {
  ------------------
  |  Branch (184:13): [True: 2.32k, False: 89.0k]
  ------------------
  185|  2.32k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  2.32k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  2.32k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 2.32k]
  |  |  ------------------
  |  |   17|  2.32k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  2.32k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  186|  2.32k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   15|  2.32k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  2.32k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 2.31k]
  |  |  ------------------
  |  |   17|  2.32k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  2.32k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|       |
  188|  2.31k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  2.31k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  189|  2.31k|                (void)memory_block.StoreHalfWord(address, value);
  190|  2.31k|                break;
  191|  2.32k|            }
  192|       |
  193|       |            // StoreUnsignedHalfWord
  194|    588|            case 11: {
  ------------------
  |  Branch (194:13): [True: 588, False: 90.7k]
  ------------------
  195|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   17|    588|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  196|    587|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   15|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   17|    587|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|       |
  198|    586|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  199|    586|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  200|    586|                break;
  201|    587|            }
  202|       |
  203|       |            // StoreWord
  204|  1.10k|            case 12: {
  ------------------
  |  Branch (204:13): [True: 1.10k, False: 90.2k]
  ------------------
  205|  1.10k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.09k]
  |  |  ------------------
  |  |   17|  1.10k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  206|  1.09k|                GET_T(phi::int32_t, value);
  ------------------
  |  |   15|  1.09k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.09k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.09k]
  |  |  ------------------
  |  |   17|  1.09k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.09k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|       |
  208|  1.09k|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.09k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  209|  1.09k|                (void)memory_block.StoreWord(address, value);
  210|  1.09k|                break;
  211|  1.09k|            }
  212|       |
  213|       |            // StoreUnsignedWord
  214|    844|            case 13: {
  ------------------
  |  Branch (214:13): [True: 844, False: 90.5k]
  ------------------
  215|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   17|    844|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  216|    843|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   15|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   17|    843|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|       |
  218|    842|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  219|    842|                (void)memory_block.StoreUnsignedWord(address, value);
  220|    842|                break;
  221|    843|            }
  222|       |
  223|       |            // StoreFloat
  224|    972|            case 14: {
  ------------------
  |  Branch (224:13): [True: 972, False: 90.4k]
  ------------------
  225|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  226|    971|                GET_T(phi::float32, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|       |
  228|    970|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  229|    970|                (void)memory_block.StoreFloat(address, value);
  230|    970|                break;
  231|    971|            }
  232|       |
  233|       |            // StoreDouble
  234|    844|            case 15: {
  ------------------
  |  Branch (234:13): [True: 844, False: 90.5k]
  ------------------
  235|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   17|    844|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  236|    843|                GET_T(phi::float64, value);
  ------------------
  |  |   15|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   17|    843|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|       |
  238|    842|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  239|    842|                (void)memory_block.StoreDouble(address, value);
  240|    842|                break;
  241|    843|            }
  242|       |
  243|       |            // IsAddressValid
  244|  1.22k|            case 16: {
  ------------------
  |  Branch (244:13): [True: 1.22k, False: 90.1k]
  ------------------
  245|  1.22k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.22k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.22k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.22k]
  |  |  ------------------
  |  |   17|  1.22k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.22k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  246|  1.22k|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|  1.22k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.22k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.22k]
  |  |  ------------------
  |  |   17|  1.22k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.22k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|       |
  248|  1.22k|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   28|  1.22k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  249|  1.22k|                (void)memory_block.IsAddressValid(address, arg_size);
  250|  1.22k|                break;
  251|  1.22k|            }
  252|       |
  253|       |            // IsAddressAlignedCorrectly
  254|    262|            case 17: {
  ------------------
  |  Branch (254:13): [True: 262, False: 91.1k]
  ------------------
  255|    262|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    262|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    262|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 261]
  |  |  ------------------
  |  |   17|    262|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    262|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  256|    261|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    261|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    261|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 260]
  |  |  ------------------
  |  |   17|    261|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    261|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|       |
  258|    260|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   28|    260|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  259|    260|                         print_int(arg_size));
  260|    260|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  261|    260|                break;
  262|    261|            }
  263|       |
  264|       |            // GetStartingAddress
  265|    194|            case 18: {
  ------------------
  |  Branch (265:13): [True: 194, False: 91.1k]
  ------------------
  266|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  267|    194|                (void)memory_block.GetStartingAddress();
  268|    194|                break;
  269|    261|            }
  270|       |
  271|       |            // SetStartingAddress
  272|    509|            case 19: {
  ------------------
  |  Branch (272:13): [True: 509, False: 90.8k]
  ------------------
  273|    509|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    509|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    509|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 2, False: 507]
  |  |  ------------------
  |  |   17|    509|    {                                                                                              \
  |  |   18|      2|        return 0;                                                                                  \
  |  |   19|      2|    }                                                                                              \
  |  |   20|    509|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  274|       |
  275|    507|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   28|    507|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  276|    507|                memory_block.SetStartingAddress(address);
  277|    507|                break;
  278|    509|            }
  279|       |
  280|       |            // GetSize
  281|    194|            case 20: {
  ------------------
  |  Branch (281:13): [True: 194, False: 91.1k]
  ------------------
  282|    194|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  283|    194|                (void)memory_block.GetSize();
  284|    194|                break;
  285|    509|            }
  286|       |
  287|       |            // Resize
  288|  63.4k|            case 21: {
  ------------------
  |  Branch (288:13): [True: 63.4k, False: 27.9k]
  ------------------
  289|  63.4k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   15|  63.4k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  63.4k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 83, False: 63.3k]
  |  |  ------------------
  |  |   17|  63.4k|    {                                                                                              \
  |  |   18|     83|        return 0;                                                                                  \
  |  |   19|     83|    }                                                                                              \
  |  |   20|  63.4k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  290|       |
  291|       |                // Reject too big resizes
  292|  63.3k|                if (new_size > max_size)
  ------------------
  |  Branch (292:21): [True: 32, False: 63.2k]
  ------------------
  293|     32|                {
  294|     32|                    return 0;
  295|     32|                }
  296|       |
  297|  63.2k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   28|  63.2k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  298|  63.2k|                memory_block.Resize(new_size);
  299|  63.2k|                break;
  300|  63.3k|            }
  301|       |
  302|       |            // GetRawMemory
  303|    194|            case 22: {
  ------------------
  |  Branch (303:13): [True: 194, False: 91.1k]
  ------------------
  304|    194|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  305|    194|                (void)memory_block.GetRawMemory();
  306|    194|                break;
  307|  63.3k|            }
  308|       |
  309|       |            // GetRawMemory const
  310|    217|            case 23: {
  ------------------
  |  Branch (310:13): [True: 217, False: 91.1k]
  ------------------
  311|    217|                const dlx::MemoryBlock& const_memory_block = memory_block;
  312|    217|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   28|    217|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  313|    217|                (void)const_memory_block.GetRawMemory();
  314|    217|                break;
  315|  63.3k|            }
  316|       |
  317|       |            // Clear
  318|  1.40k|            case 24: {
  ------------------
  |  Branch (318:13): [True: 1.40k, False: 89.9k]
  ------------------
  319|  1.40k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   28|  1.40k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  320|  1.40k|                memory_block.Clear();
  321|  1.40k|            }
  322|  91.3k|        }
  323|  91.3k|    }
  324|       |
  325|    466|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   28|    466|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  326|       |
  327|    466|    return 0;
  328|  1.49k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   48|  93.0k|{
   49|  93.0k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 793, False: 92.2k]
  ------------------
   50|    793|    {
   51|    793|        return {};
   52|    793|    }
   53|       |
   54|  92.2k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  92.2k|    const phi::size_t old_index = index;
   57|  92.2k|    index += aligned_size<T>();
   58|       |
   59|  92.2k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  92.2k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  92.2k|        return static_cast<bool>(value);
   63|  92.2k|    }
   64|  92.2k|    else
   65|  92.2k|    {
   66|  92.2k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  92.2k|    }
   68|  92.2k|}
_Z10has_x_moremmm:
   33|   185k|{
   34|   185k|    return index + x < size;
   35|   185k|}
_Z12aligned_sizeIjEmv:
   41|  92.2k|{
   42|  92.2k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  92.2k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   48|  85.2k|{
   49|  85.2k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 201, False: 85.0k]
  ------------------
   50|    201|    {
   51|    201|        return {};
   52|    201|    }
   53|       |
   54|  85.0k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  85.0k|    const phi::size_t old_index = index;
   57|  85.0k|    index += aligned_size<T>();
   58|       |
   59|  85.0k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  85.0k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  85.0k|        return static_cast<bool>(value);
   63|  85.0k|    }
   64|  85.0k|    else
   65|  85.0k|    {
   66|  85.0k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  85.0k|    }
   68|  85.0k|}
_Z12aligned_sizeImEmv:
   41|  85.0k|{
   42|  85.0k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  85.0k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIaEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   48|    587|{
   49|    587|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 586]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    586|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    586|    const phi::size_t old_index = index;
   57|    586|    index += aligned_size<T>();
   58|       |
   59|    586|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    586|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    586|        return static_cast<bool>(value);
   63|    586|    }
   64|    586|    else
   65|    586|    {
   66|    586|        return *reinterpret_cast<const T*>(data + old_index);
   67|    586|    }
   68|    586|}
_Z12aligned_sizeIhEmv:
   41|    586|{
   42|    586|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    586|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   48|  2.32k|{
   49|  2.32k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 2.31k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  2.31k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  2.31k|    const phi::size_t old_index = index;
   57|  2.31k|    index += aligned_size<T>();
   58|       |
   59|  2.31k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  2.31k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  2.31k|        return static_cast<bool>(value);
   63|  2.31k|    }
   64|  2.31k|    else
   65|  2.31k|    {
   66|  2.31k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  2.31k|    }
   68|  2.31k|}
_Z12aligned_sizeIsEmv:
   41|  2.31k|{
   42|  2.31k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  2.31k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   48|    587|{
   49|    587|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 586]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    586|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    586|    const phi::size_t old_index = index;
   57|    586|    index += aligned_size<T>();
   58|       |
   59|    586|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    586|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    586|        return static_cast<bool>(value);
   63|    586|    }
   64|    586|    else
   65|    586|    {
   66|    586|        return *reinterpret_cast<const T*>(data + old_index);
   67|    586|    }
   68|    586|}
_Z12aligned_sizeItEmv:
   41|    586|{
   42|    586|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    586|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   48|  1.09k|{
   49|  1.09k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.09k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.09k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.09k|    const phi::size_t old_index = index;
   57|  1.09k|    index += aligned_size<T>();
   58|       |
   59|  1.09k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.09k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.09k|        return static_cast<bool>(value);
   63|  1.09k|    }
   64|  1.09k|    else
   65|  1.09k|    {
   66|  1.09k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.09k|    }
   68|  1.09k|}
_Z12aligned_sizeIiEmv:
   41|  1.09k|{
   42|  1.09k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.09k|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIfEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   48|    843|{
   49|    843|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 842]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    842|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    842|    const phi::size_t old_index = index;
   57|    842|    index += aligned_size<T>();
   58|       |
   59|    842|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    842|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    842|        return static_cast<bool>(value);
   63|    842|    }
   64|    842|    else
   65|    842|    {
   66|    842|        return *reinterpret_cast<const T*>(data + old_index);
   67|    842|    }
   68|    842|}
_Z12aligned_sizeIdEmv:
   41|    842|{
   42|    842|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    842|}


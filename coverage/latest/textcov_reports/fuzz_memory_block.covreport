_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.14M|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|  2.19k|    {
   13|  2.19k|        m_Values.resize(starting_size.unsafe());
   14|  2.19k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  2.88k|    {
   18|  2.88k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 2.68k, False: 194]
  ------------------
   19|  2.68k|        {
   20|  2.68k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.68k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|  2.68k|            return {};
   22|  2.68k|        }
   23|       |
   24|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|    194|        return m_Values[raw_address].signed_value;
   27|  2.88k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|  1.01k|    {
   31|  1.01k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 824, False: 194]
  ------------------
   32|    824|        {
   33|    824|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    824|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|    824|            return {};
   35|    824|        }
   36|       |
   37|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|    194|        return m_Values[raw_address].unsigned_value;
   39|  1.01k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  1.16k|    {
   43|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 776, False: 388]
  ------------------
   44|    776|        {
   45|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    776|            return {};
   47|    776|        }
   48|       |
   49|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 194, False: 194]
  ------------------
   52|    194|        {
   53|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|    194|            return {};
   55|    194|        }
   56|       |
   57|    194|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  1.16k|    {
   62|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 776, False: 388]
  ------------------
   63|    776|        {
   64|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|    776|            return {};
   66|    776|        }
   67|       |
   68|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 194, False: 194]
  ------------------
   71|    194|        {
   72|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|    194|            return {};
   74|    194|        }
   75|       |
   76|    194|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  1.23k|    {
   81|  1.23k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 847, False: 388]
  ------------------
   82|    847|        {
   83|    847|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    847|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|    847|            return {};
   85|    847|        }
   86|       |
   87|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 194, False: 194]
  ------------------
   90|    194|        {
   91|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|    194|            return {};
   93|    194|        }
   94|       |
   95|    194|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|    388|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  1.17k|    {
  100|  1.17k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 788, False: 388]
  ------------------
  101|    788|        {
  102|    788|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    788|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|    788|            return {};
  104|    788|        }
  105|       |
  106|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 194, False: 194]
  ------------------
  109|    194|        {
  110|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|    194|            return {};
  112|    194|        }
  113|       |
  114|    194|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|    388|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  1.19k|    {
  119|  1.19k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 804, False: 388]
  ------------------
  120|    804|        {
  121|    804|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    804|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|    804|            return {};
  123|    804|        }
  124|       |
  125|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 194, False: 194]
  ------------------
  128|    194|        {
  129|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|    194|            return {};
  131|    194|        }
  132|       |
  133|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|    388|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  1.16k|    {
  138|  1.16k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 776, False: 388]
  ------------------
  139|    776|        {
  140|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|    776|            return {};
  142|    776|        }
  143|       |
  144|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 194, False: 194]
  ------------------
  147|    194|        {
  148|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|    194|            return {};
  150|    194|        }
  151|       |
  152|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|    970|    {
  157|    970|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 776, False: 194]
  ------------------
  158|    776|        {
  159|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|    776|            return false;
  161|    776|        }
  162|       |
  163|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|    194|        return true;
  165|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|    743|    {
  169|    743|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 549, False: 194]
  ------------------
  170|    549|        {
  171|    549|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    549|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|    549|            return false;
  173|    549|        }
  174|       |
  175|    194|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|    194|        return true;
  177|    743|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  1.76k|    {
  181|  1.76k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 1.57k, False: 194]
  ------------------
  182|  1.57k|        {
  183|  1.57k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.57k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|  1.57k|            return false;
  185|  1.57k|        }
  186|       |
  187|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|    194|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|    194|        return true;
  191|  1.76k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|  1.00k|    {
  195|  1.00k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 813, False: 194]
  ------------------
  196|    813|        {
  197|    813|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    813|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|    813|            return false;
  199|    813|        }
  200|       |
  201|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|    194|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|    194|        return true;
  205|  1.00k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|    970|    {
  209|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 776, False: 194]
  ------------------
  210|    776|        {
  211|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|    776|            return false;
  213|    776|        }
  214|       |
  215|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|    194|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|    194|        return true;
  219|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|    920|    {
  223|    920|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 726, False: 194]
  ------------------
  224|    726|        {
  225|    726|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    726|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|    726|            return false;
  227|    726|        }
  228|       |
  229|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|    194|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|    194|        return true;
  233|    920|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|    970|    {
  237|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 776, False: 194]
  ------------------
  238|    776|        {
  239|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|    776|            return false;
  241|    776|        }
  242|       |
  243|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|    194|        return true;
  247|    970|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|    971|    {
  251|    971|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 777, False: 194]
  ------------------
  252|    777|        {
  253|    777|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    777|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|    777|            return false;
  255|    777|        }
  256|       |
  257|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|    194|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|    194|        return true;
  261|    971|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|  20.1k|    {
  265|       |        // Cannot access anything before the starting address
  266|  20.1k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 4.89k, False: 15.2k]
  ------------------
  267|  4.89k|        {
  268|  4.89k|            return false;
  269|  4.89k|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|  15.2k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 3.04k, False: 12.2k]
  ------------------
  273|  15.2k|                                             address.unsafe(), size.unsafe()))
  274|  3.04k|        {
  275|  3.04k|            return false;
  276|  3.04k|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|  12.2k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 3.04k, False: 9.17k]
  ------------------
  280|  12.2k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|  3.04k|        {
  282|  3.04k|            return false;
  283|  3.04k|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|  9.17k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 4.71k, False: 4.46k]
  ------------------
  287|  4.71k|        {
  288|  4.71k|            return false;
  289|  4.71k|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|  4.46k|        return true;
  293|  9.17k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|  2.59k|    {
  298|  2.59k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 2.53k, False: 66]
  |  Branch (298:30): [True: 1.16k, False: 1.36k]
  ------------------
  299|  2.59k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  2.77k|    {
  303|  2.77k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 231k, False: 2.77k]
  ------------------
  304|   231k|        {
  305|   231k|            val.signed_value = 0;
  306|   231k|        }
  307|  2.77k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  310|    194|    {
  311|    194|        return m_StartingAddress;
  312|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  315|    527|    {
  316|    527|        m_StartingAddress = new_starting_address;
  317|    527|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  320|    293|    {
  321|    293|        return m_Values.size();
  322|    293|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  325|   102k|    {
  326|   102k|        m_Values.resize(new_size.unsafe());
  327|   102k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  330|    201|    {
  331|    201|        return m_Values;
  332|    201|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  335|    194|    {
  336|    194|        return m_Values;
  337|    194|    }

LLVMFuzzerTestOneInput:
   80|  2.19k|{
   81|  2.19k|    dlx::MemoryBlock memory_block{1000u, max_size};
   82|       |
   83|  2.19k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   28|  2.19k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   84|       |
   85|   140k|    for (phi::size_t index{0u}; index < size;)
  ------------------
  |  Branch (85:33): [True: 139k, False: 577]
  ------------------
   86|   139k|    {
   87|   139k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   15|   139k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|   139k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1.21k, False: 138k]
  |  |  ------------------
  |  |   17|   139k|    {                                                                                              \
  |  |   18|  1.21k|        return 0;                                                                                  \
  |  |   19|  1.21k|    }                                                                                              \
  |  |   20|   139k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   88|       |
   89|   138k|        switch (function_index)
  ------------------
  |  Branch (89:17): [True: 10.7k, False: 127k]
  ------------------
   90|   138k|        {
   91|       |            // LoadByte
   92|  3.00k|            case 0: {
  ------------------
  |  Branch (92:13): [True: 3.00k, False: 135k]
  ------------------
   93|  3.00k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 121, False: 2.88k]
  |  |  ------------------
  |  |   17|  3.00k|    {                                                                                              \
  |  |   18|    121|        return 0;                                                                                  \
  |  |   19|    121|    }                                                                                              \
  |  |   20|  3.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   94|       |
   95|  2.88k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   28|  2.88k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   96|  2.88k|                (void)memory_block.LoadByte(address);
   97|  2.88k|                break;
   98|  3.00k|            }
   99|       |
  100|       |            // LoadUnsignedByte
  101|  1.01k|            case 1: {
  ------------------
  |  Branch (101:13): [True: 1.01k, False: 137k]
  ------------------
  102|  1.01k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.01k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.01k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.01k]
  |  |  ------------------
  |  |   17|  1.01k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.01k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  103|       |
  104|  1.01k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   28|  1.01k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  105|  1.01k|                (void)memory_block.LoadUnsignedByte(address);
  106|  1.01k|                break;
  107|  1.01k|            }
  108|       |
  109|       |            // LoadHalfWord
  110|  1.16k|            case 2: {
  ------------------
  |  Branch (110:13): [True: 1.16k, False: 137k]
  ------------------
  111|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  112|       |
  113|  1.16k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  114|  1.16k|                (void)memory_block.LoadHalfWord(address);
  115|  1.16k|                break;
  116|  1.16k|            }
  117|       |
  118|       |                // LoadUnsignedHalfWord
  119|  1.16k|            case 3: {
  ------------------
  |  Branch (119:13): [True: 1.16k, False: 137k]
  ------------------
  120|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  121|       |
  122|  1.16k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  123|  1.16k|                (void)memory_block.LoadUnsignedHalfWord(address);
  124|  1.16k|                break;
  125|  1.16k|            }
  126|       |
  127|       |            // LoadWord
  128|  1.23k|            case 4: {
  ------------------
  |  Branch (128:13): [True: 1.23k, False: 137k]
  ------------------
  129|  1.23k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.23k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.23k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.23k]
  |  |  ------------------
  |  |   17|  1.23k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.23k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  130|       |
  131|  1.23k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.23k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  132|  1.23k|                (void)memory_block.LoadWord(address);
  133|  1.23k|                break;
  134|  1.23k|            }
  135|       |
  136|       |            // LoadUnsignedWord
  137|  1.17k|            case 5: {
  ------------------
  |  Branch (137:13): [True: 1.17k, False: 137k]
  ------------------
  138|  1.17k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.17k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.17k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.17k]
  |  |  ------------------
  |  |   17|  1.17k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.17k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  139|       |
  140|  1.17k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   28|  1.17k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  141|  1.17k|                (void)memory_block.LoadUnsignedWord(address);
  142|  1.17k|                break;
  143|  1.17k|            }
  144|       |
  145|       |            // LoadFloat
  146|  1.19k|            case 6: {
  ------------------
  |  Branch (146:13): [True: 1.19k, False: 137k]
  ------------------
  147|  1.19k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.19k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.19k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.19k]
  |  |  ------------------
  |  |   17|  1.19k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.19k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  148|       |
  149|  1.19k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   28|  1.19k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  150|  1.19k|                (void)memory_block.LoadFloat(address);
  151|  1.19k|                break;
  152|  1.19k|            }
  153|       |
  154|       |            // LoadDouble
  155|  1.16k|            case 7: {
  ------------------
  |  Branch (155:13): [True: 1.16k, False: 137k]
  ------------------
  156|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   17|  1.16k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  157|       |
  158|  1.16k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   28|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  159|  1.16k|                (void)memory_block.LoadDouble(address);
  160|  1.16k|                break;
  161|  1.16k|            }
  162|       |
  163|       |            // StoreByte
  164|    972|            case 8: {
  ------------------
  |  Branch (164:13): [True: 972, False: 137k]
  ------------------
  165|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  166|    971|                GET_T(phi::int8_t, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|       |
  168|    970|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  169|    970|                (void)memory_block.StoreByte(address, value);
  170|    970|                break;
  171|    971|            }
  172|       |
  173|       |            // StoreUnsignedByte
  174|    745|            case 9: {
  ------------------
  |  Branch (174:13): [True: 745, False: 137k]
  ------------------
  175|    745|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    745|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    745|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 744]
  |  |  ------------------
  |  |   17|    745|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    745|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  176|    744|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   15|    744|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    744|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 743]
  |  |  ------------------
  |  |   17|    744|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    744|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|       |
  178|    743|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    743|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  179|    743|                (void)memory_block.StoreUnsignedByte(address, value);
  180|    743|                break;
  181|    744|            }
  182|       |
  183|       |            // StoreHalfWord
  184|  1.76k|            case 10: {
  ------------------
  |  Branch (184:13): [True: 1.76k, False: 136k]
  ------------------
  185|  1.76k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.76k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.76k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.76k]
  |  |  ------------------
  |  |   17|  1.76k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.76k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  186|  1.76k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   15|  1.76k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.76k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.76k]
  |  |  ------------------
  |  |   17|  1.76k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.76k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|       |
  188|  1.76k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.76k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  189|  1.76k|                (void)memory_block.StoreHalfWord(address, value);
  190|  1.76k|                break;
  191|  1.76k|            }
  192|       |
  193|       |            // StoreUnsignedHalfWord
  194|  1.00k|            case 11: {
  ------------------
  |  Branch (194:13): [True: 1.00k, False: 137k]
  ------------------
  195|  1.00k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  196|  1.00k|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   15|  1.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.00k]
  |  |  ------------------
  |  |   17|  1.00k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|       |
  198|  1.00k|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.00k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  199|  1.00k|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  200|  1.00k|                break;
  201|  1.00k|            }
  202|       |
  203|       |            // StoreWord
  204|    972|            case 12: {
  ------------------
  |  Branch (204:13): [True: 972, False: 137k]
  ------------------
  205|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  206|    971|                GET_T(phi::int32_t, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|       |
  208|    970|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  209|    970|                (void)memory_block.StoreWord(address, value);
  210|    970|                break;
  211|    971|            }
  212|       |
  213|       |            // StoreUnsignedWord
  214|    922|            case 13: {
  ------------------
  |  Branch (214:13): [True: 922, False: 137k]
  ------------------
  215|    922|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    922|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    922|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 921]
  |  |  ------------------
  |  |   17|    922|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    922|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  216|    921|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   15|    921|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    921|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 920]
  |  |  ------------------
  |  |   17|    921|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    921|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|       |
  218|    920|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    920|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  219|    920|                (void)memory_block.StoreUnsignedWord(address, value);
  220|    920|                break;
  221|    921|            }
  222|       |
  223|       |            // StoreFloat
  224|    972|            case 14: {
  ------------------
  |  Branch (224:13): [True: 972, False: 137k]
  ------------------
  225|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  226|    971|                GET_T(phi::float32, value);
  ------------------
  |  |   15|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   17|    971|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|       |
  228|    970|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  229|    970|                (void)memory_block.StoreFloat(address, value);
  230|    970|                break;
  231|    971|            }
  232|       |
  233|       |            // StoreDouble
  234|    973|            case 15: {
  ------------------
  |  Branch (234:13): [True: 973, False: 137k]
  ------------------
  235|    973|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    973|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    973|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 972]
  |  |  ------------------
  |  |   17|    973|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    973|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  236|    972|                GET_T(phi::float64, value);
  ------------------
  |  |   15|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   17|    972|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|       |
  238|    971|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|    971|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  239|    971|                (void)memory_block.StoreDouble(address, value);
  240|    971|                break;
  241|    972|            }
  242|       |
  243|       |            // IsAddressValid
  244|    844|            case 16: {
  ------------------
  |  Branch (244:13): [True: 844, False: 137k]
  ------------------
  245|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   17|    844|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  246|    843|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   17|    843|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|       |
  248|    842|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   28|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  249|    842|                (void)memory_block.IsAddressValid(address, arg_size);
  250|    842|                break;
  251|    843|            }
  252|       |
  253|       |            // IsAddressAlignedCorrectly
  254|    273|            case 17: {
  ------------------
  |  Branch (254:13): [True: 273, False: 138k]
  ------------------
  255|    273|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    273|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    273|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 272]
  |  |  ------------------
  |  |   17|    273|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    273|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  256|    272|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    272|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    272|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 271]
  |  |  ------------------
  |  |   17|    272|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    272|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|       |
  258|    271|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   28|    271|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  259|    271|                         print_int(arg_size));
  260|    271|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  261|    271|                break;
  262|    272|            }
  263|       |
  264|       |            // GetStartingAddress
  265|    194|            case 18: {
  ------------------
  |  Branch (265:13): [True: 194, False: 138k]
  ------------------
  266|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  267|    194|                (void)memory_block.GetStartingAddress();
  268|    194|                break;
  269|    272|            }
  270|       |
  271|       |            // SetStartingAddress
  272|    528|            case 19: {
  ------------------
  |  Branch (272:13): [True: 528, False: 137k]
  ------------------
  273|    528|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    528|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    528|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 527]
  |  |  ------------------
  |  |   17|    528|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    528|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  274|       |
  275|    527|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   28|    527|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  276|    527|                memory_block.SetStartingAddress(address);
  277|    527|                break;
  278|    528|            }
  279|       |
  280|       |            // GetSize
  281|    293|            case 20: {
  ------------------
  |  Branch (281:13): [True: 293, False: 138k]
  ------------------
  282|    293|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   28|    293|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  283|    293|                (void)memory_block.GetSize();
  284|    293|                break;
  285|    528|            }
  286|       |
  287|       |            // Resize
  288|   102k|            case 21: {
  ------------------
  |  Branch (288:13): [True: 102k, False: 35.5k]
  ------------------
  289|   102k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   15|   102k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|   102k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 114, False: 102k]
  |  |  ------------------
  |  |   17|   102k|    {                                                                                              \
  |  |   18|    114|        return 0;                                                                                  \
  |  |   19|    114|    }                                                                                              \
  |  |   20|   102k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  290|       |
  291|       |                // Reject too big resizes
  292|   102k|                if (new_size > max_size)
  ------------------
  |  Branch (292:21): [True: 142, False: 102k]
  ------------------
  293|    142|                {
  294|    142|                    return 0;
  295|    142|                }
  296|       |
  297|   102k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   28|   102k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  298|   102k|                memory_block.Resize(new_size);
  299|   102k|                break;
  300|   102k|            }
  301|       |
  302|       |            // GetRawMemory
  303|    201|            case 22: {
  ------------------
  |  Branch (303:13): [True: 201, False: 138k]
  ------------------
  304|    201|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   28|    201|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  305|    201|                (void)memory_block.GetRawMemory();
  306|    201|                break;
  307|   102k|            }
  308|       |
  309|       |            // GetRawMemory const
  310|    194|            case 23: {
  ------------------
  |  Branch (310:13): [True: 194, False: 138k]
  ------------------
  311|    194|                const dlx::MemoryBlock& const_memory_block = memory_block;
  312|    194|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  313|    194|                (void)const_memory_block.GetRawMemory();
  314|    194|                break;
  315|   102k|            }
  316|       |
  317|       |            // Clear
  318|  2.77k|            case 24: {
  ------------------
  |  Branch (318:13): [True: 2.77k, False: 135k]
  ------------------
  319|  2.77k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   28|  2.77k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  320|  2.77k|                memory_block.Clear();
  321|  2.77k|            }
  322|   138k|        }
  323|   138k|    }
  324|       |
  325|    577|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   28|    577|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  326|       |
  327|    577|    return 0;
  328|  2.19k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   48|   140k|{
   49|   140k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1.21k, False: 139k]
  ------------------
   50|  1.21k|    {
   51|  1.21k|        return {};
   52|  1.21k|    }
   53|       |
   54|   139k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   139k|    const phi::size_t old_index = index;
   57|   139k|    index += aligned_size<T>();
   58|       |
   59|   139k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   139k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   139k|        return static_cast<bool>(value);
   63|   139k|    }
   64|   139k|    else
   65|   139k|    {
   66|   139k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   139k|    }
   68|   139k|}
_Z10has_x_moremmm:
   33|   273k|{
   34|   273k|    return index + x < size;
   35|   273k|}
_Z12aligned_sizeIjEmv:
   41|   139k|{
   42|   139k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   139k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   48|   125k|{
   49|   125k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 255, False: 124k]
  ------------------
   50|    255|    {
   51|    255|        return {};
   52|    255|    }
   53|       |
   54|   124k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   124k|    const phi::size_t old_index = index;
   57|   124k|    index += aligned_size<T>();
   58|       |
   59|   124k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   124k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   124k|        return static_cast<bool>(value);
   63|   124k|    }
   64|   124k|    else
   65|   124k|    {
   66|   124k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   124k|    }
   68|   124k|}
_Z12aligned_sizeImEmv:
   41|   124k|{
   42|   124k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   124k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIaEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   48|    744|{
   49|    744|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 743]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    743|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    743|    const phi::size_t old_index = index;
   57|    743|    index += aligned_size<T>();
   58|       |
   59|    743|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    743|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    743|        return static_cast<bool>(value);
   63|    743|    }
   64|    743|    else
   65|    743|    {
   66|    743|        return *reinterpret_cast<const T*>(data + old_index);
   67|    743|    }
   68|    743|}
_Z12aligned_sizeIhEmv:
   41|    743|{
   42|    743|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    743|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   48|  1.76k|{
   49|  1.76k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.76k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.76k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.76k|    const phi::size_t old_index = index;
   57|  1.76k|    index += aligned_size<T>();
   58|       |
   59|  1.76k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.76k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.76k|        return static_cast<bool>(value);
   63|  1.76k|    }
   64|  1.76k|    else
   65|  1.76k|    {
   66|  1.76k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.76k|    }
   68|  1.76k|}
_Z12aligned_sizeIsEmv:
   41|  1.76k|{
   42|  1.76k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.76k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   48|  1.00k|{
   49|  1.00k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.00k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.00k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.00k|    const phi::size_t old_index = index;
   57|  1.00k|    index += aligned_size<T>();
   58|       |
   59|  1.00k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.00k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.00k|        return static_cast<bool>(value);
   63|  1.00k|    }
   64|  1.00k|    else
   65|  1.00k|    {
   66|  1.00k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.00k|    }
   68|  1.00k|}
_Z12aligned_sizeItEmv:
   41|  1.00k|{
   42|  1.00k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.00k|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIiEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   48|    971|{
   49|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 970]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    970|    const phi::size_t old_index = index;
   57|    970|    index += aligned_size<T>();
   58|       |
   59|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    970|        return static_cast<bool>(value);
   63|    970|    }
   64|    970|    else
   65|    970|    {
   66|    970|        return *reinterpret_cast<const T*>(data + old_index);
   67|    970|    }
   68|    970|}
_Z12aligned_sizeIfEmv:
   41|    970|{
   42|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    970|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   48|    972|{
   49|    972|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 971]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    971|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    971|    const phi::size_t old_index = index;
   57|    971|    index += aligned_size<T>();
   58|       |
   59|    971|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    971|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    971|        return static_cast<bool>(value);
   63|    971|    }
   64|    971|    else
   65|    971|    {
   66|    971|        return *reinterpret_cast<const T*>(data + old_index);
   67|    971|    }
   68|    971|}
_Z12aligned_sizeIdEmv:
   41|    971|{
   42|    971|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    971|}


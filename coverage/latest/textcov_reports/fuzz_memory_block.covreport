_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   111k|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|    834|    {
   17|    834|        m_Values.resize(starting_size.unsafe());
   18|    834|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|    975|    {
   22|    975|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 781, False: 194]
  ------------------
   23|    781|        {
   24|    781|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    781|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|    781|            return {};
   26|    781|        }
   27|       |
   28|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|    194|        return m_Values[raw_address].signed_value;
   31|    975|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|    714|    {
   35|    714|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 520, False: 194]
  ------------------
   36|    520|        {
   37|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|    520|            return {};
   39|    520|        }
   40|       |
   41|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|    194|        return m_Values[raw_address].unsigned_value;
   43|    714|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  1.17k|    {
   47|  1.17k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 791, False: 388]
  ------------------
   48|    791|        {
   49|    791|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    791|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|    791|            return {};
   51|    791|        }
   52|       |
   53|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 194, False: 194]
  ------------------
   56|    194|        {
   57|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|    194|            return {};
   59|    194|        }
   60|       |
   61|    194|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  1.03k|    {
   66|  1.03k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 648, False: 388]
  ------------------
   67|    648|        {
   68|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|    648|            return {};
   70|    648|        }
   71|       |
   72|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 194, False: 194]
  ------------------
   75|    194|        {
   76|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|    194|            return {};
   78|    194|        }
   79|       |
   80|    194|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  1.16k|    {
   85|  1.16k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 907, False: 260]
  ------------------
   86|    907|        {
   87|    907|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    907|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|    907|            return {};
   89|    907|        }
   90|       |
   91|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 66, False: 194]
  ------------------
   94|     66|        {
   95|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|     66|            return {};
   97|     66|        }
   98|       |
   99|    194|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|    260|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|    908|    {
  104|    908|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 648, False: 260]
  ------------------
  105|    648|        {
  106|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|    648|            return {};
  108|    648|        }
  109|       |
  110|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 66, False: 194]
  ------------------
  113|     66|        {
  114|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|     66|            return {};
  116|     66|        }
  117|       |
  118|    194|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    260|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  1.03k|    {
  123|  1.03k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 776, False: 260]
  ------------------
  124|    776|        {
  125|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|    776|            return {};
  127|    776|        }
  128|       |
  129|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|    260|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 66, False: 194]
  ------------------
  132|     66|        {
  133|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|     66|            return {};
  135|     66|        }
  136|       |
  137|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|    260|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  1.16k|    {
  142|  1.16k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 776, False: 388]
  ------------------
  143|    776|        {
  144|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|    776|            return {};
  146|    776|        }
  147|       |
  148|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 194, False: 194]
  ------------------
  151|    194|        {
  152|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|    194|            return {};
  154|    194|        }
  155|       |
  156|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|    714|    {
  161|    714|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 648, False: 66]
  ------------------
  162|    648|        {
  163|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|    648|            return false;
  165|    648|        }
  166|       |
  167|     66|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|     66|        return true;
  169|    714|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|    330|    {
  173|    330|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 264, False: 66]
  ------------------
  174|    264|        {
  175|    264|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    264|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|    264|            return false;
  177|    264|        }
  178|       |
  179|     66|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|     66|        return true;
  181|    330|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|    459|    {
  185|    459|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 393, False: 66]
  ------------------
  186|    393|        {
  187|    393|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    393|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|    393|            return false;
  189|    393|        }
  190|       |
  191|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|     66|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|     66|        return true;
  195|    459|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|    586|    {
  199|    586|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 520, False: 66]
  ------------------
  200|    520|        {
  201|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|    520|            return false;
  203|    520|        }
  204|       |
  205|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|     66|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|     66|        return true;
  209|    586|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|    588|    {
  213|    588|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 522, False: 66]
  ------------------
  214|    522|        {
  215|    522|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    522|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|    522|            return false;
  217|    522|        }
  218|       |
  219|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|     66|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|     66|        return true;
  223|    588|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|    330|    {
  227|    330|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 264, False: 66]
  ------------------
  228|    264|        {
  229|    264|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    264|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|    264|            return false;
  231|    264|        }
  232|       |
  233|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|     66|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|     66|        return true;
  237|    330|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  1.09k|    {
  241|  1.09k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 904, False: 194]
  ------------------
  242|    904|        {
  243|    904|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    904|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|    904|            return false;
  245|    904|        }
  246|       |
  247|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|    194|        return true;
  251|  1.09k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|    330|    {
  255|    330|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 264, False: 66]
  ------------------
  256|    264|        {
  257|    264|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    264|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|    264|            return false;
  259|    264|        }
  260|       |
  261|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|     66|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|     66|        return true;
  265|    330|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  13.2k|    {
  269|       |        // Cannot access anything before the starting address
  270|  13.2k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 3.02k, False: 10.1k]
  ------------------
  271|  3.02k|        {
  272|  3.02k|            return false;
  273|  3.02k|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|  10.1k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 2.14k, False: 8.03k]
  ------------------
  277|  10.1k|                                             address.unsafe(), size.unsafe()))
  278|  2.14k|        {
  279|  2.14k|            return false;
  280|  2.14k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  8.03k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 1.89k, False: 6.14k]
  ------------------
  284|  8.03k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|  1.89k|        {
  286|  1.89k|            return false;
  287|  1.89k|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  6.14k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 2.95k, False: 3.18k]
  ------------------
  291|  2.95k|        {
  292|  2.95k|            return false;
  293|  2.95k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  3.18k|        return true;
  297|  6.14k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  2.20k|    {
  302|  2.20k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 2.13k, False: 66]
  |  Branch (302:30): [True: 1.16k, False: 972]
  ------------------
  303|  2.20k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|    388|    {
  307|    388|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 24.8k, False: 388]
  ------------------
  308|  24.8k|        {
  309|  24.8k|            val.signed_value = 0;
  310|  24.8k|        }
  311|    388|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    194|    {
  315|    194|        return m_StartingAddress;
  316|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|    357|    {
  320|    357|        m_StartingAddress = new_starting_address;
  321|    357|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|    194|    {
  325|    194|        return m_Values.size();
  326|    194|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|    601|    {
  330|    601|        m_Values.resize(new_size.unsafe());
  331|    601|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|    194|    {
  335|    194|        return m_Values;
  336|    194|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  339|    194|    {
  340|    194|        return m_Values;
  341|    194|    }

LLVMFuzzerTestOneInput:
   76|    834|{
   77|    834|    dlx::MemoryBlock memory_block{1000u, max_size};
   78|       |
   79|    834|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   24|    834|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   80|       |
   81|  17.1k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (81:33): [True: 16.8k, False: 313]
  ------------------
   82|  16.8k|    {
   83|  16.8k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   11|  16.8k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  16.8k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 489, False: 16.3k]
  |  |  ------------------
  |  |   13|  16.8k|    {                                                                                              \
  |  |   14|    489|        return 0;                                                                                  \
  |  |   15|    489|    }                                                                                              \
  |  |   16|  16.8k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   84|       |
   85|  16.3k|        switch (function_index)
  ------------------
  |  Branch (85:17): [True: 779, False: 15.6k]
  ------------------
   86|  16.3k|        {
   87|       |            // LoadByte
   88|    977|            case 0: {
  ------------------
  |  Branch (88:13): [True: 977, False: 15.4k]
  ------------------
   89|    977|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    977|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    977|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 975]
  |  |  ------------------
  |  |   13|    977|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|    977|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   90|       |
   91|    975|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   24|    975|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   92|    975|                (void)memory_block.LoadByte(address);
   93|    975|                break;
   94|    977|            }
   95|       |
   96|       |            // LoadUnsignedByte
   97|    715|            case 1: {
  ------------------
  |  Branch (97:13): [True: 715, False: 15.6k]
  ------------------
   98|    715|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   13|    715|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   99|       |
  100|    714|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   24|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  101|    714|                (void)memory_block.LoadUnsignedByte(address);
  102|    714|                break;
  103|    715|            }
  104|       |
  105|       |            // LoadHalfWord
  106|  1.18k|            case 2: {
  ------------------
  |  Branch (106:13): [True: 1.18k, False: 15.2k]
  ------------------
  107|  1.18k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.18k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.18k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.17k]
  |  |  ------------------
  |  |   13|  1.18k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.18k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  108|       |
  109|  1.17k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  1.17k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  110|  1.17k|                (void)memory_block.LoadHalfWord(address);
  111|  1.17k|                break;
  112|  1.18k|            }
  113|       |
  114|       |                // LoadUnsignedHalfWord
  115|  1.03k|            case 3: {
  ------------------
  |  Branch (115:13): [True: 1.03k, False: 15.3k]
  ------------------
  116|  1.03k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.03k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.03k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.03k]
  |  |  ------------------
  |  |   13|  1.03k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.03k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  117|       |
  118|  1.03k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  1.03k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  119|  1.03k|                (void)memory_block.LoadUnsignedHalfWord(address);
  120|  1.03k|                break;
  121|  1.03k|            }
  122|       |
  123|       |            // LoadWord
  124|  1.16k|            case 4: {
  ------------------
  |  Branch (124:13): [True: 1.16k, False: 15.2k]
  ------------------
  125|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   13|  1.16k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  126|       |
  127|  1.16k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   24|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  128|  1.16k|                (void)memory_block.LoadWord(address);
  129|  1.16k|                break;
  130|  1.16k|            }
  131|       |
  132|       |            // LoadUnsignedWord
  133|    909|            case 5: {
  ------------------
  |  Branch (133:13): [True: 909, False: 15.4k]
  ------------------
  134|    909|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    909|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    909|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 908]
  |  |  ------------------
  |  |   13|    909|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    909|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  135|       |
  136|    908|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   24|    908|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  137|    908|                (void)memory_block.LoadUnsignedWord(address);
  138|    908|                break;
  139|    909|            }
  140|       |
  141|       |            // LoadFloat
  142|  1.03k|            case 6: {
  ------------------
  |  Branch (142:13): [True: 1.03k, False: 15.3k]
  ------------------
  143|  1.03k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.03k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.03k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.03k]
  |  |  ------------------
  |  |   13|  1.03k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.03k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  144|       |
  145|  1.03k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   24|  1.03k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  146|  1.03k|                (void)memory_block.LoadFloat(address);
  147|  1.03k|                break;
  148|  1.03k|            }
  149|       |
  150|       |            // LoadDouble
  151|  1.16k|            case 7: {
  ------------------
  |  Branch (151:13): [True: 1.16k, False: 15.2k]
  ------------------
  152|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   13|  1.16k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  153|       |
  154|  1.16k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   24|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  155|  1.16k|                (void)memory_block.LoadDouble(address);
  156|  1.16k|                break;
  157|  1.16k|            }
  158|       |
  159|       |            // StoreByte
  160|    716|            case 8: {
  ------------------
  |  Branch (160:13): [True: 716, False: 15.6k]
  ------------------
  161|    716|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    716|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    716|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 715]
  |  |  ------------------
  |  |   13|    716|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    716|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  162|    715|                GET_T(phi::int8_t, value);
  ------------------
  |  |   11|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   13|    715|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  163|       |
  164|    714|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  165|    714|                (void)memory_block.StoreByte(address, value);
  166|    714|                break;
  167|    715|            }
  168|       |
  169|       |            // StoreUnsignedByte
  170|    332|            case 9: {
  ------------------
  |  Branch (170:13): [True: 332, False: 16.0k]
  ------------------
  171|    332|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    332|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    332|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 331]
  |  |  ------------------
  |  |   13|    332|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    332|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  172|    331|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   11|    331|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    331|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 330]
  |  |  ------------------
  |  |   13|    331|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    331|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  173|       |
  174|    330|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    330|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  175|    330|                (void)memory_block.StoreUnsignedByte(address, value);
  176|    330|                break;
  177|    331|            }
  178|       |
  179|       |            // StoreHalfWord
  180|    461|            case 10: {
  ------------------
  |  Branch (180:13): [True: 461, False: 15.9k]
  ------------------
  181|    461|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    461|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    461|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 460]
  |  |  ------------------
  |  |   13|    461|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    461|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  182|    460|                GET_T(phi::int16_t, value);
  ------------------
  |  |   11|    460|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    460|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 459]
  |  |  ------------------
  |  |   13|    460|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    460|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  183|       |
  184|    459|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    459|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  185|    459|                (void)memory_block.StoreHalfWord(address, value);
  186|    459|                break;
  187|    460|            }
  188|       |
  189|       |            // StoreUnsignedHalfWord
  190|    588|            case 11: {
  ------------------
  |  Branch (190:13): [True: 588, False: 15.8k]
  ------------------
  191|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   13|    588|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  192|    587|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   11|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   13|    587|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  193|       |
  194|    586|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  195|    586|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  196|    586|                break;
  197|    587|            }
  198|       |
  199|       |            // StoreWord
  200|    590|            case 12: {
  ------------------
  |  Branch (200:13): [True: 590, False: 15.8k]
  ------------------
  201|    590|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    590|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    590|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 589]
  |  |  ------------------
  |  |   13|    590|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    590|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  202|    589|                GET_T(phi::int32_t, value);
  ------------------
  |  |   11|    589|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    589|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 588]
  |  |  ------------------
  |  |   13|    589|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    589|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  203|       |
  204|    588|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    588|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  205|    588|                (void)memory_block.StoreWord(address, value);
  206|    588|                break;
  207|    589|            }
  208|       |
  209|       |            // StoreUnsignedWord
  210|    332|            case 13: {
  ------------------
  |  Branch (210:13): [True: 332, False: 16.0k]
  ------------------
  211|    332|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    332|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    332|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 331]
  |  |  ------------------
  |  |   13|    332|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    332|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  212|    331|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   11|    331|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    331|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 330]
  |  |  ------------------
  |  |   13|    331|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    331|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  213|       |
  214|    330|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    330|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  215|    330|                (void)memory_block.StoreUnsignedWord(address, value);
  216|    330|                break;
  217|    331|            }
  218|       |
  219|       |            // StoreFloat
  220|  1.10k|            case 14: {
  ------------------
  |  Branch (220:13): [True: 1.10k, False: 15.2k]
  ------------------
  221|  1.10k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.09k]
  |  |  ------------------
  |  |   13|  1.10k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  222|  1.09k|                GET_T(phi::float32, value);
  ------------------
  |  |   11|  1.09k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.09k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.09k]
  |  |  ------------------
  |  |   13|  1.09k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.09k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  223|       |
  224|  1.09k|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  1.09k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  225|  1.09k|                (void)memory_block.StoreFloat(address, value);
  226|  1.09k|                break;
  227|  1.09k|            }
  228|       |
  229|       |            // StoreDouble
  230|    332|            case 15: {
  ------------------
  |  Branch (230:13): [True: 332, False: 16.0k]
  ------------------
  231|    332|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    332|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    332|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 331]
  |  |  ------------------
  |  |   13|    332|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    332|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  232|    331|                GET_T(phi::float64, value);
  ------------------
  |  |   11|    331|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    331|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 330]
  |  |  ------------------
  |  |   13|    331|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    331|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  233|       |
  234|    330|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|    330|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  235|    330|                (void)memory_block.StoreDouble(address, value);
  236|    330|                break;
  237|    331|            }
  238|       |
  239|       |            // IsAddressValid
  240|    588|            case 16: {
  ------------------
  |  Branch (240:13): [True: 588, False: 15.8k]
  ------------------
  241|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   13|    588|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  242|    587|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   13|    587|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  243|       |
  244|    586|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   24|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  245|    586|                (void)memory_block.IsAddressValid(address, arg_size);
  246|    586|                break;
  247|    587|            }
  248|       |
  249|       |            // IsAddressAlignedCorrectly
  250|    262|            case 17: {
  ------------------
  |  Branch (250:13): [True: 262, False: 16.1k]
  ------------------
  251|    262|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    262|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    262|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 261]
  |  |  ------------------
  |  |   13|    262|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    262|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  252|    261|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|    261|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    261|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 260]
  |  |  ------------------
  |  |   13|    261|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    261|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  253|       |
  254|    260|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   24|    260|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  255|    260|                         print_int(arg_size));
  256|    260|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  257|    260|                break;
  258|    261|            }
  259|       |
  260|       |            // GetStartingAddress
  261|    194|            case 18: {
  ------------------
  |  Branch (261:13): [True: 194, False: 16.1k]
  ------------------
  262|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  263|    194|                (void)memory_block.GetStartingAddress();
  264|    194|                break;
  265|    261|            }
  266|       |
  267|       |            // SetStartingAddress
  268|    358|            case 19: {
  ------------------
  |  Branch (268:13): [True: 358, False: 16.0k]
  ------------------
  269|    358|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    358|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    358|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 357]
  |  |  ------------------
  |  |   13|    358|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    358|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  270|       |
  271|    357|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   24|    357|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  272|    357|                memory_block.SetStartingAddress(address);
  273|    357|                break;
  274|    358|            }
  275|       |
  276|       |            // GetSize
  277|    194|            case 20: {
  ------------------
  |  Branch (277:13): [True: 194, False: 16.1k]
  ------------------
  278|    194|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  279|    194|                (void)memory_block.GetSize();
  280|    194|                break;
  281|    358|            }
  282|       |
  283|       |            // Resize
  284|    603|            case 21: {
  ------------------
  |  Branch (284:13): [True: 603, False: 15.7k]
  ------------------
  285|    603|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   11|    603|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    603|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 602]
  |  |  ------------------
  |  |   13|    603|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    603|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  286|       |
  287|       |                // Reject too big resizes
  288|    602|                if (new_size > max_size)
  ------------------
  |  Branch (288:21): [True: 1, False: 601]
  ------------------
  289|      1|                {
  290|      1|                    return 0;
  291|      1|                }
  292|       |
  293|    601|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   24|    601|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  294|    601|                memory_block.Resize(new_size);
  295|    601|                break;
  296|    602|            }
  297|       |
  298|       |            // GetRawMemory
  299|    194|            case 22: {
  ------------------
  |  Branch (299:13): [True: 194, False: 16.1k]
  ------------------
  300|    194|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  301|    194|                (void)memory_block.GetRawMemory();
  302|    194|                break;
  303|    602|            }
  304|       |
  305|       |            // GetRawMemory const
  306|    194|            case 23: {
  ------------------
  |  Branch (306:13): [True: 194, False: 16.1k]
  ------------------
  307|    194|                const dlx::MemoryBlock& const_memory_block = memory_block;
  308|    194|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  309|    194|                (void)const_memory_block.GetRawMemory();
  310|    194|                break;
  311|    602|            }
  312|       |
  313|       |            // Clear
  314|    388|            case 24: {
  ------------------
  |  Branch (314:13): [True: 388, False: 16.0k]
  ------------------
  315|    388|                FUZZ_LOG("Clear()");
  ------------------
  |  |   24|    388|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  316|    388|                memory_block.Clear();
  317|    388|            }
  318|  16.3k|        }
  319|  16.3k|    }
  320|       |
  321|    313|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   24|    313|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  322|       |
  323|    313|    return 0;
  324|    834|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   44|  17.2k|{
   45|  17.2k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 490, False: 16.7k]
  ------------------
   46|    490|    {
   47|    490|        return {};
   48|    490|    }
   49|       |
   50|  16.7k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  16.7k|    const phi::size_t old_index = index;
   53|  16.7k|    index += aligned_size<T>();
   54|       |
   55|  16.7k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  16.7k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  16.7k|        return static_cast<bool>(value);
   59|  16.7k|    }
   60|  16.7k|    else
   61|  16.7k|    {
   62|  16.7k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  16.7k|    }
   64|  16.7k|}
_Z10has_x_moremmm:
   29|  36.6k|{
   30|  36.6k|    return index + x < size;
   31|  36.6k|}
_Z12aligned_sizeIjEmv:
   37|  16.7k|{
   38|  16.7k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  16.7k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   44|  15.2k|{
   45|  15.2k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 23, False: 15.2k]
  ------------------
   46|     23|    {
   47|     23|        return {};
   48|     23|    }
   49|       |
   50|  15.2k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  15.2k|    const phi::size_t old_index = index;
   53|  15.2k|    index += aligned_size<T>();
   54|       |
   55|  15.2k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  15.2k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  15.2k|        return static_cast<bool>(value);
   59|  15.2k|    }
   60|  15.2k|    else
   61|  15.2k|    {
   62|  15.2k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  15.2k|    }
   64|  15.2k|}
_Z12aligned_sizeImEmv:
   37|  15.2k|{
   38|  15.2k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  15.2k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   44|    715|{
   45|    715|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 714]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    714|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    714|    const phi::size_t old_index = index;
   53|    714|    index += aligned_size<T>();
   54|       |
   55|    714|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    714|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    714|        return static_cast<bool>(value);
   59|    714|    }
   60|    714|    else
   61|    714|    {
   62|    714|        return *reinterpret_cast<const T*>(data + old_index);
   63|    714|    }
   64|    714|}
_Z12aligned_sizeIaEmv:
   37|    714|{
   38|    714|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    714|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   44|    331|{
   45|    331|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 330]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    330|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    330|    const phi::size_t old_index = index;
   53|    330|    index += aligned_size<T>();
   54|       |
   55|    330|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    330|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    330|        return static_cast<bool>(value);
   59|    330|    }
   60|    330|    else
   61|    330|    {
   62|    330|        return *reinterpret_cast<const T*>(data + old_index);
   63|    330|    }
   64|    330|}
_Z12aligned_sizeIhEmv:
   37|    330|{
   38|    330|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    330|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   44|    460|{
   45|    460|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 459]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    459|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    459|    const phi::size_t old_index = index;
   53|    459|    index += aligned_size<T>();
   54|       |
   55|    459|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    459|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    459|        return static_cast<bool>(value);
   59|    459|    }
   60|    459|    else
   61|    459|    {
   62|    459|        return *reinterpret_cast<const T*>(data + old_index);
   63|    459|    }
   64|    459|}
_Z12aligned_sizeIsEmv:
   37|    459|{
   38|    459|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    459|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   44|    587|{
   45|    587|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 586]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    586|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    586|    const phi::size_t old_index = index;
   53|    586|    index += aligned_size<T>();
   54|       |
   55|    586|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    586|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    586|        return static_cast<bool>(value);
   59|    586|    }
   60|    586|    else
   61|    586|    {
   62|    586|        return *reinterpret_cast<const T*>(data + old_index);
   63|    586|    }
   64|    586|}
_Z12aligned_sizeItEmv:
   37|    586|{
   38|    586|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    586|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   44|    589|{
   45|    589|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 588]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    588|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    588|    const phi::size_t old_index = index;
   53|    588|    index += aligned_size<T>();
   54|       |
   55|    588|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    588|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    588|        return static_cast<bool>(value);
   59|    588|    }
   60|    588|    else
   61|    588|    {
   62|    588|        return *reinterpret_cast<const T*>(data + old_index);
   63|    588|    }
   64|    588|}
_Z12aligned_sizeIiEmv:
   37|    588|{
   38|    588|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    588|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   44|  1.09k|{
   45|  1.09k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.09k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.09k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.09k|    const phi::size_t old_index = index;
   53|  1.09k|    index += aligned_size<T>();
   54|       |
   55|  1.09k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.09k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.09k|        return static_cast<bool>(value);
   59|  1.09k|    }
   60|  1.09k|    else
   61|  1.09k|    {
   62|  1.09k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.09k|    }
   64|  1.09k|}
_Z12aligned_sizeIfEmv:
   37|  1.09k|{
   38|  1.09k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.09k|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   44|    331|{
   45|    331|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 330]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    330|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    330|    const phi::size_t old_index = index;
   53|    330|    index += aligned_size<T>();
   54|       |
   55|    330|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    330|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    330|        return static_cast<bool>(value);
   59|    330|    }
   60|    330|    else
   61|    330|    {
   62|    330|        return *reinterpret_cast<const T*>(data + old_index);
   63|    330|    }
   64|    330|}
_Z12aligned_sizeIdEmv:
   37|    330|{
   38|    330|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    330|}


_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.04M|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|  2.03k|    {
   17|  2.03k|        m_Values.resize(starting_size.unsafe());
   18|  2.03k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  7.54k|    {
   22|  7.54k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 7.22k, False: 322]
  ------------------
   23|  7.22k|        {
   24|  7.22k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  7.22k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|  7.22k|            return {};
   26|  7.22k|        }
   27|       |
   28|    322|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|    322|        return m_Values[raw_address].signed_value;
   31|  7.54k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  2.90k|    {
   35|  2.90k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2.71k, False: 194]
  ------------------
   36|  2.71k|        {
   37|  2.71k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.71k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|  2.71k|            return {};
   39|  2.71k|        }
   40|       |
   41|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|    194|        return m_Values[raw_address].unsigned_value;
   43|  2.90k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  2.83k|    {
   47|  2.83k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 2.31k, False: 516]
  ------------------
   48|  2.31k|        {
   49|  2.31k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.31k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|  2.31k|            return {};
   51|  2.31k|        }
   52|       |
   53|    516|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    516|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 322, False: 194]
  ------------------
   56|    322|        {
   57|    322|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    322|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|    322|            return {};
   59|    322|        }
   60|       |
   61|    194|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    516|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  2.06k|    {
   66|  2.06k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 776, False: 1.28k]
  ------------------
   67|    776|        {
   68|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|    776|            return {};
   70|    776|        }
   71|       |
   72|  1.28k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  1.28k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 322, False: 962]
  ------------------
   75|    322|        {
   76|    322|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    322|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|    322|            return {};
   78|    322|        }
   79|       |
   80|    962|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  1.28k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  2.31k|    {
   85|  2.31k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2.05k, False: 260]
  ------------------
   86|  2.05k|        {
   87|  2.05k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.05k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|  2.05k|            return {};
   89|  2.05k|        }
   90|       |
   91|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 66, False: 194]
  ------------------
   94|     66|        {
   95|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|     66|            return {};
   97|     66|        }
   98|       |
   99|    194|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|    260|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  7.58k|    {
  104|  7.58k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 7.32k, False: 260]
  ------------------
  105|  7.32k|        {
  106|  7.32k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  7.32k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|  7.32k|            return {};
  108|  7.32k|        }
  109|       |
  110|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 66, False: 194]
  ------------------
  113|     66|        {
  114|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|     66|            return {};
  116|     66|        }
  117|       |
  118|    194|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    260|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  3.19k|    {
  123|  3.19k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 2.29k, False: 900]
  ------------------
  124|  2.29k|        {
  125|  2.29k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.29k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|  2.29k|            return {};
  127|  2.29k|        }
  128|       |
  129|    900|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|    900|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 706, False: 194]
  ------------------
  132|    706|        {
  133|    706|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    706|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|    706|            return {};
  135|    706|        }
  136|       |
  137|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|    900|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  1.42k|    {
  142|  1.42k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1.03k, False: 388]
  ------------------
  143|  1.03k|        {
  144|  1.03k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.03k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|  1.03k|            return {};
  146|  1.03k|        }
  147|       |
  148|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 194, False: 194]
  ------------------
  151|    194|        {
  152|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|    194|            return {};
  154|    194|        }
  155|       |
  156|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  1.90k|    {
  161|  1.90k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 1.70k, False: 194]
  ------------------
  162|  1.70k|        {
  163|  1.70k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.70k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|  1.70k|            return false;
  165|  1.70k|        }
  166|       |
  167|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|    194|        return true;
  169|  1.90k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  1.61k|    {
  173|  1.61k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 1.54k, False: 66]
  ------------------
  174|  1.54k|        {
  175|  1.54k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.54k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|  1.54k|            return false;
  177|  1.54k|        }
  178|       |
  179|     66|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|     66|        return true;
  181|  1.61k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|    841|    {
  185|    841|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 775, False: 66]
  ------------------
  186|    775|        {
  187|    775|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    775|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|    775|            return false;
  189|    775|        }
  190|       |
  191|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|     66|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|     66|        return true;
  195|    841|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|    586|    {
  199|    586|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 520, False: 66]
  ------------------
  200|    520|        {
  201|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|    520|            return false;
  203|    520|        }
  204|       |
  205|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|     66|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|     66|        return true;
  209|    586|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  1.48k|    {
  213|  1.48k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 1.28k, False: 194]
  ------------------
  214|  1.28k|        {
  215|  1.28k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.28k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|  1.28k|            return false;
  217|  1.28k|        }
  218|       |
  219|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|    194|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|    194|        return true;
  223|  1.48k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  3.53k|    {
  227|  3.53k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3.08k, False: 450]
  ------------------
  228|  3.08k|        {
  229|  3.08k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.08k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|  3.08k|            return false;
  231|  3.08k|        }
  232|       |
  233|    450|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|    450|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|    450|        return true;
  237|  3.53k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  1.35k|    {
  241|  1.35k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 1.16k, False: 194]
  ------------------
  242|  1.16k|        {
  243|  1.16k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.16k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|  1.16k|            return false;
  245|  1.16k|        }
  246|       |
  247|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|    194|        return true;
  251|  1.35k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  5.97k|    {
  255|  5.97k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 3.60k, False: 2.37k]
  ------------------
  256|  3.60k|        {
  257|  3.60k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.60k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|  3.60k|            return false;
  259|  3.60k|        }
  260|       |
  261|  2.37k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  2.37k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  2.37k|        return true;
  265|  5.97k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  47.8k|    {
  269|       |        // Cannot access anything before the starting address
  270|  47.8k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 6.60k, False: 41.2k]
  ------------------
  271|  6.60k|        {
  272|  6.60k|            return false;
  273|  6.60k|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|  41.2k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 13.8k, False: 27.3k]
  ------------------
  277|  41.2k|                                             address.unsafe(), size.unsafe()))
  278|  13.8k|        {
  279|  13.8k|            return false;
  280|  13.8k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  27.3k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 13.2k, False: 14.0k]
  ------------------
  284|  27.3k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|  13.2k|        {
  286|  13.2k|            return false;
  287|  13.2k|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  14.0k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 6.17k, False: 7.91k]
  ------------------
  291|  6.17k|        {
  292|  6.17k|            return false;
  293|  6.17k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  7.91k|        return true;
  297|  14.0k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  3.86k|    {
  302|  3.86k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 3.80k, False: 66]
  |  Branch (302:30): [True: 1.93k, False: 1.86k]
  ------------------
  303|  3.86k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  1.11k|    {
  307|  1.11k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 107k, False: 1.11k]
  ------------------
  308|   107k|        {
  309|   107k|            val.signed_value = 0;
  310|   107k|        }
  311|  1.11k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    194|    {
  315|    194|        return m_StartingAddress;
  316|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|    641|    {
  320|    641|        m_StartingAddress = new_starting_address;
  321|    641|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|    194|    {
  325|    194|        return m_Values.size();
  326|    194|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|  83.3k|    {
  330|  83.3k|        m_Values.resize(new_size.unsafe());
  331|  83.3k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|    195|    {
  335|    195|        return m_Values;
  336|    195|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  339|    195|    {
  340|    195|        return m_Values;
  341|    195|    }

LLVMFuzzerTestOneInput:
   76|  2.03k|{
   77|  2.03k|    dlx::MemoryBlock memory_block{1000u, max_size};
   78|       |
   79|  2.03k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   24|  2.03k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   80|       |
   81|   146k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (81:33): [True: 145k, False: 496]
  ------------------
   82|   145k|    {
   83|   145k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   11|   145k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|   145k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1.22k, False: 144k]
  |  |  ------------------
  |  |   13|   145k|    {                                                                                              \
  |  |   14|  1.22k|        return 0;                                                                                  \
  |  |   15|  1.22k|    }                                                                                              \
  |  |   16|   145k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   84|       |
   85|   144k|        switch (function_index)
  ------------------
  |  Branch (85:17): [True: 10.0k, False: 134k]
  ------------------
   86|   144k|        {
   87|       |            // LoadByte
   88|  7.63k|            case 0: {
  ------------------
  |  Branch (88:13): [True: 7.63k, False: 136k]
  ------------------
   89|  7.63k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  7.63k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  7.63k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 94, False: 7.54k]
  |  |  ------------------
  |  |   13|  7.63k|    {                                                                                              \
  |  |   14|     94|        return 0;                                                                                  \
  |  |   15|     94|    }                                                                                              \
  |  |   16|  7.63k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   90|       |
   91|  7.54k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   24|  7.54k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   92|  7.54k|                (void)memory_block.LoadByte(address);
   93|  7.54k|                break;
   94|  7.63k|            }
   95|       |
   96|       |            // LoadUnsignedByte
   97|  2.91k|            case 1: {
  ------------------
  |  Branch (97:13): [True: 2.91k, False: 141k]
  ------------------
   98|  2.91k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.91k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.91k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 11, False: 2.90k]
  |  |  ------------------
  |  |   13|  2.91k|    {                                                                                              \
  |  |   14|     11|        return 0;                                                                                  \
  |  |   15|     11|    }                                                                                              \
  |  |   16|  2.91k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   99|       |
  100|  2.90k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   24|  2.90k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  101|  2.90k|                (void)memory_block.LoadUnsignedByte(address);
  102|  2.90k|                break;
  103|  2.91k|            }
  104|       |
  105|       |            // LoadHalfWord
  106|  2.83k|            case 2: {
  ------------------
  |  Branch (106:13): [True: 2.83k, False: 141k]
  ------------------
  107|  2.83k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.83k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.83k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.83k]
  |  |  ------------------
  |  |   13|  2.83k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.83k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  108|       |
  109|  2.83k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  2.83k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  110|  2.83k|                (void)memory_block.LoadHalfWord(address);
  111|  2.83k|                break;
  112|  2.83k|            }
  113|       |
  114|       |                // LoadUnsignedHalfWord
  115|  2.06k|            case 3: {
  ------------------
  |  Branch (115:13): [True: 2.06k, False: 142k]
  ------------------
  116|  2.06k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.06k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.06k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.06k]
  |  |  ------------------
  |  |   13|  2.06k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.06k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  117|       |
  118|  2.06k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  2.06k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  119|  2.06k|                (void)memory_block.LoadUnsignedHalfWord(address);
  120|  2.06k|                break;
  121|  2.06k|            }
  122|       |
  123|       |            // LoadWord
  124|  2.31k|            case 4: {
  ------------------
  |  Branch (124:13): [True: 2.31k, False: 142k]
  ------------------
  125|  2.31k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.31k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.31k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.31k]
  |  |  ------------------
  |  |   13|  2.31k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.31k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  126|       |
  127|  2.31k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   24|  2.31k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  128|  2.31k|                (void)memory_block.LoadWord(address);
  129|  2.31k|                break;
  130|  2.31k|            }
  131|       |
  132|       |            // LoadUnsignedWord
  133|  7.58k|            case 5: {
  ------------------
  |  Branch (133:13): [True: 7.58k, False: 136k]
  ------------------
  134|  7.58k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  7.58k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  7.58k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 7.58k]
  |  |  ------------------
  |  |   13|  7.58k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  7.58k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  135|       |
  136|  7.58k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   24|  7.58k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  137|  7.58k|                (void)memory_block.LoadUnsignedWord(address);
  138|  7.58k|                break;
  139|  7.58k|            }
  140|       |
  141|       |            // LoadFloat
  142|  3.19k|            case 6: {
  ------------------
  |  Branch (142:13): [True: 3.19k, False: 141k]
  ------------------
  143|  3.19k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.19k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.19k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 5, False: 3.19k]
  |  |  ------------------
  |  |   13|  3.19k|    {                                                                                              \
  |  |   14|      5|        return 0;                                                                                  \
  |  |   15|      5|    }                                                                                              \
  |  |   16|  3.19k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  144|       |
  145|  3.19k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   24|  3.19k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  146|  3.19k|                (void)memory_block.LoadFloat(address);
  147|  3.19k|                break;
  148|  3.19k|            }
  149|       |
  150|       |            // LoadDouble
  151|  1.42k|            case 7: {
  ------------------
  |  Branch (151:13): [True: 1.42k, False: 142k]
  ------------------
  152|  1.42k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.42k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.42k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.42k]
  |  |  ------------------
  |  |   13|  1.42k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.42k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  153|       |
  154|  1.42k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   24|  1.42k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  155|  1.42k|                (void)memory_block.LoadDouble(address);
  156|  1.42k|                break;
  157|  1.42k|            }
  158|       |
  159|       |            // StoreByte
  160|  1.90k|            case 8: {
  ------------------
  |  Branch (160:13): [True: 1.90k, False: 142k]
  ------------------
  161|  1.90k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.90k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.90k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.90k]
  |  |  ------------------
  |  |   13|  1.90k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.90k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  162|  1.90k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   11|  1.90k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.90k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.90k]
  |  |  ------------------
  |  |   13|  1.90k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.90k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  163|       |
  164|  1.90k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  1.90k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  165|  1.90k|                (void)memory_block.StoreByte(address, value);
  166|  1.90k|                break;
  167|  1.90k|            }
  168|       |
  169|       |            // StoreUnsignedByte
  170|  1.61k|            case 9: {
  ------------------
  |  Branch (170:13): [True: 1.61k, False: 142k]
  ------------------
  171|  1.61k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   13|  1.61k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  172|  1.61k|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   11|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   13|  1.61k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  173|       |
  174|  1.61k|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  1.61k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  175|  1.61k|                (void)memory_block.StoreUnsignedByte(address, value);
  176|  1.61k|                break;
  177|  1.61k|            }
  178|       |
  179|       |            // StoreHalfWord
  180|    843|            case 10: {
  ------------------
  |  Branch (180:13): [True: 843, False: 143k]
  ------------------
  181|    843|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   13|    843|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  182|    842|                GET_T(phi::int16_t, value);
  ------------------
  |  |   11|    842|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    842|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 841]
  |  |  ------------------
  |  |   13|    842|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    842|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  183|       |
  184|    841|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    841|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  185|    841|                (void)memory_block.StoreHalfWord(address, value);
  186|    841|                break;
  187|    842|            }
  188|       |
  189|       |            // StoreUnsignedHalfWord
  190|    588|            case 11: {
  ------------------
  |  Branch (190:13): [True: 588, False: 143k]
  ------------------
  191|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   13|    588|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  192|    587|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   11|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   13|    587|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  193|       |
  194|    586|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  195|    586|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  196|    586|                break;
  197|    587|            }
  198|       |
  199|       |            // StoreWord
  200|  1.48k|            case 12: {
  ------------------
  |  Branch (200:13): [True: 1.48k, False: 142k]
  ------------------
  201|  1.48k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.48k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.48k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.48k]
  |  |  ------------------
  |  |   13|  1.48k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.48k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  202|  1.48k|                GET_T(phi::int32_t, value);
  ------------------
  |  |   11|  1.48k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.48k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.48k]
  |  |  ------------------
  |  |   13|  1.48k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.48k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  203|       |
  204|  1.48k|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  1.48k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  205|  1.48k|                (void)memory_block.StoreWord(address, value);
  206|  1.48k|                break;
  207|  1.48k|            }
  208|       |
  209|       |            // StoreUnsignedWord
  210|  3.53k|            case 13: {
  ------------------
  |  Branch (210:13): [True: 3.53k, False: 140k]
  ------------------
  211|  3.53k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.53k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.53k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.53k]
  |  |  ------------------
  |  |   13|  3.53k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.53k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  212|  3.53k|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   11|  3.53k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.53k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.53k]
  |  |  ------------------
  |  |   13|  3.53k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.53k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  213|       |
  214|  3.53k|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  3.53k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  215|  3.53k|                (void)memory_block.StoreUnsignedWord(address, value);
  216|  3.53k|                break;
  217|  3.53k|            }
  218|       |
  219|       |            // StoreFloat
  220|  1.35k|            case 14: {
  ------------------
  |  Branch (220:13): [True: 1.35k, False: 142k]
  ------------------
  221|  1.35k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.35k]
  |  |  ------------------
  |  |   13|  1.35k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  222|  1.35k|                GET_T(phi::float32, value);
  ------------------
  |  |   11|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.35k]
  |  |  ------------------
  |  |   13|  1.35k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  223|       |
  224|  1.35k|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  1.35k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  225|  1.35k|                (void)memory_block.StoreFloat(address, value);
  226|  1.35k|                break;
  227|  1.35k|            }
  228|       |
  229|       |            // StoreDouble
  230|  5.97k|            case 15: {
  ------------------
  |  Branch (230:13): [True: 5.97k, False: 138k]
  ------------------
  231|  5.97k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  5.97k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  5.97k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 5.97k]
  |  |  ------------------
  |  |   13|  5.97k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  5.97k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  232|  5.97k|                GET_T(phi::float64, value);
  ------------------
  |  |   11|  5.97k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  5.97k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 5.97k]
  |  |  ------------------
  |  |   13|  5.97k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  5.97k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  233|       |
  234|  5.97k|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  5.97k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  235|  5.97k|                (void)memory_block.StoreDouble(address, value);
  236|  5.97k|                break;
  237|  5.97k|            }
  238|       |
  239|       |            // IsAddressValid
  240|    716|            case 16: {
  ------------------
  |  Branch (240:13): [True: 716, False: 143k]
  ------------------
  241|    716|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    716|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    716|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 715]
  |  |  ------------------
  |  |   13|    716|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    716|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  242|    715|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   13|    715|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  243|       |
  244|    714|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   24|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  245|    714|                (void)memory_block.IsAddressValid(address, arg_size);
  246|    714|                break;
  247|    715|            }
  248|       |
  249|       |            // IsAddressAlignedCorrectly
  250|    262|            case 17: {
  ------------------
  |  Branch (250:13): [True: 262, False: 144k]
  ------------------
  251|    262|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    262|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    262|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 261]
  |  |  ------------------
  |  |   13|    262|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    262|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  252|    261|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|    261|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    261|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 260]
  |  |  ------------------
  |  |   13|    261|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    261|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  253|       |
  254|    260|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   24|    260|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  255|    260|                         print_int(arg_size));
  256|    260|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  257|    260|                break;
  258|    261|            }
  259|       |
  260|       |            // GetStartingAddress
  261|    194|            case 18: {
  ------------------
  |  Branch (261:13): [True: 194, False: 144k]
  ------------------
  262|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  263|    194|                (void)memory_block.GetStartingAddress();
  264|    194|                break;
  265|    261|            }
  266|       |
  267|       |            // SetStartingAddress
  268|    642|            case 19: {
  ------------------
  |  Branch (268:13): [True: 642, False: 143k]
  ------------------
  269|    642|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    642|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    642|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 641]
  |  |  ------------------
  |  |   13|    642|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    642|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  270|       |
  271|    641|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   24|    641|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  272|    641|                memory_block.SetStartingAddress(address);
  273|    641|                break;
  274|    642|            }
  275|       |
  276|       |            // GetSize
  277|    194|            case 20: {
  ------------------
  |  Branch (277:13): [True: 194, False: 144k]
  ------------------
  278|    194|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  279|    194|                (void)memory_block.GetSize();
  280|    194|                break;
  281|    642|            }
  282|       |
  283|       |            // Resize
  284|  83.4k|            case 21: {
  ------------------
  |  Branch (284:13): [True: 83.4k, False: 60.8k]
  ------------------
  285|  83.4k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   11|  83.4k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  83.4k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 138, False: 83.3k]
  |  |  ------------------
  |  |   13|  83.4k|    {                                                                                              \
  |  |   14|    138|        return 0;                                                                                  \
  |  |   15|    138|    }                                                                                              \
  |  |   16|  83.4k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  286|       |
  287|       |                // Reject too big resizes
  288|  83.3k|                if (new_size > max_size)
  ------------------
  |  Branch (288:21): [True: 39, False: 83.3k]
  ------------------
  289|     39|                {
  290|     39|                    return 0;
  291|     39|                }
  292|       |
  293|  83.3k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   24|  83.3k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  294|  83.3k|                memory_block.Resize(new_size);
  295|  83.3k|                break;
  296|  83.3k|            }
  297|       |
  298|       |            // GetRawMemory
  299|    195|            case 22: {
  ------------------
  |  Branch (299:13): [True: 195, False: 144k]
  ------------------
  300|    195|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   24|    195|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  301|    195|                (void)memory_block.GetRawMemory();
  302|    195|                break;
  303|  83.3k|            }
  304|       |
  305|       |            // GetRawMemory const
  306|    195|            case 23: {
  ------------------
  |  Branch (306:13): [True: 195, False: 144k]
  ------------------
  307|    195|                const dlx::MemoryBlock& const_memory_block = memory_block;
  308|    195|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   24|    195|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  309|    195|                (void)const_memory_block.GetRawMemory();
  310|    195|                break;
  311|  83.3k|            }
  312|       |
  313|       |            // Clear
  314|  1.11k|            case 24: {
  ------------------
  |  Branch (314:13): [True: 1.11k, False: 143k]
  ------------------
  315|  1.11k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   24|  1.11k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  316|  1.11k|                memory_block.Clear();
  317|  1.11k|            }
  318|   144k|        }
  319|   144k|    }
  320|       |
  321|    496|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   24|    496|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  322|       |
  323|    496|    return 0;
  324|  2.03k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   44|   149k|{
   45|   149k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1.22k, False: 147k]
  ------------------
   46|  1.22k|    {
   47|  1.22k|        return {};
   48|  1.22k|    }
   49|       |
   50|   147k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|   147k|    const phi::size_t old_index = index;
   53|   147k|    index += aligned_size<T>();
   54|       |
   55|   147k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|   147k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|   147k|        return static_cast<bool>(value);
   59|   147k|    }
   60|   147k|    else
   61|   147k|    {
   62|   147k|        return *reinterpret_cast<const T*>(data + old_index);
   63|   147k|    }
   64|   147k|}
_Z10has_x_moremmm:
   29|   296k|{
   30|   296k|    return index + x < size;
   31|   296k|}
_Z12aligned_sizeIjEmv:
   37|   147k|{
   38|   147k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|   147k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   44|   133k|{
   45|   133k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 266, False: 133k]
  ------------------
   46|    266|    {
   47|    266|        return {};
   48|    266|    }
   49|       |
   50|   133k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|   133k|    const phi::size_t old_index = index;
   53|   133k|    index += aligned_size<T>();
   54|       |
   55|   133k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|   133k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|   133k|        return static_cast<bool>(value);
   59|   133k|    }
   60|   133k|    else
   61|   133k|    {
   62|   133k|        return *reinterpret_cast<const T*>(data + old_index);
   63|   133k|    }
   64|   133k|}
_Z12aligned_sizeImEmv:
   37|   133k|{
   38|   133k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|   133k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   44|  1.90k|{
   45|  1.90k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.90k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.90k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.90k|    const phi::size_t old_index = index;
   53|  1.90k|    index += aligned_size<T>();
   54|       |
   55|  1.90k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.90k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.90k|        return static_cast<bool>(value);
   59|  1.90k|    }
   60|  1.90k|    else
   61|  1.90k|    {
   62|  1.90k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.90k|    }
   64|  1.90k|}
_Z12aligned_sizeIaEmv:
   37|  1.90k|{
   38|  1.90k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.90k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   44|  1.61k|{
   45|  1.61k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.61k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.61k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.61k|    const phi::size_t old_index = index;
   53|  1.61k|    index += aligned_size<T>();
   54|       |
   55|  1.61k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.61k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.61k|        return static_cast<bool>(value);
   59|  1.61k|    }
   60|  1.61k|    else
   61|  1.61k|    {
   62|  1.61k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.61k|    }
   64|  1.61k|}
_Z12aligned_sizeIhEmv:
   37|  1.61k|{
   38|  1.61k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.61k|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   44|    842|{
   45|    842|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 841]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    841|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    841|    const phi::size_t old_index = index;
   53|    841|    index += aligned_size<T>();
   54|       |
   55|    841|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    841|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    841|        return static_cast<bool>(value);
   59|    841|    }
   60|    841|    else
   61|    841|    {
   62|    841|        return *reinterpret_cast<const T*>(data + old_index);
   63|    841|    }
   64|    841|}
_Z12aligned_sizeIsEmv:
   37|    841|{
   38|    841|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    841|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   44|    587|{
   45|    587|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 586]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    586|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    586|    const phi::size_t old_index = index;
   53|    586|    index += aligned_size<T>();
   54|       |
   55|    586|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    586|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    586|        return static_cast<bool>(value);
   59|    586|    }
   60|    586|    else
   61|    586|    {
   62|    586|        return *reinterpret_cast<const T*>(data + old_index);
   63|    586|    }
   64|    586|}
_Z12aligned_sizeItEmv:
   37|    586|{
   38|    586|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    586|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   44|  1.48k|{
   45|  1.48k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.48k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.48k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.48k|    const phi::size_t old_index = index;
   53|  1.48k|    index += aligned_size<T>();
   54|       |
   55|  1.48k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.48k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.48k|        return static_cast<bool>(value);
   59|  1.48k|    }
   60|  1.48k|    else
   61|  1.48k|    {
   62|  1.48k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.48k|    }
   64|  1.48k|}
_Z12aligned_sizeIiEmv:
   37|  1.48k|{
   38|  1.48k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.48k|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   44|  1.35k|{
   45|  1.35k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.35k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.35k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.35k|    const phi::size_t old_index = index;
   53|  1.35k|    index += aligned_size<T>();
   54|       |
   55|  1.35k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.35k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.35k|        return static_cast<bool>(value);
   59|  1.35k|    }
   60|  1.35k|    else
   61|  1.35k|    {
   62|  1.35k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.35k|    }
   64|  1.35k|}
_Z12aligned_sizeIfEmv:
   37|  1.35k|{
   38|  1.35k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.35k|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   44|  5.97k|{
   45|  5.97k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 5.97k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  5.97k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  5.97k|    const phi::size_t old_index = index;
   53|  5.97k|    index += aligned_size<T>();
   54|       |
   55|  5.97k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  5.97k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  5.97k|        return static_cast<bool>(value);
   59|  5.97k|    }
   60|  5.97k|    else
   61|  5.97k|    {
   62|  5.97k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  5.97k|    }
   64|  5.97k|}
_Z12aligned_sizeIdEmv:
   37|  5.97k|{
   38|  5.97k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  5.97k|}


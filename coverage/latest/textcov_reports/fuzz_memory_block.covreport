_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   394k|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|  1.85k|    {
   17|  1.85k|        m_Values.resize(starting_size.unsafe());
   18|  1.85k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  8.14k|    {
   22|  8.14k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 7.88k, False: 265]
  ------------------
   23|  7.88k|        {
   24|  7.88k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  7.88k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|  7.88k|            return {};
   26|  7.88k|        }
   27|       |
   28|    265|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|    265|        return m_Values[raw_address].signed_value;
   31|  8.14k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  3.77k|    {
   35|  3.77k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 2.16k, False: 1.60k]
  ------------------
   36|  2.16k|        {
   37|  2.16k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.16k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|  2.16k|            return {};
   39|  2.16k|        }
   40|       |
   41|  1.60k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|  1.60k|        return m_Values[raw_address].unsigned_value;
   43|  3.77k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  2.30k|    {
   47|  2.30k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 1.77k, False: 532]
  ------------------
   48|  1.77k|        {
   49|  1.77k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.77k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|  1.77k|            return {};
   51|  1.77k|        }
   52|       |
   53|    532|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    532|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 82, False: 450]
  ------------------
   56|     82|        {
   57|     82|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     82|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|     82|            return {};
   59|     82|        }
   60|       |
   61|    450|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    532|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  10.7k|    {
   66|  10.7k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 5.07k, False: 5.66k]
  ------------------
   67|  5.07k|        {
   68|  5.07k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  5.07k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|  5.07k|            return {};
   70|  5.07k|        }
   71|       |
   72|  5.66k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  5.66k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 3.01k, False: 2.65k]
  ------------------
   75|  3.01k|        {
   76|  3.01k|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|  3.01k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|  3.01k|            return {};
   78|  3.01k|        }
   79|       |
   80|  2.65k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  5.66k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  3.88k|    {
   85|  3.88k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2.06k, False: 1.81k]
  ------------------
   86|  2.06k|        {
   87|  2.06k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.06k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|  2.06k|            return {};
   89|  2.06k|        }
   90|       |
   91|  1.81k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  1.81k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 98, False: 1.71k]
  ------------------
   94|     98|        {
   95|     98|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     98|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|     98|            return {};
   97|     98|        }
   98|       |
   99|  1.71k|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  1.81k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  3.66k|    {
  104|  3.66k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 3.15k, False: 516]
  ------------------
  105|  3.15k|        {
  106|  3.15k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.15k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|  3.15k|            return {};
  108|  3.15k|        }
  109|       |
  110|    516|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    516|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 66, False: 450]
  ------------------
  113|     66|        {
  114|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|     66|            return {};
  116|     66|        }
  117|       |
  118|    450|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    516|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  1.81k|    {
  123|  1.81k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 1.02k, False: 788]
  ------------------
  124|  1.02k|        {
  125|  1.02k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.02k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|  1.02k|            return {};
  127|  1.02k|        }
  128|       |
  129|    788|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|    788|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 402, False: 386]
  ------------------
  132|    402|        {
  133|    402|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    402|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|    402|            return {};
  135|    402|        }
  136|       |
  137|    386|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|    788|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  4.42k|    {
  142|  4.42k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 4.29k, False: 132]
  ------------------
  143|  4.29k|        {
  144|  4.29k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  4.29k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|  4.29k|            return {};
  146|  4.29k|        }
  147|       |
  148|    132|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    132|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 66, False: 66]
  ------------------
  151|     66|        {
  152|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|     66|            return {};
  154|     66|        }
  155|       |
  156|     66|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    132|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  1.60k|    {
  161|  1.60k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 1.53k, False: 66]
  ------------------
  162|  1.53k|        {
  163|  1.53k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.53k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|  1.53k|            return false;
  165|  1.53k|        }
  166|       |
  167|     66|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|     66|        return true;
  169|  1.60k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|    650|    {
  173|    650|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 552, False: 98]
  ------------------
  174|    552|        {
  175|    552|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    552|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|    552|            return false;
  177|    552|        }
  178|       |
  179|     98|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|     98|        return true;
  181|    650|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|    968|    {
  185|    968|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 870, False: 98]
  ------------------
  186|    870|        {
  187|    870|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    870|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|    870|            return false;
  189|    870|        }
  190|       |
  191|     98|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|     98|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|     98|        return true;
  195|    968|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|    890|    {
  199|    890|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 824, False: 66]
  ------------------
  200|    824|        {
  201|    824|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    824|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|    824|            return false;
  203|    824|        }
  204|       |
  205|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|     66|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|     66|        return true;
  209|    890|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  1.00k|    {
  213|  1.00k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 936, False: 66]
  ------------------
  214|    936|        {
  215|    936|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    936|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|    936|            return false;
  217|    936|        }
  218|       |
  219|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|     66|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|     66|        return true;
  223|  1.00k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|    426|    {
  227|    426|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 360, False: 66]
  ------------------
  228|    360|        {
  229|    360|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    360|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|    360|            return false;
  231|    360|        }
  232|       |
  233|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|     66|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|     66|        return true;
  237|    426|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  6.46k|    {
  241|  6.46k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 5.24k, False: 1.21k]
  ------------------
  242|  5.24k|        {
  243|  5.24k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  5.24k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|  5.24k|            return false;
  245|  5.24k|        }
  246|       |
  247|  1.21k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  1.21k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  1.21k|        return true;
  251|  6.46k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|    402|    {
  255|    402|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 336, False: 66]
  ------------------
  256|    336|        {
  257|    336|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    336|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|    336|            return false;
  259|    336|        }
  260|       |
  261|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|     66|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|     66|        return true;
  265|    402|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  52.4k|    {
  269|       |        // Cannot access anything before the starting address
  270|  52.4k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 9.54k, False: 42.8k]
  ------------------
  271|  9.54k|        {
  272|  9.54k|            return false;
  273|  9.54k|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|  42.8k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 9.89k, False: 32.9k]
  ------------------
  277|  42.8k|                                             address.unsafe(), size.unsafe()))
  278|  9.89k|        {
  279|  9.89k|            return false;
  280|  9.89k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  32.9k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 7.73k, False: 25.2k]
  ------------------
  284|  32.9k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|  7.73k|        {
  286|  7.73k|            return false;
  287|  7.73k|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  25.2k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 12.1k, False: 13.1k]
  ------------------
  291|  12.1k|        {
  292|  12.1k|            return false;
  293|  12.1k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  13.1k|        return true;
  297|  25.2k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  10.1k|    {
  302|  10.1k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 9.77k, False: 386]
  |  Branch (302:30): [True: 5.72k, False: 4.04k]
  ------------------
  303|  10.1k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  2.55k|    {
  307|  2.55k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 284k, False: 2.55k]
  ------------------
  308|   284k|        {
  309|   284k|            val.signed_value = 0;
  310|   284k|        }
  311|  2.55k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    194|    {
  315|    194|        return m_StartingAddress;
  316|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|    614|    {
  320|    614|        m_StartingAddress = new_starting_address;
  321|    614|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|     66|    {
  325|     66|        return m_Values.size();
  326|     66|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|  18.7k|    {
  330|  18.7k|        m_Values.resize(new_size.unsafe());
  331|  18.7k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|  1.21k|    {
  335|  1.21k|        return m_Values;
  336|  1.21k|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  339|    322|    {
  340|    322|        return m_Values;
  341|    322|    }

LLVMFuzzerTestOneInput:
   76|  1.85k|{
   77|  1.85k|    dlx::MemoryBlock memory_block{1000u, max_size};
   78|       |
   79|  1.85k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   24|  1.85k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   80|       |
   81|  95.3k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (81:33): [True: 94.8k, False: 500]
  ------------------
   82|  94.8k|    {
   83|  94.8k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   11|  94.8k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  94.8k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1.10k, False: 93.7k]
  |  |  ------------------
  |  |   13|  94.8k|    {                                                                                              \
  |  |   14|  1.10k|        return 0;                                                                                  \
  |  |   15|  1.10k|    }                                                                                              \
  |  |   16|  94.8k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   84|       |
   85|  93.7k|        switch (function_index)
  ------------------
  |  Branch (85:17): [True: 16.6k, False: 77.0k]
  ------------------
   86|  93.7k|        {
   87|       |            // LoadByte
   88|  8.24k|            case 0: {
  ------------------
  |  Branch (88:13): [True: 8.24k, False: 85.5k]
  ------------------
   89|  8.24k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  8.24k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  8.24k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 100, False: 8.14k]
  |  |  ------------------
  |  |   13|  8.24k|    {                                                                                              \
  |  |   14|    100|        return 0;                                                                                  \
  |  |   15|    100|    }                                                                                              \
  |  |   16|  8.24k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   90|       |
   91|  8.14k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   24|  8.14k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   92|  8.14k|                (void)memory_block.LoadByte(address);
   93|  8.14k|                break;
   94|  8.24k|            }
   95|       |
   96|       |            // LoadUnsignedByte
   97|  3.77k|            case 1: {
  ------------------
  |  Branch (97:13): [True: 3.77k, False: 89.9k]
  ------------------
   98|  3.77k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.77k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.77k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.77k]
  |  |  ------------------
  |  |   13|  3.77k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.77k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   99|       |
  100|  3.77k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   24|  3.77k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  101|  3.77k|                (void)memory_block.LoadUnsignedByte(address);
  102|  3.77k|                break;
  103|  3.77k|            }
  104|       |
  105|       |            // LoadHalfWord
  106|  2.30k|            case 2: {
  ------------------
  |  Branch (106:13): [True: 2.30k, False: 91.4k]
  ------------------
  107|  2.30k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.30k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.30k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.30k]
  |  |  ------------------
  |  |   13|  2.30k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.30k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  108|       |
  109|  2.30k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  2.30k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  110|  2.30k|                (void)memory_block.LoadHalfWord(address);
  111|  2.30k|                break;
  112|  2.30k|            }
  113|       |
  114|       |                // LoadUnsignedHalfWord
  115|  10.7k|            case 3: {
  ------------------
  |  Branch (115:13): [True: 10.7k, False: 83.0k]
  ------------------
  116|  10.7k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  10.7k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  10.7k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 5, False: 10.7k]
  |  |  ------------------
  |  |   13|  10.7k|    {                                                                                              \
  |  |   14|      5|        return 0;                                                                                  \
  |  |   15|      5|    }                                                                                              \
  |  |   16|  10.7k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  117|       |
  118|  10.7k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  10.7k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  119|  10.7k|                (void)memory_block.LoadUnsignedHalfWord(address);
  120|  10.7k|                break;
  121|  10.7k|            }
  122|       |
  123|       |            // LoadWord
  124|  3.88k|            case 4: {
  ------------------
  |  Branch (124:13): [True: 3.88k, False: 89.8k]
  ------------------
  125|  3.88k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.88k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.88k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 3, False: 3.88k]
  |  |  ------------------
  |  |   13|  3.88k|    {                                                                                              \
  |  |   14|      3|        return 0;                                                                                  \
  |  |   15|      3|    }                                                                                              \
  |  |   16|  3.88k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  126|       |
  127|  3.88k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   24|  3.88k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  128|  3.88k|                (void)memory_block.LoadWord(address);
  129|  3.88k|                break;
  130|  3.88k|            }
  131|       |
  132|       |            // LoadUnsignedWord
  133|  3.67k|            case 5: {
  ------------------
  |  Branch (133:13): [True: 3.67k, False: 90.0k]
  ------------------
  134|  3.67k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.67k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.67k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 3.66k]
  |  |  ------------------
  |  |   13|  3.67k|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|  3.67k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  135|       |
  136|  3.66k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   24|  3.66k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  137|  3.66k|                (void)memory_block.LoadUnsignedWord(address);
  138|  3.66k|                break;
  139|  3.67k|            }
  140|       |
  141|       |            // LoadFloat
  142|  1.81k|            case 6: {
  ------------------
  |  Branch (142:13): [True: 1.81k, False: 91.9k]
  ------------------
  143|  1.81k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.81k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.81k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.81k]
  |  |  ------------------
  |  |   13|  1.81k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.81k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  144|       |
  145|  1.81k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   24|  1.81k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  146|  1.81k|                (void)memory_block.LoadFloat(address);
  147|  1.81k|                break;
  148|  1.81k|            }
  149|       |
  150|       |            // LoadDouble
  151|  4.43k|            case 7: {
  ------------------
  |  Branch (151:13): [True: 4.43k, False: 89.3k]
  ------------------
  152|  4.43k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  4.43k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  4.43k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 4.42k]
  |  |  ------------------
  |  |   13|  4.43k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  4.43k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  153|       |
  154|  4.42k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   24|  4.42k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  155|  4.42k|                (void)memory_block.LoadDouble(address);
  156|  4.42k|                break;
  157|  4.43k|            }
  158|       |
  159|       |            // StoreByte
  160|  1.60k|            case 8: {
  ------------------
  |  Branch (160:13): [True: 1.60k, False: 92.1k]
  ------------------
  161|  1.60k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.60k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.60k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.60k]
  |  |  ------------------
  |  |   13|  1.60k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.60k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  162|  1.60k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   11|  1.60k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.60k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.60k]
  |  |  ------------------
  |  |   13|  1.60k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.60k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  163|       |
  164|  1.60k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  1.60k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  165|  1.60k|                (void)memory_block.StoreByte(address, value);
  166|  1.60k|                break;
  167|  1.60k|            }
  168|       |
  169|       |            // StoreUnsignedByte
  170|    653|            case 9: {
  ------------------
  |  Branch (170:13): [True: 653, False: 93.0k]
  ------------------
  171|    653|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    653|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    653|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 651]
  |  |  ------------------
  |  |   13|    653|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|    653|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  172|    651|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   11|    651|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    651|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 650]
  |  |  ------------------
  |  |   13|    651|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    651|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  173|       |
  174|    650|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    650|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  175|    650|                (void)memory_block.StoreUnsignedByte(address, value);
  176|    650|                break;
  177|    651|            }
  178|       |
  179|       |            // StoreHalfWord
  180|    970|            case 10: {
  ------------------
  |  Branch (180:13): [True: 970, False: 92.7k]
  ------------------
  181|    970|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    970|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    970|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 969]
  |  |  ------------------
  |  |   13|    970|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    970|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  182|    969|                GET_T(phi::int16_t, value);
  ------------------
  |  |   11|    969|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    969|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 968]
  |  |  ------------------
  |  |   13|    969|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    969|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  183|       |
  184|    968|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    968|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  185|    968|                (void)memory_block.StoreHalfWord(address, value);
  186|    968|                break;
  187|    969|            }
  188|       |
  189|       |            // StoreUnsignedHalfWord
  190|    892|            case 11: {
  ------------------
  |  Branch (190:13): [True: 892, False: 92.8k]
  ------------------
  191|    892|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    892|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    892|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 891]
  |  |  ------------------
  |  |   13|    892|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    892|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  192|    891|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   11|    891|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    891|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 890]
  |  |  ------------------
  |  |   13|    891|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    891|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  193|       |
  194|    890|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    890|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  195|    890|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  196|    890|                break;
  197|    891|            }
  198|       |
  199|       |            // StoreWord
  200|  1.00k|            case 12: {
  ------------------
  |  Branch (200:13): [True: 1.00k, False: 92.7k]
  ------------------
  201|  1.00k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.00k]
  |  |  ------------------
  |  |   13|  1.00k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  202|  1.00k|                GET_T(phi::int32_t, value);
  ------------------
  |  |   11|  1.00k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.00k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.00k]
  |  |  ------------------
  |  |   13|  1.00k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.00k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  203|       |
  204|  1.00k|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  1.00k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  205|  1.00k|                (void)memory_block.StoreWord(address, value);
  206|  1.00k|                break;
  207|  1.00k|            }
  208|       |
  209|       |            // StoreUnsignedWord
  210|    428|            case 13: {
  ------------------
  |  Branch (210:13): [True: 428, False: 93.3k]
  ------------------
  211|    428|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    428|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    428|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 427]
  |  |  ------------------
  |  |   13|    428|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    428|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  212|    427|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   11|    427|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    427|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 426]
  |  |  ------------------
  |  |   13|    427|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    427|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  213|       |
  214|    426|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|    426|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  215|    426|                (void)memory_block.StoreUnsignedWord(address, value);
  216|    426|                break;
  217|    427|            }
  218|       |
  219|       |            // StoreFloat
  220|  6.46k|            case 14: {
  ------------------
  |  Branch (220:13): [True: 6.46k, False: 87.2k]
  ------------------
  221|  6.46k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  6.46k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  6.46k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 6.46k]
  |  |  ------------------
  |  |   13|  6.46k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  6.46k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  222|  6.46k|                GET_T(phi::float32, value);
  ------------------
  |  |   11|  6.46k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  6.46k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 6.46k]
  |  |  ------------------
  |  |   13|  6.46k|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|  6.46k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  223|       |
  224|  6.46k|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  6.46k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  225|  6.46k|                (void)memory_block.StoreFloat(address, value);
  226|  6.46k|                break;
  227|  6.46k|            }
  228|       |
  229|       |            // StoreDouble
  230|    404|            case 15: {
  ------------------
  |  Branch (230:13): [True: 404, False: 93.3k]
  ------------------
  231|    404|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    404|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    404|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 403]
  |  |  ------------------
  |  |   13|    404|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    404|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  232|    403|                GET_T(phi::float64, value);
  ------------------
  |  |   11|    403|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    403|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 402]
  |  |  ------------------
  |  |   13|    403|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    403|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  233|       |
  234|    402|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|    402|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  235|    402|                (void)memory_block.StoreDouble(address, value);
  236|    402|                break;
  237|    403|            }
  238|       |
  239|       |            // IsAddressValid
  240|  1.28k|            case 16: {
  ------------------
  |  Branch (240:13): [True: 1.28k, False: 92.4k]
  ------------------
  241|  1.28k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.28k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.28k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.28k]
  |  |  ------------------
  |  |   13|  1.28k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.28k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  242|  1.28k|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|  1.28k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.28k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 1.28k]
  |  |  ------------------
  |  |   13|  1.28k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  1.28k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  243|       |
  244|  1.28k|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   24|  1.28k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  245|  1.28k|                (void)memory_block.IsAddressValid(address, arg_size);
  246|  1.28k|                break;
  247|  1.28k|            }
  248|       |
  249|       |            // IsAddressAlignedCorrectly
  250|    710|            case 17: {
  ------------------
  |  Branch (250:13): [True: 710, False: 93.0k]
  ------------------
  251|    710|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    710|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    710|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 709]
  |  |  ------------------
  |  |   13|    710|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    710|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  252|    709|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|    709|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    709|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 708]
  |  |  ------------------
  |  |   13|    709|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|    709|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  253|       |
  254|    708|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   24|    708|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  255|    708|                         print_int(arg_size));
  256|    708|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  257|    708|                break;
  258|    709|            }
  259|       |
  260|       |            // GetStartingAddress
  261|    194|            case 18: {
  ------------------
  |  Branch (261:13): [True: 194, False: 93.5k]
  ------------------
  262|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   24|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  263|    194|                (void)memory_block.GetStartingAddress();
  264|    194|                break;
  265|    709|            }
  266|       |
  267|       |            // SetStartingAddress
  268|    616|            case 19: {
  ------------------
  |  Branch (268:13): [True: 616, False: 93.1k]
  ------------------
  269|    616|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|    616|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|    616|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 614]
  |  |  ------------------
  |  |   13|    616|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|    616|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  270|       |
  271|    614|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   24|    614|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  272|    614|                memory_block.SetStartingAddress(address);
  273|    614|                break;
  274|    616|            }
  275|       |
  276|       |            // GetSize
  277|     66|            case 20: {
  ------------------
  |  Branch (277:13): [True: 66, False: 93.6k]
  ------------------
  278|     66|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   24|     66|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  279|     66|                (void)memory_block.GetSize();
  280|     66|                break;
  281|    616|            }
  282|       |
  283|       |            // Resize
  284|  18.8k|            case 21: {
  ------------------
  |  Branch (284:13): [True: 18.8k, False: 74.9k]
  ------------------
  285|  18.8k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   11|  18.8k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  18.8k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 49, False: 18.7k]
  |  |  ------------------
  |  |   13|  18.8k|    {                                                                                              \
  |  |   14|     49|        return 0;                                                                                  \
  |  |   15|     49|    }                                                                                              \
  |  |   16|  18.8k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  286|       |
  287|       |                // Reject too big resizes
  288|  18.7k|                if (new_size > max_size)
  ------------------
  |  Branch (288:21): [True: 56, False: 18.7k]
  ------------------
  289|     56|                {
  290|     56|                    return 0;
  291|     56|                }
  292|       |
  293|  18.7k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   24|  18.7k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  294|  18.7k|                memory_block.Resize(new_size);
  295|  18.7k|                break;
  296|  18.7k|            }
  297|       |
  298|       |            // GetRawMemory
  299|  1.21k|            case 22: {
  ------------------
  |  Branch (299:13): [True: 1.21k, False: 92.5k]
  ------------------
  300|  1.21k|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   24|  1.21k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  301|  1.21k|                (void)memory_block.GetRawMemory();
  302|  1.21k|                break;
  303|  18.7k|            }
  304|       |
  305|       |            // GetRawMemory const
  306|    322|            case 23: {
  ------------------
  |  Branch (306:13): [True: 322, False: 93.4k]
  ------------------
  307|    322|                const dlx::MemoryBlock& const_memory_block = memory_block;
  308|    322|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   24|    322|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  309|    322|                (void)const_memory_block.GetRawMemory();
  310|    322|                break;
  311|  18.7k|            }
  312|       |
  313|       |            // Clear
  314|  2.55k|            case 24: {
  ------------------
  |  Branch (314:13): [True: 2.55k, False: 91.1k]
  ------------------
  315|  2.55k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   24|  2.55k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  316|  2.55k|                memory_block.Clear();
  317|  2.55k|            }
  318|  93.7k|        }
  319|  93.7k|    }
  320|       |
  321|    500|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   24|    500|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  322|       |
  323|    500|    return 0;
  324|  1.85k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   44|  95.2k|{
   45|  95.2k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1.11k, False: 94.1k]
  ------------------
   46|  1.11k|    {
   47|  1.11k|        return {};
   48|  1.11k|    }
   49|       |
   50|  94.1k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  94.1k|    const phi::size_t old_index = index;
   53|  94.1k|    index += aligned_size<T>();
   54|       |
   55|  94.1k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  94.1k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  94.1k|        return static_cast<bool>(value);
   59|  94.1k|    }
   60|  94.1k|    else
   61|  94.1k|    {
   62|  94.1k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  94.1k|    }
   64|  94.1k|}
_Z10has_x_moremmm:
   29|   181k|{
   30|   181k|    return index + x < size;
   31|   181k|}
_Z12aligned_sizeIjEmv:
   37|  94.1k|{
   38|  94.1k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  94.1k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   44|  74.7k|{
   45|  74.7k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 178, False: 74.5k]
  ------------------
   46|    178|    {
   47|    178|        return {};
   48|    178|    }
   49|       |
   50|  74.5k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  74.5k|    const phi::size_t old_index = index;
   53|  74.5k|    index += aligned_size<T>();
   54|       |
   55|  74.5k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  74.5k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  74.5k|        return static_cast<bool>(value);
   59|  74.5k|    }
   60|  74.5k|    else
   61|  74.5k|    {
   62|  74.5k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  74.5k|    }
   64|  74.5k|}
_Z12aligned_sizeImEmv:
   37|  74.5k|{
   38|  74.5k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  74.5k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   44|  1.60k|{
   45|  1.60k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.60k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.60k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.60k|    const phi::size_t old_index = index;
   53|  1.60k|    index += aligned_size<T>();
   54|       |
   55|  1.60k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.60k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.60k|        return static_cast<bool>(value);
   59|  1.60k|    }
   60|  1.60k|    else
   61|  1.60k|    {
   62|  1.60k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.60k|    }
   64|  1.60k|}
_Z12aligned_sizeIaEmv:
   37|  1.60k|{
   38|  1.60k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.60k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   44|    651|{
   45|    651|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 650]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    650|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    650|    const phi::size_t old_index = index;
   53|    650|    index += aligned_size<T>();
   54|       |
   55|    650|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    650|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    650|        return static_cast<bool>(value);
   59|    650|    }
   60|    650|    else
   61|    650|    {
   62|    650|        return *reinterpret_cast<const T*>(data + old_index);
   63|    650|    }
   64|    650|}
_Z12aligned_sizeIhEmv:
   37|    650|{
   38|    650|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    650|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   44|    969|{
   45|    969|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 968]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    968|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    968|    const phi::size_t old_index = index;
   53|    968|    index += aligned_size<T>();
   54|       |
   55|    968|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    968|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    968|        return static_cast<bool>(value);
   59|    968|    }
   60|    968|    else
   61|    968|    {
   62|    968|        return *reinterpret_cast<const T*>(data + old_index);
   63|    968|    }
   64|    968|}
_Z12aligned_sizeIsEmv:
   37|    968|{
   38|    968|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    968|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   44|    891|{
   45|    891|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 890]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    890|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    890|    const phi::size_t old_index = index;
   53|    890|    index += aligned_size<T>();
   54|       |
   55|    890|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    890|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    890|        return static_cast<bool>(value);
   59|    890|    }
   60|    890|    else
   61|    890|    {
   62|    890|        return *reinterpret_cast<const T*>(data + old_index);
   63|    890|    }
   64|    890|}
_Z12aligned_sizeItEmv:
   37|    890|{
   38|    890|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    890|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   44|  1.00k|{
   45|  1.00k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 1.00k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  1.00k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  1.00k|    const phi::size_t old_index = index;
   53|  1.00k|    index += aligned_size<T>();
   54|       |
   55|  1.00k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  1.00k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  1.00k|        return static_cast<bool>(value);
   59|  1.00k|    }
   60|  1.00k|    else
   61|  1.00k|    {
   62|  1.00k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  1.00k|    }
   64|  1.00k|}
_Z12aligned_sizeIiEmv:
   37|  1.00k|{
   38|  1.00k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  1.00k|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   44|  6.46k|{
   45|  6.46k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 2, False: 6.46k]
  ------------------
   46|      2|    {
   47|      2|        return {};
   48|      2|    }
   49|       |
   50|  6.46k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  6.46k|    const phi::size_t old_index = index;
   53|  6.46k|    index += aligned_size<T>();
   54|       |
   55|  6.46k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  6.46k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  6.46k|        return static_cast<bool>(value);
   59|  6.46k|    }
   60|  6.46k|    else
   61|  6.46k|    {
   62|  6.46k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  6.46k|    }
   64|  6.46k|}
_Z12aligned_sizeIfEmv:
   37|  6.46k|{
   38|  6.46k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  6.46k|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   44|    403|{
   45|    403|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 402]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|    402|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|    402|    const phi::size_t old_index = index;
   53|    402|    index += aligned_size<T>();
   54|       |
   55|    402|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|    402|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|    402|        return static_cast<bool>(value);
   59|    402|    }
   60|    402|    else
   61|    402|    {
   62|    402|        return *reinterpret_cast<const T*>(data + old_index);
   63|    402|    }
   64|    402|}
_Z12aligned_sizeIdEmv:
   37|    402|{
   38|    402|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|    402|}


_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|   577k|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|  4.12k|    {
   17|  4.12k|        m_Values.resize(starting_size.unsafe());
   18|  4.12k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  41.8k|    {
   22|  41.8k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 39.3k, False: 2.47k]
  ------------------
   23|  39.3k|        {
   24|  39.3k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  39.3k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|  39.3k|            return {};
   26|  39.3k|        }
   27|       |
   28|  2.47k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|  2.47k|        return m_Values[raw_address].signed_value;
   31|  41.8k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  3.94k|    {
   35|  3.94k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 3.40k, False: 545]
  ------------------
   36|  3.40k|        {
   37|  3.40k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.40k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|  3.40k|            return {};
   39|  3.40k|        }
   40|       |
   41|    545|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|    545|        return m_Values[raw_address].unsigned_value;
   43|  3.94k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  3.48k|    {
   47|  3.48k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 2.51k, False: 969]
  ------------------
   48|  2.51k|        {
   49|  2.51k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.51k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|  2.51k|            return {};
   51|  2.51k|        }
   52|       |
   53|    969|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    969|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 280, False: 689]
  ------------------
   56|    280|        {
   57|    280|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    280|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|    280|            return {};
   59|    280|        }
   60|       |
   61|    689|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    969|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  3.06k|    {
   66|  3.06k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 2.40k, False: 667]
  ------------------
   67|  2.40k|        {
   68|  2.40k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.40k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|  2.40k|            return {};
   70|  2.40k|        }
   71|       |
   72|    667|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|    667|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 213, False: 454]
  ------------------
   75|    213|        {
   76|    213|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    213|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|    213|            return {};
   78|    213|        }
   79|       |
   80|    454|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|    667|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  4.75k|    {
   85|  4.75k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 3.56k, False: 1.18k]
  ------------------
   86|  3.56k|        {
   87|  3.56k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.56k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|  3.56k|            return {};
   89|  3.56k|        }
   90|       |
   91|  1.18k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|  1.18k|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 608, False: 580]
  ------------------
   94|    608|        {
   95|    608|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    608|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|    608|            return {};
   97|    608|        }
   98|       |
   99|    580|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|  1.18k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  3.56k|    {
  104|  3.56k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 2.79k, False: 773]
  ------------------
  105|  2.79k|        {
  106|  2.79k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.79k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|  2.79k|            return {};
  108|  2.79k|        }
  109|       |
  110|    773|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    773|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 401, False: 372]
  ------------------
  113|    401|        {
  114|    401|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    401|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|    401|            return {};
  116|    401|        }
  117|       |
  118|    372|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    773|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  4.49k|    {
  123|  4.49k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 2.50k, False: 1.99k]
  ------------------
  124|  2.50k|        {
  125|  2.50k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.50k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|  2.50k|            return {};
  127|  2.50k|        }
  128|       |
  129|  1.99k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|  1.99k|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 1.25k, False: 734]
  ------------------
  132|  1.25k|        {
  133|  1.25k|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|  1.25k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|  1.25k|            return {};
  135|  1.25k|        }
  136|       |
  137|    734|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|  1.99k|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  3.01k|    {
  142|  3.01k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 2.18k, False: 831]
  ------------------
  143|  2.18k|        {
  144|  2.18k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.18k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|  2.18k|            return {};
  146|  2.18k|        }
  147|       |
  148|    831|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    831|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 533, False: 298]
  ------------------
  151|    533|        {
  152|    533|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    533|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|    533|            return {};
  154|    533|        }
  155|       |
  156|    298|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    831|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  2.59k|    {
  161|  2.59k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 2.14k, False: 450]
  ------------------
  162|  2.14k|        {
  163|  2.14k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.14k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|  2.14k|            return false;
  165|  2.14k|        }
  166|       |
  167|    450|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|    450|        return true;
  169|  2.59k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  2.73k|    {
  173|  2.73k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 1.93k, False: 802]
  ------------------
  174|  1.93k|        {
  175|  1.93k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.93k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|  1.93k|            return false;
  177|  1.93k|        }
  178|       |
  179|    802|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|    802|        return true;
  181|  2.73k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|  3.12k|    {
  185|  3.12k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 2.20k, False: 923]
  ------------------
  186|  2.20k|        {
  187|  2.20k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.20k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|  2.20k|            return false;
  189|  2.20k|        }
  190|       |
  191|    923|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|    923|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|    923|        return true;
  195|  3.12k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|  3.58k|    {
  199|  3.58k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 2.84k, False: 734]
  ------------------
  200|  2.84k|        {
  201|  2.84k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.84k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|  2.84k|            return false;
  203|  2.84k|        }
  204|       |
  205|    734|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|    734|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|    734|        return true;
  209|  3.58k|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  2.54k|    {
  213|  2.54k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 1.94k, False: 606]
  ------------------
  214|  1.94k|        {
  215|  1.94k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.94k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|  1.94k|            return false;
  217|  1.94k|        }
  218|       |
  219|    606|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|    606|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|    606|        return true;
  223|  2.54k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  2.96k|    {
  227|  2.96k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 2.29k, False: 672]
  ------------------
  228|  2.29k|        {
  229|  2.29k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.29k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|  2.29k|            return false;
  231|  2.29k|        }
  232|       |
  233|    672|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|    672|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|    672|        return true;
  237|  2.96k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  3.18k|    {
  241|  3.18k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 2.11k, False: 1.07k]
  ------------------
  242|  2.11k|        {
  243|  2.11k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.11k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|  2.11k|            return false;
  245|  2.11k|        }
  246|       |
  247|  1.07k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|  1.07k|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|  1.07k|        return true;
  251|  3.18k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  3.89k|    {
  255|  3.89k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 2.92k, False: 966]
  ------------------
  256|  2.92k|        {
  257|  2.92k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.92k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|  2.92k|            return false;
  259|  2.92k|        }
  260|       |
  261|    966|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|    966|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|    966|        return true;
  265|  3.89k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  95.0k|    {
  269|       |        // Cannot access anything before the starting address
  270|  95.0k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 27.3k, False: 67.7k]
  ------------------
  271|  27.3k|        {
  272|  27.3k|            return false;
  273|  27.3k|        }
  274|       |
  275|       |        // Check if addres + size will overflow
  276|  67.7k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 9.35k, False: 58.4k]
  ------------------
  277|  67.7k|                                             address.unsafe(), size.unsafe()))
  278|  9.35k|        {
  279|  9.35k|            return false;
  280|  9.35k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  58.4k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 0, False: 58.4k]
  ------------------
  284|  58.4k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|      0|        {
  286|      0|            return false;
  287|      0|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  58.4k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 42.4k, False: 15.9k]
  ------------------
  291|  42.4k|        {
  292|  42.4k|            return false;
  293|  42.4k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  15.9k|        return true;
  297|  58.4k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  8.08k|    {
  302|  8.08k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 7.67k, False: 414]
  |  Branch (302:30): [True: 3.24k, False: 4.42k]
  ------------------
  303|  8.08k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    586|    {
  315|    586|        return m_StartingAddress;
  316|    586|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|  1.77k|    {
  320|  1.77k|        m_StartingAddress = new_starting_address;
  321|  1.77k|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|    265|    {
  325|    265|        return m_Values.size();
  326|    265|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|  4.78k|    {
  330|  4.78k|        m_Values.resize(new_size.unsafe());
  331|  4.78k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|  1.86k|    {
  335|  1.86k|        return m_Values;
  336|  1.86k|    }

LLVMFuzzerTestOneInput:
   76|  4.12k|{
   77|  4.12k|    dlx::MemoryBlock memory_block{1000u, max_size};
   78|       |
   79|  4.12k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   24|  4.12k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   80|       |
   81|   224k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (81:33): [True: 222k, False: 1.50k]
  ------------------
   82|   222k|    {
   83|   222k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   11|   222k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|   222k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1.98k, False: 220k]
  |  |  ------------------
  |  |   13|   222k|    {                                                                                              \
  |  |   14|  1.98k|        return 0;                                                                                  \
  |  |   15|  1.98k|    }                                                                                              \
  |  |   16|   222k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   84|       |
   85|   220k|        switch (function_index)
  ------------------
  |  Branch (85:17): [True: 114k, False: 106k]
  ------------------
   86|   220k|        {
   87|       |            // LoadByte
   88|  42.4k|            case 0: {
  ------------------
  |  Branch (88:13): [True: 42.4k, False: 178k]
  ------------------
   89|  42.4k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  42.4k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  42.4k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 551, False: 41.8k]
  |  |  ------------------
  |  |   13|  42.4k|    {                                                                                              \
  |  |   14|    551|        return 0;                                                                                  \
  |  |   15|    551|    }                                                                                              \
  |  |   16|  42.4k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   90|       |
   91|  41.8k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   24|  41.8k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   92|  41.8k|                (void)memory_block.LoadByte(address);
   93|  41.8k|                break;
   94|  42.4k|            }
   95|       |
   96|       |            // LoadUnsignedByte
   97|  3.95k|            case 1: {
  ------------------
  |  Branch (97:13): [True: 3.95k, False: 216k]
  ------------------
   98|  3.95k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.95k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.95k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 13, False: 3.94k]
  |  |  ------------------
  |  |   13|  3.95k|    {                                                                                              \
  |  |   14|     13|        return 0;                                                                                  \
  |  |   15|     13|    }                                                                                              \
  |  |   16|  3.95k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   99|       |
  100|  3.94k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   24|  3.94k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  101|  3.94k|                (void)memory_block.LoadUnsignedByte(address);
  102|  3.94k|                break;
  103|  3.95k|            }
  104|       |
  105|       |            // LoadHalfWord
  106|  3.48k|            case 2: {
  ------------------
  |  Branch (106:13): [True: 3.48k, False: 217k]
  ------------------
  107|  3.48k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.48k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.48k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 3.48k]
  |  |  ------------------
  |  |   13|  3.48k|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|  3.48k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  108|       |
  109|  3.48k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  3.48k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  110|  3.48k|                (void)memory_block.LoadHalfWord(address);
  111|  3.48k|                break;
  112|  3.48k|            }
  113|       |
  114|       |                // LoadUnsignedHalfWord
  115|  3.07k|            case 3: {
  ------------------
  |  Branch (115:13): [True: 3.07k, False: 217k]
  ------------------
  116|  3.07k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.07k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.07k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 8, False: 3.06k]
  |  |  ------------------
  |  |   13|  3.07k|    {                                                                                              \
  |  |   14|      8|        return 0;                                                                                  \
  |  |   15|      8|    }                                                                                              \
  |  |   16|  3.07k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  117|       |
  118|  3.06k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   24|  3.06k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  119|  3.06k|                (void)memory_block.LoadUnsignedHalfWord(address);
  120|  3.06k|                break;
  121|  3.07k|            }
  122|       |
  123|       |            // LoadWord
  124|  4.75k|            case 4: {
  ------------------
  |  Branch (124:13): [True: 4.75k, False: 216k]
  ------------------
  125|  4.75k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  4.75k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  4.75k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 4.75k]
  |  |  ------------------
  |  |   13|  4.75k|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|  4.75k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  126|       |
  127|  4.75k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   24|  4.75k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  128|  4.75k|                (void)memory_block.LoadWord(address);
  129|  4.75k|                break;
  130|  4.75k|            }
  131|       |
  132|       |            // LoadUnsignedWord
  133|  3.57k|            case 5: {
  ------------------
  |  Branch (133:13): [True: 3.57k, False: 217k]
  ------------------
  134|  3.57k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.57k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.57k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 3, False: 3.56k]
  |  |  ------------------
  |  |   13|  3.57k|    {                                                                                              \
  |  |   14|      3|        return 0;                                                                                  \
  |  |   15|      3|    }                                                                                              \
  |  |   16|  3.57k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  135|       |
  136|  3.56k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   24|  3.56k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  137|  3.56k|                (void)memory_block.LoadUnsignedWord(address);
  138|  3.56k|                break;
  139|  3.57k|            }
  140|       |
  141|       |            // LoadFloat
  142|  4.49k|            case 6: {
  ------------------
  |  Branch (142:13): [True: 4.49k, False: 216k]
  ------------------
  143|  4.49k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  4.49k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  4.49k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 4.49k]
  |  |  ------------------
  |  |   13|  4.49k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  4.49k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  144|       |
  145|  4.49k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   24|  4.49k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  146|  4.49k|                (void)memory_block.LoadFloat(address);
  147|  4.49k|                break;
  148|  4.49k|            }
  149|       |
  150|       |            // LoadDouble
  151|  3.01k|            case 7: {
  ------------------
  |  Branch (151:13): [True: 3.01k, False: 217k]
  ------------------
  152|  3.01k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.01k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.01k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.01k]
  |  |  ------------------
  |  |   13|  3.01k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.01k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  153|       |
  154|  3.01k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   24|  3.01k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  155|  3.01k|                (void)memory_block.LoadDouble(address);
  156|  3.01k|                break;
  157|  3.01k|            }
  158|       |
  159|       |            // StoreByte
  160|  2.60k|            case 8: {
  ------------------
  |  Branch (160:13): [True: 2.60k, False: 218k]
  ------------------
  161|  2.60k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.60k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.60k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 5, False: 2.59k]
  |  |  ------------------
  |  |   13|  2.60k|    {                                                                                              \
  |  |   14|      5|        return 0;                                                                                  \
  |  |   15|      5|    }                                                                                              \
  |  |   16|  2.60k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  162|  2.59k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   11|  2.59k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.59k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.59k]
  |  |  ------------------
  |  |   13|  2.59k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.59k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  163|       |
  164|  2.59k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  2.59k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  165|  2.59k|                (void)memory_block.StoreByte(address, value);
  166|  2.59k|                break;
  167|  2.59k|            }
  168|       |
  169|       |            // StoreUnsignedByte
  170|  2.74k|            case 9: {
  ------------------
  |  Branch (170:13): [True: 2.74k, False: 218k]
  ------------------
  171|  2.74k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.74k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.74k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 6, False: 2.73k]
  |  |  ------------------
  |  |   13|  2.74k|    {                                                                                              \
  |  |   14|      6|        return 0;                                                                                  \
  |  |   15|      6|    }                                                                                              \
  |  |   16|  2.74k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  172|  2.73k|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   11|  2.73k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.73k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.73k]
  |  |  ------------------
  |  |   13|  2.73k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.73k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  173|       |
  174|  2.73k|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  2.73k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  175|  2.73k|                (void)memory_block.StoreUnsignedByte(address, value);
  176|  2.73k|                break;
  177|  2.73k|            }
  178|       |
  179|       |            // StoreHalfWord
  180|  3.12k|            case 10: {
  ------------------
  |  Branch (180:13): [True: 3.12k, False: 217k]
  ------------------
  181|  3.12k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.12k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.12k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.12k]
  |  |  ------------------
  |  |   13|  3.12k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.12k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  182|  3.12k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   11|  3.12k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.12k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.12k]
  |  |  ------------------
  |  |   13|  3.12k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.12k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  183|       |
  184|  3.12k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  3.12k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  185|  3.12k|                (void)memory_block.StoreHalfWord(address, value);
  186|  3.12k|                break;
  187|  3.12k|            }
  188|       |
  189|       |            // StoreUnsignedHalfWord
  190|  3.58k|            case 11: {
  ------------------
  |  Branch (190:13): [True: 3.58k, False: 217k]
  ------------------
  191|  3.58k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.58k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.58k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.58k]
  |  |  ------------------
  |  |   13|  3.58k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.58k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  192|  3.58k|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   11|  3.58k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.58k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 2, False: 3.58k]
  |  |  ------------------
  |  |   13|  3.58k|    {                                                                                              \
  |  |   14|      2|        return 0;                                                                                  \
  |  |   15|      2|    }                                                                                              \
  |  |   16|  3.58k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  193|       |
  194|  3.58k|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  3.58k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  195|  3.58k|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  196|  3.58k|                break;
  197|  3.58k|            }
  198|       |
  199|       |            // StoreWord
  200|  2.55k|            case 12: {
  ------------------
  |  Branch (200:13): [True: 2.55k, False: 218k]
  ------------------
  201|  2.55k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.55k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.55k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 4, False: 2.55k]
  |  |  ------------------
  |  |   13|  2.55k|    {                                                                                              \
  |  |   14|      4|        return 0;                                                                                  \
  |  |   15|      4|    }                                                                                              \
  |  |   16|  2.55k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  202|  2.55k|                GET_T(phi::int32_t, value);
  ------------------
  |  |   11|  2.55k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.55k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 3, False: 2.54k]
  |  |  ------------------
  |  |   13|  2.55k|    {                                                                                              \
  |  |   14|      3|        return 0;                                                                                  \
  |  |   15|      3|    }                                                                                              \
  |  |   16|  2.55k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  203|       |
  204|  2.54k|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  2.54k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  205|  2.54k|                (void)memory_block.StoreWord(address, value);
  206|  2.54k|                break;
  207|  2.55k|            }
  208|       |
  209|       |            // StoreUnsignedWord
  210|  2.97k|            case 13: {
  ------------------
  |  Branch (210:13): [True: 2.97k, False: 217k]
  ------------------
  211|  2.97k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.97k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.97k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.96k]
  |  |  ------------------
  |  |   13|  2.97k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.97k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  212|  2.96k|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   11|  2.96k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.96k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.96k]
  |  |  ------------------
  |  |   13|  2.96k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.96k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  213|       |
  214|  2.96k|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   24|  2.96k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  215|  2.96k|                (void)memory_block.StoreUnsignedWord(address, value);
  216|  2.96k|                break;
  217|  2.96k|            }
  218|       |
  219|       |            // StoreFloat
  220|  3.19k|            case 14: {
  ------------------
  |  Branch (220:13): [True: 3.19k, False: 217k]
  ------------------
  221|  3.19k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.19k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.19k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 3, False: 3.18k]
  |  |  ------------------
  |  |   13|  3.19k|    {                                                                                              \
  |  |   14|      3|        return 0;                                                                                  \
  |  |   15|      3|    }                                                                                              \
  |  |   16|  3.19k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  222|  3.18k|                GET_T(phi::float32, value);
  ------------------
  |  |   11|  3.18k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.18k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.18k]
  |  |  ------------------
  |  |   13|  3.18k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.18k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  223|       |
  224|  3.18k|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  3.18k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  225|  3.18k|                (void)memory_block.StoreFloat(address, value);
  226|  3.18k|                break;
  227|  3.18k|            }
  228|       |
  229|       |            // StoreDouble
  230|  3.89k|            case 15: {
  ------------------
  |  Branch (230:13): [True: 3.89k, False: 216k]
  ------------------
  231|  3.89k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  3.89k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.89k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 3, False: 3.89k]
  |  |  ------------------
  |  |   13|  3.89k|    {                                                                                              \
  |  |   14|      3|        return 0;                                                                                  \
  |  |   15|      3|    }                                                                                              \
  |  |   16|  3.89k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  232|  3.89k|                GET_T(phi::float64, value);
  ------------------
  |  |   11|  3.89k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  3.89k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 3.89k]
  |  |  ------------------
  |  |   13|  3.89k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  3.89k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  233|       |
  234|  3.89k|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   24|  3.89k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  235|  3.89k|                (void)memory_block.StoreDouble(address, value);
  236|  3.89k|                break;
  237|  3.89k|            }
  238|       |
  239|       |            // IsAddressValid
  240|  2.26k|            case 16: {
  ------------------
  |  Branch (240:13): [True: 2.26k, False: 218k]
  ------------------
  241|  2.26k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  2.26k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.26k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.26k]
  |  |  ------------------
  |  |   13|  2.26k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.26k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  242|  2.26k|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|  2.26k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  2.26k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 2.26k]
  |  |  ------------------
  |  |   13|  2.26k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  2.26k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  243|       |
  244|  2.26k|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   24|  2.26k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  245|  2.26k|                (void)memory_block.IsAddressValid(address, arg_size);
  246|  2.26k|                break;
  247|  2.26k|            }
  248|       |
  249|       |            // IsAddressAlignedCorrectly
  250|  1.67k|            case 17: {
  ------------------
  |  Branch (250:13): [True: 1.67k, False: 219k]
  ------------------
  251|  1.67k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.67k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.67k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 4, False: 1.67k]
  |  |  ------------------
  |  |   13|  1.67k|    {                                                                                              \
  |  |   14|      4|        return 0;                                                                                  \
  |  |   15|      4|    }                                                                                              \
  |  |   16|  1.67k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  252|  1.67k|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   11|  1.67k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.67k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 10, False: 1.66k]
  |  |  ------------------
  |  |   13|  1.67k|    {                                                                                              \
  |  |   14|     10|        return 0;                                                                                  \
  |  |   15|     10|    }                                                                                              \
  |  |   16|  1.67k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  253|       |
  254|  1.66k|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   24|  1.66k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  255|  1.66k|                         print_int(arg_size));
  256|  1.66k|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  257|  1.66k|                break;
  258|  1.67k|            }
  259|       |
  260|       |            // GetStartingAddress
  261|    586|            case 18: {
  ------------------
  |  Branch (261:13): [True: 586, False: 220k]
  ------------------
  262|    586|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   24|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  263|    586|                (void)memory_block.GetStartingAddress();
  264|    586|                break;
  265|  1.67k|            }
  266|       |
  267|       |            // SetStartingAddress
  268|  1.78k|            case 19: {
  ------------------
  |  Branch (268:13): [True: 1.78k, False: 219k]
  ------------------
  269|  1.78k|                GET_T(phi::size_t, address);
  ------------------
  |  |   11|  1.78k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  1.78k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 7, False: 1.77k]
  |  |  ------------------
  |  |   13|  1.78k|    {                                                                                              \
  |  |   14|      7|        return 0;                                                                                  \
  |  |   15|      7|    }                                                                                              \
  |  |   16|  1.78k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  270|       |
  271|  1.77k|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   24|  1.77k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  272|  1.77k|                memory_block.SetStartingAddress(address);
  273|  1.77k|                break;
  274|  1.78k|            }
  275|       |
  276|       |            // GetSize
  277|    265|            case 20: {
  ------------------
  |  Branch (277:13): [True: 265, False: 220k]
  ------------------
  278|    265|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   24|    265|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  279|    265|                (void)memory_block.GetSize();
  280|    265|                break;
  281|  1.78k|            }
  282|       |
  283|       |            // Resize
  284|  4.78k|            case 21: {
  ------------------
  |  Branch (284:13): [True: 4.78k, False: 216k]
  ------------------
  285|  4.78k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   11|  4.78k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   12|  4.78k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (12:9): [True: 1, False: 4.78k]
  |  |  ------------------
  |  |   13|  4.78k|    {                                                                                              \
  |  |   14|      1|        return 0;                                                                                  \
  |  |   15|      1|    }                                                                                              \
  |  |   16|  4.78k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  286|       |
  287|       |                // Reject too big resizes
  288|  4.78k|                if (new_size > max_size)
  ------------------
  |  Branch (288:21): [True: 4, False: 4.78k]
  ------------------
  289|      4|                {
  290|      4|                    return 0;
  291|      4|                }
  292|       |
  293|  4.78k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   24|  4.78k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  294|  4.78k|                memory_block.Resize(new_size);
  295|  4.78k|                break;
  296|  4.78k|            }
  297|       |
  298|       |            // GetRawMemory
  299|    186|            case 22: {
  ------------------
  |  Branch (299:13): [True: 186, False: 220k]
  ------------------
  300|    186|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   24|    186|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  301|    186|                (void)memory_block.GetRawMemory();
  302|    186|                break;
  303|  4.78k|            }
  304|       |
  305|       |            // GetRawMemory const
  306|  1.67k|            case 23: {
  ------------------
  |  Branch (306:13): [True: 1.67k, False: 219k]
  ------------------
  307|  1.67k|                const dlx::MemoryBlock const_memory_block = memory_block;
  308|  1.67k|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   24|  1.67k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  309|  1.67k|                (void)memory_block.GetRawMemory();
  310|  1.67k|                break;
  311|  4.78k|            }
  312|   220k|        }
  313|   220k|    }
  314|       |
  315|  1.50k|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   24|  1.50k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  316|       |
  317|  1.50k|    return 0;
  318|  4.12k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   44|   225k|{
   45|   225k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1.98k, False: 223k]
  ------------------
   46|  1.98k|    {
   47|  1.98k|        return {};
   48|  1.98k|    }
   49|       |
   50|   223k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|   223k|    const phi::size_t old_index = index;
   53|   223k|    index += aligned_size<T>();
   54|       |
   55|   223k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|   223k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|   223k|        return static_cast<bool>(value);
   59|   223k|    }
   60|   223k|    else
   61|   223k|    {
   62|   223k|        return *reinterpret_cast<const T*>(data + old_index);
   63|   223k|    }
   64|   223k|}
_Z10has_x_moremmm:
   29|   355k|{
   30|   355k|    return index + x < size;
   31|   355k|}
_Z12aligned_sizeIjEmv:
   37|   223k|{
   38|   223k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|   223k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   44|   107k|{
   45|   107k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 629, False: 107k]
  ------------------
   46|    629|    {
   47|    629|        return {};
   48|    629|    }
   49|       |
   50|   107k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|   107k|    const phi::size_t old_index = index;
   53|   107k|    index += aligned_size<T>();
   54|       |
   55|   107k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|   107k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|   107k|        return static_cast<bool>(value);
   59|   107k|    }
   60|   107k|    else
   61|   107k|    {
   62|   107k|        return *reinterpret_cast<const T*>(data + old_index);
   63|   107k|    }
   64|   107k|}
_Z12aligned_sizeImEmv:
   37|   107k|{
   38|   107k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|   107k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   44|  2.59k|{
   45|  2.59k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 2.59k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  2.59k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  2.59k|    const phi::size_t old_index = index;
   53|  2.59k|    index += aligned_size<T>();
   54|       |
   55|  2.59k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  2.59k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  2.59k|        return static_cast<bool>(value);
   59|  2.59k|    }
   60|  2.59k|    else
   61|  2.59k|    {
   62|  2.59k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  2.59k|    }
   64|  2.59k|}
_Z12aligned_sizeIaEmv:
   37|  2.59k|{
   38|  2.59k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  2.59k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   44|  2.73k|{
   45|  2.73k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 2.73k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  2.73k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  2.73k|    const phi::size_t old_index = index;
   53|  2.73k|    index += aligned_size<T>();
   54|       |
   55|  2.73k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  2.73k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  2.73k|        return static_cast<bool>(value);
   59|  2.73k|    }
   60|  2.73k|    else
   61|  2.73k|    {
   62|  2.73k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  2.73k|    }
   64|  2.73k|}
_Z12aligned_sizeIhEmv:
   37|  2.73k|{
   38|  2.73k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  2.73k|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   44|  3.12k|{
   45|  3.12k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 3.12k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  3.12k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  3.12k|    const phi::size_t old_index = index;
   53|  3.12k|    index += aligned_size<T>();
   54|       |
   55|  3.12k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  3.12k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  3.12k|        return static_cast<bool>(value);
   59|  3.12k|    }
   60|  3.12k|    else
   61|  3.12k|    {
   62|  3.12k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  3.12k|    }
   64|  3.12k|}
_Z12aligned_sizeIsEmv:
   37|  3.12k|{
   38|  3.12k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  3.12k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   44|  3.58k|{
   45|  3.58k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 2, False: 3.58k]
  ------------------
   46|      2|    {
   47|      2|        return {};
   48|      2|    }
   49|       |
   50|  3.58k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  3.58k|    const phi::size_t old_index = index;
   53|  3.58k|    index += aligned_size<T>();
   54|       |
   55|  3.58k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  3.58k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  3.58k|        return static_cast<bool>(value);
   59|  3.58k|    }
   60|  3.58k|    else
   61|  3.58k|    {
   62|  3.58k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  3.58k|    }
   64|  3.58k|}
_Z12aligned_sizeItEmv:
   37|  3.58k|{
   38|  3.58k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  3.58k|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   44|  2.55k|{
   45|  2.55k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 3, False: 2.54k]
  ------------------
   46|      3|    {
   47|      3|        return {};
   48|      3|    }
   49|       |
   50|  2.54k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  2.54k|    const phi::size_t old_index = index;
   53|  2.54k|    index += aligned_size<T>();
   54|       |
   55|  2.54k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  2.54k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  2.54k|        return static_cast<bool>(value);
   59|  2.54k|    }
   60|  2.54k|    else
   61|  2.54k|    {
   62|  2.54k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  2.54k|    }
   64|  2.54k|}
_Z12aligned_sizeIiEmv:
   37|  2.54k|{
   38|  2.54k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  2.54k|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   44|  3.18k|{
   45|  3.18k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 3.18k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  3.18k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  3.18k|    const phi::size_t old_index = index;
   53|  3.18k|    index += aligned_size<T>();
   54|       |
   55|  3.18k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  3.18k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  3.18k|        return static_cast<bool>(value);
   59|  3.18k|    }
   60|  3.18k|    else
   61|  3.18k|    {
   62|  3.18k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  3.18k|    }
   64|  3.18k|}
_Z12aligned_sizeIfEmv:
   37|  3.18k|{
   38|  3.18k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  3.18k|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   44|  3.89k|{
   45|  3.89k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (45:9): [True: 1, False: 3.89k]
  ------------------
   46|      1|    {
   47|      1|        return {};
   48|      1|    }
   49|       |
   50|  3.89k|    PHI_ASSUME(index % sizeof(void*) == 0);
   51|       |
   52|  3.89k|    const phi::size_t old_index = index;
   53|  3.89k|    index += aligned_size<T>();
   54|       |
   55|  3.89k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|      0|    {
   57|  3.89k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   58|  3.89k|        return static_cast<bool>(value);
   59|  3.89k|    }
   60|  3.89k|    else
   61|  3.89k|    {
   62|  3.89k|        return *reinterpret_cast<const T*>(data + old_index);
   63|  3.89k|    }
   64|  3.89k|}
_Z12aligned_sizeIdEmv:
   37|  3.89k|{
   38|  3.89k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   39|  3.89k|}


_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  2.95M|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   12|  3.60k|    {
   13|  3.60k|        m_Values.resize(starting_size.unsafe());
   14|  3.60k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   17|  4.38k|    {
   18|  4.38k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (18:13): [True: 4.19k, False: 194]
  ------------------
   19|  4.19k|        {
   20|  4.19k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  4.19k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   21|  4.19k|            return {};
   22|  4.19k|        }
   23|       |
   24|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   25|       |
   26|    194|        return m_Values[raw_address].signed_value;
   27|  4.38k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   30|    986|    {
   31|    986|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (31:13): [True: 792, False: 194]
  ------------------
   32|    792|        {
   33|    792|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    792|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   34|    792|            return {};
   35|    792|        }
   36|       |
   37|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   38|    194|        return m_Values[raw_address].unsigned_value;
   39|    986|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   42|  1.16k|    {
   43|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (43:13): [True: 780, False: 388]
  ------------------
   44|    780|        {
   45|    780|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    780|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   46|    780|            return {};
   47|    780|        }
   48|       |
   49|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   50|       |
   51|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (51:13): [True: 194, False: 194]
  ------------------
   52|    194|        {
   53|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   54|    194|            return {};
   55|    194|        }
   56|       |
   57|    194|        return *reinterpret_cast<const phi::int16_t*>(&m_Values[raw_address].signed_value);
   58|    388|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   61|  1.16k|    {
   62|  1.16k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (62:13): [True: 776, False: 388]
  ------------------
   63|    776|        {
   64|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   65|    776|            return {};
   66|    776|        }
   67|       |
   68|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   69|       |
   70|    388|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (70:13): [True: 194, False: 194]
  ------------------
   71|    194|        {
   72|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   73|    194|            return {};
   74|    194|        }
   75|       |
   76|    194|        return *reinterpret_cast<const phi::uint16_t*>(&m_Values[raw_address].unsigned_value);
   77|    388|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   80|  1.17k|    {
   81|  1.17k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (81:13): [True: 784, False: 388]
  ------------------
   82|    784|        {
   83|    784|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    784|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   84|    784|            return {};
   85|    784|        }
   86|       |
   87|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   88|       |
   89|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (89:13): [True: 194, False: 194]
  ------------------
   90|    194|        {
   91|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   92|    194|            return {};
   93|    194|        }
   94|       |
   95|    194|        return *reinterpret_cast<const phi::int32_t*>(&m_Values[raw_address].signed_value);
   96|    388|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
   99|  1.32k|    {
  100|  1.32k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (100:13): [True: 934, False: 388]
  ------------------
  101|    934|        {
  102|    934|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    934|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  103|    934|            return {};
  104|    934|        }
  105|       |
  106|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  107|       |
  108|    388|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (108:13): [True: 194, False: 194]
  ------------------
  109|    194|        {
  110|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  111|    194|            return {};
  112|    194|        }
  113|       |
  114|    194|        return *reinterpret_cast<const phi::uint32_t*>(&m_Values[raw_address].unsigned_value);
  115|    388|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  118|  1.54k|    {
  119|  1.54k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (119:13): [True: 1.15k, False: 388]
  ------------------
  120|  1.15k|        {
  121|  1.15k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.15k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  122|  1.15k|            return {};
  123|  1.15k|        }
  124|       |
  125|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  126|       |
  127|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (127:13): [True: 194, False: 194]
  ------------------
  128|    194|        {
  129|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  130|    194|            return {};
  131|    194|        }
  132|       |
  133|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  134|    388|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  137|  1.17k|    {
  138|  1.17k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (138:13): [True: 785, False: 388]
  ------------------
  139|    785|        {
  140|    785|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    785|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  141|    785|            return {};
  142|    785|        }
  143|       |
  144|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  145|       |
  146|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (146:13): [True: 194, False: 194]
  ------------------
  147|    194|        {
  148|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  149|    194|            return {};
  150|    194|        }
  151|       |
  152|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  153|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  156|  1.34k|    {
  157|  1.34k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (157:13): [True: 1.15k, False: 194]
  ------------------
  158|  1.15k|        {
  159|  1.15k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.15k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  160|  1.15k|            return false;
  161|  1.15k|        }
  162|       |
  163|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  164|    194|        return true;
  165|  1.34k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  168|    750|    {
  169|    750|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (169:13): [True: 556, False: 194]
  ------------------
  170|    556|        {
  171|    556|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    556|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  172|    556|            return false;
  173|    556|        }
  174|       |
  175|    194|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  176|    194|        return true;
  177|    750|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  180|  2.39k|    {
  181|  2.39k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (181:13): [True: 2.20k, False: 194]
  ------------------
  182|  2.20k|        {
  183|  2.20k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.20k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  184|  2.20k|            return false;
  185|  2.20k|        }
  186|       |
  187|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  188|    194|        *reinterpret_cast<phi::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  189|       |
  190|    194|        return true;
  191|  2.39k|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  194|    970|    {
  195|    970|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (195:13): [True: 776, False: 194]
  ------------------
  196|    776|        {
  197|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  198|    776|            return false;
  199|    776|        }
  200|       |
  201|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  202|    194|        *reinterpret_cast<phi::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  203|       |
  204|    194|        return true;
  205|    970|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  208|    970|    {
  209|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (209:13): [True: 776, False: 194]
  ------------------
  210|    776|        {
  211|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  212|    776|            return false;
  213|    776|        }
  214|       |
  215|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  216|    194|        *reinterpret_cast<phi::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  217|       |
  218|    194|        return true;
  219|    970|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  222|    842|    {
  223|    842|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (223:13): [True: 648, False: 194]
  ------------------
  224|    648|        {
  225|    648|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    648|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  226|    648|            return false;
  227|    648|        }
  228|       |
  229|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  230|    194|        *reinterpret_cast<phi::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  231|       |
  232|    194|        return true;
  233|    842|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  236|    970|    {
  237|    970|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (237:13): [True: 776, False: 194]
  ------------------
  238|    776|        {
  239|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  240|    776|            return false;
  241|    776|        }
  242|       |
  243|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  244|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  245|       |
  246|    194|        return true;
  247|    970|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  250|    970|    {
  251|    970|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (251:13): [True: 776, False: 194]
  ------------------
  252|    776|        {
  253|    776|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    776|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  254|    776|            return false;
  255|    776|        }
  256|       |
  257|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  258|    194|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  259|       |
  260|    194|        return true;
  261|    970|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  264|  22.9k|    {
  265|       |        // Cannot access anything before the starting address
  266|  22.9k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (266:13): [True: 6.19k, False: 16.7k]
  ------------------
  267|  6.19k|        {
  268|  6.19k|            return false;
  269|  6.19k|        }
  270|       |
  271|       |        // Check if address + size will overflow
  272|  16.7k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (272:13): [True: 3.04k, False: 13.7k]
  ------------------
  273|  16.7k|                                             address.unsafe(), size.unsafe()))
  274|  3.04k|        {
  275|  3.04k|            return false;
  276|  3.04k|        }
  277|       |
  278|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  279|  13.7k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (279:13): [True: 3.04k, False: 10.7k]
  ------------------
  280|  13.7k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  281|  3.04k|        {
  282|  3.04k|            return false;
  283|  3.04k|        }
  284|       |
  285|       |        // Check if address is out of bounds
  286|  10.7k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (286:13): [True: 6.24k, False: 4.46k]
  ------------------
  287|  6.24k|        {
  288|  6.24k|            return false;
  289|  6.24k|        }
  290|       |
  291|       |        // Otherwise this is a valid address
  292|  4.46k|        return true;
  293|  10.7k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  297|  2.59k|    {
  298|  2.59k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (298:16): [True: 2.53k, False: 66]
  |  Branch (298:30): [True: 1.16k, False: 1.36k]
  ------------------
  299|  2.59k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  302|  2.08k|    {
  303|  2.08k|        for (auto& val : m_Values)
  ------------------
  |  Branch (303:24): [True: 236k, False: 2.08k]
  ------------------
  304|   236k|        {
  305|   236k|            val.signed_value = 0;
  306|   236k|        }
  307|  2.08k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  310|    195|    {
  311|    195|        return m_StartingAddress;
  312|    195|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  315|    495|    {
  316|    495|        m_StartingAddress = new_starting_address;
  317|    495|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  320|    196|    {
  321|    196|        return m_Values.size();
  322|    196|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  325|   275k|    {
  326|   275k|        m_Values.resize(new_size.unsafe());
  327|   275k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  330|    194|    {
  331|    194|        return m_Values;
  332|    194|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  335|    230|    {
  336|    230|        return m_Values;
  337|    230|    }

LLVMFuzzerTestOneInput:
   81|  3.60k|{
   82|  3.60k|    dlx::MemoryBlock memory_block{1000u, max_size};
   83|       |
   84|  3.60k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   29|  3.60k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   85|       |
   86|   326k|    for (phi::size_t index{0u}; index < size;)
  ------------------
  |  Branch (86:33): [True: 326k, False: 549]
  ------------------
   87|   326k|    {
   88|   326k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   16|   326k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|   326k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 2.15k, False: 324k]
  |  |  ------------------
  |  |   18|   326k|    {                                                                                              \
  |  |   19|  2.15k|        return 0;                                                                                  \
  |  |   20|  2.15k|    }                                                                                              \
  |  |   21|   326k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   89|       |
   90|   324k|        switch (function_index)
  ------------------
  |  Branch (90:17): [True: 21.3k, False: 302k]
  ------------------
   91|   324k|        {
   92|       |            // LoadByte
   93|  4.62k|            case 0: {
  ------------------
  |  Branch (93:13): [True: 4.62k, False: 319k]
  ------------------
   94|  4.62k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  4.62k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  4.62k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 235, False: 4.38k]
  |  |  ------------------
  |  |   18|  4.62k|    {                                                                                              \
  |  |   19|    235|        return 0;                                                                                  \
  |  |   20|    235|    }                                                                                              \
  |  |   21|  4.62k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   95|       |
   96|  4.38k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   29|  4.38k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   97|  4.38k|                (void)memory_block.LoadByte(address);
   98|  4.38k|                break;
   99|  4.62k|            }
  100|       |
  101|       |            // LoadUnsignedByte
  102|    987|            case 1: {
  ------------------
  |  Branch (102:13): [True: 987, False: 323k]
  ------------------
  103|    987|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    987|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    987|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 986]
  |  |  ------------------
  |  |   18|    987|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    987|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  104|       |
  105|    986|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   29|    986|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  106|    986|                (void)memory_block.LoadUnsignedByte(address);
  107|    986|                break;
  108|    987|            }
  109|       |
  110|       |            // LoadHalfWord
  111|  1.16k|            case 2: {
  ------------------
  |  Branch (111:13): [True: 1.16k, False: 322k]
  ------------------
  112|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  113|       |
  114|  1.16k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  115|  1.16k|                (void)memory_block.LoadHalfWord(address);
  116|  1.16k|                break;
  117|  1.16k|            }
  118|       |
  119|       |                // LoadUnsignedHalfWord
  120|  1.16k|            case 3: {
  ------------------
  |  Branch (120:13): [True: 1.16k, False: 322k]
  ------------------
  121|  1.16k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.16k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.16k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.16k]
  |  |  ------------------
  |  |   18|  1.16k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.16k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  122|       |
  123|  1.16k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.16k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  124|  1.16k|                (void)memory_block.LoadUnsignedHalfWord(address);
  125|  1.16k|                break;
  126|  1.16k|            }
  127|       |
  128|       |            // LoadWord
  129|  1.17k|            case 4: {
  ------------------
  |  Branch (129:13): [True: 1.17k, False: 322k]
  ------------------
  130|  1.17k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.17k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.17k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.17k]
  |  |  ------------------
  |  |   18|  1.17k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.17k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  131|       |
  132|  1.17k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.17k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  133|  1.17k|                (void)memory_block.LoadWord(address);
  134|  1.17k|                break;
  135|  1.17k|            }
  136|       |
  137|       |            // LoadUnsignedWord
  138|  1.32k|            case 5: {
  ------------------
  |  Branch (138:13): [True: 1.32k, False: 322k]
  ------------------
  139|  1.32k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.32k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.32k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.32k]
  |  |  ------------------
  |  |   18|  1.32k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.32k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  140|       |
  141|  1.32k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   29|  1.32k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  142|  1.32k|                (void)memory_block.LoadUnsignedWord(address);
  143|  1.32k|                break;
  144|  1.32k|            }
  145|       |
  146|       |            // LoadFloat
  147|  1.54k|            case 6: {
  ------------------
  |  Branch (147:13): [True: 1.54k, False: 322k]
  ------------------
  148|  1.54k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.54k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.54k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 3, False: 1.54k]
  |  |  ------------------
  |  |   18|  1.54k|    {                                                                                              \
  |  |   19|      3|        return 0;                                                                                  \
  |  |   20|      3|    }                                                                                              \
  |  |   21|  1.54k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  149|       |
  150|  1.54k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   29|  1.54k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  151|  1.54k|                (void)memory_block.LoadFloat(address);
  152|  1.54k|                break;
  153|  1.54k|            }
  154|       |
  155|       |            // LoadDouble
  156|  1.17k|            case 7: {
  ------------------
  |  Branch (156:13): [True: 1.17k, False: 322k]
  ------------------
  157|  1.17k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.17k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.17k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 1.17k]
  |  |  ------------------
  |  |   18|  1.17k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  1.17k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  158|       |
  159|  1.17k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   29|  1.17k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  160|  1.17k|                (void)memory_block.LoadDouble(address);
  161|  1.17k|                break;
  162|  1.17k|            }
  163|       |
  164|       |            // StoreByte
  165|  1.35k|            case 8: {
  ------------------
  |  Branch (165:13): [True: 1.35k, False: 322k]
  ------------------
  166|  1.35k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 3, False: 1.35k]
  |  |  ------------------
  |  |   18|  1.35k|    {                                                                                              \
  |  |   19|      3|        return 0;                                                                                  \
  |  |   20|      3|    }                                                                                              \
  |  |   21|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|  1.35k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   16|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 6, False: 1.34k]
  |  |  ------------------
  |  |   18|  1.35k|    {                                                                                              \
  |  |   19|      6|        return 0;                                                                                  \
  |  |   20|      6|    }                                                                                              \
  |  |   21|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  168|       |
  169|  1.34k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|  1.34k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  170|  1.34k|                (void)memory_block.StoreByte(address, value);
  171|  1.34k|                break;
  172|  1.35k|            }
  173|       |
  174|       |            // StoreUnsignedByte
  175|    754|            case 9: {
  ------------------
  |  Branch (175:13): [True: 754, False: 323k]
  ------------------
  176|    754|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    754|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    754|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 3, False: 751]
  |  |  ------------------
  |  |   18|    754|    {                                                                                              \
  |  |   19|      3|        return 0;                                                                                  \
  |  |   20|      3|    }                                                                                              \
  |  |   21|    754|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|    751|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   16|    751|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    751|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 750]
  |  |  ------------------
  |  |   18|    751|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    751|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  178|       |
  179|    750|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    750|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  180|    750|                (void)memory_block.StoreUnsignedByte(address, value);
  181|    750|                break;
  182|    751|            }
  183|       |
  184|       |            // StoreHalfWord
  185|  2.39k|            case 10: {
  ------------------
  |  Branch (185:13): [True: 2.39k, False: 321k]
  ------------------
  186|  2.39k|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|  2.39k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  2.39k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 2.39k]
  |  |  ------------------
  |  |   18|  2.39k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  2.39k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|  2.39k|                GET_T(phi::int16_t, value);
  ------------------
  |  |   16|  2.39k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|  2.39k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 2.39k]
  |  |  ------------------
  |  |   18|  2.39k|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|  2.39k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  188|       |
  189|  2.39k|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|  2.39k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  190|  2.39k|                (void)memory_block.StoreHalfWord(address, value);
  191|  2.39k|                break;
  192|  2.39k|            }
  193|       |
  194|       |            // StoreUnsignedHalfWord
  195|    972|            case 11: {
  ------------------
  |  Branch (195:13): [True: 972, False: 323k]
  ------------------
  196|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|    971|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  198|       |
  199|    970|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  200|    970|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  201|    970|                break;
  202|    971|            }
  203|       |
  204|       |            // StoreWord
  205|    972|            case 12: {
  ------------------
  |  Branch (205:13): [True: 972, False: 323k]
  ------------------
  206|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|    971|                GET_T(phi::int32_t, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  208|       |
  209|    970|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  210|    970|                (void)memory_block.StoreWord(address, value);
  211|    970|                break;
  212|    971|            }
  213|       |
  214|       |            // StoreUnsignedWord
  215|    844|            case 13: {
  ------------------
  |  Branch (215:13): [True: 844, False: 323k]
  ------------------
  216|    844|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    844|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    844|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 843]
  |  |  ------------------
  |  |   18|    844|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    844|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|    843|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   16|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   18|    843|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  218|       |
  219|    842|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   29|    842|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  220|    842|                (void)memory_block.StoreUnsignedWord(address, value);
  221|    842|                break;
  222|    843|            }
  223|       |
  224|       |            // StoreFloat
  225|    972|            case 14: {
  ------------------
  |  Branch (225:13): [True: 972, False: 323k]
  ------------------
  226|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|    971|                GET_T(phi::float32, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  228|       |
  229|    970|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  230|    970|                (void)memory_block.StoreFloat(address, value);
  231|    970|                break;
  232|    971|            }
  233|       |
  234|       |            // StoreDouble
  235|    972|            case 15: {
  ------------------
  |  Branch (235:13): [True: 972, False: 323k]
  ------------------
  236|    972|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    972|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    972|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 971]
  |  |  ------------------
  |  |   18|    972|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    972|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|    971|                GET_T(phi::float64, value);
  ------------------
  |  |   16|    971|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    971|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 970]
  |  |  ------------------
  |  |   18|    971|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    971|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  238|       |
  239|    970|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   29|    970|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  240|    970|                (void)memory_block.StoreDouble(address, value);
  241|    970|                break;
  242|    971|            }
  243|       |
  244|       |            // IsAddressValid
  245|    862|            case 16: {
  ------------------
  |  Branch (245:13): [True: 862, False: 323k]
  ------------------
  246|    862|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    862|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    862|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 861]
  |  |  ------------------
  |  |   18|    862|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    862|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|    861|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   16|    861|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    861|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 860]
  |  |  ------------------
  |  |   18|    861|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    861|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  248|       |
  249|    860|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   29|    860|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  250|    860|                (void)memory_block.IsAddressValid(address, arg_size);
  251|    860|                break;
  252|    861|            }
  253|       |
  254|       |            // IsAddressAlignedCorrectly
  255|    273|            case 17: {
  ------------------
  |  Branch (255:13): [True: 273, False: 323k]
  ------------------
  256|    273|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    273|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    273|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 272]
  |  |  ------------------
  |  |   18|    273|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    273|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|    272|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   16|    272|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    272|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 271]
  |  |  ------------------
  |  |   18|    272|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    272|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  258|       |
  259|    271|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   29|    271|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  260|    271|                         print_int(arg_size));
  261|    271|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  262|    271|                break;
  263|    272|            }
  264|       |
  265|       |            // GetStartingAddress
  266|    195|            case 18: {
  ------------------
  |  Branch (266:13): [True: 195, False: 323k]
  ------------------
  267|    195|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   29|    195|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  268|    195|                (void)memory_block.GetStartingAddress();
  269|    195|                break;
  270|    272|            }
  271|       |
  272|       |            // SetStartingAddress
  273|    496|            case 19: {
  ------------------
  |  Branch (273:13): [True: 496, False: 323k]
  ------------------
  274|    496|                GET_T(phi::size_t, address);
  ------------------
  |  |   16|    496|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|    496|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 1, False: 495]
  |  |  ------------------
  |  |   18|    496|    {                                                                                              \
  |  |   19|      1|        return 0;                                                                                  \
  |  |   20|      1|    }                                                                                              \
  |  |   21|    496|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  275|       |
  276|    495|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   29|    495|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  277|    495|                memory_block.SetStartingAddress(address);
  278|    495|                break;
  279|    496|            }
  280|       |
  281|       |            // GetSize
  282|    196|            case 20: {
  ------------------
  |  Branch (282:13): [True: 196, False: 323k]
  ------------------
  283|    196|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   29|    196|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  284|    196|                (void)memory_block.GetSize();
  285|    196|                break;
  286|    496|            }
  287|       |
  288|       |            // Resize
  289|   275k|            case 21: {
  ------------------
  |  Branch (289:13): [True: 275k, False: 48.2k]
  ------------------
  290|   275k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   16|   275k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   17|   275k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (17:9): [True: 426, False: 275k]
  |  |  ------------------
  |  |   18|   275k|    {                                                                                              \
  |  |   19|    426|        return 0;                                                                                  \
  |  |   20|    426|    }                                                                                              \
  |  |   21|   275k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  291|       |
  292|       |                // Reject too big resizes
  293|   275k|                if (new_size > max_size)
  ------------------
  |  Branch (293:21): [True: 204, False: 275k]
  ------------------
  294|    204|                {
  295|    204|                    return 0;
  296|    204|                }
  297|       |
  298|   275k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   29|   275k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  299|   275k|                memory_block.Resize(new_size);
  300|   275k|                break;
  301|   275k|            }
  302|       |
  303|       |            // GetRawMemory
  304|    194|            case 22: {
  ------------------
  |  Branch (304:13): [True: 194, False: 323k]
  ------------------
  305|    194|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   29|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  306|    194|                (void)memory_block.GetRawMemory();
  307|    194|                break;
  308|   275k|            }
  309|       |
  310|       |            // GetRawMemory const
  311|    230|            case 23: {
  ------------------
  |  Branch (311:13): [True: 230, False: 323k]
  ------------------
  312|    230|                const dlx::MemoryBlock& const_memory_block = memory_block;
  313|    230|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   29|    230|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  314|    230|                (void)const_memory_block.GetRawMemory();
  315|    230|                break;
  316|   275k|            }
  317|       |
  318|       |            // Clear
  319|  2.08k|            case 24: {
  ------------------
  |  Branch (319:13): [True: 2.08k, False: 321k]
  ------------------
  320|  2.08k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   29|  2.08k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  321|  2.08k|                memory_block.Clear();
  322|  2.08k|            }
  323|   324k|        }
  324|   324k|    }
  325|       |
  326|    549|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   29|    549|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  327|       |
  328|    549|    return 0;
  329|  3.60k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   49|   327k|{
   50|   327k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 2.15k, False: 324k]
  ------------------
   51|  2.15k|    {
   52|  2.15k|        return {};
   53|  2.15k|    }
   54|       |
   55|   324k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|   324k|    const phi::size_t old_index = index;
   58|   324k|    index += aligned_size<T>();
   59|       |
   60|   324k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|   324k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|   324k|        return static_cast<bool>(value);
   64|   324k|    }
   65|   324k|    else
   66|   324k|    {
   67|   324k|        return *reinterpret_cast<const T*>(data + old_index);
   68|   324k|    }
   69|   324k|}
_Z10has_x_moremmm:
   34|   636k|{
   35|   636k|    return index + x < size;
   36|   636k|}
_Z12aligned_sizeIjEmv:
   42|   324k|{
   43|   324k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|   324k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   49|   300k|{
   50|   300k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 687, False: 300k]
  ------------------
   51|    687|    {
   52|    687|        return {};
   53|    687|    }
   54|       |
   55|   300k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|   300k|    const phi::size_t old_index = index;
   58|   300k|    index += aligned_size<T>();
   59|       |
   60|   300k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|   300k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|   300k|        return static_cast<bool>(value);
   64|   300k|    }
   65|   300k|    else
   66|   300k|    {
   67|   300k|        return *reinterpret_cast<const T*>(data + old_index);
   68|   300k|    }
   69|   300k|}
_Z12aligned_sizeImEmv:
   42|   300k|{
   43|   300k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|   300k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   49|  1.35k|{
   50|  1.35k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 6, False: 1.34k]
  ------------------
   51|      6|    {
   52|      6|        return {};
   53|      6|    }
   54|       |
   55|  1.34k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|  1.34k|    const phi::size_t old_index = index;
   58|  1.34k|    index += aligned_size<T>();
   59|       |
   60|  1.34k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|  1.34k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|  1.34k|        return static_cast<bool>(value);
   64|  1.34k|    }
   65|  1.34k|    else
   66|  1.34k|    {
   67|  1.34k|        return *reinterpret_cast<const T*>(data + old_index);
   68|  1.34k|    }
   69|  1.34k|}
_Z12aligned_sizeIaEmv:
   42|  1.34k|{
   43|  1.34k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|  1.34k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   49|    751|{
   50|    751|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 750]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    750|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    750|    const phi::size_t old_index = index;
   58|    750|    index += aligned_size<T>();
   59|       |
   60|    750|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    750|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    750|        return static_cast<bool>(value);
   64|    750|    }
   65|    750|    else
   66|    750|    {
   67|    750|        return *reinterpret_cast<const T*>(data + old_index);
   68|    750|    }
   69|    750|}
_Z12aligned_sizeIhEmv:
   42|    750|{
   43|    750|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    750|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   49|  2.39k|{
   50|  2.39k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 2.39k]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|  2.39k|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|  2.39k|    const phi::size_t old_index = index;
   58|  2.39k|    index += aligned_size<T>();
   59|       |
   60|  2.39k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|  2.39k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|  2.39k|        return static_cast<bool>(value);
   64|  2.39k|    }
   65|  2.39k|    else
   66|  2.39k|    {
   67|  2.39k|        return *reinterpret_cast<const T*>(data + old_index);
   68|  2.39k|    }
   69|  2.39k|}
_Z12aligned_sizeIsEmv:
   42|  2.39k|{
   43|  2.39k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|  2.39k|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeItEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIiEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIfEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   49|    971|{
   50|    971|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (50:9): [True: 1, False: 970]
  ------------------
   51|      1|    {
   52|      1|        return {};
   53|      1|    }
   54|       |
   55|    970|    PHI_ASSUME(index % sizeof(void*) == 0);
   56|       |
   57|    970|    const phi::size_t old_index = index;
   58|    970|    index += aligned_size<T>();
   59|       |
   60|    970|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|      0|    {
   62|    970|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   63|    970|        return static_cast<bool>(value);
   64|    970|    }
   65|    970|    else
   66|    970|    {
   67|    970|        return *reinterpret_cast<const T*>(data + old_index);
   68|    970|    }
   69|    970|}
_Z12aligned_sizeIdEmv:
   42|    970|{
   43|    970|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   44|    970|}


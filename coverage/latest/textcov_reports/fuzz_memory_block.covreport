_ZN3dlx11MemoryBlock10MemoryByteC2Ev:
   17|  1.09M|            {}

_ZN3dlx11MemoryBlockC2EN3phi7integerImEES3_:
   16|  2.15k|    {
   17|  2.15k|        m_Values.resize(starting_size.unsafe());
   18|  2.15k|    }
_ZNK3dlx11MemoryBlock8LoadByteEN3phi7integerImEE:
   21|  10.7k|    {
   22|  10.7k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (22:13): [True: 10.4k, False: 322]
  ------------------
   23|  10.4k|        {
   24|  10.4k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  10.4k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   25|  10.4k|            return {};
   26|  10.4k|        }
   27|       |
   28|    322|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   29|       |
   30|    322|        return m_Values[raw_address].signed_value;
   31|  10.7k|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedByteEN3phi7integerImEE:
   34|  6.19k|    {
   35|  6.19k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (35:13): [True: 5.99k, False: 194]
  ------------------
   36|  5.99k|        {
   37|  5.99k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  5.99k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   38|  5.99k|            return {};
   39|  5.99k|        }
   40|       |
   41|    194|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   42|    194|        return m_Values[raw_address].unsigned_value;
   43|  6.19k|    }
_ZNK3dlx11MemoryBlock12LoadHalfWordEN3phi7integerImEE:
   46|  3.08k|    {
   47|  3.08k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (47:13): [True: 2.57k, False: 516]
  ------------------
   48|  2.57k|        {
   49|  2.57k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.57k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   50|  2.57k|            return {};
   51|  2.57k|        }
   52|       |
   53|    516|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   54|       |
   55|    516|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (55:13): [True: 322, False: 194]
  ------------------
   56|    322|        {
   57|    322|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    322|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   58|    322|            return {};
   59|    322|        }
   60|       |
   61|    194|        return *reinterpret_cast<const std::int16_t*>(&m_Values[raw_address].signed_value);
   62|    516|    }
_ZNK3dlx11MemoryBlock20LoadUnsignedHalfWordEN3phi7integerImEE:
   65|  3.08k|    {
   66|  3.08k|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (66:13): [True: 1.67k, False: 1.41k]
  ------------------
   67|  1.67k|        {
   68|  1.67k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.67k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   69|  1.67k|            return {};
   70|  1.67k|        }
   71|       |
   72|  1.41k|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   73|       |
   74|  1.41k|        if (!IsAddressAlignedCorrectly(raw_address, 2u))
  ------------------
  |  Branch (74:13): [True: 322, False: 1.09k]
  ------------------
   75|    322|        {
   76|    322|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    322|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   77|    322|            return {};
   78|    322|        }
   79|       |
   80|  1.09k|        return *reinterpret_cast<const std::uint16_t*>(&m_Values[raw_address].unsigned_value);
   81|  1.41k|    }
_ZNK3dlx11MemoryBlock8LoadWordEN3phi7integerImEE:
   84|  3.08k|    {
   85|  3.08k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (85:13): [True: 2.82k, False: 260]
  ------------------
   86|  2.82k|        {
   87|  2.82k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.82k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   88|  2.82k|            return {};
   89|  2.82k|        }
   90|       |
   91|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
   92|       |
   93|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (93:13): [True: 66, False: 194]
  ------------------
   94|     66|        {
   95|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
   96|     66|            return {};
   97|     66|        }
   98|       |
   99|    194|        return *reinterpret_cast<const std::int32_t*>(&m_Values[raw_address].signed_value);
  100|    260|    }
_ZNK3dlx11MemoryBlock16LoadUnsignedWordEN3phi7integerImEE:
  103|  7.58k|    {
  104|  7.58k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (104:13): [True: 7.32k, False: 260]
  ------------------
  105|  7.32k|        {
  106|  7.32k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  7.32k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  107|  7.32k|            return {};
  108|  7.32k|        }
  109|       |
  110|    260|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  111|       |
  112|    260|        if (!IsAddressAlignedCorrectly(raw_address, 4u))
  ------------------
  |  Branch (112:13): [True: 66, False: 194]
  ------------------
  113|     66|        {
  114|     66|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|     66|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  115|     66|            return {};
  116|     66|        }
  117|       |
  118|    194|        return *reinterpret_cast<const std::uint32_t*>(&m_Values[raw_address].unsigned_value);
  119|    260|    }
_ZNK3dlx11MemoryBlock9LoadFloatEN3phi7integerImEE:
  122|  3.19k|    {
  123|  3.19k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (123:13): [True: 2.29k, False: 900]
  ------------------
  124|  2.29k|        {
  125|  2.29k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  2.29k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  126|  2.29k|            return {};
  127|  2.29k|        }
  128|       |
  129|    900|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  130|       |
  131|    900|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f32)))
  ------------------
  |  Branch (131:13): [True: 706, False: 194]
  ------------------
  132|    706|        {
  133|    706|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    706|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  134|    706|            return {};
  135|    706|        }
  136|       |
  137|    194|        return *reinterpret_cast<const float*>(&m_Values[raw_address].signed_value);
  138|    900|    }
_ZNK3dlx11MemoryBlock10LoadDoubleEN3phi7integerImEE:
  141|  1.42k|    {
  142|  1.42k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (142:13): [True: 1.03k, False: 388]
  ------------------
  143|  1.03k|        {
  144|  1.03k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.03k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  145|  1.03k|            return {};
  146|  1.03k|        }
  147|       |
  148|    388|        const phi::size_t raw_address = (address - m_StartingAddress).unsafe();
  149|       |
  150|    388|        if (!IsAddressAlignedCorrectly(raw_address, sizeof(phi::f64)))
  ------------------
  |  Branch (150:13): [True: 194, False: 194]
  ------------------
  151|    194|        {
  152|    194|            DLX_ERROR("Address {} is misaligned", address.unsafe());
  ------------------
  |  |    9|    194|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  153|    194|            return {};
  154|    194|        }
  155|       |
  156|    194|        return *reinterpret_cast<const double*>(&m_Values[(raw_address)].signed_value);
  157|    388|    }
_ZN3dlx11MemoryBlock9StoreByteEN3phi7integerImEENS2_IaEE:
  160|  3.56k|    {
  161|  3.56k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (161:13): [True: 3.37k, False: 194]
  ------------------
  162|  3.37k|        {
  163|  3.37k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.37k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  164|  3.37k|            return false;
  165|  3.37k|        }
  166|       |
  167|    194|        m_Values[(address - m_StartingAddress).unsafe()].signed_value = value.unsafe();
  168|    194|        return true;
  169|  3.56k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedByteEN3phi7integerImEENS2_IhEE:
  172|  1.61k|    {
  173|  1.61k|        if (!IsAddressValid(address, 1u))
  ------------------
  |  Branch (173:13): [True: 1.54k, False: 66]
  ------------------
  174|  1.54k|        {
  175|  1.54k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.54k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  176|  1.54k|            return false;
  177|  1.54k|        }
  178|       |
  179|     66|        m_Values[(address - m_StartingAddress).unsafe()].unsigned_value = value.unsafe();
  180|     66|        return true;
  181|  1.61k|    }
_ZN3dlx11MemoryBlock13StoreHalfWordEN3phi7integerImEENS2_IsEE:
  184|    841|    {
  185|    841|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (185:13): [True: 775, False: 66]
  ------------------
  186|    775|        {
  187|    775|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    775|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  188|    775|            return false;
  189|    775|        }
  190|       |
  191|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  192|     66|        *reinterpret_cast<std::int16_t*>(&m_Values[index].signed_value) = value.unsafe();
  193|       |
  194|     66|        return true;
  195|    841|    }
_ZN3dlx11MemoryBlock21StoreUnsignedHalfWordEN3phi7integerImEENS2_ItEE:
  198|    586|    {
  199|    586|        if (!IsAddressValid(address, 2u))
  ------------------
  |  Branch (199:13): [True: 520, False: 66]
  ------------------
  200|    520|        {
  201|    520|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|    520|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  202|    520|            return false;
  203|    520|        }
  204|       |
  205|     66|        phi::size_t index = (address - m_StartingAddress).unsafe();
  206|     66|        *reinterpret_cast<std::uint16_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  207|       |
  208|     66|        return true;
  209|    586|    }
_ZN3dlx11MemoryBlock9StoreWordEN3phi7integerImEENS2_IiEE:
  212|  1.61k|    {
  213|  1.61k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (213:13): [True: 1.41k, False: 194]
  ------------------
  214|  1.41k|        {
  215|  1.41k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.41k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  216|  1.41k|            return false;
  217|  1.41k|        }
  218|       |
  219|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  220|    194|        *reinterpret_cast<std::int32_t*>(&m_Values[index].signed_value) = value.unsafe();
  221|       |
  222|    194|        return true;
  223|  1.61k|    }
_ZN3dlx11MemoryBlock17StoreUnsignedWordEN3phi7integerImEENS2_IjEE:
  226|  3.66k|    {
  227|  3.66k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (227:13): [True: 3.21k, False: 450]
  ------------------
  228|  3.21k|        {
  229|  3.21k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.21k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  230|  3.21k|            return false;
  231|  3.21k|        }
  232|       |
  233|    450|        phi::size_t index = (address - m_StartingAddress).unsafe();
  234|    450|        *reinterpret_cast<std::uint32_t*>(&m_Values[index].unsigned_value) = value.unsafe();
  235|       |
  236|    450|        return true;
  237|  3.66k|    }
_ZN3dlx11MemoryBlock10StoreFloatEN3phi7integerImEENS1_14floating_pointIfEE:
  240|  1.35k|    {
  241|  1.35k|        if (!IsAddressValid(address, 4u))
  ------------------
  |  Branch (241:13): [True: 1.16k, False: 194]
  ------------------
  242|  1.16k|        {
  243|  1.16k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  1.16k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  244|  1.16k|            return false;
  245|  1.16k|        }
  246|       |
  247|    194|        phi::size_t index = (address - m_StartingAddress).unsafe();
  248|    194|        *reinterpret_cast<float*>(&m_Values[index].signed_value) = value.unsafe();
  249|       |
  250|    194|        return true;
  251|  1.35k|    }
_ZN3dlx11MemoryBlock11StoreDoubleEN3phi7integerImEENS1_14floating_pointIdEE:
  254|  6.10k|    {
  255|  6.10k|        if (!IsAddressValid(address, 8u))
  ------------------
  |  Branch (255:13): [True: 3.73k, False: 2.37k]
  ------------------
  256|  3.73k|        {
  257|  3.73k|            DLX_ERROR("Address {} is out of bounds", address.unsafe());
  ------------------
  |  |    9|  3.73k|#define DLX_ERROR(...)    PHI_EMPTY_MACRO()
  ------------------
  258|  3.73k|            return false;
  259|  3.73k|        }
  260|       |
  261|  2.37k|        phi::size_t index = (address - m_StartingAddress).unsafe();
  262|  2.37k|        *reinterpret_cast<double*>(&m_Values[index].signed_value) = value.unsafe();
  263|       |
  264|  2.37k|        return true;
  265|  6.10k|    }
_ZNK3dlx11MemoryBlock14IsAddressValidEN3phi7integerImEES3_:
  268|  58.4k|    {
  269|       |        // Cannot access anything before the starting address
  270|  58.4k|        if (address < m_StartingAddress)
  ------------------
  |  Branch (270:13): [True: 6.85k, False: 51.5k]
  ------------------
  271|  6.85k|        {
  272|  6.85k|            return false;
  273|  6.85k|        }
  274|       |
  275|       |        // Check if address + size will overflow
  276|  51.5k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (276:13): [True: 22.4k, False: 29.1k]
  ------------------
  277|  51.5k|                                             address.unsafe(), size.unsafe()))
  278|  22.4k|        {
  279|  22.4k|            return false;
  280|  22.4k|        }
  281|       |
  282|       |        // Check if m_StartingAddress + m_Values.size() will overflow
  283|  29.1k|        if (phi::detail::will_addition_error(phi::detail::arithmetic_tag_for<phi::size_t>{},
  ------------------
  |  Branch (283:13): [True: 14.8k, False: 14.3k]
  ------------------
  284|  29.1k|                                             m_StartingAddress.unsafe(), m_Values.size()))
  285|  14.8k|        {
  286|  14.8k|            return false;
  287|  14.8k|        }
  288|       |
  289|       |        // Check if address is out of bounds
  290|  14.3k|        if ((address + size) > (m_StartingAddress + m_Values.size()))
  ------------------
  |  Branch (290:13): [True: 6.27k, False: 8.04k]
  ------------------
  291|  6.27k|        {
  292|  6.27k|            return false;
  293|  6.27k|        }
  294|       |
  295|       |        // Otherwise this is a valid address
  296|  8.04k|        return true;
  297|  14.3k|    }
_ZN3dlx11MemoryBlock25IsAddressAlignedCorrectlyEN3phi7integerImEES3_:
  301|  3.99k|    {
  302|  3.99k|        return size != 0u && (address % size) == 0u;
  ------------------
  |  Branch (302:16): [True: 3.93k, False: 66]
  |  Branch (302:30): [True: 2.06k, False: 1.86k]
  ------------------
  303|  3.99k|    }
_ZN3dlx11MemoryBlock5ClearEv:
  306|  1.11k|    {
  307|  1.11k|        for (auto& val : m_Values)
  ------------------
  |  Branch (307:24): [True: 107k, False: 1.11k]
  ------------------
  308|   107k|        {
  309|   107k|            val.signed_value = 0;
  310|   107k|        }
  311|  1.11k|    }
_ZNK3dlx11MemoryBlock18GetStartingAddressEv:
  314|    194|    {
  315|    194|        return m_StartingAddress;
  316|    194|    }
_ZN3dlx11MemoryBlock18SetStartingAddressEN3phi7integerImEE:
  319|    656|    {
  320|    656|        m_StartingAddress = new_starting_address;
  321|    656|    }
_ZNK3dlx11MemoryBlock7GetSizeEv:
  324|    194|    {
  325|    194|        return m_Values.size();
  326|    194|    }
_ZN3dlx11MemoryBlock6ResizeEN3phi7integerImEE:
  329|  86.7k|    {
  330|  86.7k|        m_Values.resize(new_size.unsafe());
  331|  86.7k|    }
_ZN3dlx11MemoryBlock12GetRawMemoryEv:
  334|    195|    {
  335|    195|        return m_Values;
  336|    195|    }
_ZNK3dlx11MemoryBlock12GetRawMemoryEv:
  339|    195|    {
  340|    195|        return m_Values;
  341|    195|    }

LLVMFuzzerTestOneInput:
   80|  2.15k|{
   81|  2.15k|    dlx::MemoryBlock memory_block{1000u, max_size};
   82|       |
   83|  2.15k|    FUZZ_LOG("Beginning execution");
  ------------------
  |  |   28|  2.15k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   84|       |
   85|   161k|    for (std::size_t index{0u}; index < size;)
  ------------------
  |  Branch (85:33): [True: 160k, False: 513]
  ------------------
   86|   160k|    {
   87|   160k|        GET_T(phi::uint32_t, function_index);
  ------------------
  |  |   15|   160k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|   160k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1.32k, False: 159k]
  |  |  ------------------
  |  |   17|   160k|    {                                                                                              \
  |  |   18|  1.32k|        return 0;                                                                                  \
  |  |   19|  1.32k|    }                                                                                              \
  |  |   20|   160k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   88|       |
   89|   159k|        switch (function_index)
  ------------------
  |  Branch (89:17): [True: 11.1k, False: 148k]
  ------------------
   90|   159k|        {
   91|       |            // LoadByte
   92|  10.8k|            case 0: {
  ------------------
  |  Branch (92:13): [True: 10.8k, False: 148k]
  ------------------
   93|  10.8k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  10.8k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  10.8k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 97, False: 10.7k]
  |  |  ------------------
  |  |   17|  10.8k|    {                                                                                              \
  |  |   18|     97|        return 0;                                                                                  \
  |  |   19|     97|    }                                                                                              \
  |  |   20|  10.8k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
   94|       |
   95|  10.7k|                FUZZ_LOG("LoadByte({:s})", print_int(address));
  ------------------
  |  |   28|  10.7k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
   96|  10.7k|                (void)memory_block.LoadByte(address);
   97|  10.7k|                break;
   98|  10.8k|            }
   99|       |
  100|       |            // LoadUnsignedByte
  101|  6.20k|            case 1: {
  ------------------
  |  Branch (101:13): [True: 6.20k, False: 153k]
  ------------------
  102|  6.20k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  6.20k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  6.20k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 11, False: 6.19k]
  |  |  ------------------
  |  |   17|  6.20k|    {                                                                                              \
  |  |   18|     11|        return 0;                                                                                  \
  |  |   19|     11|    }                                                                                              \
  |  |   20|  6.20k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  103|       |
  104|  6.19k|                FUZZ_LOG("LoadUnsignedByte({:s})", print_int(address));
  ------------------
  |  |   28|  6.19k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  105|  6.19k|                (void)memory_block.LoadUnsignedByte(address);
  106|  6.19k|                break;
  107|  6.20k|            }
  108|       |
  109|       |            // LoadHalfWord
  110|  3.08k|            case 2: {
  ------------------
  |  Branch (110:13): [True: 3.08k, False: 156k]
  ------------------
  111|  3.08k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.08k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.08k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.08k]
  |  |  ------------------
  |  |   17|  3.08k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.08k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  112|       |
  113|  3.08k|                FUZZ_LOG("LoadHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  3.08k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  114|  3.08k|                (void)memory_block.LoadHalfWord(address);
  115|  3.08k|                break;
  116|  3.08k|            }
  117|       |
  118|       |                // LoadUnsignedHalfWord
  119|  3.08k|            case 3: {
  ------------------
  |  Branch (119:13): [True: 3.08k, False: 156k]
  ------------------
  120|  3.08k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.08k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.08k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.08k]
  |  |  ------------------
  |  |   17|  3.08k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.08k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  121|       |
  122|  3.08k|                FUZZ_LOG("LoadUnsignedHalfWord({:s})", print_int(address));
  ------------------
  |  |   28|  3.08k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  123|  3.08k|                (void)memory_block.LoadUnsignedHalfWord(address);
  124|  3.08k|                break;
  125|  3.08k|            }
  126|       |
  127|       |            // LoadWord
  128|  3.08k|            case 4: {
  ------------------
  |  Branch (128:13): [True: 3.08k, False: 156k]
  ------------------
  129|  3.08k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.08k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.08k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.08k]
  |  |  ------------------
  |  |   17|  3.08k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.08k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  130|       |
  131|  3.08k|                FUZZ_LOG("LoadWord({:s})", print_int(address));
  ------------------
  |  |   28|  3.08k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  132|  3.08k|                (void)memory_block.LoadWord(address);
  133|  3.08k|                break;
  134|  3.08k|            }
  135|       |
  136|       |            // LoadUnsignedWord
  137|  7.58k|            case 5: {
  ------------------
  |  Branch (137:13): [True: 7.58k, False: 151k]
  ------------------
  138|  7.58k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  7.58k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  7.58k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 7.58k]
  |  |  ------------------
  |  |   17|  7.58k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  7.58k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  139|       |
  140|  7.58k|                FUZZ_LOG("LoadUnsignedWord({:s})", print_int(address));
  ------------------
  |  |   28|  7.58k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  141|  7.58k|                (void)memory_block.LoadUnsignedWord(address);
  142|  7.58k|                break;
  143|  7.58k|            }
  144|       |
  145|       |            // LoadFloat
  146|  3.19k|            case 6: {
  ------------------
  |  Branch (146:13): [True: 3.19k, False: 156k]
  ------------------
  147|  3.19k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.19k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.19k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 5, False: 3.19k]
  |  |  ------------------
  |  |   17|  3.19k|    {                                                                                              \
  |  |   18|      5|        return 0;                                                                                  \
  |  |   19|      5|    }                                                                                              \
  |  |   20|  3.19k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  148|       |
  149|  3.19k|                FUZZ_LOG("LoadFloat({:s})", print_int(address));
  ------------------
  |  |   28|  3.19k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  150|  3.19k|                (void)memory_block.LoadFloat(address);
  151|  3.19k|                break;
  152|  3.19k|            }
  153|       |
  154|       |            // LoadDouble
  155|  1.42k|            case 7: {
  ------------------
  |  Branch (155:13): [True: 1.42k, False: 158k]
  ------------------
  156|  1.42k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.42k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.42k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.42k]
  |  |  ------------------
  |  |   17|  1.42k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.42k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  157|       |
  158|  1.42k|                FUZZ_LOG("LoadDouble({:s})", print_int(address));
  ------------------
  |  |   28|  1.42k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  159|  1.42k|                (void)memory_block.LoadDouble(address);
  160|  1.42k|                break;
  161|  1.42k|            }
  162|       |
  163|       |            // StoreByte
  164|  3.56k|            case 8: {
  ------------------
  |  Branch (164:13): [True: 3.56k, False: 155k]
  ------------------
  165|  3.56k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.56k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.56k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.56k]
  |  |  ------------------
  |  |   17|  3.56k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.56k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  166|  3.56k|                GET_T(phi::int8_t, value);
  ------------------
  |  |   15|  3.56k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.56k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.56k]
  |  |  ------------------
  |  |   17|  3.56k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.56k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  167|       |
  168|  3.56k|                FUZZ_LOG("StoreByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  3.56k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  169|  3.56k|                (void)memory_block.StoreByte(address, value);
  170|  3.56k|                break;
  171|  3.56k|            }
  172|       |
  173|       |            // StoreUnsignedByte
  174|  1.61k|            case 9: {
  ------------------
  |  Branch (174:13): [True: 1.61k, False: 157k]
  ------------------
  175|  1.61k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  176|  1.61k|                GET_T(phi::uint8_t, value);
  ------------------
  |  |   15|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  177|       |
  178|  1.61k|                FUZZ_LOG("StoreUnsignedByte({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.61k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  179|  1.61k|                (void)memory_block.StoreUnsignedByte(address, value);
  180|  1.61k|                break;
  181|  1.61k|            }
  182|       |
  183|       |            // StoreHalfWord
  184|    843|            case 10: {
  ------------------
  |  Branch (184:13): [True: 843, False: 158k]
  ------------------
  185|    843|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    843|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    843|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 842]
  |  |  ------------------
  |  |   17|    843|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    843|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  186|    842|                GET_T(phi::int16_t, value);
  ------------------
  |  |   15|    842|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    842|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 841]
  |  |  ------------------
  |  |   17|    842|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    842|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  187|       |
  188|    841|                FUZZ_LOG("StoreHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    841|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  189|    841|                (void)memory_block.StoreHalfWord(address, value);
  190|    841|                break;
  191|    842|            }
  192|       |
  193|       |            // StoreUnsignedHalfWord
  194|    588|            case 11: {
  ------------------
  |  Branch (194:13): [True: 588, False: 158k]
  ------------------
  195|    588|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    588|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    588|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 587]
  |  |  ------------------
  |  |   17|    588|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    588|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  196|    587|                GET_T(phi::uint16_t, value);
  ------------------
  |  |   15|    587|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    587|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 586]
  |  |  ------------------
  |  |   17|    587|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    587|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  197|       |
  198|    586|                FUZZ_LOG("StoreUnsignedHalfWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|    586|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  199|    586|                (void)memory_block.StoreUnsignedHalfWord(address, value);
  200|    586|                break;
  201|    587|            }
  202|       |
  203|       |            // StoreWord
  204|  1.61k|            case 12: {
  ------------------
  |  Branch (204:13): [True: 1.61k, False: 157k]
  ------------------
  205|  1.61k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  206|  1.61k|                GET_T(phi::int32_t, value);
  ------------------
  |  |   15|  1.61k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.61k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.61k]
  |  |  ------------------
  |  |   17|  1.61k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.61k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  207|       |
  208|  1.61k|                FUZZ_LOG("StoreWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  1.61k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  209|  1.61k|                (void)memory_block.StoreWord(address, value);
  210|  1.61k|                break;
  211|  1.61k|            }
  212|       |
  213|       |            // StoreUnsignedWord
  214|  3.66k|            case 13: {
  ------------------
  |  Branch (214:13): [True: 3.66k, False: 155k]
  ------------------
  215|  3.66k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  3.66k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.66k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.66k]
  |  |  ------------------
  |  |   17|  3.66k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.66k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  216|  3.66k|                GET_T(phi::uint32_t, value);
  ------------------
  |  |   15|  3.66k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  3.66k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 3.66k]
  |  |  ------------------
  |  |   17|  3.66k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  3.66k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  217|       |
  218|  3.66k|                FUZZ_LOG("StoreUnsignedWord({:s}, {:s})", print_int(address), print_int(value));
  ------------------
  |  |   28|  3.66k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  219|  3.66k|                (void)memory_block.StoreUnsignedWord(address, value);
  220|  3.66k|                break;
  221|  3.66k|            }
  222|       |
  223|       |            // StoreFloat
  224|  1.35k|            case 14: {
  ------------------
  |  Branch (224:13): [True: 1.35k, False: 158k]
  ------------------
  225|  1.35k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.35k]
  |  |  ------------------
  |  |   17|  1.35k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  226|  1.35k|                GET_T(phi::float32, value);
  ------------------
  |  |   15|  1.35k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  1.35k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 1.35k]
  |  |  ------------------
  |  |   17|  1.35k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  1.35k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  227|       |
  228|  1.35k|                FUZZ_LOG("StoreFloat({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|  1.35k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  229|  1.35k|                (void)memory_block.StoreFloat(address, value);
  230|  1.35k|                break;
  231|  1.35k|            }
  232|       |
  233|       |            // StoreDouble
  234|  6.10k|            case 15: {
  ------------------
  |  Branch (234:13): [True: 6.10k, False: 153k]
  ------------------
  235|  6.10k|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|  6.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  6.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 6.10k]
  |  |  ------------------
  |  |   17|  6.10k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  6.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  236|  6.10k|                GET_T(phi::float64, value);
  ------------------
  |  |   15|  6.10k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  6.10k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 6.10k]
  |  |  ------------------
  |  |   17|  6.10k|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|  6.10k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  237|       |
  238|  6.10k|                FUZZ_LOG("StoreDouble({:s}, {:f})", print_int(address), value);
  ------------------
  |  |   28|  6.10k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  239|  6.10k|                (void)memory_block.StoreDouble(address, value);
  240|  6.10k|                break;
  241|  6.10k|            }
  242|       |
  243|       |            // IsAddressValid
  244|    716|            case 16: {
  ------------------
  |  Branch (244:13): [True: 716, False: 158k]
  ------------------
  245|    716|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    716|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    716|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 715]
  |  |  ------------------
  |  |   17|    716|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    716|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  246|    715|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    715|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    715|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 714]
  |  |  ------------------
  |  |   17|    715|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    715|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  247|       |
  248|    714|                FUZZ_LOG("IsAddressValid({:s}, {:s})", print_int(address), print_int(arg_size));
  ------------------
  |  |   28|    714|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  249|    714|                (void)memory_block.IsAddressValid(address, arg_size);
  250|    714|                break;
  251|    715|            }
  252|       |
  253|       |            // IsAddressAlignedCorrectly
  254|    262|            case 17: {
  ------------------
  |  Branch (254:13): [True: 262, False: 159k]
  ------------------
  255|    262|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    262|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    262|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 261]
  |  |  ------------------
  |  |   17|    262|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    262|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  256|    261|                GET_T(phi::size_t, arg_size);
  ------------------
  |  |   15|    261|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    261|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 260]
  |  |  ------------------
  |  |   17|    261|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    261|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  257|       |
  258|    260|                FUZZ_LOG("IsAddressAlignedCorrectly({:s}, {:s})", print_int(address),
  ------------------
  |  |   28|    260|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  259|    260|                         print_int(arg_size));
  260|    260|                (void)dlx::MemoryBlock::IsAddressAlignedCorrectly(address, arg_size);
  261|    260|                break;
  262|    261|            }
  263|       |
  264|       |            // GetStartingAddress
  265|    194|            case 18: {
  ------------------
  |  Branch (265:13): [True: 194, False: 159k]
  ------------------
  266|    194|                FUZZ_LOG("GetStartingAddress()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  267|    194|                (void)memory_block.GetStartingAddress();
  268|    194|                break;
  269|    261|            }
  270|       |
  271|       |            // SetStartingAddress
  272|    657|            case 19: {
  ------------------
  |  Branch (272:13): [True: 657, False: 158k]
  ------------------
  273|    657|                GET_T(phi::size_t, address);
  ------------------
  |  |   15|    657|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|    657|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 1, False: 656]
  |  |  ------------------
  |  |   17|    657|    {                                                                                              \
  |  |   18|      1|        return 0;                                                                                  \
  |  |   19|      1|    }                                                                                              \
  |  |   20|    657|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  274|       |
  275|    656|                FUZZ_LOG("SetStartingAddress({:s})", print_int(address));
  ------------------
  |  |   28|    656|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  276|    656|                memory_block.SetStartingAddress(address);
  277|    656|                break;
  278|    657|            }
  279|       |
  280|       |            // GetSize
  281|    194|            case 20: {
  ------------------
  |  Branch (281:13): [True: 194, False: 159k]
  ------------------
  282|    194|                FUZZ_LOG("GetSize()");
  ------------------
  |  |   28|    194|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  283|    194|                (void)memory_block.GetSize();
  284|    194|                break;
  285|    657|            }
  286|       |
  287|       |            // Resize
  288|  86.9k|            case 21: {
  ------------------
  |  Branch (288:13): [True: 86.9k, False: 72.5k]
  ------------------
  289|  86.9k|                GET_T(phi::size_t, new_size);
  ------------------
  |  |   15|  86.9k|    auto PHI_GLUE(name, _opt) = consume_t<type>(data, size, index);                                \
  |  |   16|  86.9k|    if (!PHI_GLUE(name, _opt))                                                                     \
  |  |  ------------------
  |  |  |  Branch (16:9): [True: 143, False: 86.7k]
  |  |  ------------------
  |  |   17|  86.9k|    {                                                                                              \
  |  |   18|    143|        return 0;                                                                                  \
  |  |   19|    143|    }                                                                                              \
  |  |   20|  86.9k|    const type name = PHI_GLUE(name, _opt).value()
  ------------------
  290|       |
  291|       |                // Reject too big resizes
  292|  86.7k|                if (new_size > max_size)
  ------------------
  |  Branch (292:21): [True: 39, False: 86.7k]
  ------------------
  293|     39|                {
  294|     39|                    return 0;
  295|     39|                }
  296|       |
  297|  86.7k|                FUZZ_LOG("Resize({:s})", print_int(new_size));
  ------------------
  |  |   28|  86.7k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  298|  86.7k|                memory_block.Resize(new_size);
  299|  86.7k|                break;
  300|  86.7k|            }
  301|       |
  302|       |            // GetRawMemory
  303|    195|            case 22: {
  ------------------
  |  Branch (303:13): [True: 195, False: 159k]
  ------------------
  304|    195|                FUZZ_LOG("GetRawMemory()");
  ------------------
  |  |   28|    195|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  305|    195|                (void)memory_block.GetRawMemory();
  306|    195|                break;
  307|  86.7k|            }
  308|       |
  309|       |            // GetRawMemory const
  310|    195|            case 23: {
  ------------------
  |  Branch (310:13): [True: 195, False: 159k]
  ------------------
  311|    195|                const dlx::MemoryBlock& const_memory_block = memory_block;
  312|    195|                FUZZ_LOG("const GetRawMemory()");
  ------------------
  |  |   28|    195|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  313|    195|                (void)const_memory_block.GetRawMemory();
  314|    195|                break;
  315|  86.7k|            }
  316|       |
  317|       |            // Clear
  318|  1.11k|            case 24: {
  ------------------
  |  Branch (318:13): [True: 1.11k, False: 158k]
  ------------------
  319|  1.11k|                FUZZ_LOG("Clear()");
  ------------------
  |  |   28|  1.11k|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  320|  1.11k|                memory_block.Clear();
  321|  1.11k|            }
  322|   159k|        }
  323|   159k|    }
  324|       |
  325|    513|    FUZZ_LOG("Finished execution");
  ------------------
  |  |   28|    513|#    define FUZZ_LOG(...) PHI_EMPTY_MACRO()
  ------------------
  326|       |
  327|    513|    return 0;
  328|  2.15k|}
_Z9consume_tIjEN3phi8optionalIT_EEPKhmRm:
   48|   164k|{
   49|   164k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1.32k, False: 163k]
  ------------------
   50|  1.32k|    {
   51|  1.32k|        return {};
   52|  1.32k|    }
   53|       |
   54|   163k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   163k|    const phi::size_t old_index = index;
   57|   163k|    index += aligned_size<T>();
   58|       |
   59|   163k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   163k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   163k|        return static_cast<bool>(value);
   63|   163k|    }
   64|   163k|    else
   65|   163k|    {
   66|   163k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   163k|    }
   68|   163k|}
_Z10has_x_moremmm:
   33|   327k|{
   34|   327k|    return index + x < size;
   35|   327k|}
_Z12aligned_sizeIjEmv:
   41|   163k|{
   42|   163k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   163k|}
_Z9consume_tImEN3phi8optionalIT_EEPKhmRm:
   48|   147k|{
   49|   147k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 274, False: 147k]
  ------------------
   50|    274|    {
   51|    274|        return {};
   52|    274|    }
   53|       |
   54|   147k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|   147k|    const phi::size_t old_index = index;
   57|   147k|    index += aligned_size<T>();
   58|       |
   59|   147k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|   147k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|   147k|        return static_cast<bool>(value);
   63|   147k|    }
   64|   147k|    else
   65|   147k|    {
   66|   147k|        return *reinterpret_cast<const T*>(data + old_index);
   67|   147k|    }
   68|   147k|}
_Z12aligned_sizeImEmv:
   41|   147k|{
   42|   147k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|   147k|}
_Z9consume_tIaEN3phi8optionalIT_EEPKhmRm:
   48|  3.56k|{
   49|  3.56k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 3.56k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  3.56k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  3.56k|    const phi::size_t old_index = index;
   57|  3.56k|    index += aligned_size<T>();
   58|       |
   59|  3.56k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  3.56k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  3.56k|        return static_cast<bool>(value);
   63|  3.56k|    }
   64|  3.56k|    else
   65|  3.56k|    {
   66|  3.56k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  3.56k|    }
   68|  3.56k|}
_Z12aligned_sizeIaEmv:
   41|  3.56k|{
   42|  3.56k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  3.56k|}
_Z9consume_tIhEN3phi8optionalIT_EEPKhmRm:
   48|  1.61k|{
   49|  1.61k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.61k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.61k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.61k|    const phi::size_t old_index = index;
   57|  1.61k|    index += aligned_size<T>();
   58|       |
   59|  1.61k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.61k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.61k|        return static_cast<bool>(value);
   63|  1.61k|    }
   64|  1.61k|    else
   65|  1.61k|    {
   66|  1.61k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.61k|    }
   68|  1.61k|}
_Z12aligned_sizeIhEmv:
   41|  1.61k|{
   42|  1.61k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.61k|}
_Z9consume_tIsEN3phi8optionalIT_EEPKhmRm:
   48|    842|{
   49|    842|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 841]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    841|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    841|    const phi::size_t old_index = index;
   57|    841|    index += aligned_size<T>();
   58|       |
   59|    841|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    841|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    841|        return static_cast<bool>(value);
   63|    841|    }
   64|    841|    else
   65|    841|    {
   66|    841|        return *reinterpret_cast<const T*>(data + old_index);
   67|    841|    }
   68|    841|}
_Z12aligned_sizeIsEmv:
   41|    841|{
   42|    841|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    841|}
_Z9consume_tItEN3phi8optionalIT_EEPKhmRm:
   48|    587|{
   49|    587|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 586]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|    586|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|    586|    const phi::size_t old_index = index;
   57|    586|    index += aligned_size<T>();
   58|       |
   59|    586|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|    586|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|    586|        return static_cast<bool>(value);
   63|    586|    }
   64|    586|    else
   65|    586|    {
   66|    586|        return *reinterpret_cast<const T*>(data + old_index);
   67|    586|    }
   68|    586|}
_Z12aligned_sizeItEmv:
   41|    586|{
   42|    586|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|    586|}
_Z9consume_tIiEN3phi8optionalIT_EEPKhmRm:
   48|  1.61k|{
   49|  1.61k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.61k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.61k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.61k|    const phi::size_t old_index = index;
   57|  1.61k|    index += aligned_size<T>();
   58|       |
   59|  1.61k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.61k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.61k|        return static_cast<bool>(value);
   63|  1.61k|    }
   64|  1.61k|    else
   65|  1.61k|    {
   66|  1.61k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.61k|    }
   68|  1.61k|}
_Z12aligned_sizeIiEmv:
   41|  1.61k|{
   42|  1.61k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.61k|}
_Z9consume_tIfEN3phi8optionalIT_EEPKhmRm:
   48|  1.35k|{
   49|  1.35k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 1.35k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  1.35k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  1.35k|    const phi::size_t old_index = index;
   57|  1.35k|    index += aligned_size<T>();
   58|       |
   59|  1.35k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  1.35k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  1.35k|        return static_cast<bool>(value);
   63|  1.35k|    }
   64|  1.35k|    else
   65|  1.35k|    {
   66|  1.35k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  1.35k|    }
   68|  1.35k|}
_Z12aligned_sizeIfEmv:
   41|  1.35k|{
   42|  1.35k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  1.35k|}
_Z9consume_tIdEN3phi8optionalIT_EEPKhmRm:
   48|  6.10k|{
   49|  6.10k|    if (!has_x_more(index, sizeof(T), size))
  ------------------
  |  Branch (49:9): [True: 1, False: 6.10k]
  ------------------
   50|      1|    {
   51|      1|        return {};
   52|      1|    }
   53|       |
   54|  6.10k|    PHI_ASSUME(index % sizeof(void*) == 0);
   55|       |
   56|  6.10k|    const phi::size_t old_index = index;
   57|  6.10k|    index += aligned_size<T>();
   58|       |
   59|  6.10k|    if constexpr (phi::is_bool_v<T>)
  ------------------
  |  Branch (59:19): [Folded - Ignored]
  ------------------
   60|      0|    {
   61|  6.10k|        phi::int8_t value = *reinterpret_cast<const phi::int8_t*>(data + old_index);
   62|  6.10k|        return static_cast<bool>(value);
   63|  6.10k|    }
   64|  6.10k|    else
   65|  6.10k|    {
   66|  6.10k|        return *reinterpret_cast<const T*>(data + old_index);
   67|  6.10k|    }
   68|  6.10k|}
_Z12aligned_sizeIdEmv:
   41|  6.10k|{
   42|  6.10k|    return sizeof(T) + (sizeof(void*) - sizeof(T));
   43|  6.10k|}

